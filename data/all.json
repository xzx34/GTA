[
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 99 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 11, 6, 3, 15, 12, 5, 8, 2, 10, 7, 13, 14\nVertex 2: 13, 14, 5, 3, 4, 1, 8, 9, 10, 7, 12, 6, 11, 15\nVertex 3: 1, 14, 15, 6, 2, 9, 7, 11, 5, 8, 12, 13, 10\nVertex 4: 1, 12, 2, 11, 14, 5, 10, 7, 15, 8, 6, 13\nVertex 5: 6, 9, 2, 1, 13, 14, 10, 3, 12, 4, 7, 15, 8, 11\nVertex 6: 1, 13, 5, 7, 3, 9, 8, 10, 11, 15, 2, 14, 4, 12\nVertex 7: 6, 15, 3, 13, 9, 5, 10, 14, 4, 8, 2, 1, 12, 11\nVertex 8: 13, 1, 6, 3, 9, 12, 2, 7, 5, 15, 4, 10\nVertex 9: 5, 15, 14, 12, 6, 3, 11, 7, 8, 13, 2\nVertex 10: 13, 14, 5, 15, 12, 1, 4, 6, 7, 2, 11, 8, 3\nVertex 11: 1, 4, 15, 9, 14, 3, 13, 12, 6, 10, 5, 7, 2\nVertex 12: 4, 15, 1, 9, 13, 10, 5, 11, 8, 14, 3, 7, 2, 6\nVertex 13: 6, 8, 2, 10, 5, 7, 11, 12, 9, 15, 1, 14, 4, 3\nVertex 14: 3, 10, 2, 9, 5, 11, 15, 4, 7, 12, 13, 6, 1\nVertex 15: 1, 9, 3, 7, 12, 11, 14, 10, 5, 6, 13, 8, 4, 2\n",
    "graph_output": "15 99\n1 4\n1 11\n1 6\n4 12\n6 13\n6 5\n6 7\n13 8\n13 2\n13 10\n1 3\n5 9\n1 15\n3 14\n15 9\n10 14\n3 15\n15 7\n2 14\n12 15\n14 9\n3 6\n12 1\n9 12\n2 5\n2 3\n5 1\n4 2\n11 4\n5 13\n6 9\n15 11\n5 14\n1 8\n3 9\n7 3\n11 9\n14 11\n11 3\n5 10\n14 15\n10 15\n7 13\n9 7\n13 11\n12 13\n1 2\n10 12\n5 3\n6 8\n10 1\n12 5\n3 8\n9 8\n14 4\n12 11\n8 12\n4 5\n4 10\n5 7\n6 10\n9 13\n2 8\n6 11\n15 5\n9 2\n10 7\n6 15\n7 14\n10 2\n14 12\n3 12\n7 4\n7 8\n5 8\n7 2\n7 1\n15 13\n8 15\n7 12\n4 15\n1 13\n10 11\n5 11\n13 14\n12 2\n2 6\n4 8\n10 8\n6 14\n11 7\n6 4\n1 14\n11 2\n15 2\n13 4\n3 13\n10 3\n6 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 102 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 12, 15, 16, 5, 7, 14, 13, 2, 9, 17, 4, 10\nVertex 2: 10, 9, 15, 14, 8, 7, 4, 3, 13, 1, 5, 16, 12, 17, 6\nVertex 3: 6, 13, 5, 16, 4, 7, 15, 10, 9, 2, 8, 17\nVertex 4: 6, 3, 13, 5, 8, 2, 7, 11, 14, 1, 10, 15, 12\nVertex 5: 3, 9, 13, 4, 1, 11, 17, 2, 14, 15\nVertex 6: 1, 16, 7, 3, 15, 4, 8, 10, 9, 12, 11, 2, 14\nVertex 7: 6, 11, 8, 14, 1, 15, 3, 2, 13, 4, 10\nVertex 8: 6, 14, 17, 7, 2, 4, 3, 9, 15, 12, 16, 10, 11\nVertex 9: 5, 2, 16, 13, 11, 6, 3, 14, 10, 8, 1, 12\nVertex 10: 13, 2, 3, 6, 16, 9, 12, 7, 4, 8, 15, 1\nVertex 11: 7, 16, 13, 9, 4, 5, 15, 6, 17, 8\nVertex 12: 1, 15, 10, 16, 2, 6, 14, 8, 9, 17, 4\nVertex 13: 3, 10, 17, 15, 5, 9, 11, 4, 7, 1, 2\nVertex 14: 8, 2, 7, 1, 4, 9, 5, 17, 12, 6, 15\nVertex 15: 6, 13, 1, 2, 16, 12, 7, 3, 17, 11, 8, 14, 4, 5, 10\nVertex 16: 6, 9, 3, 11, 1, 15, 10, 2, 12, 17, 8\nVertex 17: 13, 8, 15, 5, 3, 1, 14, 11, 2, 16, 12\n",
    "graph_output": "17 102\n1 6\n6 16\n1 12\n6 7\n6 3\n3 13\n6 15\n6 4\n3 5\n7 11\n6 8\n8 14\n13 10\n5 9\n13 17\n10 2\n2 9\n15 13\n15 1\n8 17\n2 15\n16 9\n5 13\n13 9\n14 2\n3 16\n11 16\n13 11\n8 7\n3 4\n8 2\n16 1\n13 4\n16 15\n4 5\n5 1\n14 7\n15 12\n11 9\n7 1\n15 7\n3 7\n3 15\n8 4\n3 10\n17 15\n1 14\n2 7\n2 4\n10 6\n7 13\n9 6\n10 16\n3 9\n2 3\n7 4\n4 11\n14 4\n1 13\n5 11\n2 13\n15 11\n8 3\n5 17\n14 9\n1 2\n10 9\n8 9\n5 2\n16 2\n15 8\n10 12\n14 5\n1 9\n17 3\n1 17\n17 14\n16 12\n7 10\n12 2\n12 6\n6 11\n11 17\n17 2\n2 6\n12 14\n17 16\n4 1\n4 10\n8 12\n14 6\n15 14\n8 16\n10 8\n15 4\n12 9\n5 15\n12 17\n10 15\n12 4\n8 11\n1 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 15 vertices and 87 edges\n\nEdges (Format: Node Node):\n1 15\n1 9\n15 8\n15 13\n13 12\n15 14\n8 10\n14 6\n1 2\n10 7\n10 4\n8 3\n4 5\n10 11\n1 13\n4 6\n15 10\n9 3\n7 14\n10 6\n15 7\n6 15\n14 9\n5 2\n11 8\n7 9\n14 2\n15 3\n1 11\n5 6\n2 10\n9 6\n13 5\n1 3\n8 7\n5 11\n11 3\n1 8\n9 8\n10 9\n15 2\n5 7\n11 15\n14 10\n11 14\n1 5\n5 8\n13 11\n11 7\n6 7\n1 4\n5 12\n2 13\n14 4\n9 4\n12 8\n3 4\n8 4\n3 7\n13 14\n9 15\n9 12\n4 15\n7 1\n6 8\n13 3\n3 12\n14 1\n6 13\n8 2\n6 11\n13 8\n4 13\n2 9\n10 1\n5 10\n3 10\n4 7\n15 12\n13 7\n13 10\n14 12\n4 11\n8 14\n4 12\n12 10\n2 3\n",
    "graph_output": "15 87\n1 15\n1 9\n15 8\n15 13\n13 12\n15 14\n8 10\n14 6\n1 2\n10 7\n10 4\n8 3\n4 5\n10 11\n1 13\n4 6\n15 10\n9 3\n7 14\n10 6\n15 7\n6 15\n14 9\n5 2\n11 8\n7 9\n14 2\n15 3\n1 11\n5 6\n2 10\n9 6\n13 5\n1 3\n8 7\n5 11\n11 3\n1 8\n9 8\n10 9\n15 2\n5 7\n11 15\n14 10\n11 14\n1 5\n5 8\n13 11\n11 7\n6 7\n1 4\n5 12\n2 13\n14 4\n9 4\n12 8\n3 4\n8 4\n3 7\n13 14\n9 15\n9 12\n4 15\n7 1\n6 8\n13 3\n3 12\n14 1\n6 13\n8 2\n6 11\n13 8\n4 13\n2 9\n10 1\n5 10\n3 10\n4 7\n15 12\n13 7\n13 10\n14 12\n4 11\n8 14\n4 12\n12 10\n2 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 15 vertices and 14 edges\n\nEdges (Format: Node Node):\n8 9\n14 11\n6 3\n2 3\n2 6\n4 10\n11 4\n8 10\n1 10\n15 10\n15 12\n3 8\n13 12\n11 7\n",
    "graph_output": "15 14\n8 9\n14 11\n6 3\n2 3\n2 6\n4 10\n11 4\n8 10\n1 10\n15 10\n15 12\n3 8\n13 12\n11 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 18 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 13 and vertex 7.\n",
    "graph_output": "15 18\n1 6\n1 2\n2 7\n2 15\n15 13\n13 10\n1 5\n7 12\n6 11\n13 9\n9 8\n8 3\n13 14\n5 4\n1 10\n14 3\n2 4\n13 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 108 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 4 and vertex 11.\n",
    "graph_output": "16 108\n1 16\n16 5\n5 8\n1 12\n8 14\n12 7\n1 6\n1 13\n14 11\n6 2\n16 15\n15 9\n14 4\n12 10\n8 3\n10 1\n9 1\n13 12\n16 10\n10 3\n10 4\n7 5\n7 16\n2 12\n16 13\n6 13\n2 1\n3 1\n9 4\n7 15\n11 6\n2 8\n4 5\n9 16\n2 15\n11 12\n2 3\n8 12\n2 4\n5 6\n16 4\n7 6\n1 11\n8 6\n2 11\n3 4\n1 8\n9 13\n8 9\n9 5\n13 15\n5 15\n8 7\n16 11\n14 10\n6 10\n13 10\n14 6\n11 10\n8 11\n15 10\n8 10\n15 6\n4 8\n2 14\n16 2\n15 3\n12 15\n4 6\n15 11\n16 6\n16 8\n1 5\n7 10\n2 5\n12 6\n14 13\n5 10\n5 13\n11 3\n15 14\n3 12\n5 11\n2 9\n10 9\n11 9\n15 8\n5 12\n14 16\n15 4\n9 14\n5 14\n10 2\n4 13\n3 5\n3 16\n12 4\n9 7\n15 1\n11 7\n12 9\n13 7\n1 14\n1 4\n12 14\n2 13\n14 3\n4 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 15 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 11, 8\nVertex 2: 5, 3, 6\nVertex 3: 1, 2, 5, 11, 4\nVertex 4: 8, 11, 3, 9\nVertex 5: 2, 3, 11\nVertex 6: 2\nVertex 7: 10\nVertex 8: 4, 1\nVertex 9: 10, 4\nVertex 10: 7, 9\nVertex 11: 4, 1, 3, 5\n",
    "graph_output": "11 15\n2 5\n4 8\n10 7\n3 1\n4 11\n1 11\n1 8\n10 9\n2 3\n3 5\n2 6\n11 3\n3 4\n11 5\n4 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 3 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 37 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 2 (capacity=10), 9 (capacity=4), 10 (capacity=10), 5 (capacity=2), 6 (capacity=10), 8 (capacity=1), 11 (capacity=9), 4 (capacity=3)\nVertex 2: 1 (capacity=10), 7 (capacity=10), 8 (capacity=9), 3 (capacity=3), 5 (capacity=10), 11 (capacity=4), 10 (capacity=7), 6 (capacity=2)\nVertex 3: 2 (capacity=3), 5 (capacity=4), 8 (capacity=2), 11 (capacity=9), 7 (capacity=3), 6 (capacity=7), 4 (capacity=8)\nVertex 4: 11 (capacity=6), 5 (capacity=5), 6 (capacity=2), 10 (capacity=9), 1 (capacity=3), 7 (capacity=4), 3 (capacity=8)\nVertex 5: 4 (capacity=5), 10 (capacity=7), 1 (capacity=2), 9 (capacity=9), 3 (capacity=4), 2 (capacity=10), 6 (capacity=2), 11 (capacity=7)\nVertex 6: 9 (capacity=2), 4 (capacity=2), 1 (capacity=10), 11 (capacity=3), 3 (capacity=7), 5 (capacity=2), 8 (capacity=10), 2 (capacity=2)\nVertex 7: 2 (capacity=10), 11 (capacity=9), 4 (capacity=4), 3 (capacity=3), 8 (capacity=7)\nVertex 8: 2 (capacity=9), 3 (capacity=2), 11 (capacity=3), 1 (capacity=1), 7 (capacity=7), 6 (capacity=10)\nVertex 9: 1 (capacity=4), 11 (capacity=4), 6 (capacity=2), 5 (capacity=9)\nVertex 10: 1 (capacity=10), 5 (capacity=7), 4 (capacity=9), 2 (capacity=7)\nVertex 11: 9 (capacity=4), 4 (capacity=6), 7 (capacity=9), 6 (capacity=3), 8 (capacity=3), 3 (capacity=9), 1 (capacity=9), 2 (capacity=4), 5 (capacity=7)\n",
    "graph_output": "11 37\n1 2 10\n2 7 10\n1 9 4\n2 8 9\n9 11 4\n2 3 3\n11 4 6\n1 10 10\n4 5 5\n9 6 2\n7 11 9\n5 10 7\n1 5 2\n4 6 2\n5 9 9\n3 5 4\n6 1 10\n4 10 9\n11 6 3\n8 3 2\n2 5 10\n8 11 3\n1 8 1\n11 3 9\n11 1 9\n1 4 3\n7 4 4\n7 3 3\n6 3 7\n2 11 4\n2 10 7\n5 6 2\n4 3 8\n7 8 7\n8 6 10\n5 11 7\n6 2 2\n",
    "vertices": [
      3,
      10
    ],
    "answer": 33,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 6 (source) to vertex 5 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 55 edges\n\nEdges (Format: Node Node Capacity):\n1 3 10\n3 9 8\n9 2 1\n2 7 6\n2 10 6\n7 11 1\n2 5 7\n3 4 4\n3 6 8\n11 8 10\n11 4 3\n10 4 2\n9 10 4\n9 1 4\n6 11 2\n1 4 2\n8 4 6\n7 9 10\n10 7 9\n9 11 9\n9 8 4\n7 4 3\n6 2 1\n9 4 5\n7 5 4\n11 10 10\n1 11 3\n2 1 2\n10 1 2\n3 5 9\n4 5 9\n6 4 1\n3 7 10\n5 10 10\n4 2 10\n1 8 2\n3 2 8\n5 6 2\n5 11 4\n6 10 1\n2 8 9\n5 9 8\n6 7 1\n6 9 7\n8 7 3\n3 8 2\n8 10 2\n1 6 10\n5 8 6\n10 3 8\n5 1 8\n3 11 3\n6 8 7\n7 1 6\n11 2 5\n",
    "graph_output": "11 55\n1 3 10\n3 9 8\n9 2 1\n2 7 6\n2 10 6\n7 11 1\n2 5 7\n3 4 4\n3 6 8\n11 8 10\n11 4 3\n10 4 2\n9 10 4\n9 1 4\n6 11 2\n1 4 2\n8 4 6\n7 9 10\n10 7 9\n9 11 9\n9 8 4\n7 4 3\n6 2 1\n9 4 5\n7 5 4\n11 10 10\n1 11 3\n2 1 2\n10 1 2\n3 5 9\n4 5 9\n6 4 1\n3 7 10\n5 10 10\n4 2 10\n1 8 2\n3 2 8\n5 6 2\n5 11 4\n6 10 1\n2 8 9\n5 9 8\n6 7 1\n6 9 7\n8 7 3\n3 8 2\n8 10 2\n1 6 10\n5 8 6\n10 3 8\n5 1 8\n3 11 3\n6 8 7\n7 1 6\n11 2 5\n",
    "vertices": [
      6,
      5
    ],
    "answer": 40,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 13 vertices and 54 edges\n\nEdges (Format: Node Node Capacity):\n1 13 3\n1 11 10\n1 10 9\n11 12 3\n1 6 8\n12 7 8\n12 2 1\n10 9 9\n2 3 5\n10 4 4\n2 8 2\n3 5 9\n4 8 3\n12 1 4\n1 4 6\n4 2 6\n5 13 4\n4 6 4\n1 9 7\n13 10 4\n3 7 8\n7 2 3\n5 11 9\n5 4 8\n9 3 6\n7 13 8\n10 6 1\n10 12 8\n9 7 6\n3 11 8\n1 5 9\n4 11 9\n11 13 2\n5 10 4\n4 9 6\n8 7 7\n3 12 7\n5 7 5\n8 10 9\n8 13 6\n1 7 5\n7 4 5\n5 2 9\n8 3 8\n12 8 4\n6 8 3\n10 7 7\n12 9 9\n13 6 3\n11 8 5\n6 3 8\n12 13 9\n7 6 1\n6 9 1\n",
    "graph_output": "13 54\n1 13 3\n1 11 10\n1 10 9\n11 12 3\n1 6 8\n12 7 8\n12 2 1\n10 9 9\n2 3 5\n10 4 4\n2 8 2\n3 5 9\n4 8 3\n12 1 4\n1 4 6\n4 2 6\n5 13 4\n4 6 4\n1 9 7\n13 10 4\n3 7 8\n7 2 3\n5 11 9\n5 4 8\n9 3 6\n7 13 8\n10 6 1\n10 12 8\n9 7 6\n3 11 8\n1 5 9\n4 11 9\n11 13 2\n5 10 4\n4 9 6\n8 7 7\n3 12 7\n5 7 5\n8 10 9\n8 13 6\n1 7 5\n7 4 5\n5 2 9\n8 3 8\n12 8 4\n6 8 3\n10 7 7\n12 9 9\n13 6 3\n11 8 5\n6 3 8\n12 13 9\n7 6 1\n6 9 1\n",
    "vertices": [
      3,
      2
    ],
    "answer": 26,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 5 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 86 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 11 with a weight of 85.\nThere is an edge between vertex 11 and vertex 7 with a weight of 13.\nThere is an edge between vertex 11 and vertex 14 with a weight of 37.\nThere is an edge between vertex 14 and vertex 4 with a weight of 13.\nThere is an edge between vertex 1 and vertex 12 with a weight of 19.\nThere is an edge between vertex 12 and vertex 6 with a weight of 98.\nThere is an edge between vertex 1 and vertex 3 with a weight of 73.\nThere is an edge between vertex 14 and vertex 10 with a weight of 74.\nThere is an edge between vertex 7 and vertex 9 with a weight of 89.\nThere is an edge between vertex 6 and vertex 13 with a weight of 80.\nThere is an edge between vertex 7 and vertex 5 with a weight of 7.\nThere is an edge between vertex 1 and vertex 8 with a weight of 33.\nThere is an edge between vertex 8 and vertex 2 with a weight of 35.\nThere is an edge between vertex 1 and vertex 9 with a weight of 70.\nThere is an edge between vertex 10 and vertex 11 with a weight of 28.\nThere is an edge between vertex 2 and vertex 12 with a weight of 85.\nThere is an edge between vertex 8 and vertex 3 with a weight of 30.\nThere is an edge between vertex 11 and vertex 12 with a weight of 38.\nThere is an edge between vertex 2 and vertex 3 with a weight of 87.\nThere is an edge between vertex 2 and vertex 11 with a weight of 98.\nThere is an edge between vertex 3 and vertex 13 with a weight of 19.\nThere is an edge between vertex 11 and vertex 5 with a weight of 3.\nThere is an edge between vertex 2 and vertex 5 with a weight of 71.\nThere is an edge between vertex 2 and vertex 4 with a weight of 81.\nThere is an edge between vertex 6 and vertex 1 with a weight of 25.\nThere is an edge between vertex 7 and vertex 14 with a weight of 97.\nThere is an edge between vertex 2 and vertex 9 with a weight of 83.\nThere is an edge between vertex 3 and vertex 14 with a weight of 98.\nThere is an edge between vertex 5 and vertex 12 with a weight of 27.\nThere is an edge between vertex 8 and vertex 6 with a weight of 24.\nThere is an edge between vertex 5 and vertex 10 with a weight of 71.\nThere is an edge between vertex 5 and vertex 6 with a weight of 94.\nThere is an edge between vertex 8 and vertex 10 with a weight of 57.\nThere is an edge between vertex 14 and vertex 5 with a weight of 73.\nThere is an edge between vertex 10 and vertex 4 with a weight of 26.\nThere is an edge between vertex 8 and vertex 11 with a weight of 39.\nThere is an edge between vertex 7 and vertex 13 with a weight of 85.\nThere is an edge between vertex 7 and vertex 8 with a weight of 9.\nThere is an edge between vertex 9 and vertex 14 with a weight of 1.\nThere is an edge between vertex 12 and vertex 14 with a weight of 80.\nThere is an edge between vertex 12 and vertex 4 with a weight of 44.\nThere is an edge between vertex 13 and vertex 12 with a weight of 50.\nThere is an edge between vertex 1 and vertex 4 with a weight of 72.\nThere is an edge between vertex 9 and vertex 12 with a weight of 41.\nThere is an edge between vertex 13 and vertex 2 with a weight of 12.\nThere is an edge between vertex 13 and vertex 10 with a weight of 12.\nThere is an edge between vertex 7 and vertex 4 with a weight of 38.\nThere is an edge between vertex 12 and vertex 7 with a weight of 12.\nThere is an edge between vertex 9 and vertex 13 with a weight of 45.\nThere is an edge between vertex 4 and vertex 6 with a weight of 4.\nThere is an edge between vertex 13 and vertex 8 with a weight of 35.\nThere is an edge between vertex 1 and vertex 13 with a weight of 70.\nThere is an edge between vertex 10 and vertex 6 with a weight of 66.\nThere is an edge between vertex 2 and vertex 6 with a weight of 16.\nThere is an edge between vertex 10 and vertex 7 with a weight of 4.\nThere is an edge between vertex 5 and vertex 8 with a weight of 94.\nThere is an edge between vertex 5 and vertex 9 with a weight of 17.\nThere is an edge between vertex 6 and vertex 3 with a weight of 25.\nThere is an edge between vertex 9 and vertex 6 with a weight of 63.\nThere is an edge between vertex 9 and vertex 3 with a weight of 44.\nThere is an edge between vertex 3 and vertex 11 with a weight of 33.\nThere is an edge between vertex 14 and vertex 2 with a weight of 32.\nThere is an edge between vertex 9 and vertex 4 with a weight of 25.\nThere is an edge between vertex 11 and vertex 13 with a weight of 10.\nThere is an edge between vertex 5 and vertex 3 with a weight of 3.\nThere is an edge between vertex 3 and vertex 4 with a weight of 45.\nThere is an edge between vertex 3 and vertex 7 with a weight of 60.\nThere is an edge between vertex 12 and vertex 8 with a weight of 84.\nThere is an edge between vertex 2 and vertex 10 with a weight of 60.\nThere is an edge between vertex 8 and vertex 9 with a weight of 7.\nThere is an edge between vertex 1 and vertex 14 with a weight of 90.\nThere is an edge between vertex 5 and vertex 13 with a weight of 28.\nThere is an edge between vertex 11 and vertex 9 with a weight of 28.\nThere is an edge between vertex 7 and vertex 2 with a weight of 71.\nThere is an edge between vertex 1 and vertex 10 with a weight of 91.\nThere is an edge between vertex 6 and vertex 7 with a weight of 31.\nThere is an edge between vertex 2 and vertex 1 with a weight of 21.\nThere is an edge between vertex 14 and vertex 6 with a weight of 2.\nThere is an edge between vertex 10 and vertex 9 with a weight of 86.\nThere is an edge between vertex 6 and vertex 11 with a weight of 25.\nThere is an edge between vertex 14 and vertex 13 with a weight of 92.\nThere is an edge between vertex 4 and vertex 5 with a weight of 83.\nThere is an edge between vertex 7 and vertex 1 with a weight of 7.\nThere is an edge between vertex 5 and vertex 1 with a weight of 96.\nThere is an edge between vertex 4 and vertex 13 with a weight of 73.\nThere is an edge between vertex 4 and vertex 8 with a weight of 18.\n",
    "graph_output": "14 86\n1 11 85\n11 7 13\n11 14 37\n14 4 13\n1 12 19\n12 6 98\n1 3 73\n14 10 74\n7 9 89\n6 13 80\n7 5 7\n1 8 33\n8 2 35\n1 9 70\n10 11 28\n2 12 85\n8 3 30\n11 12 38\n2 3 87\n2 11 98\n3 13 19\n11 5 3\n2 5 71\n2 4 81\n6 1 25\n7 14 97\n2 9 83\n3 14 98\n5 12 27\n8 6 24\n5 10 71\n5 6 94\n8 10 57\n14 5 73\n10 4 26\n8 11 39\n7 13 85\n7 8 9\n9 14 1\n12 14 80\n12 4 44\n13 12 50\n1 4 72\n9 12 41\n13 2 12\n13 10 12\n7 4 38\n12 7 12\n9 13 45\n4 6 4\n13 8 35\n1 13 70\n10 6 66\n2 6 16\n10 7 4\n5 8 94\n5 9 17\n6 3 25\n9 6 63\n9 3 44\n3 11 33\n14 2 32\n9 4 25\n11 13 10\n5 3 3\n3 4 45\n3 7 60\n12 8 84\n2 10 60\n8 9 7\n1 14 90\n5 13 28\n11 9 28\n7 2 71\n1 10 91\n6 7 31\n2 1 21\n14 6 2\n10 9 86\n6 11 25\n14 13 92\n4 5 83\n7 1 7\n5 1 96\n4 13 73\n4 8 18\n",
    "vertices": [
      8,
      5
    ],
    "answer": 16,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 43 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 7 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 10 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 8 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 8 and vertex 11 with a capacity of 1.\nThere is an edge between vertex 8 and vertex 2 with a capacity of 7.\nThere is an edge between vertex 2 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 2 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 6 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 1 and vertex 11 with a capacity of 4.\nThere is an edge between vertex 6 and vertex 7 with a capacity of 1.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 1.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 6 and vertex 11 with a capacity of 7.\nThere is an edge between vertex 5 and vertex 3 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 8 with a capacity of 7.\nThere is an edge between vertex 9 and vertex 4 with a capacity of 10.\nThere is an edge between vertex 10 and vertex 11 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 2 with a capacity of 3.\nThere is an edge between vertex 5 and vertex 11 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 11 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 4 with a capacity of 4.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 8.\nThere is an edge between vertex 2 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 11 and vertex 7 with a capacity of 10.\nThere is an edge between vertex 10 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 2 and vertex 1 with a capacity of 1.\nThere is an edge between vertex 8 and vertex 5 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 3 with a capacity of 1.\nThere is an edge between vertex 7 and vertex 5 with a capacity of 8.\nThere is an edge between vertex 3 and vertex 4 with a capacity of 3.\nThere is an edge between vertex 3 and vertex 11 with a capacity of 6.\nThere is an edge between vertex 1 and vertex 8 with a capacity of 10.\nThere is an edge between vertex 2 and vertex 4 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 6.\nThere is an edge between vertex 1 and vertex 3 with a capacity of 3.\nThere is an edge between vertex 6 and vertex 1 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 4 with a capacity of 6.\n",
    "graph_output": "11 43\n1 7 4\n7 10 10\n10 6 9\n7 8 1\n8 3 8\n8 11 1\n8 2 7\n2 9 5\n2 5 2\n6 4 1\n1 11 4\n6 7 1\n9 7 1\n1 4 2\n6 11 7\n5 3 2\n2 7 5\n9 8 7\n9 4 10\n10 11 5\n10 2 3\n5 11 1\n6 8 2\n11 4 1\n6 3 9\n7 4 4\n3 7 8\n2 6 9\n11 7 10\n10 9 6\n2 1 1\n8 5 1\n6 9 5\n10 3 1\n7 5 8\n3 4 3\n3 11 6\n1 8 10\n2 4 10\n1 5 6\n1 3 3\n6 1 9\n5 4 6\n",
    "vertices": [
      3,
      6
    ],
    "answer": 40,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 4 and vertex 15 are connected.\n\nUndirected Graph with 16 vertices and 111 edges\n\nEdges (Format: Node Node):\n2 10\n13 16\n3 14\n5 13\n5 11\n15 8\n4 2\n13 1\n8 5\n12 5\n9 5\n14 2\n6 13\n6 2\n5 10\n14 11\n3 5\n2 1\n13 9\n2 7\n14 12\n3 6\n12 4\n10 3\n8 12\n4 1\n8 1\n11 1\n7 15\n16 2\n8 4\n7 3\n15 13\n11 16\n16 3\n15 9\n11 12\n5 1\n4 7\n2 11\n9 12\n6 16\n13 8\n2 13\n7 10\n10 14\n10 11\n9 16\n8 6\n4 16\n11 8\n6 10\n12 7\n4 10\n16 14\n7 1\n11 6\n10 8\n15 14\n5 15\n1 3\n6 4\n8 16\n4 15\n9 8\n7 8\n6 15\n7 9\n13 11\n9 3\n16 5\n14 13\n2 5\n10 15\n13 4\n11 9\n4 5\n12 1\n14 5\n3 13\n9 10\n16 1\n6 14\n10 13\n10 1\n6 1\n6 12\n2 15\n14 7\n2 9\n6 5\n14 9\n12 13\n3 11\n6 9\n15 16\n7 11\n12 2\n3 4\n9 4\n12 3\n6 7\n3 2\n7 5\n8 14\n8 2\n16 10\n15 3\n7 16\n14 4\n15 1\n",
    "graph_output": "16 111\n2 10\n13 16\n3 14\n5 13\n5 11\n15 8\n4 2\n13 1\n8 5\n12 5\n9 5\n14 2\n6 13\n6 2\n5 10\n14 11\n3 5\n2 1\n13 9\n2 7\n14 12\n3 6\n12 4\n10 3\n8 12\n4 1\n8 1\n11 1\n7 15\n16 2\n8 4\n7 3\n15 13\n11 16\n16 3\n15 9\n11 12\n5 1\n4 7\n2 11\n9 12\n6 16\n13 8\n2 13\n7 10\n10 14\n10 11\n9 16\n8 6\n4 16\n11 8\n6 10\n12 7\n4 10\n16 14\n7 1\n11 6\n10 8\n15 14\n5 15\n1 3\n6 4\n8 16\n4 15\n9 8\n7 8\n6 15\n7 9\n13 11\n9 3\n16 5\n14 13\n2 5\n10 15\n13 4\n11 9\n4 5\n12 1\n14 5\n3 13\n9 10\n16 1\n6 14\n10 13\n10 1\n6 1\n6 12\n2 15\n14 7\n2 9\n6 5\n14 9\n12 13\n3 11\n6 9\n15 16\n7 11\n12 2\n3 4\n9 4\n12 3\n6 7\n3 2\n7 5\n8 14\n8 2\n16 10\n15 3\n7 16\n14 4\n15 1\n",
    "vertices": [
      4,
      15
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 7 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 5.\n",
    "graph_output": "8 7\n1 8\n4 3\n8 4\n8 7\n4 2\n1 4\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 7 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (6\u00d76):\n\n      1   2   3   4   5   6\n   ------------------------\n 1 |  0   1   0   0   1   1 \n 2 |  1   0   0   0   0   1 \n 3 |  0   0   0   0   1   0 \n 4 |  0   0   0   0   1   0 \n 5 |  1   0   1   1   0   1 \n 6 |  1   1   0   0   1   0 \n",
    "graph_output": "6 7\n1 2\n1 5\n2 6\n5 4\n5 3\n5 6\n6 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 1 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 62 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5 with a capacity of 6.\nThere is an edge between vertex 5 and vertex 10 with a capacity of 6.\nThere is an edge between vertex 5 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 5 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 5 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 3 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 4 with a capacity of 7.\nThere is an edge between vertex 5 and vertex 12 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 12 and vertex 2 with a capacity of 8.\nThere is an edge between vertex 3 and vertex 10 with a capacity of 2.\nThere is an edge between vertex 6 and vertex 10 with a capacity of 3.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 6.\nThere is an edge between vertex 11 and vertex 2 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 1 with a capacity of 3.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 1 with a capacity of 10.\nThere is an edge between vertex 3 and vertex 11 with a capacity of 6.\nThere is an edge between vertex 8 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 12 and vertex 4 with a capacity of 10.\nThere is an edge between vertex 3 and vertex 9 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 9 with a capacity of 8.\nThere is an edge between vertex 4 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 12 and vertex 6 with a capacity of 4.\nThere is an edge between vertex 6 and vertex 11 with a capacity of 6.\nThere is an edge between vertex 6 and vertex 1 with a capacity of 2.\nThere is an edge between vertex 8 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 8 and vertex 6 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 3 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 9 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 2 and vertex 3 with a capacity of 6.\nThere is an edge between vertex 8 and vertex 9 with a capacity of 7.\nThere is an edge between vertex 2 and vertex 4 with a capacity of 9.\nThere is an edge between vertex 8 and vertex 3 with a capacity of 2.\nThere is an edge between vertex 8 and vertex 12 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 12 with a capacity of 6.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 9.\nThere is an edge between vertex 10 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 11 and vertex 7 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 12 and vertex 3 with a capacity of 9.\nThere is an edge between vertex 6 and vertex 7 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 10 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 2 with a capacity of 7.\nThere is an edge between vertex 12 and vertex 7 with a capacity of 8.\nThere is an edge between vertex 6 and vertex 4 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 1 with a capacity of 8.\nThere is an edge between vertex 8 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 6 and vertex 2 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 3 with a capacity of 10.\nThere is an edge between vertex 11 and vertex 1 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 9 with a capacity of 1.\nThere is an edge between vertex 10 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 2 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 8 and vertex 11 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 12 with a capacity of 7.\nThere is an edge between vertex 11 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 10 and vertex 12 with a capacity of 2.\n",
    "graph_output": "12 62\n1 5 6\n5 10 6\n5 2 1\n5 7 5\n5 6 2\n5 9 4\n5 11 2\n5 3 1\n11 4 7\n5 12 9\n7 8 8\n1 3 5\n12 2 8\n3 10 2\n6 10 3\n2 10 6\n11 2 5\n10 1 3\n6 3 10\n9 1 10\n3 11 6\n8 4 2\n12 4 10\n3 9 1\n11 9 8\n4 9 9\n12 6 4\n6 11 6\n6 1 2\n8 10 10\n8 6 2\n4 3 2\n2 9 3\n1 7 4\n2 3 6\n8 9 7\n2 4 9\n8 3 2\n8 12 10\n9 12 6\n9 7 9\n10 9 6\n11 7 9\n4 7 5\n12 3 9\n6 7 9\n4 10 6\n7 2 7\n12 7 8\n6 4 4\n4 1 8\n8 5 9\n6 2 3\n7 3 10\n11 1 1\n6 9 1\n10 7 5\n2 8 2\n8 11 5\n1 12 7\n11 10 10\n10 12 2\n",
    "vertices": [
      1,
      10
    ],
    "answer": 46,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 10, 21, 12\nVertex 2: 14, 6, 28, 3\nVertex 3: 2\nVertex 4: 21, 18\nVertex 5: 9, 7\nVertex 6: 2\nVertex 7: 5\nVertex 8: 10\nVertex 9: 14, 5\nVertex 10: 1, 24, 8\nVertex 11: 15\nVertex 12: 1\nVertex 13: 19\nVertex 14: 1, 19, 2, 9\nVertex 15: 26, 11\nVertex 16: 29\nVertex 17: 24\nVertex 18: 4\nVertex 19: 14, 20, 13\nVertex 20: 19\nVertex 21: 1, 26, 27, 4, 22\nVertex 22: 21\nVertex 23: 25\nVertex 24: 10, 17\nVertex 25: 27, 23\nVertex 26: 21, 15, 29\nVertex 27: 21, 25\nVertex 28: 2\nVertex 29: 26, 16\n",
    "graph_output": "29 28\n1 14\n14 19\n1 10\n1 21\n1 12\n14 2\n2 6\n21 26\n21 27\n10 24\n14 9\n2 28\n26 15\n19 20\n9 5\n26 29\n2 3\n21 4\n15 11\n27 25\n19 13\n5 7\n4 18\n10 8\n25 23\n21 22\n24 17\n29 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 3 and vertex 1 are connected.\n\nThis is an undirected graph with 15 vertices and 79 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   0   1   0   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   0   1   0   1   1   0   1   1   0   1   1   1   1 \n 3 |  0   0   0   0   1   0   1   1   1   0   1   1   1   0   1 \n 4 |  1   1   0   0   1   1   0   1   1   1   0   1   1   0   0 \n 5 |  0   0   1   1   0   1   0   1   1   1   1   1   1   1   1 \n 6 |  1   1   0   1   1   0   0   0   1   1   1   1   1   1   1 \n 7 |  1   1   1   0   0   0   0   1   1   1   0   1   1   1   1 \n 8 |  1   0   1   1   1   0   1   0   1   1   0   0   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   0   0 \n10 |  1   1   0   1   1   1   1   1   1   0   1   1   1   0   0 \n11 |  1   0   1   0   1   1   0   0   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   0   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   0   1 \n14 |  1   1   0   0   1   1   1   1   0   0   1   1   0   0   0 \n15 |  1   1   1   0   1   1   1   1   0   0   1   1   1   0   0 \n",
    "graph_output": "15 79\n11 10\n5 3\n4 12\n7 3\n5 13\n13 12\n9 12\n12 14\n12 3\n13 7\n12 1\n13 1\n6 14\n2 9\n6 11\n15 1\n6 15\n13 4\n7 2\n10 12\n15 7\n3 9\n14 8\n5 15\n5 4\n2 15\n6 4\n13 3\n2 10\n11 15\n12 11\n4 9\n14 11\n13 9\n8 5\n10 9\n5 11\n8 1\n15 12\n9 11\n6 9\n4 2\n6 2\n9 1\n14 5\n10 4\n6 5\n14 1\n15 8\n3 15\n11 13\n15 13\n8 3\n10 1\n8 13\n12 2\n10 13\n4 8\n8 10\n7 9\n1 4\n3 11\n12 6\n1 6\n10 7\n8 7\n7 14\n1 7\n5 12\n6 10\n1 2\n5 10\n12 7\n2 14\n1 11\n6 13\n9 8\n2 13\n5 9\n",
    "vertices": [
      3,
      1
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 7 and vertex 1 are connected.\n\nThis is an undirected graph with 15 vertices and 21 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 13, 2, 5, 6, 8\nVertex 2: 1\nVertex 3: 1, 11, 13\nVertex 4: 6, 5\nVertex 5: 9, 7, 1, 6, 4\nVertex 6: 11, 13, 10, 5, 4, 1\nVertex 7: 5, 14\nVertex 8: 1\nVertex 9: 5\nVertex 10: 12, 15, 6\nVertex 11: 6, 12, 3\nVertex 12: 10, 11\nVertex 13: 6, 1, 3\nVertex 14: 15, 7\nVertex 15: 10, 14\n",
    "graph_output": "15 21\n3 1\n11 6\n5 9\n13 6\n10 12\n10 15\n15 14\n5 7\n6 10\n13 1\n11 12\n2 1\n11 3\n3 13\n5 1\n5 6\n6 4\n5 4\n6 1\n1 8\n7 14\n",
    "vertices": [
      7,
      1
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 106 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 3 and vertex 14.\n",
    "graph_output": "16 106\n11 3\n7 8\n2 12\n7 3\n3 12\n5 14\n14 9\n5 15\n2 6\n15 8\n15 9\n3 15\n4 10\n11 5\n9 10\n1 16\n12 14\n3 2\n13 8\n8 16\n6 14\n15 14\n10 8\n8 9\n16 6\n4 1\n14 11\n13 5\n6 5\n15 13\n4 15\n15 10\n6 8\n6 10\n7 6\n2 10\n13 1\n10 1\n12 4\n8 2\n9 5\n8 14\n4 9\n7 14\n13 6\n15 12\n7 12\n2 14\n16 9\n1 12\n7 4\n7 11\n16 2\n10 3\n7 16\n3 5\n11 1\n15 7\n11 2\n16 10\n14 10\n8 5\n1 6\n1 8\n16 5\n4 14\n2 15\n11 15\n4 8\n16 11\n7 10\n11 12\n9 6\n3 6\n9 13\n16 3\n15 16\n14 16\n2 1\n6 4\n11 9\n12 5\n10 11\n11 13\n5 4\n9 2\n16 13\n16 4\n3 9\n5 1\n12 13\n2 5\n11 8\n16 12\n12 9\n13 10\n14 13\n15 6\n11 4\n12 10\n1 9\n7 9\n8 12\n3 1\n13 2\n3 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 18 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 5 (weight=4), 7 (weight=59), 10 (weight=55), 6 (weight=72)\nVertex 2: 7 (weight=4), 6 (weight=57), 10 (weight=22)\nVertex 3: 5 (weight=78), 8 (weight=93)\nVertex 4: 9 (weight=85), 12 (weight=43)\nVertex 5: 1 (weight=4), 3 (weight=78), 11 (weight=55), 7 (weight=32)\nVertex 6: 10 (weight=87), 2 (weight=57), 12 (weight=16), 1 (weight=72)\nVertex 7: 1 (weight=59), 8 (weight=18), 9 (weight=89), 2 (weight=4), 5 (weight=32)\nVertex 8: 7 (weight=18), 12 (weight=27), 3 (weight=93)\nVertex 9: 7 (weight=89), 4 (weight=85)\nVertex 10: 1 (weight=55), 6 (weight=87), 2 (weight=22)\nVertex 11: 5 (weight=55)\nVertex 12: 8 (weight=27), 4 (weight=43), 6 (weight=16)\n",
    "graph_output": "12 18\n1 5 4\n1 7 59\n7 8 18\n1 10 55\n5 3 78\n7 9 89\n5 11 55\n10 6 87\n9 4 85\n7 2 4\n8 12 27\n6 2 57\n12 4 43\n6 12 16\n8 3 93\n6 1 72\n5 7 32\n10 2 22\n",
    "vertices": [
      null,
      null
    ],
    "answer": 388,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 24 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 15 and vertex 13.\n",
    "graph_output": "16 24\n2 14\n11 10\n3 1\n8 13\n15 16\n1 12\n1 8\n5 1\n15 12\n2 11\n13 5\n8 3\n9 4\n1 11\n14 9\n4 8\n6 8\n3 11\n1 6\n8 5\n16 11\n16 13\n15 10\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 12 vertices and 14 edges\n\nEdges (Format: Node Node):\n1 8\n7 4\n9 8\n12 1\n11 8\n2 9\n10 4\n12 3\n3 11\n1 11\n5 11\n1 2\n11 9\n6 10\n",
    "graph_output": "12 14\n1 8\n7 4\n9 8\n12 1\n11 8\n2 9\n10 4\n12 3\n3 11\n1 11\n5 11\n1 2\n11 9\n6 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 15 vertices and 101 edges\n\nEdges (Format: Node Node):\n1 11\n1 15\n11 7\n7 12\n11 10\n1 9\n7 14\n1 5\n15 13\n13 2\n2 6\n13 4\n4 3\n5 8\n10 13\n2 7\n8 1\n7 8\n2 12\n14 10\n14 3\n3 5\n10 8\n6 11\n6 13\n11 15\n13 1\n12 11\n3 15\n8 14\n7 13\n13 11\n11 14\n1 2\n11 2\n15 14\n6 14\n12 8\n10 1\n10 5\n10 12\n4 6\n7 3\n8 15\n4 5\n4 1\n3 13\n15 2\n10 15\n3 6\n6 1\n2 9\n2 10\n7 4\n9 10\n9 14\n15 9\n12 15\n6 8\n14 1\n8 13\n9 7\n12 9\n11 3\n10 7\n15 6\n4 2\n12 6\n5 7\n10 6\n12 5\n15 7\n2 14\n8 2\n15 5\n5 13\n15 4\n9 4\n14 5\n4 8\n13 9\n11 9\n5 2\n5 9\n4 10\n4 11\n12 13\n3 1\n5 11\n3 2\n5 6\n9 8\n3 10\n11 8\n7 6\n1 7\n6 9\n14 12\n13 14\n12 1\n3 12\n",
    "graph_output": "15 101\n1 11\n1 15\n11 7\n7 12\n11 10\n1 9\n7 14\n1 5\n15 13\n13 2\n2 6\n13 4\n4 3\n5 8\n10 13\n2 7\n8 1\n7 8\n2 12\n14 10\n14 3\n3 5\n10 8\n6 11\n6 13\n11 15\n13 1\n12 11\n3 15\n8 14\n7 13\n13 11\n11 14\n1 2\n11 2\n15 14\n6 14\n12 8\n10 1\n10 5\n10 12\n4 6\n7 3\n8 15\n4 5\n4 1\n3 13\n15 2\n10 15\n3 6\n6 1\n2 9\n2 10\n7 4\n9 10\n9 14\n15 9\n12 15\n6 8\n14 1\n8 13\n9 7\n12 9\n11 3\n10 7\n15 6\n4 2\n12 6\n5 7\n10 6\n12 5\n15 7\n2 14\n8 2\n15 5\n5 13\n15 4\n9 4\n14 5\n4 8\n13 9\n11 9\n5 2\n5 9\n4 10\n4 11\n12 13\n3 1\n5 11\n3 2\n5 6\n9 8\n3 10\n11 8\n7 6\n1 7\n6 9\n14 12\n13 14\n12 1\n3 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 113 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   0   1   1   1   1   1   1   1   1   0   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   0   1   1   1   1   1   0   1 \n 4 |  1   1   1   0   1   1   0   1   1   0   0   1   1   0   1   1   1 \n 5 |  0   0   1   1   0   1   1   1   1   1   1   1   1   1   1   1   0 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   0   1   1   0   0   1   0   1   1   1   1   0   1   1 \n 8 |  1   1   1   1   1   1   0   0   1   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   0   1   1   1   1   1 \n10 |  1   1   0   0   1   1   0   1   1   0   1   1   1   1   1   1   0 \n11 |  1   1   1   0   1   1   1   1   1   1   0   1   0   0   1   1   0 \n12 |  1   1   1   1   1   1   1   1   0   1   1   0   0   1   1   0   0 \n13 |  1   1   1   1   1   1   1   1   1   1   0   0   0   1   0   1   1 \n14 |  1   0   1   0   1   1   1   1   1   1   0   1   1   0   1   1   0 \n15 |  1   1   1   1   1   1   0   1   1   1   1   1   0   1   0   1   1 \n16 |  1   1   0   1   1   1   1   1   1   1   1   0   1   1   1   0   1 \n17 |  1   1   1   1   0   1   1   1   1   0   0   0   1   0   1   1   0 \n",
    "graph_output": "17 113\n7 13\n11 16\n8 9\n17 9\n4 15\n7 9\n15 10\n1 4\n7 3\n4 16\n3 17\n11 6\n9 3\n10 6\n3 4\n5 6\n4 5\n5 8\n5 7\n13 6\n4 9\n4 6\n8 10\n6 17\n8 13\n9 11\n16 8\n11 1\n17 4\n1 3\n2 9\n5 15\n14 16\n16 6\n9 10\n13 17\n11 5\n11 8\n4 8\n9 14\n4 13\n5 16\n14 15\n5 14\n5 13\n4 12\n7 12\n8 3\n12 15\n3 6\n16 1\n9 5\n2 16\n14 6\n17 15\n8 17\n1 14\n16 15\n14 7\n13 10\n13 1\n2 13\n4 2\n16 17\n2 8\n14 12\n8 12\n10 2\n2 11\n7 1\n11 7\n2 12\n6 15\n12 11\n3 13\n10 11\n6 7\n13 16\n12 10\n11 15\n9 6\n6 8\n2 7\n16 9\n10 14\n2 15\n11 3\n12 3\n6 1\n8 14\n17 1\n14 3\n13 9\n10 1\n1 2\n3 5\n15 1\n7 17\n2 3\n6 2\n12 5\n10 5\n1 8\n15 3\n10 16\n7 16\n6 12\n15 9\n8 15\n17 2\n12 1\n9 1\n13 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 21 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 3 and vertex 6.\n",
    "graph_output": "16 21\n1 13\n1 11\n1 15\n11 5\n1 3\n1 6\n11 2\n6 16\n13 12\n3 14\n11 7\n3 4\n11 8\n3 10\n8 9\n3 9\n10 8\n1 2\n4 1\n9 2\n3 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 17 vertices and 23 edges\n\nEdges (Format: Node Node):\n12 17\n4 10\n3 13\n12 1\n16 17\n5 11\n9 7\n3 6\n2 8\n3 12\n16 15\n13 4\n7 6\n2 17\n14 7\n9 5\n1 14\n17 6\n3 17\n10 12\n2 16\n12 13\n2 14\n",
    "graph_output": "17 23\n12 17\n4 10\n3 13\n12 1\n16 17\n5 11\n9 7\n3 6\n2 8\n3 12\n16 15\n13 4\n7 6\n2 17\n14 7\n9 5\n1 14\n17 6\n3 17\n10 12\n2 16\n12 13\n2 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 15 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 92 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0  90  14  82   0   0  18  73  70  62   7  18  81  46  53 \n 2 | 90   0   3  82  74  23  96  11  63  13  56  58  48  88   0 \n 3 | 14   3   0  91   0  58  92  30   0  57 100  49  93  79  89 \n 4 | 82  82  91   0   0  12  50  16  50   0  33  47  25  71   6 \n 5 |  0  74   0   0   0  46  54  30  61  86   6  33  45  76  61 \n 6 |  0  23  58  12  46   0  17  20   0  24  81   0   9  42   9 \n 7 | 18  96  92  50  54  17   0  73  30  28 100  30  34  86  74 \n 8 | 73  11  30  16  30  20  73   0  28  14  65  49   0   0  13 \n 9 | 70  63   0  50  61   0  30  28   0  90  99  60  17  63  51 \n10 | 62  13  57   0  86  24  28  14  90   0   3  55  77  92  13 \n11 |  7  56 100  33   6  81 100  65  99   3   0   0  84  17   0 \n12 | 18  58  49  47  33   0  30  49  60  55   0   0  64  96  22 \n13 | 81  48  93  25  45   9  34   0  17  77  84  64   0  42  27 \n14 | 46  88  79  71  76  42  86   0  63  92  17  96  42   0  78 \n15 | 53   0  89   6  61   9  74  13  51  13   0  22  27  78   0 \n",
    "graph_output": "15 92\n1 2 90\n2 8 11\n2 10 13\n10 13 77\n8 15 13\n10 11 3\n11 7 100\n2 5 74\n2 4 82\n8 6 20\n13 3 93\n5 9 61\n13 14 42\n15 12 22\n5 8 30\n13 5 45\n7 15 74\n5 10 86\n4 9 50\n8 12 49\n6 4 12\n14 9 63\n15 3 89\n15 9 51\n15 5 61\n9 11 99\n1 12 18\n8 4 16\n10 7 28\n12 4 47\n11 4 33\n7 4 50\n6 5 46\n14 5 76\n2 14 88\n13 11 84\n1 13 81\n6 10 24\n14 4 71\n1 3 14\n1 15 53\n10 8 14\n3 12 49\n10 3 57\n2 3 3\n2 7 96\n11 14 17\n2 11 56\n1 7 18\n1 4 82\n14 3 79\n9 1 70\n1 14 46\n3 7 92\n5 7 54\n10 1 62\n6 14 42\n8 11 65\n7 12 30\n7 6 17\n14 10 92\n12 5 33\n13 2 48\n9 8 28\n1 11 7\n15 4 6\n15 10 13\n9 13 17\n13 6 9\n3 4 91\n12 2 58\n11 5 6\n9 10 90\n6 2 23\n11 3 100\n13 12 64\n9 7 30\n13 4 25\n12 10 55\n7 14 86\n15 14 78\n9 12 60\n14 12 96\n8 7 73\n2 9 63\n8 3 30\n11 6 81\n8 1 73\n6 15 9\n13 15 27\n13 7 34\n3 6 58\n",
    "vertices": [
      8,
      15
    ],
    "answer": 13,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 1 to vertex 7 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 16 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   0  34   0  62  46  73   0   8   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0  86   0   9   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0  86   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0  84   0 \n 5 | 34   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0  79   0   0   0   0   0 \n 7 | 62   0   0   0   0   0   0   0   0   0   0  15  79   0   0 \n 8 | 46   0   0   0   0   0   0   0   0   0   0  22   0   0   0 \n 9 | 73   0   0   0   0   0   0   0   0   0   0  24   0   0   0 \n10 |  0   0   0   0   0  79   0   0   0   0   0   0   0   0  45 \n11 |  8   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0  86  86   0   0   0  15  22  24   0   0   0   0   0  53 \n13 |  0   0   0   0   0   0  79   0   0   0   0   0   0   0   0 \n14 |  0   9   0  84   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0  45   0  53   0   0   0 \n",
    "graph_output": "15 16\n1 8 46\n8 12 22\n12 3 86\n1 11 8\n1 7 62\n7 13 79\n12 2 86\n2 14 9\n12 15 53\n1 5 34\n15 10 45\n10 6 79\n1 9 73\n14 4 84\n7 12 15\n9 12 24\n",
    "vertices": [
      1,
      7
    ],
    "answer": 62,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 5 (source) to vertex 3 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 17 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5 with a capacity of 4.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 5 and vertex 2 with a capacity of 4.\nThere is an edge between vertex 6 and vertex 11 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 6 and vertex 4 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 10 with a capacity of 7.\nThere is an edge between vertex 4 and vertex 8 with a capacity of 8.\nThere is an edge between vertex 4 and vertex 3 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 1 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 1.\nThere is an edge between vertex 7 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 10 with a capacity of 2.\nThere is an edge between vertex 10 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 3 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 11 with a capacity of 4.\n",
    "graph_output": "11 17\n1 5 4\n5 6 10\n5 2 4\n6 11 8\n1 7 6\n6 4 3\n7 10 7\n4 8 8\n4 3 2\n5 9 4\n4 1 2\n2 7 1\n7 4 2\n3 10 2\n10 4 1\n2 3 6\n7 11 4\n",
    "vertices": [
      5,
      3
    ],
    "answer": 9,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 22 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 7, 8, 4, 3, 6\nVertex 2: 1, 6, 3, 5, 4, 8\nVertex 3: 1, 5, 2, 4, 8, 7\nVertex 4: 1, 6, 2, 3, 7\nVertex 5: 3, 8, 2, 6\nVertex 6: 2, 4, 7, 1, 8, 5\nVertex 7: 1, 6, 4, 3, 8\nVertex 8: 1, 5, 2, 3, 6, 7\n",
    "graph_output": "8 22\n1 2\n1 7\n1 8\n1 4\n1 3\n2 6\n3 5\n2 3\n6 4\n7 6\n8 5\n6 1\n2 5\n2 4\n4 3\n4 7\n8 2\n8 3\n6 8\n7 3\n8 7\n6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 39852,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 128 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 13 and vertex 17.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 8 and vertex 17.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 7 and vertex 17.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 17 and vertex 10.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 17 and vertex 1.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 9 and vertex 17.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 2 and vertex 17.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 17 and vertex 6.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 17 and vertex 3.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 5 and vertex 16.\n",
    "graph_output": "17 128\n1 3\n3 6\n6 13\n13 5\n1 7\n7 14\n13 10\n5 11\n13 17\n6 2\n11 9\n13 15\n9 4\n13 12\n13 16\n13 8\n14 3\n14 5\n1 5\n3 10\n14 17\n14 2\n8 17\n4 3\n8 5\n7 13\n4 12\n7 17\n6 15\n9 16\n10 5\n12 14\n15 8\n4 11\n11 10\n5 15\n9 6\n6 12\n1 12\n16 12\n12 7\n6 5\n3 8\n7 4\n8 6\n8 9\n2 12\n1 15\n8 12\n11 13\n1 8\n2 4\n6 16\n1 14\n14 6\n17 10\n16 17\n16 7\n2 3\n11 12\n12 17\n9 5\n9 2\n3 12\n16 14\n5 7\n14 8\n4 15\n12 5\n2 15\n9 10\n13 4\n11 3\n1 11\n8 16\n9 13\n10 2\n4 6\n15 17\n15 14\n10 7\n15 11\n6 11\n7 11\n17 1\n10 8\n4 5\n17 5\n3 16\n6 10\n10 4\n7 15\n9 17\n16 1\n1 9\n1 13\n2 17\n11 17\n7 9\n7 8\n3 13\n5 3\n2 5\n10 12\n3 9\n17 6\n16 15\n7 3\n8 2\n1 10\n17 3\n12 9\n8 11\n15 10\n14 11\n12 15\n16 2\n13 14\n3 15\n11 16\n1 2\n15 9\n8 4\n6 7\n2 7\n14 9\n2 13\n5 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 17 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 15\nVertex 2: 1, 12, 14, 9, 13\nVertex 3: 9\nVertex 4: 15, 11\nVertex 5: 12, 13\nVertex 6: 14, 15\nVertex 7: 12, 8\nVertex 8: 7\nVertex 9: 2, 3\nVertex 10: 12\nVertex 11: 4\nVertex 12: 2, 7, 5, 10, 16\nVertex 13: 5, 2\nVertex 14: 2, 6\nVertex 15: 1, 4, 6\nVertex 16: 12\n",
    "graph_output": "16 17\n1 2\n2 12\n12 7\n12 5\n12 10\n7 8\n1 15\n5 13\n2 14\n15 4\n14 6\n12 16\n2 9\n9 3\n4 11\n13 2\n6 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 91 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 15 and vertex 10.\n",
    "graph_output": "16 91\n1 13\n13 3\n1 16\n1 7\n7 14\n13 11\n13 9\n13 2\n3 15\n1 4\n16 8\n8 6\n8 10\n6 12\n1 5\n3 12\n8 13\n13 15\n13 4\n13 14\n4 14\n11 8\n16 11\n7 2\n12 14\n5 15\n2 11\n15 4\n3 5\n11 9\n6 15\n9 4\n7 9\n13 6\n3 4\n2 1\n2 12\n9 2\n13 12\n5 11\n12 5\n4 8\n16 3\n1 8\n15 7\n14 5\n5 10\n14 6\n8 7\n10 13\n1 12\n9 6\n3 11\n12 11\n8 9\n4 5\n14 11\n5 16\n7 6\n9 10\n15 16\n16 7\n9 14\n3 14\n15 2\n6 11\n12 7\n10 11\n12 15\n10 16\n1 14\n6 4\n6 16\n9 16\n9 5\n13 5\n1 15\n4 2\n16 13\n7 5\n6 3\n14 10\n10 1\n16 12\n14 16\n2 3\n12 10\n3 7\n15 8\n3 10\n15 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 61 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   1   1   1   1   1   1   0   1   1   1 \n 2 |  0   0   1   1   0   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1 \n 5 |  1   0   1   1   0   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   0   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   0 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1 \n 9 |  0   1   1   1   1   1   1   1   0   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1 \n11 |  1   1   1   1   1   0   1   1   1   1   0   1 \n12 |  1   1   1   1   1   1   0   1   1   1   1   0 \n",
    "graph_output": "12 61\n7 1\n3 4\n12 8\n6 4\n8 7\n10 8\n5 12\n11 7\n8 1\n11 12\n1 6\n4 8\n5 10\n2 3\n5 3\n9 6\n12 10\n11 9\n9 3\n4 12\n9 2\n6 8\n6 3\n5 6\n12 3\n4 1\n4 11\n6 10\n6 2\n4 9\n4 2\n7 6\n10 11\n3 1\n5 7\n3 8\n12 9\n1 5\n10 7\n10 4\n9 5\n8 2\n7 9\n5 8\n5 11\n2 12\n1 11\n3 7\n2 11\n3 10\n2 7\n11 3\n10 2\n10 1\n8 11\n12 6\n7 4\n12 1\n8 9\n4 5\n10 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 3 to vertex 15 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 113 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0  33  82  83  66  95  56  17  35  97   8  14  82  25  37  60 \n 2 | 33   0  66  30  94  78  88  71  26  47  22  93  27  56  58   0 \n 3 | 82  66   0  27  17  71  47  15  74  24  17  30  87  26  85  46 \n 4 | 83  30  27   0  61  48   0  44  30   1   0  79  75  50  84  66 \n 5 | 66  94  17  61   0  61   4   4  88  21  83  95  44  29  60  80 \n 6 | 95  78  71  48  61   0   3  79   0  82  53   5   0  43  68  36 \n 7 | 56  88  47   0   4   3   0  36  29  80  65  99  42  58  84  83 \n 8 | 17  71  15  44   4  79  36   0  54  45  13  94   0  39  72  28 \n 9 | 35  26  74  30  88   0  29  54   0  10  44  80   5  96  47  81 \n10 | 97  47  24   1  21  82  80  45  10   0  39  39  25  47  86   2 \n11 |  8  22  17   0  83  53  65  13  44  39   0  97   9  38   3  26 \n12 | 14  93  30  79  95   5  99  94  80  39  97   0  99  26  84  24 \n13 | 82  27  87  75  44   0  42   0   5  25   9  99   0   0  22   1 \n14 | 25  56  26  50  29  43  58  39  96  47  38  26   0   0  13  24 \n15 | 37  58  85  84  60  68  84  72  47  86   3  84  22  13   0  78 \n16 | 60   0  46  66  80  36  83  28  81   2  26  24   1  24  78   0 \n",
    "graph_output": "16 113\n1 2 33\n2 4 30\n2 14 56\n1 15 37\n14 12 26\n2 11 22\n11 6 53\n15 5 60\n4 9 30\n9 16 81\n9 13 5\n1 7 56\n2 10 47\n13 3 87\n2 8 71\n16 3 46\n9 11 44\n1 10 97\n4 14 50\n8 6 79\n3 8 15\n3 6 71\n3 12 30\n5 16 80\n7 13 42\n1 13 82\n9 1 35\n15 11 3\n2 6 78\n10 11 39\n3 1 82\n7 16 83\n5 3 17\n2 12 93\n9 12 80\n1 4 83\n7 11 65\n9 3 74\n14 3 26\n4 15 84\n4 13 75\n3 7 47\n7 14 58\n9 5 88\n12 4 79\n14 1 25\n12 1 14\n10 5 21\n11 14 38\n10 12 39\n10 16 2\n6 14 43\n2 9 26\n4 6 48\n8 7 36\n13 16 1\n11 3 17\n4 3 27\n11 8 13\n2 15 58\n1 16 60\n1 11 8\n15 3 85\n5 11 83\n14 5 29\n2 7 88\n8 15 72\n7 15 84\n7 5 4\n9 7 29\n15 14 13\n13 15 22\n4 8 44\n7 12 99\n16 11 26\n9 10 10\n13 12 99\n12 16 24\n13 5 44\n15 9 47\n9 8 54\n3 2 66\n11 12 97\n8 14 39\n6 10 82\n16 15 78\n12 6 5\n4 5 61\n3 10 24\n12 15 84\n6 15 68\n8 12 94\n6 5 61\n8 5 4\n10 8 45\n10 13 25\n9 14 96\n2 13 27\n16 14 24\n15 10 86\n6 7 3\n14 10 47\n16 6 36\n8 16 28\n8 1 17\n13 11 9\n5 1 66\n2 5 94\n1 6 95\n12 5 95\n4 16 66\n4 10 1\n10 7 80\n",
    "vertices": [
      3,
      15
    ],
    "answer": 20,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 8 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 14 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 7 (capacity=6), 10 (capacity=4), 2 (capacity=10), 6 (capacity=1)\nVertex 2: 1 (capacity=10), 10 (capacity=6), 3 (capacity=2)\nVertex 3: 7 (capacity=4), 11 (capacity=2), 2 (capacity=2)\nVertex 4: 11 (capacity=9)\nVertex 5: 11 (capacity=5), 7 (capacity=7)\nVertex 6: 1 (capacity=1), 9 (capacity=3)\nVertex 7: 1 (capacity=6), 3 (capacity=4), 8 (capacity=10), 5 (capacity=7)\nVertex 8: 7 (capacity=10)\nVertex 9: 11 (capacity=5), 6 (capacity=3)\nVertex 10: 1 (capacity=4), 2 (capacity=6)\nVertex 11: 3 (capacity=2), 4 (capacity=9), 5 (capacity=5), 9 (capacity=5)\n",
    "graph_output": "11 14\n1 7 6\n7 3 4\n3 11 2\n1 10 4\n1 2 10\n11 4 9\n11 5 5\n7 8 10\n11 9 5\n1 6 1\n9 6 3\n2 10 6\n7 5 7\n2 3 2\n",
    "vertices": [
      8,
      2
    ],
    "answer": 9,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 17 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   1   0   0   1   0   1   1   0   0   0   0   0 \n 2 |  1   0   0   0   0   0   0   1   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   1   0   0   0 \n 4 |  0   0   0   0   1   0   0   0   0   1   0   0   0 \n 5 |  1   0   0   1   0   0   0   0   1   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  1   0   0   0   0   0   0   0   1   0   1   0   1 \n 8 |  1   1   0   0   0   0   0   0   0   1   1   0   0 \n 9 |  0   0   0   0   1   0   1   0   0   1   0   0   1 \n10 |  0   0   1   1   0   0   0   1   1   0   0   0   1 \n11 |  0   0   0   0   0   0   1   1   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   1   0   1   1   0   0   0 \n",
    "graph_output": "13 17\n9 5\n4 5\n9 7\n10 8\n8 2\n3 10\n7 11\n1 2\n8 1\n10 9\n7 1\n10 4\n11 8\n5 1\n13 9\n10 13\n7 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 9 (source) to vertex 6 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 10 vertices and 12 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 4 34 3\n1 8 31 1\n1 6 33 9\n6 9 90 6\n4 2 34 7\n8 10 25 6\n10 5 15 8\n8 7 23 2\n4 3 87 2\n7 4 48 8\n4 9 24 3\n9 7 29 1\n",
    "graph_output": "10 12\n1 4 34 3\n1 8 31 1\n1 6 33 9\n6 9 90 6\n4 2 34 7\n8 10 25 6\n10 5 15 8\n8 7 23 2\n4 3 87 2\n7 4 48 8\n4 9 24 3\n9 7 29 1\n",
    "vertices": [
      9,
      6
    ],
    "answer": 929,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 11 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 7, 6\nVertex 2: 7, 6, 3\nVertex 3: 2\nVertex 4: 1, 5, 6\nVertex 5: 4, 7, 6\nVertex 6: 2, 5, 4, 7, 1\nVertex 7: 2, 5, 1, 6\n",
    "graph_output": "7 11\n1 4\n2 7\n5 4\n7 5\n6 2\n1 7\n6 5\n4 6\n3 2\n7 6\n1 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 20,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 17 vertices and 22 edges\n\nEdges (Format: Node Node):\n1 5\n5 14\n5 3\n14 15\n15 13\n3 16\n5 7\n7 17\n17 2\n13 12\n13 6\n16 10\n16 9\n15 8\n12 4\n9 11\n16 15\n8 12\n8 1\n8 10\n12 15\n12 3\n",
    "graph_output": "17 22\n1 5\n5 14\n5 3\n14 15\n15 13\n3 16\n5 7\n7 17\n17 2\n13 12\n13 6\n16 10\n16 9\n15 8\n12 4\n9 11\n16 15\n8 12\n8 1\n8 10\n12 15\n12 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 17 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0  55   0  64  82   9   0   0   0   0   0 \n 2 | 55   0   0   0   0   0   0  28  46  13   0 \n 3 |  0   0   0   0  79   0  84   0   0   0  16 \n 4 | 64   0   0   0   0   0   0   0  60   0  88 \n 5 | 82   0  79   0   0   0   0  62   0  38   0 \n 6 |  9   0   0   0   0   0  49   0   0   7   0 \n 7 |  0   0  84   0   0  49   0   0   0   0  54 \n 8 |  0  28   0   0  62   0   0   0   0   0   0 \n 9 |  0  46   0  60   0   0   0   0   0   0   0 \n10 |  0  13   0   0  38   7   0   0   0   0   0 \n11 |  0   0  16  88   0   0  54   0   0   0   0 \n",
    "graph_output": "11 17\n1 6 9\n6 10 7\n1 4 64\n4 9 60\n4 11 88\n11 7 54\n10 5 38\n11 3 16\n5 8 62\n9 2 46\n5 1 82\n5 3 79\n3 7 84\n8 2 28\n10 2 13\n1 2 55\n7 6 49\n",
    "vertices": [
      null,
      null
    ],
    "answer": 324,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 45 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 3 (capacity=1), 11 (capacity=7), 9 (capacity=9), 6 (capacity=4), 5 (capacity=1), 2 (capacity=8), 4 (capacity=10), 8 (capacity=2)\nVertex 2: 3 (capacity=10), 4 (capacity=2), 11 (capacity=1), 5 (capacity=4), 8 (capacity=5), 7 (capacity=7), 1 (capacity=8), 9 (capacity=8), 10 (capacity=6), 6 (capacity=10)\nVertex 3: 1 (capacity=1), 2 (capacity=10), 11 (capacity=4), 10 (capacity=2), 6 (capacity=4), 4 (capacity=10), 5 (capacity=2), 8 (capacity=1)\nVertex 4: 2 (capacity=2), 5 (capacity=8), 7 (capacity=2), 9 (capacity=1), 10 (capacity=7), 3 (capacity=10), 1 (capacity=10), 8 (capacity=2), 11 (capacity=10)\nVertex 5: 8 (capacity=2), 2 (capacity=4), 4 (capacity=8), 1 (capacity=1), 9 (capacity=9), 3 (capacity=2), 6 (capacity=6), 7 (capacity=3)\nVertex 6: 7 (capacity=3), 1 (capacity=4), 3 (capacity=4), 8 (capacity=1), 9 (capacity=9), 5 (capacity=6), 2 (capacity=10)\nVertex 7: 11 (capacity=5), 6 (capacity=3), 2 (capacity=7), 9 (capacity=10), 4 (capacity=2), 10 (capacity=10), 5 (capacity=3), 8 (capacity=10)\nVertex 8: 11 (capacity=8), 10 (capacity=4), 5 (capacity=2), 2 (capacity=5), 9 (capacity=2), 6 (capacity=1), 1 (capacity=2), 4 (capacity=2), 3 (capacity=1), 7 (capacity=10)\nVertex 9: 11 (capacity=7), 1 (capacity=9), 7 (capacity=10), 8 (capacity=2), 5 (capacity=9), 4 (capacity=1), 6 (capacity=9), 2 (capacity=8), 10 (capacity=9)\nVertex 10: 8 (capacity=4), 3 (capacity=2), 7 (capacity=10), 4 (capacity=7), 9 (capacity=9), 2 (capacity=6)\nVertex 11: 3 (capacity=4), 7 (capacity=5), 8 (capacity=8), 9 (capacity=7), 1 (capacity=7), 2 (capacity=1), 4 (capacity=10)\n",
    "graph_output": "11 45\n1 3 1\n3 2 10\n3 11 4\n2 4 2\n11 7 5\n11 8 8\n11 9 7\n7 6 3\n8 10 4\n8 5 2\n1 11 7\n11 2 1\n2 5 4\n8 2 5\n9 1 9\n6 1 4\n7 2 7\n9 7 10\n5 4 8\n8 9 2\n4 7 2\n5 1 1\n5 9 9\n10 3 2\n7 10 10\n6 3 4\n4 9 1\n6 8 1\n2 1 8\n10 4 7\n9 6 9\n4 3 10\n4 1 10\n1 8 2\n4 8 2\n3 5 2\n5 6 6\n8 3 1\n2 9 8\n9 10 9\n10 2 6\n7 5 3\n7 8 10\n2 6 10\n4 11 10\n",
    "vertices": [
      3,
      4
    ],
    "answer": 34,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 13 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (7\u00d77):\n\n      1   2   3   4   5   6   7\n   ----------------------------\n 1 |  0   1   0   1   1   0   0 \n 2 |  1   0   1   1   0   0   1 \n 3 |  0   1   0   1   1   0   1 \n 4 |  1   1   1   0   0   1   1 \n 5 |  1   0   1   0   0   1   0 \n 6 |  0   0   0   1   1   0   1 \n 7 |  0   1   1   1   0   1   0 \n",
    "graph_output": "7 13\n1 2\n2 3\n2 4\n3 5\n4 7\n4 6\n1 5\n4 1\n7 2\n3 7\n3 4\n7 6\n5 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 644,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 61 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 9 and vertex 12.\n",
    "graph_output": "13 61\n1 3\n6 13\n7 6\n10 12\n5 11\n11 10\n5 1\n7 10\n12 11\n12 13\n3 12\n9 4\n4 12\n1 11\n6 8\n13 7\n2 3\n9 5\n11 6\n4 2\n5 13\n11 8\n8 1\n9 8\n1 9\n8 5\n2 6\n10 9\n7 4\n12 2\n9 11\n1 2\n1 4\n1 7\n13 1\n10 2\n9 13\n11 3\n13 11\n5 4\n9 2\n7 12\n4 8\n5 2\n6 9\n7 5\n7 8\n11 7\n7 2\n1 6\n12 5\n3 9\n10 1\n13 3\n4 13\n6 3\n3 4\n3 8\n2 11\n5 6\n9 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 134,
    "description_type": "natural"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 56 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 8 (weight=68), 11 (weight=50), 10 (weight=6), 3 (weight=89), 9 (weight=91), 4 (weight=71), 12 (weight=15), 7 (weight=37), 2 (weight=75), 6 (weight=33)\nVertex 2: 5 (weight=44), 3 (weight=24), 11 (weight=19), 8 (weight=90), 10 (weight=18), 6 (weight=16), 1 (weight=75), 7 (weight=77)\nVertex 3: 1 (weight=89), 2 (weight=24), 10 (weight=29), 4 (weight=32), 9 (weight=13), 7 (weight=57), 12 (weight=22), 6 (weight=33)\nVertex 4: 11 (weight=11), 5 (weight=60), 12 (weight=4), 1 (weight=71), 8 (weight=15), 6 (weight=41), 7 (weight=99), 3 (weight=32), 10 (weight=30)\nVertex 5: 4 (weight=60), 2 (weight=44), 8 (weight=95), 11 (weight=51), 9 (weight=91), 10 (weight=84), 7 (weight=23), 6 (weight=78)\nVertex 6: 9 (weight=22), 12 (weight=14), 10 (weight=37), 8 (weight=63), 7 (weight=65), 4 (weight=41), 2 (weight=16), 5 (weight=78), 1 (weight=33), 3 (weight=33)\nVertex 7: 8 (weight=30), 10 (weight=16), 12 (weight=48), 9 (weight=61), 6 (weight=65), 4 (weight=99), 1 (weight=37), 11 (weight=35), 3 (weight=57), 5 (weight=23), 2 (weight=77)\nVertex 8: 1 (weight=68), 7 (weight=30), 5 (weight=95), 9 (weight=54), 6 (weight=63), 4 (weight=15), 12 (weight=15), 11 (weight=13), 2 (weight=90), 10 (weight=46)\nVertex 9: 1 (weight=91), 6 (weight=22), 12 (weight=50), 8 (weight=54), 7 (weight=61), 5 (weight=91), 3 (weight=13), 10 (weight=54), 11 (weight=64)\nVertex 10: 1 (weight=6), 7 (weight=16), 12 (weight=77), 6 (weight=37), 11 (weight=80), 2 (weight=18), 5 (weight=84), 3 (weight=29), 8 (weight=46), 4 (weight=30), 9 (weight=54)\nVertex 11: 1 (weight=50), 4 (weight=11), 2 (weight=19), 10 (weight=80), 8 (weight=13), 5 (weight=51), 12 (weight=82), 7 (weight=35), 9 (weight=64)\nVertex 12: 6 (weight=14), 4 (weight=4), 10 (weight=77), 9 (weight=50), 7 (weight=48), 8 (weight=15), 1 (weight=15), 11 (weight=82), 3 (weight=22)\n",
    "graph_output": "12 56\n1 8 68\n1 11 50\n1 10 6\n11 4 11\n1 3 89\n4 5 60\n1 9 91\n9 6 22\n5 2 44\n8 7 30\n6 12 14\n8 5 95\n12 4 4\n2 3 24\n10 7 16\n12 10 77\n2 11 19\n9 12 50\n12 7 48\n10 6 37\n8 9 54\n4 1 71\n6 8 63\n8 4 15\n9 7 61\n6 7 65\n12 8 15\n11 10 80\n11 8 13\n5 11 51\n8 2 90\n1 12 15\n9 5 91\n2 10 18\n5 10 84\n10 3 29\n6 4 41\n8 10 46\n2 6 16\n12 11 82\n7 4 99\n3 4 32\n1 7 37\n10 4 30\n3 9 13\n11 7 35\n7 3 57\n2 1 75\n5 7 23\n3 12 22\n6 5 78\n2 7 77\n9 10 54\n6 1 33\n3 6 33\n11 9 64\n",
    "vertices": [
      null,
      null
    ],
    "answer": 155,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 61 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   0   1 \n 2 |  1   0   1   1   1   1   1   0   1   1   1   1   0 \n 3 |  1   1   0   1   0   1   0   1   1   0   1   1   1 \n 4 |  1   1   1   0   1   0   1   1   1   0   0   1   1 \n 5 |  1   1   0   1   0   1   1   1   1   0   1   1   1 \n 6 |  1   1   1   0   1   0   1   1   1   0   1   0   1 \n 7 |  1   1   0   1   1   1   0   1   0   1   1   1   1 \n 8 |  1   0   1   1   1   1   1   0   1   0   1   0   0 \n 9 |  1   1   1   1   1   1   0   1   0   1   1   1   1 \n10 |  1   1   0   0   0   0   1   0   1   0   1   1   0 \n11 |  1   1   1   0   1   1   1   1   1   1   0   1   1 \n12 |  0   1   1   1   1   0   1   0   1   1   1   0   1 \n13 |  1   0   1   1   1   1   1   0   1   0   1   1   0 \n",
    "graph_output": "13 61\n1 3\n6 13\n7 6\n10 12\n5 11\n11 10\n5 1\n7 10\n12 11\n12 13\n3 12\n9 4\n4 12\n1 11\n6 8\n13 7\n2 3\n9 5\n11 6\n4 2\n5 13\n11 8\n8 1\n9 8\n1 9\n8 5\n2 6\n10 9\n7 4\n12 2\n9 11\n1 2\n1 4\n1 7\n13 1\n10 2\n9 13\n11 3\n13 11\n5 4\n9 2\n7 12\n4 8\n5 2\n6 9\n7 5\n7 8\n11 7\n7 2\n1 6\n12 5\n3 9\n10 1\n13 3\n4 13\n6 3\n3 4\n3 8\n2 11\n5 6\n9 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 134,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 88 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0  12  43  54  26  24   0  35   0   0  41  46  72   0  46 \n 2 | 12   0   0  18  65  48  91  94  22  31   0   6  35  56  84 \n 3 | 43   0   0  89   9   0  70  80  93   0  42  14   0  57   2 \n 4 | 54  18  89   0  90  12  41  17  90   0   4  59  66  24  54 \n 5 | 26  65   9  90   0  90  45  42  85  88  62  65  59  28  78 \n 6 | 24  48   0  12  90   0  33  28  20   0   5  60  85 100   5 \n 7 |  0  91  70  41  45  33   0  43  61  57   7  60   9  39   6 \n 8 | 35  94  80  17  42  28  43   0  59  34  90   0   0   7  72 \n 9 |  0  22  93  90  85  20  61  59   0  23  66  81   0  39  43 \n10 |  0  31   0   0  88   0  57  34  23   0  30  55   0  48  53 \n11 | 41   0  42   4  62   5   7  90  66  30   0   7  93  60  17 \n12 | 46   6  14  59  65  60  60   0  81  55   7   0  48   0  49 \n13 | 72  35   0  66  59  85   9   0   0   0  93  48   0   0  25 \n14 |  0  56  57  24  28 100  39   7  39  48  60   0   0   0  26 \n15 | 46  84   2  54  78   5   6  72  43  53  17  49  25  26   0 \n",
    "graph_output": "15 88\n1 12 46\n12 7 60\n7 15 6\n15 9 43\n12 4 59\n12 10 55\n7 11 7\n15 14 26\n9 3 93\n14 8 7\n12 13 48\n11 5 62\n13 6 85\n15 2 84\n14 3 57\n3 1 43\n7 4 41\n3 5 9\n5 4 90\n12 6 60\n14 10 48\n4 2 18\n13 4 66\n15 4 54\n5 13 59\n7 2 91\n11 14 60\n8 3 80\n11 8 90\n12 2 6\n5 10 88\n11 6 5\n2 5 65\n3 7 70\n14 9 39\n11 1 41\n8 5 42\n9 12 81\n7 8 43\n4 8 17\n9 5 85\n11 15 17\n8 6 28\n1 13 72\n11 10 30\n4 3 89\n14 6 100\n6 4 12\n3 12 14\n8 1 35\n6 5 90\n11 12 7\n14 7 39\n10 15 53\n13 15 25\n15 3 2\n11 9 66\n5 1 26\n5 7 45\n10 2 31\n7 9 61\n10 9 23\n7 10 57\n13 7 9\n13 11 93\n5 14 28\n15 12 49\n2 13 35\n1 4 54\n6 2 48\n12 5 65\n6 7 33\n15 5 78\n9 2 22\n9 4 90\n2 14 56\n11 3 42\n1 6 24\n8 15 72\n4 11 4\n6 9 20\n8 10 34\n2 8 94\n1 15 46\n1 2 12\n9 8 59\n14 4 24\n15 6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 132,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 46 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   5  68   0  46  52  52   1  76  46  22 \n 2 |  0   0  57   0  19  75  52  36  28   0   0  12 \n 3 |  5  57   0  45   0   0   9   0   0  75   0  78 \n 4 | 68   0  45   0  58  24  49  91  30  64   0  32 \n 5 |  0  19   0  58   0  46  27  74  67  17   0  75 \n 6 | 46  75   0  24  46   0   0   0  27   0  59  84 \n 7 | 52  52   9  49  27   0   0  57  19  37  78  87 \n 8 | 52  36   0  91  74   0  57   0 100   0   8   0 \n 9 |  1  28   0  30  67  27  19 100   0   0  87  60 \n10 | 76   0  75  64  17   0  37   0   0   0   0   0 \n11 | 46   0   0   0   0  59  78   8  87   0   0  26 \n12 | 22  12  78  32  75  84  87   0  60   0  26   0 \n",
    "graph_output": "12 46\n1 3 5\n3 10 75\n1 12 22\n10 5 17\n10 4 64\n12 7 87\n12 6 84\n5 9 67\n12 2 12\n1 8 52\n9 11 87\n7 9 19\n8 5 74\n7 10 37\n12 5 75\n12 3 78\n5 6 46\n12 11 26\n4 12 32\n7 5 27\n5 2 19\n11 1 46\n8 7 57\n2 9 28\n4 6 24\n4 9 30\n8 9 100\n7 11 78\n8 2 36\n3 2 57\n4 8 91\n3 7 9\n8 11 8\n5 4 58\n1 9 1\n4 7 49\n7 1 52\n11 6 59\n1 6 46\n3 4 45\n2 6 75\n9 6 27\n1 10 76\n12 9 60\n1 4 68\n2 7 52\n",
    "vertices": [
      null,
      null
    ],
    "answer": 173,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 81 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   0   1   1   1   1   0   1   1   1   1   1   1 \n 2 |  1   0   0   1   1   1   1   1   0   1   1   1   1   1   0 \n 3 |  1   0   0   1   1   1   1   1   1   1   1   0   1   1   1 \n 4 |  0   1   1   0   1   1   0   1   1   1   0   0   1   1   1 \n 5 |  1   1   1   1   0   1   1   0   0   1   0   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   0   1   0   1   1   1   1   1 \n 7 |  1   1   1   0   1   1   0   1   1   1   1   1   1   0   1 \n 8 |  1   1   1   1   0   0   1   0   0   1   1   0   0   1   1 \n 9 |  0   0   1   1   0   1   1   0   0   1   0   1   1   1   1 \n10 |  1   1   1   1   1   0   1   1   1   0   0   1   1   1   1 \n11 |  1   1   1   0   0   1   1   1   0   0   0   1   0   1   0 \n12 |  1   1   0   0   1   1   1   0   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   1   1   0   1   1   0   1   0   0   0 \n14 |  1   1   1   1   1   1   0   1   1   1   1   1   0   0   1 \n15 |  1   0   1   1   1   1   1   1   1   1   0   1   0   1   0 \n",
    "graph_output": "15 81\n1 5\n5 12\n12 2\n5 4\n5 3\n3 14\n14 9\n1 13\n5 15\n1 8\n9 7\n14 11\n5 6\n12 10\n3 4\n12 14\n4 9\n15 1\n14 15\n1 12\n6 7\n8 10\n6 2\n10 5\n15 3\n2 13\n9 3\n14 4\n7 11\n3 13\n6 4\n5 2\n15 8\n13 6\n5 13\n2 10\n15 7\n3 6\n2 14\n12 6\n11 12\n13 10\n12 9\n1 2\n11 1\n10 9\n4 8\n11 6\n11 2\n2 7\n15 10\n7 10\n4 15\n6 15\n13 7\n10 1\n11 8\n10 3\n1 6\n8 7\n10 14\n14 5\n8 14\n13 12\n15 9\n4 13\n6 14\n1 7\n11 3\n10 4\n9 13\n3 1\n8 2\n14 1\n7 12\n5 7\n2 4\n3 7\n9 6\n15 12\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 21 and 2 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 30 vertices and 29 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 1 and vertex 18.\nThere is an edge between vertex 14 and vertex 20.\nThere is an edge between vertex 14 and vertex 26.\nThere is an edge between vertex 18 and vertex 30.\nThere is an edge between vertex 30 and vertex 29.\nThere is an edge between vertex 20 and vertex 22.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 7 and vertex 24.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 5 and vertex 23.\nThere is an edge between vertex 2 and vertex 19.\nThere is an edge between vertex 19 and vertex 15.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 2 and vertex 25.\nThere is an edge between vertex 22 and vertex 4.\nThere is an edge between vertex 29 and vertex 3.\nThere is an edge between vertex 3 and vertex 21.\nThere is an edge between vertex 5 and vertex 27.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 8 and vertex 17.\nThere is an edge between vertex 20 and vertex 11.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 23 and vertex 28.\n",
    "graph_output": "30 29\n1 14\n14 5\n5 7\n1 18\n14 20\n14 26\n18 30\n30 29\n20 22\n5 2\n2 10\n7 24\n7 6\n5 23\n2 19\n19 15\n1 12\n1 9\n2 25\n22 4\n29 3\n3 21\n5 27\n10 8\n14 13\n8 17\n20 11\n12 16\n23 28\n",
    "vertices": [
      21,
      2
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 15 vertices and 16 edges\n\nEdges (Format: Node Node):\n1 10\n10 7\n7 4\n7 2\n10 14\n7 3\n4 15\n14 12\n7 9\n9 8\n7 5\n7 13\n8 6\n9 11\n15 13\n11 15\n",
    "graph_output": "15 16\n1 10\n10 7\n7 4\n7 2\n10 14\n7 3\n4 15\n14 12\n7 9\n9 8\n7 5\n7 13\n8 6\n9 11\n15 13\n11 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 15 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 92 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 2 (weight=90), 12 (weight=18), 13 (weight=81), 3 (weight=14), 15 (weight=53), 7 (weight=18), 4 (weight=82), 9 (weight=70), 14 (weight=46), 10 (weight=62), 11 (weight=7), 8 (weight=73)\nVertex 2: 1 (weight=90), 8 (weight=11), 10 (weight=13), 5 (weight=74), 4 (weight=82), 14 (weight=88), 3 (weight=3), 7 (weight=96), 11 (weight=56), 13 (weight=48), 12 (weight=58), 6 (weight=23), 9 (weight=63)\nVertex 3: 13 (weight=93), 15 (weight=89), 1 (weight=14), 12 (weight=49), 10 (weight=57), 2 (weight=3), 14 (weight=79), 7 (weight=92), 4 (weight=91), 11 (weight=100), 8 (weight=30), 6 (weight=58)\nVertex 4: 2 (weight=82), 9 (weight=50), 6 (weight=12), 8 (weight=16), 12 (weight=47), 11 (weight=33), 7 (weight=50), 14 (weight=71), 1 (weight=82), 15 (weight=6), 3 (weight=91), 13 (weight=25)\nVertex 5: 2 (weight=74), 9 (weight=61), 8 (weight=30), 13 (weight=45), 10 (weight=86), 15 (weight=61), 6 (weight=46), 14 (weight=76), 7 (weight=54), 12 (weight=33), 11 (weight=6)\nVertex 6: 8 (weight=20), 4 (weight=12), 5 (weight=46), 10 (weight=24), 14 (weight=42), 7 (weight=17), 13 (weight=9), 2 (weight=23), 11 (weight=81), 15 (weight=9), 3 (weight=58)\nVertex 7: 11 (weight=100), 15 (weight=74), 10 (weight=28), 4 (weight=50), 2 (weight=96), 1 (weight=18), 3 (weight=92), 5 (weight=54), 12 (weight=30), 6 (weight=17), 9 (weight=30), 14 (weight=86), 8 (weight=73), 13 (weight=34)\nVertex 8: 2 (weight=11), 15 (weight=13), 6 (weight=20), 5 (weight=30), 12 (weight=49), 4 (weight=16), 10 (weight=14), 11 (weight=65), 9 (weight=28), 7 (weight=73), 3 (weight=30), 1 (weight=73)\nVertex 9: 5 (weight=61), 4 (weight=50), 14 (weight=63), 15 (weight=51), 11 (weight=99), 1 (weight=70), 8 (weight=28), 13 (weight=17), 10 (weight=90), 7 (weight=30), 12 (weight=60), 2 (weight=63)\nVertex 10: 2 (weight=13), 13 (weight=77), 11 (weight=3), 5 (weight=86), 7 (weight=28), 6 (weight=24), 8 (weight=14), 3 (weight=57), 1 (weight=62), 14 (weight=92), 15 (weight=13), 9 (weight=90), 12 (weight=55)\nVertex 11: 10 (weight=3), 7 (weight=100), 9 (weight=99), 4 (weight=33), 13 (weight=84), 14 (weight=17), 2 (weight=56), 8 (weight=65), 1 (weight=7), 5 (weight=6), 3 (weight=100), 6 (weight=81)\nVertex 12: 15 (weight=22), 8 (weight=49), 1 (weight=18), 4 (weight=47), 3 (weight=49), 7 (weight=30), 5 (weight=33), 2 (weight=58), 13 (weight=64), 10 (weight=55), 9 (weight=60), 14 (weight=96)\nVertex 13: 10 (weight=77), 3 (weight=93), 14 (weight=42), 5 (weight=45), 11 (weight=84), 1 (weight=81), 2 (weight=48), 9 (weight=17), 6 (weight=9), 12 (weight=64), 4 (weight=25), 15 (weight=27), 7 (weight=34)\nVertex 14: 13 (weight=42), 9 (weight=63), 5 (weight=76), 2 (weight=88), 4 (weight=71), 11 (weight=17), 3 (weight=79), 1 (weight=46), 6 (weight=42), 10 (weight=92), 7 (weight=86), 15 (weight=78), 12 (weight=96)\nVertex 15: 8 (weight=13), 12 (weight=22), 7 (weight=74), 3 (weight=89), 9 (weight=51), 5 (weight=61), 1 (weight=53), 4 (weight=6), 10 (weight=13), 14 (weight=78), 6 (weight=9), 13 (weight=27)\n",
    "graph_output": "15 92\n1 2 90\n2 8 11\n2 10 13\n10 13 77\n8 15 13\n10 11 3\n11 7 100\n2 5 74\n2 4 82\n8 6 20\n13 3 93\n5 9 61\n13 14 42\n15 12 22\n5 8 30\n13 5 45\n7 15 74\n5 10 86\n4 9 50\n8 12 49\n6 4 12\n14 9 63\n15 3 89\n15 9 51\n15 5 61\n9 11 99\n1 12 18\n8 4 16\n10 7 28\n12 4 47\n11 4 33\n7 4 50\n6 5 46\n14 5 76\n2 14 88\n13 11 84\n1 13 81\n6 10 24\n14 4 71\n1 3 14\n1 15 53\n10 8 14\n3 12 49\n10 3 57\n2 3 3\n2 7 96\n11 14 17\n2 11 56\n1 7 18\n1 4 82\n14 3 79\n9 1 70\n1 14 46\n3 7 92\n5 7 54\n10 1 62\n6 14 42\n8 11 65\n7 12 30\n7 6 17\n14 10 92\n12 5 33\n13 2 48\n9 8 28\n1 11 7\n15 4 6\n15 10 13\n9 13 17\n13 6 9\n3 4 91\n12 2 58\n11 5 6\n9 10 90\n6 2 23\n11 3 100\n13 12 64\n9 7 30\n13 4 25\n12 10 55\n7 14 86\n15 14 78\n9 12 60\n14 12 96\n8 7 73\n2 9 63\n8 3 30\n11 6 81\n8 1 73\n6 15 9\n13 15 27\n13 7 34\n3 6 58\n",
    "vertices": [
      8,
      15
    ],
    "answer": 13,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 111 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   0   1   0   1   1   0   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   0   1   0   1   0   1   0   1   1   0   1 \n 5 |  1   1   0   1   0   1   1   0   1   1   1   1   1   1   0   1   1 \n 6 |  1   1   1   1   1   0   1   0   1   1   1   1   1   0   1   0   1 \n 7 |  1   1   0   0   1   1   0   1   0   1   1   1   1   1   1   1   0 \n 8 |  1   1   1   1   0   0   1   0   1   1   0   0   1   1   1   1   0 \n 9 |  1   1   1   0   1   1   0   1   0   1   1   1   1   1   1   1   1 \n10 |  1   1   0   1   1   1   1   1   1   0   1   1   0   1   1   1   0 \n11 |  1   1   1   0   1   1   1   0   1   1   0   1   1   1   1   0   1 \n12 |  1   1   1   1   1   1   1   0   1   1   1   0   0   0   1   1   1 \n13 |  0   1   1   0   1   1   1   1   1   0   1   0   0   0   1   1   1 \n14 |  1   1   1   1   1   0   1   1   1   1   1   0   0   0   1   1   1 \n15 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   0   1   1 \n16 |  1   1   1   0   1   0   1   1   1   1   0   1   1   1   1   0   1 \n17 |  1   1   1   1   1   1   0   0   1   0   1   1   1   1   1   1   0 \n",
    "graph_output": "17 111\n1 15\n1 2\n2 14\n15 4\n2 5\n2 13\n5 6\n5 16\n5 10\n15 9\n2 17\n14 8\n1 11\n1 3\n16 12\n16 7\n2 4\n14 16\n10 4\n6 17\n1 9\n2 11\n6 12\n4 8\n11 14\n7 8\n17 15\n6 15\n13 6\n6 2\n12 1\n10 8\n6 4\n13 5\n9 16\n6 10\n11 12\n9 8\n12 7\n14 3\n9 3\n6 11\n16 3\n5 17\n5 11\n3 6\n1 4\n3 8\n4 14\n11 9\n16 8\n11 10\n1 8\n2 8\n10 7\n14 10\n9 13\n15 8\n12 15\n10 12\n1 5\n12 5\n12 17\n17 11\n10 15\n7 11\n3 2\n16 13\n15 2\n3 17\n16 1\n9 14\n2 12\n7 2\n16 10\n1 6\n17 16\n14 1\n15 14\n7 15\n13 11\n11 15\n14 7\n10 2\n7 6\n2 9\n3 13\n12 4\n9 6\n17 4\n14 17\n8 13\n2 16\n14 5\n9 12\n9 17\n15 13\n12 3\n10 9\n3 4\n5 4\n7 13\n17 13\n10 1\n1 7\n11 3\n16 15\n7 5\n3 15\n5 9\n17 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 14 vertices and 18 edges\n\nEdges (Format: Node Node Weight):\n1 3 65\n3 10 91\n3 9 27\n1 12 38\n1 11 53\n11 4 31\n1 5 77\n11 14 7\n5 7 46\n1 6 70\n5 2 71\n11 8 88\n6 13 58\n7 8 16\n4 5 52\n8 9 3\n14 12 83\n3 5 29\n",
    "graph_output": "14 18\n1 3 65\n3 10 91\n3 9 27\n1 12 38\n1 11 53\n11 4 31\n1 5 77\n11 14 7\n5 7 46\n1 6 70\n5 2 71\n11 8 88\n6 13 58\n7 8 16\n4 5 52\n8 9 3\n14 12 83\n3 5 29\n",
    "vertices": [
      null,
      null
    ],
    "answer": 546,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 99 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 7 and vertex 6.\n",
    "graph_output": "15 99\n1 13\n1 4\n4 2\n2 6\n1 8\n1 3\n3 11\n3 7\n1 12\n6 15\n13 10\n6 14\n14 9\n10 5\n2 5\n10 4\n15 4\n15 7\n3 4\n11 8\n12 2\n10 9\n6 11\n6 13\n14 1\n5 1\n5 8\n11 7\n14 5\n6 5\n7 10\n6 8\n10 8\n14 15\n11 14\n4 7\n7 1\n10 11\n3 5\n7 9\n13 2\n5 12\n2 9\n9 6\n15 10\n14 3\n3 13\n3 12\n2 3\n14 8\n15 5\n10 3\n12 8\n15 3\n2 1\n9 5\n3 8\n14 4\n14 7\n1 10\n1 9\n2 14\n14 13\n14 12\n9 3\n11 13\n10 12\n12 9\n7 2\n7 13\n15 1\n5 4\n10 6\n12 4\n10 14\n15 12\n9 4\n13 9\n9 15\n12 11\n5 11\n7 8\n2 10\n1 11\n11 9\n13 5\n15 13\n2 11\n7 12\n5 7\n8 2\n11 15\n13 4\n11 4\n9 8\n6 4\n6 12\n1 6\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 103 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   9  58  59  33  38  36 100  57  43  87  61  85  28  70 \n 2 |  9   0   2  37 100  82   2  45   9  58  68  29  35  92  50 \n 3 | 58   2   0  80  17  64  41  85  34  19  49  19  28  67   0 \n 4 | 59  37  80   0  66  13  25   5  84  74  32  44  83  85   3 \n 5 | 33 100  17  66   0  40  85  33  42  90  26  21  32  92  37 \n 6 | 38  82  64  13  40   0  21  68  93  26  74  10  13  50  58 \n 7 | 36   2  41  25  85  21   0  34  89  53  64  96  30  58  61 \n 8 |100  45  85   5  33  68  34   0  16  39  53  43  94  50   0 \n 9 | 57   9  34  84  42  93  89  16   0  31   9  67  21  42  90 \n10 | 43  58  19  74  90  26  53  39  31   0  46  99  30   8  15 \n11 | 87  68  49  32  26  74  64  53   9  46   0  18  18  52   8 \n12 | 61  29  19  44  21  10  96  43  67  99  18   0  60   8  47 \n13 | 85  35  28  83  32  13  30  94  21  30  18  60   0  93  21 \n14 | 28  92  67  85  92  50  58  50  42   8  52   8  93   0  15 \n15 | 70  50   0   3  37  58  61   0  90  15   8  47  21  15   0 \n",
    "graph_output": "15 103\n1 10 43\n10 5 90\n1 7 36\n1 6 38\n10 9 31\n10 13 30\n5 8 33\n9 4 84\n1 15 70\n10 11 46\n6 14 50\n14 2 92\n1 3 58\n8 12 43\n9 3 34\n6 3 64\n7 4 25\n10 6 26\n4 8 5\n9 1 57\n14 7 58\n9 2 9\n1 13 85\n15 2 50\n6 13 13\n9 7 89\n3 14 67\n14 12 8\n10 14 8\n12 4 44\n15 4 3\n10 12 99\n5 6 40\n9 6 93\n12 6 10\n3 13 28\n1 12 61\n2 1 9\n7 8 34\n8 9 16\n7 6 21\n3 4 80\n12 13 60\n13 11 18\n2 8 45\n9 15 90\n4 1 59\n14 1 28\n3 5 17\n8 3 85\n10 2 58\n15 13 21\n4 13 83\n8 1 100\n11 2 68\n5 4 66\n6 8 68\n4 14 85\n12 5 21\n7 3 41\n5 15 37\n7 11 64\n9 14 42\n8 11 53\n12 15 47\n11 12 18\n5 2 100\n7 2 2\n13 8 94\n11 9 9\n6 4 13\n13 9 21\n3 12 19\n1 11 87\n1 5 33\n2 3 2\n4 11 32\n10 3 19\n7 15 61\n11 6 74\n12 7 96\n11 14 52\n5 9 42\n14 13 93\n13 5 32\n11 5 26\n5 7 85\n5 14 92\n13 2 35\n15 6 58\n8 10 39\n10 7 53\n15 11 8\n12 2 29\n15 14 15\n2 4 37\n4 10 74\n15 10 15\n6 2 82\n12 9 67\n13 7 30\n3 11 49\n8 14 50\n",
    "vertices": [
      null,
      null
    ],
    "answer": 116,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 8 (source) to vertex 6 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 10 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8 with a weight of 29 and a capacity of 5.\nThere is an edge between vertex 8 and vertex 10 with a weight of 97 and a capacity of 5.\nThere is an edge between vertex 8 and vertex 9 with a weight of 35 and a capacity of 5.\nThere is an edge between vertex 10 and vertex 4 with a weight of 9 and a capacity of 10.\nThere is an edge between vertex 4 and vertex 7 with a weight of 16 and a capacity of 5.\nThere is an edge between vertex 4 and vertex 5 with a weight of 74 and a capacity of 5.\nThere is an edge between vertex 9 and vertex 3 with a weight of 7 and a capacity of 6.\nThere is an edge between vertex 4 and vertex 2 with a weight of 53 and a capacity of 4.\nThere is an edge between vertex 10 and vertex 6 with a weight of 6 and a capacity of 7.\nThere is an edge between vertex 6 and vertex 8 with a weight of 34 and a capacity of 9.\n",
    "graph_output": "10 10\n1 8 29 5\n8 10 97 5\n8 9 35 5\n10 4 9 10\n4 7 16 5\n4 5 74 5\n9 3 7 6\n4 2 53 4\n10 6 6 7\n6 8 34 9\n",
    "vertices": [
      8,
      6
    ],
    "answer": 821,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 112 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 17 and vertex 1.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 17 and vertex 3.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 17 and vertex 11.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 2 and vertex 17.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 7 and vertex 17.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 17 and vertex 6.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 9 and vertex 17.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 17 and vertex 16.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 8 and vertex 17.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 2 and vertex 7.\n",
    "graph_output": "17 112\n1 2\n2 6\n6 14\n2 8\n6 3\n2 10\n1 7\n1 9\n14 17\n9 4\n14 16\n1 11\n8 15\n17 5\n2 12\n7 13\n7 9\n2 4\n17 1\n9 6\n4 15\n14 7\n9 12\n5 1\n15 11\n15 10\n14 2\n8 14\n16 5\n13 9\n9 10\n11 4\n1 6\n8 7\n14 11\n7 4\n14 4\n11 2\n7 15\n13 4\n16 12\n4 17\n11 13\n13 3\n1 3\n6 7\n14 12\n3 12\n14 13\n2 3\n15 9\n15 17\n15 1\n6 11\n15 5\n12 10\n10 6\n5 11\n3 7\n14 15\n14 1\n10 8\n16 11\n8 1\n17 3\n13 5\n11 12\n16 6\n12 5\n11 7\n16 3\n11 3\n17 11\n1 12\n13 6\n2 17\n12 4\n16 15\n7 17\n14 5\n17 6\n3 9\n9 5\n16 7\n3 15\n8 13\n16 2\n13 10\n4 6\n16 9\n13 2\n12 17\n8 16\n10 14\n10 1\n4 3\n13 15\n5 2\n4 8\n16 4\n10 11\n9 17\n5 8\n15 12\n7 10\n17 16\n14 3\n2 9\n8 17\n12 7\n10 16\n2 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 93 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   0   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   0   1   1   1   1   0   1   1   1   1   1   0   1   1 \n 3 |  0   0   0   1   1   0   0   0   1   1   0   0   1   1   1   0 \n 4 |  1   1   1   0   1   1   0   0   1   1   1   1   0   1   1   0 \n 5 |  0   1   1   1   0   1   1   1   1   1   1   0   1   1   0   1 \n 6 |  1   1   0   1   1   0   1   0   1   1   1   1   0   1   1   0 \n 7 |  1   1   0   0   1   1   0   0   1   1   1   0   1   1   1   0 \n 8 |  1   0   0   0   1   0   0   0   1   1   0   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   0   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   0   0   1   1   1   0   1   1 \n11 |  1   1   0   1   1   1   1   0   1   1   0   1   1   1   1   1 \n12 |  1   1   0   1   0   1   0   1   1   1   1   0   1   1   1   0 \n13 |  1   1   1   0   1   0   1   1   1   1   1   1   0   1   1   1 \n14 |  1   0   1   1   1   1   1   1   1   0   1   1   1   0   1   1 \n15 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   0   1 \n16 |  1   1   0   0   1   0   0   1   1   1   1   0   1   1   1   0 \n",
    "graph_output": "16 93\n6 14\n16 13\n1 6\n10 1\n7 6\n15 10\n13 14\n16 2\n6 2\n5 7\n10 12\n9 2\n8 1\n16 10\n8 10\n12 8\n4 9\n5 14\n11 15\n16 11\n11 14\n9 5\n13 8\n14 3\n13 11\n6 11\n10 5\n3 10\n10 11\n15 13\n2 13\n9 3\n5 13\n12 2\n14 9\n1 9\n2 10\n7 1\n15 1\n6 9\n3 15\n7 14\n9 8\n11 5\n15 8\n8 5\n8 14\n15 2\n16 8\n7 9\n13 12\n1 12\n6 10\n5 4\n12 6\n5 16\n7 13\n4 6\n14 12\n15 6\n4 2\n15 7\n13 3\n2 5\n13 10\n16 9\n4 3\n3 5\n9 12\n11 4\n11 12\n11 9\n11 7\n15 9\n11 1\n14 16\n14 15\n4 15\n13 1\n13 9\n11 2\n1 4\n14 1\n15 16\n2 1\n6 5\n7 2\n15 12\n16 1\n10 7\n10 4\n4 14\n12 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 8 (source) to vertex 2 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 36 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9 with a weight of 47 and a capacity of 1.\nThere is an edge between vertex 1 and vertex 6 with a weight of 99 and a capacity of 8.\nThere is an edge between vertex 9 and vertex 2 with a weight of 93 and a capacity of 7.\nThere is an edge between vertex 6 and vertex 8 with a weight of 82 and a capacity of 2.\nThere is an edge between vertex 9 and vertex 7 with a weight of 54 and a capacity of 8.\nThere is an edge between vertex 9 and vertex 5 with a weight of 47 and a capacity of 5.\nThere is an edge between vertex 7 and vertex 3 with a weight of 85 and a capacity of 6.\nThere is an edge between vertex 6 and vertex 4 with a weight of 8 and a capacity of 6.\nThere is an edge between vertex 6 and vertex 5 with a weight of 63 and a capacity of 7.\nThere is an edge between vertex 8 and vertex 9 with a weight of 70 and a capacity of 5.\nThere is an edge between vertex 2 and vertex 5 with a weight of 47 and a capacity of 4.\nThere is an edge between vertex 2 and vertex 1 with a weight of 22 and a capacity of 10.\nThere is an edge between vertex 2 and vertex 8 with a weight of 78 and a capacity of 7.\nThere is an edge between vertex 7 and vertex 1 with a weight of 23 and a capacity of 7.\nThere is an edge between vertex 7 and vertex 5 with a weight of 11 and a capacity of 4.\nThere is an edge between vertex 5 and vertex 4 with a weight of 21 and a capacity of 1.\nThere is an edge between vertex 5 and vertex 8 with a weight of 86 and a capacity of 3.\nThere is an edge between vertex 3 and vertex 9 with a weight of 80 and a capacity of 7.\nThere is an edge between vertex 6 and vertex 3 with a weight of 18 and a capacity of 1.\nThere is an edge between vertex 6 and vertex 2 with a weight of 3 and a capacity of 8.\nThere is an edge between vertex 2 and vertex 7 with a weight of 37 and a capacity of 8.\nThere is an edge between vertex 4 and vertex 7 with a weight of 66 and a capacity of 8.\nThere is an edge between vertex 3 and vertex 4 with a weight of 73 and a capacity of 10.\nThere is an edge between vertex 3 and vertex 1 with a weight of 67 and a capacity of 8.\nThere is an edge between vertex 3 and vertex 2 with a weight of 100 and a capacity of 7.\nThere is an edge between vertex 5 and vertex 1 with a weight of 80 and a capacity of 5.\nThere is an edge between vertex 8 and vertex 7 with a weight of 9 and a capacity of 5.\nThere is an edge between vertex 5 and vertex 3 with a weight of 99 and a capacity of 4.\nThere is an edge between vertex 1 and vertex 4 with a weight of 84 and a capacity of 3.\nThere is an edge between vertex 8 and vertex 4 with a weight of 26 and a capacity of 8.\nThere is an edge between vertex 3 and vertex 8 with a weight of 23 and a capacity of 3.\nThere is an edge between vertex 8 and vertex 1 with a weight of 62 and a capacity of 3.\nThere is an edge between vertex 6 and vertex 7 with a weight of 74 and a capacity of 1.\nThere is an edge between vertex 4 and vertex 9 with a weight of 91 and a capacity of 2.\nThere is an edge between vertex 2 and vertex 4 with a weight of 61 and a capacity of 6.\nThere is an edge between vertex 9 and vertex 6 with a weight of 51 and a capacity of 4.\n",
    "graph_output": "9 36\n1 9 47 1\n1 6 99 8\n9 2 93 7\n6 8 82 2\n9 7 54 8\n9 5 47 5\n7 3 85 6\n6 4 8 6\n6 5 63 7\n8 9 70 5\n2 5 47 4\n2 1 22 10\n2 8 78 7\n7 1 23 7\n7 5 11 4\n5 4 21 1\n5 8 86 3\n3 9 80 7\n6 3 18 1\n6 2 3 8\n2 7 37 8\n4 7 66 8\n3 4 73 10\n3 1 67 8\n3 2 100 7\n5 1 80 5\n8 7 9 5\n5 3 99 4\n1 4 84 3\n8 4 26 8\n3 8 23 3\n8 1 62 3\n6 7 74 1\n4 9 91 2\n2 4 61 6\n9 6 51 4\n",
    "vertices": [
      8,
      2
    ],
    "answer": 3096,
    "description_type": "natural"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 65 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7 with a weight of 99.\nThere is an edge between vertex 1 and vertex 6 with a weight of 26.\nThere is an edge between vertex 6 and vertex 10 with a weight of 99.\nThere is an edge between vertex 6 and vertex 3 with a weight of 62.\nThere is an edge between vertex 3 and vertex 4 with a weight of 36.\nThere is an edge between vertex 6 and vertex 12 with a weight of 79.\nThere is an edge between vertex 12 and vertex 9 with a weight of 8.\nThere is an edge between vertex 7 and vertex 11 with a weight of 57.\nThere is an edge between vertex 9 and vertex 5 with a weight of 72.\nThere is an edge between vertex 9 and vertex 8 with a weight of 50.\nThere is an edge between vertex 6 and vertex 2 with a weight of 57.\nThere is an edge between vertex 3 and vertex 9 with a weight of 28.\nThere is an edge between vertex 12 and vertex 8 with a weight of 88.\nThere is an edge between vertex 5 and vertex 7 with a weight of 8.\nThere is an edge between vertex 1 and vertex 9 with a weight of 5.\nThere is an edge between vertex 7 and vertex 10 with a weight of 52.\nThere is an edge between vertex 1 and vertex 4 with a weight of 32.\nThere is an edge between vertex 5 and vertex 2 with a weight of 94.\nThere is an edge between vertex 9 and vertex 2 with a weight of 84.\nThere is an edge between vertex 7 and vertex 3 with a weight of 26.\nThere is an edge between vertex 8 and vertex 11 with a weight of 55.\nThere is an edge between vertex 2 and vertex 7 with a weight of 44.\nThere is an edge between vertex 1 and vertex 5 with a weight of 69.\nThere is an edge between vertex 11 and vertex 9 with a weight of 43.\nThere is an edge between vertex 6 and vertex 5 with a weight of 45.\nThere is an edge between vertex 12 and vertex 3 with a weight of 100.\nThere is an edge between vertex 4 and vertex 12 with a weight of 49.\nThere is an edge between vertex 11 and vertex 1 with a weight of 76.\nThere is an edge between vertex 2 and vertex 1 with a weight of 45.\nThere is an edge between vertex 4 and vertex 11 with a weight of 51.\nThere is an edge between vertex 4 and vertex 5 with a weight of 61.\nThere is an edge between vertex 2 and vertex 3 with a weight of 80.\nThere is an edge between vertex 3 and vertex 11 with a weight of 95.\nThere is an edge between vertex 11 and vertex 12 with a weight of 72.\nThere is an edge between vertex 6 and vertex 4 with a weight of 31.\nThere is an edge between vertex 4 and vertex 9 with a weight of 79.\nThere is an edge between vertex 6 and vertex 7 with a weight of 38.\nThere is an edge between vertex 8 and vertex 1 with a weight of 32.\nThere is an edge between vertex 8 and vertex 3 with a weight of 86.\nThere is an edge between vertex 7 and vertex 4 with a weight of 44.\nThere is an edge between vertex 4 and vertex 10 with a weight of 38.\nThere is an edge between vertex 6 and vertex 8 with a weight of 40.\nThere is an edge between vertex 10 and vertex 11 with a weight of 68.\nThere is an edge between vertex 8 and vertex 10 with a weight of 100.\nThere is an edge between vertex 2 and vertex 10 with a weight of 9.\nThere is an edge between vertex 5 and vertex 12 with a weight of 25.\nThere is an edge between vertex 1 and vertex 10 with a weight of 80.\nThere is an edge between vertex 8 and vertex 4 with a weight of 15.\nThere is an edge between vertex 6 and vertex 9 with a weight of 71.\nThere is an edge between vertex 5 and vertex 8 with a weight of 62.\nThere is an edge between vertex 12 and vertex 7 with a weight of 48.\nThere is an edge between vertex 4 and vertex 2 with a weight of 59.\nThere is an edge between vertex 8 and vertex 7 with a weight of 29.\nThere is an edge between vertex 10 and vertex 3 with a weight of 52.\nThere is an edge between vertex 1 and vertex 12 with a weight of 86.\nThere is an edge between vertex 5 and vertex 11 with a weight of 21.\nThere is an edge between vertex 7 and vertex 9 with a weight of 70.\nThere is an edge between vertex 2 and vertex 12 with a weight of 73.\nThere is an edge between vertex 10 and vertex 5 with a weight of 86.\nThere is an edge between vertex 3 and vertex 1 with a weight of 43.\nThere is an edge between vertex 10 and vertex 12 with a weight of 59.\nThere is an edge between vertex 9 and vertex 10 with a weight of 59.\nThere is an edge between vertex 5 and vertex 3 with a weight of 43.\nThere is an edge between vertex 8 and vertex 2 with a weight of 30.\nThere is an edge between vertex 6 and vertex 11 with a weight of 59.\n",
    "graph_output": "12 65\n1 7 99\n1 6 26\n6 10 99\n6 3 62\n3 4 36\n6 12 79\n12 9 8\n7 11 57\n9 5 72\n9 8 50\n6 2 57\n3 9 28\n12 8 88\n5 7 8\n1 9 5\n7 10 52\n1 4 32\n5 2 94\n9 2 84\n7 3 26\n8 11 55\n2 7 44\n1 5 69\n11 9 43\n6 5 45\n12 3 100\n4 12 49\n11 1 76\n2 1 45\n4 11 51\n4 5 61\n2 3 80\n3 11 95\n11 12 72\n6 4 31\n4 9 79\n6 7 38\n8 1 32\n8 3 86\n7 4 44\n4 10 38\n6 8 40\n10 11 68\n8 10 100\n2 10 9\n5 12 25\n1 10 80\n8 4 15\n6 9 71\n5 8 62\n12 7 48\n4 2 59\n8 7 29\n10 3 52\n1 12 86\n5 11 21\n7 9 70\n2 12 73\n10 5 86\n3 1 43\n10 12 59\n9 10 59\n5 3 43\n8 2 30\n6 11 59\n",
    "vertices": [
      null,
      null
    ],
    "answer": 204,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 87 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   0   1   1   1   1   0   1   0   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   0   1   0   1   1   1   1   1   1   1   0 \n 4 |  1   1   1   0   1   1   0   1   1   1   1   1   1   1   1 \n 5 |  1   1   0   1   0   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   0   1   1   1   1   0   1   0   0 \n 7 |  0   1   0   0   1   0   0   0   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   0   0   0   1   1   1   1   1   0 \n 9 |  1   1   1   1   1   1   1   0   0   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   0   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   0   1   1 \n12 |  0   1   1   1   1   0   1   1   1   1   1   0   1   0   1 \n13 |  1   1   1   1   1   1   1   1   1   0   0   1   0   1   1 \n14 |  0   1   1   1   1   0   1   1   1   1   1   0   1   0   0 \n15 |  1   1   0   1   1   0   1   0   1   1   1   1   1   0   0 \n",
    "graph_output": "15 87\n1 15\n15 10\n1 9\n10 3\n15 5\n10 6\n9 2\n10 12\n9 14\n2 7\n1 4\n6 11\n15 13\n13 8\n14 10\n3 1\n10 4\n5 13\n12 15\n9 4\n12 13\n4 11\n1 10\n9 12\n9 5\n4 2\n8 2\n5 14\n9 10\n9 6\n11 9\n5 12\n1 11\n5 1\n10 11\n4 12\n4 8\n14 4\n6 13\n10 7\n2 6\n3 2\n8 12\n3 8\n14 7\n6 8\n14 2\n7 12\n15 9\n14 13\n8 10\n12 2\n3 12\n6 1\n11 8\n13 2\n11 14\n2 5\n13 9\n13 3\n15 4\n6 4\n9 7\n5 8\n2 11\n7 13\n5 11\n9 3\n10 5\n7 5\n11 15\n1 13\n11 3\n8 1\n4 13\n4 5\n11 12\n2 15\n8 14\n14 3\n7 15\n7 11\n2 1\n3 6\n2 10\n6 5\n3 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 24 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   0   1   0   1   1   0   1   1   1   0 \n 2 |  0   0   1   0   0   0   0   1   0   0   0   0   0 \n 3 |  0   1   0   0   0   1   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   1   1   0   1   0   1   1   0 \n 5 |  1   0   0   0   0   0   0   0   0   1   0   1   0 \n 6 |  0   0   1   1   0   0   0   0   0   0   0   0   0 \n 7 |  1   0   0   1   0   0   0   0   0   1   0   0   0 \n 8 |  1   1   0   0   0   0   0   0   1   0   0   1   1 \n 9 |  0   0   0   1   0   0   0   1   0   0   0   0   1 \n10 |  1   0   0   0   1   0   1   0   0   0   1   0   0 \n11 |  1   0   0   1   0   0   0   0   0   1   0   1   1 \n12 |  1   0   0   1   1   0   0   1   0   0   1   0   0 \n13 |  0   0   0   0   0   0   0   1   1   0   1   0   0 \n",
    "graph_output": "13 24\n3 6\n9 4\n9 13\n11 10\n10 1\n13 11\n12 8\n8 9\n5 10\n10 7\n11 1\n4 6\n4 11\n1 12\n3 2\n5 1\n2 8\n1 7\n12 5\n4 7\n8 13\n1 8\n11 12\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 11 and vertex 9 are connected.\n\nThis is an undirected graph with 15 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   0   0   0   0   0   0   1   0   1   0   1   0   0 \n 2 |  1   0   0   1   1   0   0   1   0   0   0   0   0   1   1 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   1   1   0 \n 4 |  0   1   0   0   1   0   0   0   0   0   0   0   0   1   0 \n 5 |  0   1   0   1   0   0   0   1   0   1   0   0   0   1   1 \n 6 |  0   0   0   0   0   0   0   0   0   1   1   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   1   0   0   1   0   0   0   1   0   1   0   1   1   0 \n 9 |  1   0   0   0   0   0   0   1   0   0   0   1   0   0   0 \n10 |  0   0   0   0   1   1   0   0   0   0   0   1   1   0   0 \n11 |  1   0   0   0   0   1   0   1   0   0   0   0   0   1   1 \n12 |  0   0   0   0   0   0   0   0   1   1   0   0   0   1   0 \n13 |  1   0   1   0   0   0   0   1   0   1   0   0   0   1   0 \n14 |  0   1   1   1   1   0   0   1   0   0   1   1   1   0   0 \n15 |  0   1   0   0   1   0   0   0   0   0   1   0   0   0   0 \n",
    "graph_output": "15 30\n1 13\n2 5\n12 14\n6 11\n14 2\n15 5\n8 13\n14 11\n2 4\n11 8\n5 8\n13 14\n8 2\n14 8\n13 3\n5 4\n13 10\n5 14\n1 11\n10 5\n6 10\n15 2\n9 1\n8 9\n3 14\n10 12\n11 15\n9 12\n2 1\n14 4\n",
    "vertices": [
      11,
      9
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 2 (source) to vertex 4 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 21 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 9 (weight=86, capacity=10), 6 (weight=13, capacity=9), 11 (weight=93, capacity=4), 7 (weight=56, capacity=2), 2 (weight=65, capacity=2)\nVertex 2: 8 (weight=20, capacity=2), 11 (weight=49, capacity=7), 1 (weight=65, capacity=2), 5 (weight=84, capacity=9)\nVertex 3: 6 (weight=45, capacity=9), 7 (weight=6, capacity=8), 10 (weight=37, capacity=9)\nVertex 4: 10 (weight=37, capacity=2), 6 (weight=29, capacity=7), 9 (weight=15, capacity=10)\nVertex 5: 6 (weight=15, capacity=5), 2 (weight=84, capacity=9)\nVertex 6: 1 (weight=13, capacity=9), 8 (weight=7, capacity=7), 10 (weight=63, capacity=7), 3 (weight=45, capacity=9), 5 (weight=15, capacity=5), 4 (weight=29, capacity=7)\nVertex 7: 1 (weight=56, capacity=2), 3 (weight=6, capacity=8)\nVertex 8: 6 (weight=7, capacity=7), 2 (weight=20, capacity=2), 9 (weight=26, capacity=9), 10 (weight=4, capacity=3), 11 (weight=82, capacity=9)\nVertex 9: 1 (weight=86, capacity=10), 8 (weight=26, capacity=9), 4 (weight=15, capacity=10)\nVertex 10: 6 (weight=63, capacity=7), 4 (weight=37, capacity=2), 8 (weight=4, capacity=3), 3 (weight=37, capacity=9), 11 (weight=62, capacity=5)\nVertex 11: 1 (weight=93, capacity=4), 2 (weight=49, capacity=7), 8 (weight=82, capacity=9), 10 (weight=62, capacity=5)\n",
    "graph_output": "11 21\n1 9 86 10\n1 6 13 9\n6 8 7 7\n8 2 20 2\n6 10 63 7\n10 4 37 2\n1 11 93 4\n6 3 45 9\n6 5 15 5\n1 7 56 2\n9 8 26 9\n8 10 4 3\n11 2 49 7\n4 6 29 7\n3 7 6 8\n2 1 65 2\n10 3 37 9\n11 8 82 9\n9 4 15 10\n10 11 62 5\n5 2 84 9\n",
    "vertices": [
      2,
      4
    ],
    "answer": 2084,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 7 and vertex 13 are connected.\n\nThis is an undirected graph with 16 vertices and 96 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 12 and vertex 13.\n",
    "graph_output": "16 96\n10 15\n2 8\n9 12\n13 5\n2 11\n1 15\n8 10\n4 7\n13 4\n6 15\n15 7\n12 1\n8 11\n4 14\n1 4\n12 7\n15 8\n5 11\n11 12\n13 7\n8 1\n9 6\n7 16\n14 5\n10 9\n2 1\n15 13\n11 9\n15 2\n2 16\n8 16\n7 8\n1 7\n16 15\n10 7\n12 2\n7 9\n8 4\n15 11\n3 8\n13 6\n3 9\n3 2\n3 5\n7 11\n6 14\n9 4\n1 10\n11 3\n2 9\n4 15\n6 7\n16 11\n9 14\n2 5\n6 12\n10 14\n10 11\n11 1\n13 10\n4 5\n13 14\n3 7\n4 16\n8 12\n10 6\n9 15\n3 16\n6 4\n15 14\n2 13\n7 2\n8 9\n2 10\n9 13\n4 3\n10 4\n14 12\n1 14\n3 6\n13 11\n6 1\n6 5\n15 5\n4 12\n7 14\n12 10\n5 8\n5 1\n8 14\n5 10\n3 10\n16 9\n12 3\n1 13\n12 13\n",
    "vertices": [
      7,
      13
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 11 (source) to vertex 9 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 47 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   0   1   1   0   1   1   0   1   1 \n 3 |  1   0   0   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   0   1   0   1   0   1   0 \n 5 |  1   1   1   0   0   1   1   1   1   1   1 \n 6 |  1   0   1   1   1   0   1   0   1   1   1 \n 7 |  1   1   1   0   1   1   0   1   1   1   1 \n 8 |  1   1   1   1   1   0   1   0   1   1   1 \n 9 |  1   0   1   0   1   1   1   1   0   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1 \n11 |  1   1   1   0   1   1   1   1   1   1   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   5   4   1   1   5   5   3   4   1  10 \n 2 |  5   0   0  10   2   0   2   8   0  10   6 \n 3 |  4   0   0   3   4   3   5   9   6   5   1 \n 4 |  1  10   3   0   0   2   0   2   0   9   0 \n 5 |  1   2   4   0   0   6   4   7   2   7   1 \n 6 |  5   0   3   2   6   0   1   0   7   2   9 \n 7 |  5   2   5   0   4   1   0   7   3   5   6 \n 8 |  3   8   9   2   7   0   7   0   3   8   8 \n 9 |  4   0   6   0   2   7   3   3   0   9   7 \n10 |  1  10   5   9   7   2   5   8   9   0   3 \n11 | 10   6   1   0   1   9   6   8   7   3   0 \n",
    "graph_output": "11 47\n1 10 1\n10 11 3\n1 8 3\n8 4 2\n4 3 3\n1 6 5\n6 7 1\n7 2 2\n1 5 1\n11 9 7\n4 2 10\n2 11 6\n10 7 5\n10 2 10\n9 10 9\n7 8 7\n11 3 1\n1 3 4\n11 7 6\n5 2 2\n5 11 1\n3 6 3\n3 7 5\n8 9 3\n1 9 4\n3 10 5\n1 4 1\n11 1 10\n11 8 8\n1 2 5\n7 1 5\n9 7 3\n4 10 9\n8 5 7\n6 10 2\n5 6 6\n9 6 7\n10 8 8\n10 5 7\n6 11 9\n9 5 2\n3 8 9\n5 7 4\n9 3 6\n5 3 4\n6 4 2\n2 8 8\n",
    "vertices": [
      11,
      9
    ],
    "answer": 41,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 7 and vertex 1 are connected.\n\nThis is an undirected graph with 15 vertices and 21 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 7 and vertex 14.\n",
    "graph_output": "15 21\n3 1\n11 6\n5 9\n13 6\n10 12\n10 15\n15 14\n5 7\n6 10\n13 1\n11 12\n2 1\n11 3\n3 13\n5 1\n5 6\n6 4\n5 4\n6 1\n1 8\n7 14\n",
    "vertices": [
      7,
      1
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 91 edges\n\nEdges (Format: Node Node):\n1 13\n13 3\n1 16\n1 7\n7 14\n13 11\n13 9\n13 2\n3 15\n1 4\n16 8\n8 6\n8 10\n6 12\n1 5\n3 12\n8 13\n13 15\n13 4\n13 14\n4 14\n11 8\n16 11\n7 2\n12 14\n5 15\n2 11\n15 4\n3 5\n11 9\n6 15\n9 4\n7 9\n13 6\n3 4\n2 1\n2 12\n9 2\n13 12\n5 11\n12 5\n4 8\n16 3\n1 8\n15 7\n14 5\n5 10\n14 6\n8 7\n10 13\n1 12\n9 6\n3 11\n12 11\n8 9\n4 5\n14 11\n5 16\n7 6\n9 10\n15 16\n16 7\n9 14\n3 14\n15 2\n6 11\n12 7\n10 11\n12 15\n10 16\n1 14\n6 4\n6 16\n9 16\n9 5\n13 5\n1 15\n4 2\n16 13\n7 5\n6 3\n14 10\n10 1\n16 12\n14 16\n2 3\n12 10\n3 7\n15 8\n3 10\n15 10\n",
    "graph_output": "16 91\n1 13\n13 3\n1 16\n1 7\n7 14\n13 11\n13 9\n13 2\n3 15\n1 4\n16 8\n8 6\n8 10\n6 12\n1 5\n3 12\n8 13\n13 15\n13 4\n13 14\n4 14\n11 8\n16 11\n7 2\n12 14\n5 15\n2 11\n15 4\n3 5\n11 9\n6 15\n9 4\n7 9\n13 6\n3 4\n2 1\n2 12\n9 2\n13 12\n5 11\n12 5\n4 8\n16 3\n1 8\n15 7\n14 5\n5 10\n14 6\n8 7\n10 13\n1 12\n9 6\n3 11\n12 11\n8 9\n4 5\n14 11\n5 16\n7 6\n9 10\n15 16\n16 7\n9 14\n3 14\n15 2\n6 11\n12 7\n10 11\n12 15\n10 16\n1 14\n6 4\n6 16\n9 16\n9 5\n13 5\n1 15\n4 2\n16 13\n7 5\n6 3\n14 10\n10 1\n16 12\n14 16\n2 3\n12 10\n3 7\n15 8\n3 10\n15 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 8 vertices and 7 edges\n\nEdges (Format: Node Node):\n3 4\n4 1\n8 6\n1 2\n2 4\n2 8\n2 7\n",
    "graph_output": "8 7\n3 4\n4 1\n8 6\n1 2\n2 4\n2 8\n2 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 13 vertices and 20 edges\n\nEdges (Format: Node Node):\n7 2\n1 5\n2 6\n12 6\n11 7\n13 6\n9 2\n8 5\n7 3\n9 13\n3 5\n4 9\n6 8\n1 7\n1 3\n3 4\n12 2\n8 1\n11 4\n7 6\n",
    "graph_output": "13 20\n7 2\n1 5\n2 6\n12 6\n11 7\n13 6\n9 2\n8 5\n7 3\n9 13\n3 5\n4 9\n6 8\n1 7\n1 3\n3 4\n12 2\n8 1\n11 4\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 53 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 2, 9, 7, 5, 8, 12, 10, 6\nVertex 2: 7, 4, 1, 5, 8, 10, 3, 9, 12, 6\nVertex 3: 11, 9, 6, 4, 5, 2, 8, 7\nVertex 4: 1, 2, 7, 5, 11, 9, 3, 10, 12, 8\nVertex 5: 4, 2, 9, 6, 10, 1, 3\nVertex 6: 12, 3, 5, 8, 7, 9, 10, 11, 2, 1\nVertex 7: 2, 12, 4, 9, 8, 10, 11, 1, 6, 3\nVertex 8: 7, 6, 2, 1, 11, 9, 3, 12, 4\nVertex 9: 7, 1, 10, 3, 5, 4, 6, 2, 11, 12, 8\nVertex 10: 9, 7, 5, 2, 12, 6, 1, 4\nVertex 11: 3, 4, 7, 8, 9, 6\nVertex 12: 7, 6, 10, 1, 2, 9, 4, 8\n",
    "graph_output": "12 53\n7 2\n1 4\n7 12\n2 4\n4 7\n9 7\n1 2\n11 3\n6 12\n4 5\n9 1\n10 9\n9 3\n7 8\n10 7\n11 4\n2 5\n3 6\n5 9\n9 4\n6 5\n7 11\n7 1\n6 8\n4 3\n6 7\n10 5\n2 8\n6 9\n2 10\n5 1\n12 10\n10 6\n8 1\n8 11\n3 5\n2 3\n12 1\n2 9\n12 2\n11 9\n11 6\n12 9\n10 1\n8 9\n2 6\n10 4\n3 8\n12 4\n1 6\n8 12\n7 3\n4 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 6 to vertex 8 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 14 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13 with a weight of 9.\nThere is an edge between vertex 13 and vertex 12 with a weight of 60.\nThere is an edge between vertex 1 and vertex 5 with a weight of 8.\nThere is an edge between vertex 5 and vertex 11 with a weight of 69.\nThere is an edge between vertex 11 and vertex 8 with a weight of 39.\nThere is an edge between vertex 11 and vertex 6 with a weight of 2.\nThere is an edge between vertex 8 and vertex 14 with a weight of 28.\nThere is an edge between vertex 11 and vertex 4 with a weight of 22.\nThere is an edge between vertex 14 and vertex 10 with a weight of 87.\nThere is an edge between vertex 13 and vertex 9 with a weight of 75.\nThere is an edge between vertex 12 and vertex 2 with a weight of 72.\nThere is an edge between vertex 12 and vertex 7 with a weight of 57.\nThere is an edge between vertex 14 and vertex 3 with a weight of 11.\nThere is an edge between vertex 12 and vertex 10 with a weight of 43.\n",
    "graph_output": "14 14\n1 13 9\n13 12 60\n1 5 8\n5 11 69\n11 8 39\n11 6 2\n8 14 28\n11 4 22\n14 10 87\n13 9 75\n12 2 72\n12 7 57\n14 3 11\n12 10 43\n",
    "vertices": [
      6,
      8
    ],
    "answer": 41,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 17 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 13 and vertex 14.\n",
    "graph_output": "16 17\n1 7\n7 9\n1 6\n1 12\n1 3\n3 16\n3 15\n6 14\n16 13\n15 11\n15 8\n6 4\n7 5\n12 10\n14 2\n10 2\n13 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 101 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 3 and vertex 12.\n",
    "graph_output": "15 101\n1 11\n1 15\n11 7\n7 12\n11 10\n1 9\n7 14\n1 5\n15 13\n13 2\n2 6\n13 4\n4 3\n5 8\n10 13\n2 7\n8 1\n7 8\n2 12\n14 10\n14 3\n3 5\n10 8\n6 11\n6 13\n11 15\n13 1\n12 11\n3 15\n8 14\n7 13\n13 11\n11 14\n1 2\n11 2\n15 14\n6 14\n12 8\n10 1\n10 5\n10 12\n4 6\n7 3\n8 15\n4 5\n4 1\n3 13\n15 2\n10 15\n3 6\n6 1\n2 9\n2 10\n7 4\n9 10\n9 14\n15 9\n12 15\n6 8\n14 1\n8 13\n9 7\n12 9\n11 3\n10 7\n15 6\n4 2\n12 6\n5 7\n10 6\n12 5\n15 7\n2 14\n8 2\n15 5\n5 13\n15 4\n9 4\n14 5\n4 8\n13 9\n11 9\n5 2\n5 9\n4 10\n4 11\n12 13\n3 1\n5 11\n3 2\n5 6\n9 8\n3 10\n11 8\n7 6\n1 7\n6 9\n14 12\n13 14\n12 1\n3 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 17 vertices and 103 edges\n\nEdges (Format: Node Node):\n1 15\n15 2\n1 12\n2 11\n12 13\n2 7\n1 16\n11 10\n12 14\n2 5\n7 9\n11 8\n7 17\n5 6\n17 4\n7 3\n13 1\n13 15\n6 16\n6 13\n14 2\n17 14\n10 17\n17 16\n8 9\n12 10\n17 12\n12 15\n1 7\n1 5\n13 9\n17 2\n1 10\n15 4\n9 10\n6 3\n4 3\n11 13\n13 2\n4 13\n11 7\n6 11\n7 6\n1 4\n4 16\n1 14\n16 10\n16 2\n17 8\n10 2\n7 13\n8 7\n4 12\n5 4\n8 10\n3 17\n12 2\n15 17\n13 16\n3 13\n1 2\n5 17\n14 3\n5 11\n2 6\n9 5\n3 1\n5 7\n12 9\n3 9\n1 11\n16 3\n10 4\n8 13\n6 8\n5 3\n12 3\n5 14\n6 14\n12 6\n5 13\n15 6\n14 9\n5 10\n13 14\n17 9\n10 13\n8 2\n6 10\n16 14\n7 10\n14 10\n12 5\n16 12\n8 1\n2 4\n11 15\n12 8\n14 4\n3 10\n14 11\n1 17\n11 9\n",
    "graph_output": "17 103\n1 15\n15 2\n1 12\n2 11\n12 13\n2 7\n1 16\n11 10\n12 14\n2 5\n7 9\n11 8\n7 17\n5 6\n17 4\n7 3\n13 1\n13 15\n6 16\n6 13\n14 2\n17 14\n10 17\n17 16\n8 9\n12 10\n17 12\n12 15\n1 7\n1 5\n13 9\n17 2\n1 10\n15 4\n9 10\n6 3\n4 3\n11 13\n13 2\n4 13\n11 7\n6 11\n7 6\n1 4\n4 16\n1 14\n16 10\n16 2\n17 8\n10 2\n7 13\n8 7\n4 12\n5 4\n8 10\n3 17\n12 2\n15 17\n13 16\n3 13\n1 2\n5 17\n14 3\n5 11\n2 6\n9 5\n3 1\n5 7\n12 9\n3 9\n1 11\n16 3\n10 4\n8 13\n6 8\n5 3\n12 3\n5 14\n6 14\n12 6\n5 13\n15 6\n14 9\n5 10\n13 14\n17 9\n10 13\n8 2\n6 10\n16 14\n7 10\n14 10\n12 5\n16 12\n8 1\n2 4\n11 15\n12 8\n14 4\n3 10\n14 11\n1 17\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "structured"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 21 and 2 in the given tree, with node 1 as the root.\n\nUndirected Graph with 30 vertices and 29 edges\n\nEdges (Format: Node Node):\n1 14\n14 5\n5 7\n1 18\n14 20\n14 26\n18 30\n30 29\n20 22\n5 2\n2 10\n7 24\n7 6\n5 23\n2 19\n19 15\n1 12\n1 9\n2 25\n22 4\n29 3\n3 21\n5 27\n10 8\n14 13\n8 17\n20 11\n12 16\n23 28\n",
    "graph_output": "30 29\n1 14\n14 5\n5 7\n1 18\n14 20\n14 26\n18 30\n30 29\n20 22\n5 2\n2 10\n7 24\n7 6\n5 23\n2 19\n19 15\n1 12\n1 9\n2 25\n22 4\n29 3\n3 21\n5 27\n10 8\n14 13\n8 17\n20 11\n12 16\n23 28\n",
    "vertices": [
      21,
      2
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 20 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 8 (weight=58), 11 (weight=70), 6 (weight=45), 13 (weight=13), 5 (weight=97)\nVertex 2: 10 (weight=44), 5 (weight=61), 9 (weight=17)\nVertex 3: 4 (weight=25), 10 (weight=31), 13 (weight=16)\nVertex 4: 11 (weight=93), 9 (weight=54), 3 (weight=25)\nVertex 5: 2 (weight=61), 1 (weight=97)\nVertex 6: 1 (weight=45)\nVertex 7: 8 (weight=33), 11 (weight=19)\nVertex 8: 1 (weight=58), 13 (weight=94), 7 (weight=33)\nVertex 9: 4 (weight=54), 12 (weight=52), 2 (weight=17), 13 (weight=9)\nVertex 10: 13 (weight=14), 2 (weight=44), 3 (weight=31)\nVertex 11: 1 (weight=70), 4 (weight=93), 12 (weight=64), 7 (weight=19)\nVertex 12: 9 (weight=52), 11 (weight=64)\nVertex 13: 8 (weight=94), 10 (weight=14), 1 (weight=13), 9 (weight=9), 3 (weight=16)\n",
    "graph_output": "13 20\n1 8 58\n8 13 94\n13 10 14\n1 11 70\n11 4 93\n4 9 54\n9 12 52\n4 3 25\n10 2 44\n1 6 45\n8 7 33\n2 5 61\n10 3 31\n13 1 13\n5 1 97\n11 12 64\n2 9 17\n9 13 9\n13 3 16\n11 7 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 368,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 22 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   0   1   0   0   1   0   0   0   0   0   0   0   0   1 \n 2 |  1   0   0   1   0   0   0   1   0   0   0   1   0   0   0   0 \n 3 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  1   1   1   0   1   0   0   0   0   0   0   1   0   0   0   1 \n 5 |  0   0   0   1   0   0   0   0   0   1   1   0   0   0   1   0 \n 6 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 7 |  1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 8 |  0   1   0   0   0   1   0   0   1   0   0   0   1   0   0   0 \n 9 |  0   0   0   0   0   0   1   1   0   0   1   0   0   0   0   0 \n10 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   1   0   0   0   1   0   0   0   1   0   0   0 \n12 |  0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n15 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1 \n16 |  1   0   0   1   0   0   0   0   0   0   0   0   0   1   1   0 \n",
    "graph_output": "16 22\n1 4\n4 5\n4 16\n4 3\n5 15\n1 2\n1 7\n2 12\n2 8\n5 10\n7 9\n8 6\n5 11\n11 13\n16 14\n16 1\n9 8\n11 9\n15 16\n4 12\n8 13\n2 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nUndirected Graph with 31 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 10\n10 7\n10 14\n14 17\n7 5\n7 13\n1 27\n17 21\n13 20\n17 30\n10 29\n30 12\n12 28\n13 11\n28 18\n28 15\n15 31\n11 25\n30 16\n5 24\n24 22\n18 9\n15 6\n7 26\n29 2\n30 23\n15 8\n30 19\n25 4\n5 3\n",
    "graph_output": "31 30\n1 10\n10 7\n10 14\n14 17\n7 5\n7 13\n1 27\n17 21\n13 20\n17 30\n10 29\n30 12\n12 28\n13 11\n28 18\n28 15\n15 31\n11 25\n30 16\n5 24\n24 22\n18 9\n15 6\n7 26\n29 2\n30 23\n15 8\n30 19\n25 4\n5 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 12,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 130 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 2, 17, 12, 9, 15, 16, 14, 6, 11, 7, 8, 4, 3, 13, 10\nVertex 2: 8, 3, 16, 6, 9, 15, 11, 4, 1, 17, 12, 13, 5, 7\nVertex 3: 17, 15, 2, 14, 7, 5, 16, 6, 13, 12, 9, 10, 4, 1, 8\nVertex 4: 9, 11, 14, 10, 6, 2, 8, 13, 15, 16, 3, 17, 1, 7\nVertex 5: 1, 8, 3, 15, 10, 12, 17, 13, 6, 7, 11, 16, 9, 2, 14\nVertex 6: 17, 2, 4, 13, 3, 8, 10, 5, 7, 9, 1, 14, 16, 15, 12, 11\nVertex 7: 17, 3, 16, 12, 8, 5, 6, 11, 1, 14, 10, 15, 2, 13, 9, 4\nVertex 8: 2, 5, 17, 15, 13, 11, 16, 6, 7, 4, 14, 10, 1, 9, 12, 3\nVertex 9: 4, 11, 2, 15, 17, 16, 1, 6, 3, 5, 8, 12, 13, 10, 7\nVertex 10: 12, 4, 5, 6, 11, 14, 3, 17, 8, 7, 13, 9, 16, 1, 15\nVertex 11: 14, 4, 9, 13, 2, 8, 5, 10, 1, 7, 17, 15, 6, 12, 16\nVertex 12: 10, 15, 7, 16, 14, 1, 5, 2, 3, 17, 13, 8, 6, 9, 11\nVertex 13: 14, 15, 11, 16, 8, 6, 3, 4, 5, 2, 17, 12, 10, 9, 1, 7\nVertex 14: 17, 11, 13, 3, 4, 12, 8, 1, 6, 10, 7, 16, 15, 5\nVertex 15: 3, 13, 12, 5, 9, 8, 2, 17, 1, 4, 11, 6, 7, 14, 16, 10\nVertex 16: 2, 13, 7, 3, 8, 12, 9, 17, 1, 4, 5, 6, 14, 15, 10, 11\nVertex 17: 3, 14, 7, 6, 8, 15, 9, 16, 1, 2, 5, 13, 12, 11, 10, 4\n",
    "graph_output": "17 130\n12 10\n1 5\n8 2\n17 3\n8 5\n14 17\n3 15\n11 14\n4 9\n17 7\n4 11\n13 14\n13 15\n3 2\n14 3\n16 2\n9 11\n13 11\n14 4\n3 7\n16 13\n4 10\n12 15\n5 3\n17 6\n2 6\n6 4\n15 5\n16 7\n2 9\n15 9\n17 8\n16 3\n15 8\n2 15\n13 8\n2 11\n6 13\n8 11\n8 16\n12 7\n4 2\n3 6\n16 12\n17 15\n17 9\n6 8\n2 1\n14 12\n16 9\n17 16\n13 3\n17 1\n5 10\n7 8\n8 4\n12 1\n5 12\n2 17\n9 1\n5 17\n13 4\n15 1\n2 12\n10 6\n16 1\n13 5\n6 5\n7 5\n14 8\n5 11\n6 7\n10 11\n2 13\n9 6\n17 13\n1 14\n15 4\n1 6\n16 4\n12 3\n14 6\n3 9\n17 12\n1 11\n16 5\n14 10\n12 13\n7 11\n17 11\n7 1\n10 3\n4 3\n16 6\n7 14\n17 10\n8 10\n4 17\n8 1\n5 9\n10 7\n15 11\n15 6\n13 10\n4 1\n8 9\n5 2\n14 16\n12 8\n1 3\n15 7\n12 6\n3 8\n11 6\n12 9\n15 14\n5 14\n2 7\n16 15\n11 12\n13 9\n9 10\n16 10\n13 1\n13 7\n7 9\n7 4\n11 16\n10 1\n15 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 93 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   0   1   1   1   1   1   1   1   1   0   1   1 \n 2 |  1   0   0   1   0   1   1   1   1   1   1   1   0   1   1   1 \n 3 |  1   0   0   1   1   0   1   1   1   0   0   1   0   0   1   0 \n 4 |  1   1   1   0   1   0   1   0   1   1   1   1   1   0   1   1 \n 5 |  0   0   1   1   0   1   0   1   1   0   1   1   1   0   1   1 \n 6 |  1   1   0   0   1   0   1   1   0   1   1   0   0   1   1   1 \n 7 |  1   1   1   1   0   1   0   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   0   1   1   0   0   0   0   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   0   1   0   0   1   1   0   1   1   1   1 \n10 |  1   1   0   1   0   1   1   0   1   0   1   1   1   0   1   1 \n11 |  1   1   0   1   1   1   1   1   1   1   0   1   1   1   1   1 \n12 |  1   1   1   1   1   0   1   1   0   1   1   0   1   0   1   1 \n13 |  1   0   0   1   1   0   1   1   1   1   1   1   0   1   1   1 \n14 |  0   1   0   0   0   1   1   1   1   0   1   0   1   0   1   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   0 \n16 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   0   0 \n",
    "graph_output": "16 93\n1 4\n4 16\n16 14\n16 2\n4 7\n16 12\n1 6\n14 13\n13 5\n7 3\n16 8\n14 15\n7 10\n2 11\n2 9\n7 16\n1 12\n3 4\n16 11\n14 2\n12 11\n6 15\n12 13\n1 7\n15 12\n1 11\n13 7\n11 14\n16 13\n4 10\n8 2\n11 9\n6 14\n10 12\n10 9\n9 14\n11 4\n4 13\n6 5\n4 5\n13 1\n2 6\n1 10\n3 15\n2 1\n6 16\n12 8\n8 3\n13 15\n1 3\n14 7\n5 9\n3 9\n2 4\n2 12\n1 8\n5 8\n6 8\n10 6\n9 16\n5 3\n13 9\n8 11\n5 16\n9 4\n5 11\n9 15\n2 15\n11 7\n9 7\n2 10\n15 4\n6 7\n12 7\n5 12\n13 8\n15 5\n7 2\n15 10\n4 12\n16 1\n1 15\n10 16\n14 8\n12 3\n9 1\n10 11\n11 15\n10 13\n6 11\n15 7\n11 13\n15 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 16 vertices and 106 edges\n\nEdges (Format: Node Node):\n1 4\n4 5\n1 6\n6 10\n10 14\n14 16\n4 15\n6 3\n4 9\n9 13\n4 8\n9 2\n4 12\n12 11\n1 7\n13 1\n14 1\n11 9\n12 9\n15 11\n3 12\n15 14\n11 14\n7 10\n2 7\n13 16\n12 10\n3 2\n3 8\n14 5\n5 15\n13 4\n3 1\n13 3\n1 10\n10 4\n2 15\n2 5\n11 6\n11 8\n8 6\n15 7\n10 3\n8 5\n11 13\n9 15\n16 9\n7 9\n12 14\n5 16\n1 16\n15 16\n12 16\n7 4\n1 12\n7 3\n12 15\n10 2\n4 14\n8 13\n6 9\n2 6\n5 3\n7 13\n7 12\n16 6\n3 15\n14 9\n3 11\n11 4\n11 7\n5 9\n12 2\n2 13\n14 2\n13 14\n6 4\n15 8\n14 8\n12 13\n6 5\n16 10\n16 11\n7 5\n11 5\n1 15\n2 4\n10 9\n4 3\n16 4\n6 13\n9 8\n2 16\n5 12\n15 13\n12 8\n6 12\n9 3\n13 5\n6 7\n8 10\n8 16\n9 1\n10 11\n8 7\n15 6\n",
    "graph_output": "16 106\n1 4\n4 5\n1 6\n6 10\n10 14\n14 16\n4 15\n6 3\n4 9\n9 13\n4 8\n9 2\n4 12\n12 11\n1 7\n13 1\n14 1\n11 9\n12 9\n15 11\n3 12\n15 14\n11 14\n7 10\n2 7\n13 16\n12 10\n3 2\n3 8\n14 5\n5 15\n13 4\n3 1\n13 3\n1 10\n10 4\n2 15\n2 5\n11 6\n11 8\n8 6\n15 7\n10 3\n8 5\n11 13\n9 15\n16 9\n7 9\n12 14\n5 16\n1 16\n15 16\n12 16\n7 4\n1 12\n7 3\n12 15\n10 2\n4 14\n8 13\n6 9\n2 6\n5 3\n7 13\n7 12\n16 6\n3 15\n14 9\n3 11\n11 4\n11 7\n5 9\n12 2\n2 13\n14 2\n13 14\n6 4\n15 8\n14 8\n12 13\n6 5\n16 10\n16 11\n7 5\n11 5\n1 15\n2 4\n10 9\n4 3\n16 4\n6 13\n9 8\n2 16\n5 12\n15 13\n12 8\n6 12\n9 3\n13 5\n6 7\n8 10\n8 16\n9 1\n10 11\n8 7\n15 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 16 vertices and 18 edges\n\nEdges (Format: Node Node):\n1 15\n1 11\n11 13\n11 9\n9 2\n11 12\n9 6\n9 14\n9 5\n11 3\n12 10\n12 4\n13 16\n11 8\n1 7\n16 11\n14 3\n7 11\n",
    "graph_output": "16 18\n1 15\n1 11\n11 13\n11 9\n9 2\n11 12\n9 6\n9 14\n9 5\n11 3\n12 10\n12 4\n13 16\n11 8\n1 7\n16 11\n14 3\n7 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 18 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   0   0   1   1   0   0   0   1   0   0   0   0   0 \n 2 |  1   0   0   1   0   0   1   0   0   0   0   0   0   0   1 \n 3 |  0   0   0   0   0   0   0   1   0   0   0   0   0   1   0 \n 4 |  0   1   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 5 |  1   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  1   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 7 |  0   1   0   0   0   0   0   0   0   0   0   1   1   0   0 \n 8 |  0   0   1   0   0   0   0   0   1   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   1   0   0   0   0   1   0   0 \n10 |  1   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n11 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   1   0   1   1   0   0   0   1   1 \n14 |  0   0   1   0   0   0   0   0   0   0   0   0   1   0   0 \n15 |  0   1   0   0   0   0   0   0   0   0   0   0   1   0   0 \n",
    "graph_output": "15 18\n1 6\n1 2\n2 7\n2 15\n15 13\n13 10\n1 5\n7 12\n6 11\n13 9\n9 8\n8 3\n13 14\n5 4\n1 10\n14 3\n2 4\n13 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 20 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 2 (weight=22), 3 (weight=69), 7 (weight=58), 14 (weight=89), 16 (weight=91), 6 (weight=51), 9 (weight=32)\nVertex 2: 1 (weight=22), 13 (weight=13), 10 (weight=62)\nVertex 3: 1 (weight=69)\nVertex 4: 14 (weight=10), 15 (weight=29)\nVertex 5: 13 (weight=88)\nVertex 6: 1 (weight=51)\nVertex 7: 1 (weight=58), 11 (weight=71)\nVertex 8: 10 (weight=48), 11 (weight=35)\nVertex 9: 10 (weight=98), 1 (weight=32)\nVertex 10: 2 (weight=62), 9 (weight=98), 8 (weight=48), 15 (weight=9)\nVertex 11: 15 (weight=52), 7 (weight=71), 8 (weight=35), 14 (weight=77)\nVertex 12: 13 (weight=47)\nVertex 13: 2 (weight=13), 12 (weight=47), 5 (weight=88)\nVertex 14: 1 (weight=89), 4 (weight=10), 11 (weight=77)\nVertex 15: 4 (weight=29), 11 (weight=52), 10 (weight=9)\nVertex 16: 1 (weight=91)\n",
    "graph_output": "16 20\n1 2 22\n1 3 69\n2 13 13\n1 7 58\n1 14 89\n1 16 91\n13 12 47\n13 5 88\n2 10 62\n10 9 98\n1 6 51\n10 8 48\n14 4 10\n4 15 29\n15 11 52\n9 1 32\n15 10 9\n11 7 71\n8 11 35\n14 11 77\n",
    "vertices": [
      null,
      null
    ],
    "answer": 664,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 98 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 13 and vertex 6.\n",
    "graph_output": "15 98\n1 8\n8 15\n8 6\n1 7\n1 12\n7 11\n11 13\n7 10\n15 4\n13 14\n1 9\n1 2\n9 5\n10 3\n1 5\n2 13\n1 15\n8 5\n13 8\n10 6\n4 2\n14 9\n2 9\n2 15\n7 12\n3 14\n9 11\n11 1\n8 9\n15 9\n14 8\n11 8\n8 3\n12 9\n4 12\n11 6\n14 11\n10 1\n4 5\n2 5\n1 13\n7 5\n11 15\n5 12\n11 10\n10 12\n7 15\n2 10\n9 7\n6 15\n4 3\n7 6\n12 2\n4 13\n15 12\n8 12\n3 2\n12 6\n10 9\n3 6\n3 9\n8 2\n15 14\n10 14\n5 13\n14 5\n6 9\n6 2\n12 11\n11 4\n4 14\n5 6\n4 1\n6 14\n15 5\n12 13\n1 14\n8 4\n13 9\n7 2\n10 8\n13 7\n12 3\n4 7\n4 10\n13 15\n7 14\n14 12\n10 13\n8 7\n5 3\n10 15\n15 3\n6 1\n11 2\n4 6\n13 3\n13 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 8 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 14 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 2 with a capacity of 2.\nThere is an edge between vertex 7 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 2 and vertex 8 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 11 with a capacity of 8.\nThere is an edge between vertex 2 and vertex 6 with a capacity of 7.\nThere is an edge between vertex 8 and vertex 4 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 6.\nThere is an edge between vertex 8 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 3 with a capacity of 7.\nThere is an edge between vertex 9 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 6 and vertex 9 with a capacity of 7.\nThere is an edge between vertex 10 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 1 with a capacity of 4.\n",
    "graph_output": "11 14\n1 7 9\n1 2 2\n7 9 9\n2 8 8\n1 11 8\n2 6 7\n8 4 9\n1 10 6\n8 5 2\n1 3 7\n9 4 6\n6 9 7\n10 11 2\n5 1 4\n",
    "vertices": [
      8,
      4
    ],
    "answer": 15,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 31 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   0   1   0   0   0   1   0   1   1   1   0   0   1 \n 2 |  1   0   0   1   1   1   0   0   0   0   1   0   0   0   0   0 \n 3 |  1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 4 |  0   1   0   0   1   0   0   0   0   0   1   0   0   0   0   1 \n 5 |  1   1   0   1   0   0   0   0   0   1   0   0   0   0   0   1 \n 6 |  0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0 \n 8 |  0   0   1   0   0   0   0   0   1   1   0   0   0   0   0   0 \n 9 |  1   0   0   0   0   0   1   1   0   0   0   0   0   1   0   0 \n10 |  0   0   0   0   1   0   0   1   0   0   0   0   0   0   1   1 \n11 |  1   1   0   1   0   0   1   0   0   0   0   1   0   0   1   0 \n12 |  1   0   0   0   0   0   0   0   0   0   1   0   0   1   0   1 \n13 |  1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   1   0   0   1   0   0   1   0 \n15 |  0   0   0   0   0   0   0   0   0   1   1   0   0   1   0   0 \n16 |  1   0   0   1   1   0   0   0   0   1   0   1   0   0   0   0 \n",
    "graph_output": "16 31\n1 11\n1 3\n11 7\n1 16\n1 12\n7 9\n11 4\n3 8\n1 13\n11 15\n4 2\n2 6\n15 14\n16 10\n2 5\n9 14\n6 13\n4 5\n8 9\n16 12\n16 4\n5 1\n5 10\n2 1\n10 15\n10 8\n9 1\n14 12\n11 12\n5 16\n2 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (30\u00d730):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n   ------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   1   1   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 3 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  1   0   0   0   0   1   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   1   0   0 \n 6 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 8 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n14 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n18 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n21 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n22 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   1   1   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n28 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n30 |  0   0   0   1   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   1   0   0   0   0   1   1   0   1   0 \n",
    "graph_output": "30 29\n1 20\n1 4\n4 30\n1 3\n30 11\n1 8\n30 21\n4 24\n21 2\n24 5\n30 27\n4 6\n30 13\n24 12\n5 28\n11 7\n1 15\n24 17\n4 14\n30 26\n7 9\n6 19\n5 16\n20 23\n3 18\n4 10\n30 29\n8 25\n7 22\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 27 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14\nVertex 2: 15, 9\nVertex 3: 16, 11, 6, 4, 10\nVertex 4: 16, 15, 13, 6, 3\nVertex 5: 16, 15, 11, 14\nVertex 6: 4, 3\nVertex 7: 14, 15\nVertex 8: No connections\nVertex 9: 11, 15, 2\nVertex 10: 12, 3\nVertex 11: 9, 3, 13, 14, 5\nVertex 12: 10, 14, 15\nVertex 13: 4, 11, 16\nVertex 14: 1, 7, 16, 12, 11, 5\nVertex 15: 4, 5, 2, 9, 12, 7\nVertex 16: 3, 4, 5, 14, 13\n",
    "graph_output": "16 27\n16 3\n9 11\n16 4\n15 4\n16 5\n14 1\n15 5\n7 14\n2 15\n4 13\n4 6\n11 3\n10 12\n16 14\n14 12\n15 9\n11 13\n6 3\n14 11\n11 5\n15 12\n9 2\n16 13\n3 4\n7 15\n3 10\n5 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 16 vertices and 27 edges\n\nEdges (Format: Node Node):\n16 3\n9 11\n16 4\n15 4\n16 5\n14 1\n15 5\n7 14\n2 15\n4 13\n4 6\n11 3\n10 12\n16 14\n14 12\n15 9\n11 13\n6 3\n14 11\n11 5\n15 12\n9 2\n16 13\n3 4\n7 15\n3 10\n5 14\n",
    "graph_output": "16 27\n16 3\n9 11\n16 4\n15 4\n16 5\n14 1\n15 5\n7 14\n2 15\n4 13\n4 6\n11 3\n10 12\n16 14\n14 12\n15 9\n11 13\n6 3\n14 11\n11 5\n15 12\n9 2\n16 13\n3 4\n7 15\n3 10\n5 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 17 vertices and 116 edges\n\nEdges (Format: Node Node):\n6 8\n10 5\n4 17\n17 7\n6 17\n2 9\n17 5\n3 4\n1 16\n3 16\n16 13\n14 4\n1 2\n13 2\n10 8\n11 8\n5 13\n9 7\n3 8\n6 14\n7 16\n9 4\n9 8\n12 8\n17 12\n5 11\n12 3\n5 1\n3 17\n3 13\n14 13\n15 2\n14 5\n6 2\n1 17\n16 4\n10 17\n4 11\n11 1\n16 17\n12 13\n6 5\n12 14\n15 1\n16 10\n11 9\n5 8\n6 3\n10 2\n7 10\n2 11\n15 9\n1 3\n4 6\n1 4\n16 5\n5 4\n14 10\n15 5\n2 5\n10 11\n12 9\n13 9\n6 15\n16 12\n5 9\n13 17\n13 15\n8 4\n14 9\n5 3\n1 9\n1 14\n4 2\n1 7\n7 13\n2 14\n7 2\n14 15\n8 1\n8 13\n16 9\n11 16\n14 17\n6 16\n2 3\n12 11\n6 1\n14 8\n11 3\n1 12\n14 7\n4 12\n2 16\n13 10\n6 10\n17 2\n13 11\n10 3\n9 10\n15 16\n13 6\n10 15\n11 17\n5 7\n2 12\n11 6\n17 9\n6 12\n8 16\n7 15\n1 13\n17 15\n17 8\n8 2\n15 4\n",
    "graph_output": "17 116\n6 8\n10 5\n4 17\n17 7\n6 17\n2 9\n17 5\n3 4\n1 16\n3 16\n16 13\n14 4\n1 2\n13 2\n10 8\n11 8\n5 13\n9 7\n3 8\n6 14\n7 16\n9 4\n9 8\n12 8\n17 12\n5 11\n12 3\n5 1\n3 17\n3 13\n14 13\n15 2\n14 5\n6 2\n1 17\n16 4\n10 17\n4 11\n11 1\n16 17\n12 13\n6 5\n12 14\n15 1\n16 10\n11 9\n5 8\n6 3\n10 2\n7 10\n2 11\n15 9\n1 3\n4 6\n1 4\n16 5\n5 4\n14 10\n15 5\n2 5\n10 11\n12 9\n13 9\n6 15\n16 12\n5 9\n13 17\n13 15\n8 4\n14 9\n5 3\n1 9\n1 14\n4 2\n1 7\n7 13\n2 14\n7 2\n14 15\n8 1\n8 13\n16 9\n11 16\n14 17\n6 16\n2 3\n12 11\n6 1\n14 8\n11 3\n1 12\n14 7\n4 12\n2 16\n13 10\n6 10\n17 2\n13 11\n10 3\n9 10\n15 16\n13 6\n10 15\n11 17\n5 7\n2 12\n11 6\n17 9\n6 12\n8 16\n7 15\n1 13\n17 15\n17 8\n8 2\n15 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 110 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 14 and vertex 5.\n",
    "graph_output": "16 110\n1 13\n13 4\n1 9\n4 16\n1 3\n4 11\n13 12\n4 7\n3 10\n11 5\n11 14\n1 2\n5 6\n13 15\n15 8\n15 9\n3 14\n7 13\n6 2\n14 4\n1 16\n1 15\n5 2\n11 1\n8 10\n5 13\n10 13\n2 13\n7 12\n15 14\n16 6\n7 10\n2 10\n12 6\n7 9\n8 14\n2 8\n10 1\n10 14\n8 7\n13 11\n7 14\n6 13\n15 6\n14 13\n14 16\n6 4\n4 9\n11 16\n2 7\n10 4\n7 15\n11 2\n9 13\n8 13\n5 16\n14 6\n16 12\n15 16\n8 9\n12 5\n5 4\n7 16\n8 16\n7 11\n11 12\n9 12\n9 10\n12 15\n4 1\n8 6\n8 5\n3 6\n10 5\n5 7\n15 2\n8 4\n14 12\n6 11\n3 11\n12 10\n8 3\n4 3\n10 16\n9 16\n10 6\n3 16\n13 3\n1 14\n1 7\n14 9\n12 4\n12 1\n2 3\n14 2\n13 16\n11 9\n10 15\n2 4\n5 3\n6 7\n1 5\n11 15\n9 6\n12 3\n9 2\n3 9\n5 9\n2 12\n14 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 3 (source) to vertex 8 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 28 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 2 (weight=41, capacity=4), 5 (weight=42, capacity=4), 6 (weight=85, capacity=5), 4 (weight=57, capacity=6), 9 (weight=77, capacity=8), 8 (weight=93, capacity=10), 7 (weight=9, capacity=7)\nVertex 2: 1 (weight=41, capacity=4), 8 (weight=39, capacity=1), 7 (weight=40, capacity=5), 9 (weight=55, capacity=7), 5 (weight=4, capacity=6), 3 (weight=98, capacity=5)\nVertex 3: 5 (weight=93, capacity=7), 9 (weight=69, capacity=7), 7 (weight=13, capacity=9), 4 (weight=28, capacity=4), 6 (weight=69, capacity=5), 2 (weight=98, capacity=5)\nVertex 4: 5 (weight=17, capacity=9), 9 (weight=86, capacity=2), 7 (weight=66, capacity=7), 3 (weight=28, capacity=4), 1 (weight=57, capacity=6), 8 (weight=58, capacity=10)\nVertex 5: 1 (weight=42, capacity=4), 3 (weight=93, capacity=7), 4 (weight=17, capacity=9), 6 (weight=80, capacity=2), 2 (weight=4, capacity=6), 9 (weight=56, capacity=1)\nVertex 6: 1 (weight=85, capacity=5), 9 (weight=9, capacity=2), 5 (weight=80, capacity=2), 3 (weight=69, capacity=5), 7 (weight=50, capacity=1), 8 (weight=82, capacity=7)\nVertex 7: 2 (weight=40, capacity=5), 3 (weight=13, capacity=9), 4 (weight=66, capacity=7), 8 (weight=92, capacity=8), 6 (weight=50, capacity=1), 1 (weight=9, capacity=7)\nVertex 8: 2 (weight=39, capacity=1), 9 (weight=74, capacity=9), 7 (weight=92, capacity=8), 4 (weight=58, capacity=10), 1 (weight=93, capacity=10), 6 (weight=82, capacity=7)\nVertex 9: 3 (weight=69, capacity=7), 4 (weight=86, capacity=2), 6 (weight=9, capacity=2), 8 (weight=74, capacity=9), 1 (weight=77, capacity=8), 2 (weight=55, capacity=7), 5 (weight=56, capacity=1)\n",
    "graph_output": "9 28\n1 2 41 4\n1 5 42 4\n1 6 85 5\n2 8 39 1\n5 3 93 7\n2 7 40 5\n3 9 69 7\n5 4 17 9\n9 4 86 2\n6 9 9 2\n7 3 13 9\n4 7 66 7\n5 6 80 2\n3 4 28 4\n3 6 69 5\n9 8 74 9\n4 1 57 6\n1 9 77 8\n8 7 92 8\n7 6 50 1\n2 9 55 7\n5 2 4 6\n2 3 98 5\n8 4 58 10\n8 1 93 10\n5 9 56 1\n6 8 82 7\n7 1 9 7\n",
    "vertices": [
      3,
      8
    ],
    "answer": 5346,
    "description_type": "list"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (29\u00d729):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n   --------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   1   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 2 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   1   0   0   1   0   0 \n 5 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   1   1   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n15 |  1   0   0   0   0   1   1   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n23 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n24 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   1   0 \n26 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n29 |  1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "29 28\n1 15\n15 10\n15 6\n6 18\n1 29\n18 4\n6 25\n6 9\n4 27\n29 3\n10 2\n4 24\n24 19\n25 16\n16 17\n1 5\n25 28\n15 21\n6 26\n16 12\n4 23\n19 11\n15 7\n1 8\n25 20\n28 14\n23 22\n11 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 17,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 29 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 3\n3 24\n24 20\n24 21\n1 4\n4 15\n15 17\n24 8\n15 27\n27 6\n4 13\n3 14\n3 7\n8 23\n1 11\n6 28\n6 26\n26 19\n28 9\n17 29\n8 10\n20 5\n11 22\n14 16\n20 18\n7 25\n28 12\n14 2\n",
    "graph_output": "29 28\n1 3\n3 24\n24 20\n24 21\n1 4\n4 15\n15 17\n24 8\n15 27\n27 6\n4 13\n3 14\n3 7\n8 23\n1 11\n6 28\n6 26\n26 19\n28 9\n17 29\n8 10\n20 5\n11 22\n14 16\n20 18\n7 25\n28 12\n14 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 17,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 32 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 16, 3, 8\nVertex 2: 16, 9, 5\nVertex 3: 6, 1, 13\nVertex 4: 6, 14, 9, 15, 12, 11\nVertex 5: 6, 10, 14, 2, 15\nVertex 6: 15, 7, 5, 3, 4, 14, 8, 12\nVertex 7: 6, 16\nVertex 8: 16, 10, 6, 1\nVertex 9: 10, 4, 2, 13\nVertex 10: 8, 9, 11, 5\nVertex 11: 10, 4\nVertex 12: 16, 15, 6, 4\nVertex 13: 15, 9, 3\nVertex 14: 4, 6, 5\nVertex 15: 12, 6, 13, 5, 4\nVertex 16: 1, 2, 12, 8, 7\n",
    "graph_output": "16 32\n1 16\n16 2\n16 12\n12 15\n15 6\n16 8\n8 10\n6 7\n6 5\n6 3\n15 13\n6 4\n10 9\n4 14\n10 11\n10 5\n3 1\n7 16\n9 4\n2 9\n14 6\n6 8\n14 5\n5 2\n6 12\n5 15\n4 15\n12 4\n1 8\n13 9\n3 13\n11 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 26 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 12\nVertex 2: 14, 15, 3\nVertex 3: 6, 4, 12, 9, 2\nVertex 4: 7, 3, 15, 6\nVertex 5: 16, 8, 12\nVertex 6: 3, 4, 9, 14\nVertex 7: 4, 13\nVertex 8: 5\nVertex 9: 10, 3, 16, 6\nVertex 10: 15, 13, 16, 9\nVertex 11: 13, 15\nVertex 12: 5, 3, 1\nVertex 13: 10, 7, 11\nVertex 14: 2, 16, 1, 6\nVertex 15: 10, 11, 4, 2\nVertex 16: 14, 5, 10, 9\n",
    "graph_output": "16 26\n7 4\n15 10\n10 13\n2 14\n14 16\n5 16\n16 10\n7 13\n9 10\n1 14\n8 5\n13 11\n3 6\n11 15\n4 3\n12 5\n4 15\n12 3\n3 9\n16 9\n4 6\n2 15\n2 3\n6 9\n14 6\n1 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 16 vertices and 21 edges\n\nEdges (Format: Node Node):\n1 5\n5 12\n5 11\n11 15\n12 13\n11 16\n13 14\n14 7\n11 2\n12 8\n2 6\n16 3\n11 4\n1 10\n14 9\n10 12\n14 4\n13 7\n12 3\n14 2\n6 8\n",
    "graph_output": "16 21\n1 5\n5 12\n5 11\n11 15\n12 13\n11 16\n13 14\n14 7\n11 2\n12 8\n2 6\n16 3\n11 4\n1 10\n14 9\n10 12\n14 4\n13 7\n12 3\n14 2\n6 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 14 to vertex 1 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 94 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 2 (weight=45), 14 (weight=56), 5 (weight=88), 4 (weight=88), 11 (weight=51), 7 (weight=19), 12 (weight=47), 15 (weight=96), 8 (weight=53), 6 (weight=19), 3 (weight=23), 10 (weight=66), 9 (weight=99)\nVertex 2: 1 (weight=45), 7 (weight=28), 6 (weight=52), 15 (weight=91), 10 (weight=71), 13 (weight=58), 11 (weight=51), 3 (weight=87), 4 (weight=56), 8 (weight=23), 14 (weight=10), 9 (weight=33), 5 (weight=39), 12 (weight=6)\nVertex 3: 12 (weight=14), 9 (weight=81), 2 (weight=87), 4 (weight=3), 8 (weight=63), 7 (weight=51), 14 (weight=90), 5 (weight=66), 13 (weight=8), 1 (weight=23), 10 (weight=2), 11 (weight=4)\nVertex 4: 1 (weight=88), 5 (weight=87), 7 (weight=70), 12 (weight=58), 9 (weight=94), 2 (weight=56), 8 (weight=72), 11 (weight=51), 13 (weight=32), 3 (weight=3), 10 (weight=69), 15 (weight=44), 6 (weight=85)\nVertex 5: 1 (weight=88), 7 (weight=82), 9 (weight=23), 4 (weight=87), 10 (weight=38), 3 (weight=66), 13 (weight=12), 12 (weight=78), 8 (weight=80), 11 (weight=82), 2 (weight=39), 15 (weight=42)\nVertex 6: 2 (weight=52), 10 (weight=9), 12 (weight=81), 9 (weight=22), 8 (weight=89), 14 (weight=22), 1 (weight=19), 13 (weight=77), 4 (weight=85), 11 (weight=70), 7 (weight=90), 15 (weight=77)\nVertex 7: 2 (weight=28), 13 (weight=11), 11 (weight=99), 5 (weight=82), 10 (weight=69), 1 (weight=19), 4 (weight=70), 15 (weight=6), 3 (weight=51), 9 (weight=54), 8 (weight=88), 12 (weight=5), 6 (weight=90)\nVertex 8: 12 (weight=68), 10 (weight=31), 15 (weight=10), 6 (weight=89), 11 (weight=5), 4 (weight=72), 2 (weight=23), 1 (weight=53), 3 (weight=63), 14 (weight=88), 9 (weight=29), 7 (weight=88), 5 (weight=80)\nVertex 9: 3 (weight=81), 6 (weight=22), 5 (weight=23), 15 (weight=75), 4 (weight=94), 10 (weight=90), 8 (weight=29), 7 (weight=54), 13 (weight=39), 2 (weight=33), 1 (weight=99), 11 (weight=46)\nVertex 10: 14 (weight=15), 6 (weight=9), 2 (weight=71), 8 (weight=31), 7 (weight=69), 5 (weight=38), 15 (weight=78), 4 (weight=69), 11 (weight=86), 9 (weight=90), 13 (weight=18), 3 (weight=2), 1 (weight=66), 12 (weight=80)\nVertex 11: 7 (weight=99), 1 (weight=51), 2 (weight=51), 8 (weight=5), 13 (weight=43), 4 (weight=51), 12 (weight=76), 10 (weight=86), 15 (weight=76), 3 (weight=4), 14 (weight=64), 5 (weight=82), 9 (weight=46), 6 (weight=70)\nVertex 12: 13 (weight=28), 3 (weight=14), 8 (weight=68), 6 (weight=81), 1 (weight=47), 4 (weight=58), 11 (weight=76), 5 (weight=78), 10 (weight=80), 14 (weight=21), 15 (weight=9), 2 (weight=6), 7 (weight=5)\nVertex 13: 7 (weight=11), 12 (weight=28), 2 (weight=58), 11 (weight=43), 15 (weight=70), 4 (weight=32), 14 (weight=2), 10 (weight=18), 5 (weight=12), 3 (weight=8), 6 (weight=77), 9 (weight=39)\nVertex 14: 1 (weight=56), 10 (weight=15), 13 (weight=2), 8 (weight=88), 6 (weight=22), 2 (weight=10), 3 (weight=90), 11 (weight=64), 12 (weight=21)\nVertex 15: 2 (weight=91), 8 (weight=10), 9 (weight=75), 10 (weight=78), 1 (weight=96), 13 (weight=70), 7 (weight=6), 11 (weight=76), 4 (weight=44), 12 (weight=9), 5 (weight=42), 6 (weight=77)\n",
    "graph_output": "15 94\n1 2 45\n2 7 28\n7 13 11\n13 12 28\n2 6 52\n2 15 91\n1 14 56\n1 5 88\n14 10 15\n12 3 14\n7 11 99\n12 8 68\n1 4 88\n3 9 81\n10 6 9\n7 5 82\n12 6 81\n10 2 71\n9 6 22\n13 2 58\n10 8 31\n15 8 10\n6 8 89\n9 5 23\n15 9 75\n4 5 87\n11 1 51\n10 7 69\n7 1 19\n5 10 38\n2 11 51\n7 4 70\n10 15 78\n11 8 5\n1 12 47\n12 4 58\n4 9 94\n1 15 96\n11 13 43\n2 3 87\n4 2 56\n4 8 72\n2 8 23\n4 11 51\n1 8 53\n13 15 70\n7 15 6\n13 4 32\n14 13 2\n11 12 76\n3 4 3\n3 8 63\n10 4 69\n11 10 86\n8 14 88\n3 7 51\n14 6 22\n10 9 90\n14 2 10\n14 3 90\n13 10 18\n5 3 66\n5 13 12\n6 1 19\n13 3 8\n5 12 78\n1 3 23\n10 3 2\n10 1 66\n6 13 77\n15 11 76\n12 10 80\n3 11 4\n8 9 29\n15 4 44\n9 7 54\n9 13 39\n8 7 88\n11 14 64\n6 4 85\n9 2 33\n14 12 21\n9 1 99\n12 15 9\n5 8 80\n5 11 82\n2 5 39\n2 12 6\n9 11 46\n11 6 70\n12 7 5\n15 5 42\n6 7 90\n6 15 77\n",
    "vertices": [
      14,
      1
    ],
    "answer": 32,
    "description_type": "list"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 30 vertices and 29 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 25.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 25 and vertex 19.\nThere is an edge between vertex 13 and vertex 18.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 25 and vertex 6.\nThere is an edge between vertex 19 and vertex 23.\nThere is an edge between vertex 25 and vertex 28.\nThere is an edge between vertex 25 and vertex 26.\nThere is an edge between vertex 26 and vertex 14.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 6 and vertex 30.\nThere is an edge between vertex 30 and vertex 15.\nThere is an edge between vertex 30 and vertex 17.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 25 and vertex 27.\nThere is an edge between vertex 18 and vertex 22.\nThere is an edge between vertex 22 and vertex 24.\nThere is an edge between vertex 24 and vertex 12.\nThere is an edge between vertex 25 and vertex 29.\nThere is an edge between vertex 23 and vertex 20.\nThere is an edge between vertex 13 and vertex 21.\nThere is an edge between vertex 16 and vertex 11.\n",
    "graph_output": "30 29\n1 2\n2 25\n2 8\n8 13\n2 9\n25 19\n13 18\n9 7\n13 5\n5 4\n25 6\n19 23\n25 28\n25 26\n26 14\n4 16\n4 3\n6 30\n30 15\n30 17\n5 10\n25 27\n18 22\n22 24\n24 12\n25 29\n23 20\n13 21\n16 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "natural"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 15 and 8 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 19.\nThere is an edge between vertex 19 and vertex 27.\nThere is an edge between vertex 19 and vertex 2.\nThere is an edge between vertex 27 and vertex 21.\nThere is an edge between vertex 19 and vertex 16.\nThere is an edge between vertex 21 and vertex 29.\nThere is an edge between vertex 1 and vertex 18.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 29 and vertex 23.\nThere is an edge between vertex 27 and vertex 14.\nThere is an edge between vertex 3 and vertex 25.\nThere is an edge between vertex 25 and vertex 9.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 18 and vertex 7.\nThere is an edge between vertex 25 and vertex 24.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 19 and vertex 10.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 1 and vertex 28.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 24 and vertex 12.\nThere is an edge between vertex 12 and vertex 26.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 3 and vertex 20.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 26 and vertex 22.\n",
    "graph_output": "29 28\n1 19\n19 27\n19 2\n27 21\n19 16\n21 29\n1 18\n2 3\n29 23\n27 14\n3 25\n25 9\n3 6\n18 7\n25 24\n16 17\n19 10\n17 8\n1 28\n17 5\n8 15\n24 12\n12 26\n7 11\n3 20\n3 13\n10 4\n26 22\n",
    "vertices": [
      15,
      8
    ],
    "answer": 8,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 21 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 8 and vertex 3.\n",
    "graph_output": "11 21\n5 6\n4 2\n11 5\n9 10\n11 7\n1 10\n9 4\n10 4\n8 1\n4 6\n2 11\n9 3\n4 7\n11 6\n6 2\n5 1\n8 11\n5 2\n6 1\n6 7\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 107 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 17 and vertex 1.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 17 and vertex 11.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 9 and vertex 17.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 2 and vertex 17.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 5 and vertex 17.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 17 and vertex 10.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 6 and vertex 10.\n",
    "graph_output": "17 107\n15 14\n14 5\n2 10\n16 10\n11 8\n6 7\n14 7\n1 3\n12 17\n3 6\n15 8\n8 13\n8 9\n3 16\n17 1\n7 12\n15 10\n4 14\n8 6\n3 8\n13 9\n4 11\n16 2\n5 13\n12 1\n4 8\n17 11\n14 17\n11 2\n10 3\n13 1\n7 3\n3 11\n11 12\n12 4\n7 11\n9 17\n9 6\n1 14\n16 14\n2 3\n1 7\n12 6\n12 10\n1 11\n10 7\n4 16\n8 2\n12 9\n15 13\n6 4\n6 1\n10 8\n2 17\n7 16\n10 11\n3 12\n11 14\n5 3\n4 7\n4 1\n6 5\n2 12\n11 16\n1 2\n4 5\n16 8\n11 5\n12 8\n2 5\n2 9\n2 15\n12 14\n11 15\n10 1\n4 13\n17 4\n12 16\n16 1\n13 3\n5 17\n6 13\n10 14\n2 4\n15 4\n5 8\n15 3\n17 10\n14 3\n15 9\n5 10\n6 14\n15 12\n6 15\n7 8\n10 13\n3 17\n2 13\n5 1\n5 7\n5 12\n7 9\n2 6\n11 6\n15 7\n8 1\n6 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 7 (source) to vertex 9 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 42 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1  38  12   0  30  42  56  78  25  10 \n 2 |  1   0   8   0  60   0  60  42  47   0  59 \n 3 | 38   8   0  56   3   0  76   0   0  30  71 \n 4 | 12   0  56   0  90  79  77  41  56  98  43 \n 5 |  0  60   3  90   0  44  10  76   5  16   0 \n 6 | 30   0   0  79  44   0  69  39  59  59   0 \n 7 | 42  60  76  77  10  69   0  22  52  44  73 \n 8 | 56  42   0  41  76  39  22   0  48   0  55 \n 9 | 78  47   0  56   5  59  52  48   0   0   0 \n10 | 25   0  30  98  16  59  44   0   0   0   0 \n11 | 10  59  71  43   0   0  73  55   0   0   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   8   8   1   0   2   1  10   4   1   7 \n 2 |  8   0   3   0   9   0   7   3   8   0   2 \n 3 |  8   3   0   4   8   0   2   0   0   2   6 \n 4 |  1   0   4   0  10   9   7   2   3   7  10 \n 5 |  0   9   8  10   0   6   7   7   8   6   0 \n 6 |  2   0   0   9   6   0   6   1   2   4   0 \n 7 |  1   7   2   7   7   6   0  10   2   6   8 \n 8 | 10   3   0   2   7   1  10   0   1   0   6 \n 9 |  4   8   0   3   8   2   2   1   0   0   0 \n10 |  1   0   2   7   6   4   6   0   0   0   0 \n11 |  7   2   6  10   0   0   8   6   0   0   0 \n",
    "graph_output": "11 42\n1 6 30 2\n1 8 56 10\n1 4 12 1\n4 9 56 3\n1 2 1 8\n1 10 25 1\n2 5 60 9\n8 11 55 6\n4 7 77 7\n5 3 3 8\n11 4 43 10\n10 7 44 6\n9 6 59 2\n7 6 69 6\n7 11 73 8\n6 4 79 9\n11 1 10 7\n3 1 38 8\n2 3 8 3\n10 3 30 2\n7 8 22 10\n7 3 76 2\n5 9 5 8\n5 8 76 7\n5 6 44 6\n1 9 78 4\n9 8 48 1\n7 1 42 1\n8 6 39 1\n10 4 98 7\n2 8 42 3\n6 10 59 4\n9 2 47 8\n3 4 56 4\n5 4 90 10\n7 5 10 7\n3 11 71 6\n7 2 60 7\n9 7 52 2\n8 4 41 2\n11 2 59 2\n10 5 16 6\n",
    "vertices": [
      7,
      9
    ],
    "answer": 2376,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 3 (source) to vertex 8 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 52 edges\n\nEdges (Format: Node Node Capacity):\n1 2 5\n1 6 2\n2 11 10\n6 8 2\n2 3 4\n6 10 1\n3 7 5\n2 4 7\n10 9 5\n2 5 6\n3 9 1\n11 6 1\n9 11 2\n6 2 2\n1 8 2\n4 1 7\n8 10 4\n5 11 2\n9 1 8\n6 5 10\n9 6 10\n5 10 9\n7 2 1\n8 4 6\n4 9 9\n10 1 3\n10 2 5\n7 5 9\n8 5 2\n11 3 3\n11 7 7\n4 5 6\n7 6 7\n3 5 8\n1 3 3\n6 4 1\n8 7 4\n4 10 8\n4 7 3\n11 4 9\n4 3 7\n10 3 4\n9 2 7\n8 9 4\n1 5 1\n8 2 9\n10 11 9\n9 5 3\n10 7 5\n6 3 7\n7 9 5\n3 8 10\n",
    "graph_output": "11 52\n1 2 5\n1 6 2\n2 11 10\n6 8 2\n2 3 4\n6 10 1\n3 7 5\n2 4 7\n10 9 5\n2 5 6\n3 9 1\n11 6 1\n9 11 2\n6 2 2\n1 8 2\n4 1 7\n8 10 4\n5 11 2\n9 1 8\n6 5 10\n9 6 10\n5 10 9\n7 2 1\n8 4 6\n4 9 9\n10 1 3\n10 2 5\n7 5 9\n8 5 2\n11 3 3\n11 7 7\n4 5 6\n7 6 7\n3 5 8\n1 3 3\n6 4 1\n8 7 4\n4 10 8\n4 7 3\n11 4 9\n4 3 7\n10 3 4\n9 2 7\n8 9 4\n1 5 1\n8 2 9\n10 11 9\n9 5 3\n10 7 5\n6 3 7\n7 9 5\n3 8 10\n",
    "vertices": [
      3,
      8
    ],
    "answer": 43,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 17 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   0   0   1   0   0   0   1   0   0   1   0   0   0   0 \n 2 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   1   0   0   1   0   0   1   0   1   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 5 |  0   0   0   0   0   0   1   1   0   0   1   0   0   0   0   0   0 \n 6 |  1   1   1   0   0   0   1   0   0   0   1   0   0   0   0   0   1 \n 7 |  0   0   0   0   1   1   0   0   0   0   0   0   0   0   1   0   0 \n 8 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n17 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "17 17\n1 6\n1 10\n6 3\n6 7\n7 5\n7 15\n3 9\n15 16\n5 8\n3 14\n6 2\n3 12\n6 11\n14 4\n6 17\n1 13\n11 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 87 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 11, 5, 14, 12, 3, 7, 13, 10, 8, 2\nVertex 2: 4, 10, 6, 13, 14, 8, 3, 5, 15, 1, 12, 9, 11\nVertex 3: 6, 4, 10, 12, 1, 9, 2, 13\nVertex 4: 3, 2, 14, 10, 13, 15, 5, 9, 12, 7, 11\nVertex 5: 1, 10, 12, 13, 8, 6, 4, 14, 11, 7, 2, 9, 15\nVertex 6: 14, 15, 3, 2, 10, 5, 11, 9, 7, 13, 12\nVertex 7: 8, 1, 14, 10, 9, 6, 5, 12, 13, 4, 15, 11\nVertex 8: 14, 7, 13, 5, 11, 1, 2, 10, 12\nVertex 9: 1, 11, 3, 6, 14, 4, 7, 10, 13, 15, 5, 2\nVertex 10: 2, 15, 3, 12, 4, 5, 6, 1, 7, 11, 14, 9, 8\nVertex 11: 1, 14, 9, 8, 6, 13, 10, 5, 15, 4, 2, 7\nVertex 12: 1, 13, 10, 5, 3, 14, 15, 7, 4, 6, 8, 2\nVertex 13: 12, 4, 8, 5, 14, 1, 11, 2, 15, 9, 7, 6, 3\nVertex 14: 1, 6, 8, 4, 11, 7, 12, 13, 15, 2, 5, 9, 10\nVertex 15: 6, 10, 4, 14, 13, 12, 9, 11, 2, 5, 7\n",
    "graph_output": "15 87\n1 9\n1 11\n1 5\n1 14\n14 6\n6 15\n6 3\n3 4\n14 8\n8 7\n1 12\n4 2\n2 10\n12 13\n10 15\n10 3\n10 12\n14 4\n10 4\n2 6\n10 5\n5 12\n3 12\n11 14\n3 1\n9 11\n1 7\n14 7\n3 9\n13 4\n10 6\n14 12\n8 13\n13 5\n14 13\n1 13\n1 10\n5 8\n15 4\n5 6\n8 11\n11 6\n11 13\n4 5\n13 2\n14 15\n8 1\n10 7\n11 10\n6 9\n2 14\n5 14\n14 9\n8 2\n3 2\n13 15\n4 9\n9 7\n6 7\n10 14\n10 9\n11 5\n15 12\n5 7\n13 9\n9 15\n7 12\n11 15\n12 4\n10 8\n13 7\n5 2\n15 2\n6 13\n5 9\n15 5\n6 12\n7 4\n2 1\n12 8\n15 7\n2 12\n4 11\n2 9\n13 3\n2 11\n7 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0 \n 2 |  1   0   1   0   0   1   0   0   0   0   0   1   1   0   0   0   0 \n 3 |  0   1   0   0   1   0   0   1   0   0   0   0   0   1   0   1   0 \n 4 |  0   0   0   0   1   1   0   0   0   0   1   1   0   0   0   0   0 \n 5 |  0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   1   0   1   0   0   0   0   0   0   0   1   0   0   1   0   0 \n 7 |  1   0   0   0   0   0   0   1   0   0   0   0   0   1   1   0   0 \n 8 |  0   0   1   0   0   0   1   0   1   1   0   1   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0 \n10 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n11 |  1   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   1 \n12 |  0   1   0   1   0   1   0   1   0   0   0   0   0   0   0   1   0 \n13 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n14 |  0   0   1   0   0   0   1   0   0   0   1   0   0   0   0   1   0 \n15 |  0   0   0   0   0   1   1   0   1   0   0   0   1   0   0   0   0 \n16 |  0   0   1   0   0   0   0   0   0   0   0   1   0   1   0   0   1 \n17 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0 \n",
    "graph_output": "17 30\n12 8\n17 11\n16 12\n13 2\n3 2\n14 3\n4 11\n11 14\n15 9\n2 1\n16 17\n8 7\n1 11\n16 14\n5 3\n6 12\n4 6\n9 8\n12 2\n16 3\n14 7\n13 15\n7 1\n7 15\n2 6\n10 8\n8 3\n5 4\n6 15\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 14 to vertex 10 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 89 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (14\u00d714):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14\n   --------------------------------------------------------\n 1 |  0  37  32   6  20 100  76  50  70   8  54  41  94  16 \n 2 | 37   0  22  92  67  62  30   4  15   0  57  28   6  40 \n 3 | 32  22   0  95  31   3  66  39  12  85  14  81  80  41 \n 4 |  6  92  95   0  29   5  60  61   9  86  69  11  25   1 \n 5 | 20  67  31  29   0  41  37  91  31  19  36  17  23  98 \n 6 |100  62   3   5  41   0  98  55  60  23  59  40  50  91 \n 7 | 76  30  66  60  37  98   0  60  33  95  23  35  23  47 \n 8 | 50   4  39  61  91  55  60   0  56  92  21  77  23  22 \n 9 | 70  15  12   9  31  60  33  56   0  71  38   8  67  89 \n10 |  8   0  85  86  19  23  95  92  71   0  57  78   5  90 \n11 | 54  57  14  69  36  59  23  21  38  57   0  56   0   4 \n12 | 41  28  81  11  17  40  35  77   8  78  56   0  49  68 \n13 | 94   6  80  25  23  50  23  23  67   5   0  49   0  62 \n14 | 16  40  41   1  98  91  47  22  89  90   4  68  62   0 \n",
    "graph_output": "14 89\n1 13 94\n1 14 16\n13 8 23\n8 2 4\n1 9 70\n2 6 62\n1 3 32\n6 11 59\n13 12 49\n1 4 6\n3 10 85\n2 5 67\n12 7 35\n4 2 92\n5 7 37\n6 5 41\n12 3 81\n2 9 15\n7 3 66\n5 9 31\n10 12 78\n8 14 22\n14 2 40\n10 7 95\n12 4 11\n6 1 100\n11 4 69\n7 2 30\n1 2 37\n3 6 3\n12 14 68\n8 1 50\n11 9 38\n5 10 19\n2 13 6\n14 6 91\n12 6 40\n9 7 33\n3 11 14\n13 6 50\n1 5 20\n4 7 60\n9 10 71\n11 10 57\n13 5 23\n10 1 8\n9 3 12\n14 9 89\n8 5 91\n3 2 22\n2 12 28\n4 8 61\n12 11 56\n8 10 92\n3 8 39\n10 14 90\n4 14 1\n11 14 4\n7 6 98\n13 9 67\n4 5 29\n6 8 55\n11 2 57\n13 10 5\n9 8 56\n4 9 9\n6 4 5\n11 7 23\n3 13 80\n3 14 41\n12 1 41\n11 5 36\n7 1 76\n4 10 86\n8 11 21\n3 5 31\n7 8 60\n4 13 25\n14 7 47\n3 4 95\n9 6 60\n12 9 8\n14 13 62\n12 8 77\n6 10 23\n11 1 54\n5 12 17\n13 7 23\n5 14 98\n",
    "vertices": [
      14,
      10
    ],
    "answer": 15,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 12 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 2, 3, 6\nVertex 2: 4, 1, 3, 6\nVertex 3: 5, 1, 4, 2, 6\nVertex 4: 2, 1, 6, 3\nVertex 5: 3, 6\nVertex 6: 5, 4, 1, 2, 3\n",
    "graph_output": "6 12\n4 2\n4 1\n5 3\n6 5\n4 6\n2 1\n3 1\n3 4\n2 3\n6 1\n2 6\n6 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 53,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 8 and vertex 2 are connected.\n\nThis is an undirected graph with 17 vertices and 105 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   1   0   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 2 |  0   0   0   1   1   1   0   1   1   1   0   1   0   1   1   1   1 \n 3 |  1   0   0   1   0   1   0   1   1   1   0   1   0   1   1   1   1 \n 4 |  0   1   1   0   1   1   1   1   0   1   1   0   1   1   1   1   1 \n 5 |  1   1   0   1   0   0   0   1   0   1   0   1   0   1   1   0   1 \n 6 |  1   1   1   1   0   0   1   1   1   1   1   1   1   1   1   0   1 \n 7 |  1   0   0   1   0   1   0   1   1   1   1   1   0   1   1   1   1 \n 8 |  0   1   1   1   1   1   1   0   1   1   0   1   0   1   1   1   1 \n 9 |  1   1   1   0   0   1   1   1   0   1   0   0   0   1   0   1   0 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   0   1   1   1   1 \n11 |  1   0   0   1   0   1   1   0   0   1   0   1   1   1   0   1   1 \n12 |  1   1   1   0   1   1   1   1   0   1   1   0   1   1   1   1   1 \n13 |  1   0   0   1   0   1   0   0   0   0   1   1   0   1   1   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n15 |  1   1   1   1   1   1   1   1   0   1   0   1   1   1   0   0   1 \n16 |  1   1   1   1   0   0   1   1   1   1   1   1   1   1   0   0   1 \n17 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   0 \n",
    "graph_output": "17 105\n8 10\n12 1\n9 10\n1 13\n5 4\n7 11\n6 3\n12 2\n14 6\n17 13\n15 3\n1 7\n2 10\n17 7\n16 9\n1 16\n4 3\n15 8\n9 14\n14 13\n1 10\n16 8\n15 6\n6 13\n14 5\n1 9\n14 15\n4 2\n14 12\n6 12\n10 14\n11 16\n16 13\n15 2\n5 2\n5 15\n5 8\n4 13\n5 10\n16 3\n11 17\n13 12\n17 8\n12 7\n8 4\n7 4\n7 16\n6 8\n3 14\n17 14\n13 11\n2 8\n12 8\n17 6\n4 17\n12 10\n8 14\n11 4\n17 15\n7 9\n12 15\n3 17\n8 3\n9 2\n6 1\n10 11\n6 10\n16 2\n8 7\n17 5\n17 2\n14 2\n7 6\n15 13\n10 16\n5 12\n15 4\n4 14\n14 7\n10 7\n15 7\n12 11\n6 2\n17 10\n12 16\n5 1\n6 9\n3 9\n16 14\n1 15\n10 15\n1 17\n6 4\n16 4\n8 9\n14 1\n1 11\n11 14\n11 6\n4 10\n12 3\n17 16\n3 1\n17 12\n3 10\n",
    "vertices": [
      8,
      2
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 5 (source) to vertex 9 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 9 vertices and 8 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 9 78 8\n1 5 48 6\n9 2 54 10\n1 3 45 5\n5 8 71 1\n2 6 26 10\n1 7 13 4\n9 4 86 4\n",
    "graph_output": "9 8\n1 9 78 8\n1 5 48 6\n9 2 54 10\n1 3 45 5\n5 8 71 1\n2 6 26 10\n1 7 13 4\n9 4 86 4\n",
    "vertices": [
      5,
      9
    ],
    "answer": 756,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 46 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0  12  68   0  99   0  93  94  39  45  25  65 \n 2 | 12   0  75   2  26  14   0  33   0  20  70  56 \n 3 | 68  75   0  63  21  33   1   0  60  54  28   0 \n 4 |  0   2  63   0  58  97  19  83   0   0  56  89 \n 5 | 99  26  21  58   0  21  78   0   0   7  49   0 \n 6 |  0  14  33  97  21   0  83   0   0  76   0   0 \n 7 | 93   0   1  19  78  83   0  96   0   0   0  99 \n 8 | 94  33   0  83   0   0  96   0  32 100  70  70 \n 9 | 39   0  60   0   0   0   0  32   0  27  15  49 \n10 | 45  20  54   0   7  76   0 100  27   0   0   0 \n11 | 25  70  28  56  49   0   0  70  15   0   0  53 \n12 | 65  56   0  89   0   0  99  70  49   0  53   0 \n",
    "graph_output": "12 46\n1 3 68\n1 8 94\n3 7 1\n1 11 25\n3 6 33\n11 2 70\n6 4 97\n4 5 58\n8 10 100\n3 9 60\n8 12 70\n8 2 33\n7 5 78\n5 6 21\n11 4 56\n3 4 63\n11 5 49\n1 9 39\n1 2 12\n12 2 56\n4 8 83\n7 8 96\n11 9 15\n5 1 99\n7 4 19\n7 6 83\n3 11 28\n10 6 76\n3 10 54\n10 1 45\n6 2 14\n8 9 32\n2 3 75\n7 12 99\n11 8 70\n10 2 20\n12 4 89\n12 1 65\n2 4 2\n10 5 7\n9 10 27\n9 12 49\n3 5 21\n12 11 53\n1 7 93\n2 5 26\n",
    "vertices": [
      null,
      null
    ],
    "answer": 197,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 13 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 8 and vertex 7.\n",
    "graph_output": "13 13\n6 12\n10 2\n1 6\n10 12\n1 13\n9 1\n4 10\n6 13\n10 7\n11 13\n7 1\n13 2\n8 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 30 vertices and 29 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 17 and vertex 18.\nThere is an edge between vertex 1 and vertex 23.\nThere is an edge between vertex 17 and vertex 20.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 12 and vertex 28.\nThere is an edge between vertex 12 and vertex 27.\nThere is an edge between vertex 27 and vertex 19.\nThere is an edge between vertex 23 and vertex 2.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 8 and vertex 26.\nThere is an edge between vertex 19 and vertex 5.\nThere is an edge between vertex 28 and vertex 14.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 27 and vertex 25.\nThere is an edge between vertex 17 and vertex 24.\nThere is an edge between vertex 28 and vertex 21.\nThere is an edge between vertex 21 and vertex 29.\nThere is an edge between vertex 29 and vertex 4.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 28 and vertex 15.\nThere is an edge between vertex 26 and vertex 22.\nThere is an edge between vertex 18 and vertex 6.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 27 and vertex 9.\nThere is an edge between vertex 28 and vertex 11.\nThere is an edge between vertex 19 and vertex 30.\n",
    "graph_output": "30 29\n1 17\n17 18\n1 23\n17 20\n17 12\n12 28\n12 27\n27 19\n23 2\n17 8\n8 26\n19 5\n28 14\n14 7\n27 25\n17 24\n28 21\n21 29\n29 4\n5 3\n28 15\n26 22\n18 6\n3 10\n10 16\n5 13\n27 9\n28 11\n19 30\n",
    "vertices": [
      null,
      null
    ],
    "answer": 12,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 115 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 6, 11, 2, 13, 16, 3, 4, 10, 15, 9, 7, 14, 5\nVertex 2: 8, 12, 9, 16, 3, 10, 1, 11, 13, 5, 7, 14, 4, 6\nVertex 3: 6, 2, 4, 7, 10, 8, 16, 15, 12, 11, 9, 1, 5, 13, 14\nVertex 4: 7, 8, 3, 11, 9, 15, 10, 16, 6, 5, 13, 1, 2\nVertex 5: 11, 16, 15, 14, 6, 12, 7, 13, 4, 9, 2, 8, 3, 10, 1\nVertex 6: 9, 14, 11, 3, 1, 16, 5, 8, 13, 15, 7, 4, 10, 2\nVertex 7: 4, 16, 15, 3, 10, 12, 6, 5, 8, 11, 2, 13, 9, 14, 1\nVertex 8: 2, 11, 1, 12, 4, 16, 10, 9, 14, 3, 15, 6, 7, 13, 5\nVertex 9: 6, 2, 8, 10, 4, 11, 3, 15, 5, 12, 14, 7, 16, 13, 1\nVertex 10: 12, 16, 14, 8, 9, 2, 3, 7, 15, 4, 13, 6, 1, 5, 11\nVertex 11: 8, 5, 6, 16, 1, 4, 12, 15, 14, 2, 9, 3, 7, 13, 10\nVertex 12: 10, 2, 13, 8, 14, 16, 11, 7, 15, 5, 3, 9\nVertex 13: 12, 15, 6, 16, 1, 2, 10, 14, 5, 4, 8, 7, 3, 9, 11\nVertex 14: 6, 12, 16, 10, 5, 8, 11, 13, 9, 2, 15, 7, 3, 1\nVertex 15: 16, 5, 13, 7, 8, 10, 11, 12, 4, 6, 3, 9, 1, 14\nVertex 16: 15, 10, 5, 7, 8, 14, 2, 11, 12, 6, 3, 13, 1, 4, 9\n",
    "graph_output": "16 115\n15 16\n12 10\n10 16\n6 9\n2 8\n11 8\n5 11\n7 4\n2 12\n8 1\n13 12\n8 12\n5 16\n14 6\n15 5\n7 16\n6 11\n4 8\n14 12\n3 6\n16 8\n2 9\n16 14\n10 14\n2 16\n1 6\n11 16\n12 16\n13 15\n10 8\n3 2\n5 14\n9 8\n16 6\n10 9\n11 1\n2 10\n1 2\n15 7\n3 4\n8 14\n7 3\n3 10\n8 3\n4 11\n7 10\n9 4\n15 8\n6 5\n10 15\n12 11\n12 7\n11 15\n12 15\n11 14\n3 16\n6 8\n15 4\n13 6\n11 2\n6 15\n7 6\n12 5\n3 15\n4 10\n16 13\n1 13\n12 3\n11 9\n13 2\n11 3\n16 1\n7 5\n13 10\n16 4\n13 14\n4 6\n8 7\n3 9\n9 15\n5 13\n3 1\n11 7\n10 6\n5 4\n5 9\n2 5\n4 13\n1 4\n1 10\n7 2\n13 8\n5 8\n12 9\n5 3\n5 10\n9 14\n13 7\n2 14\n1 15\n7 9\n9 16\n15 14\n13 3\n14 7\n13 9\n11 13\n9 1\n7 1\n4 2\n2 6\n14 3\n14 1\n1 5\n10 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 23 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 5 and vertex 8.\n",
    "graph_output": "16 23\n1 5\n1 9\n1 14\n5 3\n14 16\n9 8\n14 2\n3 4\n1 12\n16 11\n9 7\n16 13\n4 10\n3 15\n16 6\n14 15\n4 14\n4 6\n3 10\n5 15\n14 5\n8 6\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 9 and vertex 8 are connected.\n\nUndirected Graph with 15 vertices and 98 edges\n\nEdges (Format: Node Node):\n5 11\n14 12\n6 13\n10 15\n7 10\n6 2\n8 3\n11 3\n3 12\n5 14\n11 1\n5 3\n15 8\n4 13\n11 13\n5 1\n10 6\n7 14\n13 1\n13 12\n15 1\n9 5\n8 4\n15 13\n4 14\n4 12\n8 7\n14 11\n7 12\n6 8\n7 6\n10 4\n3 10\n5 6\n2 12\n7 3\n8 13\n3 6\n10 9\n3 9\n1 10\n10 13\n2 4\n12 8\n9 4\n9 11\n5 12\n1 3\n9 7\n5 4\n15 9\n9 12\n10 14\n5 10\n2 13\n7 11\n15 6\n2 10\n3 2\n2 15\n10 11\n1 6\n2 8\n14 3\n11 4\n8 11\n3 13\n6 9\n5 13\n12 1\n1 2\n13 7\n13 14\n7 15\n8 9\n2 7\n2 11\n10 8\n15 5\n2 14\n9 1\n1 4\n14 1\n15 11\n6 4\n9 13\n15 12\n5 7\n11 6\n14 15\n1 7\n2 9\n5 2\n4 3\n9 14\n8 14\n14 6\n7 4\n",
    "graph_output": "15 98\n5 11\n14 12\n6 13\n10 15\n7 10\n6 2\n8 3\n11 3\n3 12\n5 14\n11 1\n5 3\n15 8\n4 13\n11 13\n5 1\n10 6\n7 14\n13 1\n13 12\n15 1\n9 5\n8 4\n15 13\n4 14\n4 12\n8 7\n14 11\n7 12\n6 8\n7 6\n10 4\n3 10\n5 6\n2 12\n7 3\n8 13\n3 6\n10 9\n3 9\n1 10\n10 13\n2 4\n12 8\n9 4\n9 11\n5 12\n1 3\n9 7\n5 4\n15 9\n9 12\n10 14\n5 10\n2 13\n7 11\n15 6\n2 10\n3 2\n2 15\n10 11\n1 6\n2 8\n14 3\n11 4\n8 11\n3 13\n6 9\n5 13\n12 1\n1 2\n13 7\n13 14\n7 15\n8 9\n2 7\n2 11\n10 8\n15 5\n2 14\n9 1\n1 4\n14 1\n15 11\n6 4\n9 13\n15 12\n5 7\n11 6\n14 15\n1 7\n2 9\n5 2\n4 3\n9 14\n8 14\n14 6\n7 4\n",
    "vertices": [
      9,
      8
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 54 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   1   1   1   1   0   1   1   1   1   1 \n 2 |  0   0   1   1   1   0   1   1   0   0   0   1   0 \n 3 |  0   1   0   0   1   1   1   1   1   0   1   1   0 \n 4 |  1   1   0   0   1   1   1   1   1   1   1   0   0 \n 5 |  1   1   1   1   0   0   1   0   0   1   1   0   1 \n 6 |  1   0   1   1   0   0   1   1   1   1   0   0   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   0   1   1 \n 8 |  0   1   1   1   0   1   1   0   0   1   1   1   1 \n 9 |  1   0   1   1   0   1   1   0   0   1   0   1   0 \n10 |  1   0   0   1   1   1   1   1   1   0   0   1   1 \n11 |  1   0   1   1   1   0   0   1   0   0   0   1   1 \n12 |  1   1   1   0   0   0   1   1   1   1   1   0   1 \n13 |  1   0   0   0   1   1   1   1   0   1   1   1   0 \n\nCapacity Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   6   9   8   5   0   7   9  10   4   3 \n 2 |  0   0   5   6   9   0   3   2   0   0   0   1   0 \n 3 |  0   5   0   0   9   8   8   8   6   0   8   7   0 \n 4 |  6   6   0   0   8   4   5   3   6   4   9   0   0 \n 5 |  9   9   9   8   0   0   5   0   0   4   9   0   4 \n 6 |  8   0   8   4   0   0   1   3   1   1   0   0   3 \n 7 |  5   3   8   5   5   1   0   7   6   7   0   8   8 \n 8 |  0   2   8   3   0   3   7   0   0   9   5   4   6 \n 9 |  7   0   6   6   0   1   6   0   0   9   0   9   0 \n10 |  9   0   0   4   4   1   7   9   9   0   0   8   4 \n11 | 10   0   8   9   9   0   0   5   0   0   0   3   2 \n12 |  4   1   7   0   0   0   8   4   9   8   3   0   9 \n13 |  3   0   0   0   4   3   8   6   0   4   2   9   0 \n",
    "graph_output": "13 54\n1 13 3\n1 11 10\n1 10 9\n11 12 3\n1 6 8\n12 7 8\n12 2 1\n10 9 9\n2 3 5\n10 4 4\n2 8 2\n3 5 9\n4 8 3\n12 1 4\n1 4 6\n4 2 6\n5 13 4\n4 6 4\n1 9 7\n13 10 4\n3 7 8\n7 2 3\n5 11 9\n5 4 8\n9 3 6\n7 13 8\n10 6 1\n10 12 8\n9 7 6\n3 11 8\n1 5 9\n4 11 9\n11 13 2\n5 10 4\n4 9 6\n8 7 7\n3 12 7\n5 7 5\n8 10 9\n8 13 6\n1 7 5\n7 4 5\n5 2 9\n8 3 8\n12 8 4\n6 8 3\n10 7 7\n12 9 9\n13 6 3\n11 8 5\n6 3 8\n12 13 9\n7 6 1\n6 9 1\n",
    "vertices": [
      3,
      2
    ],
    "answer": 26,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 3 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 37 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 2 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 9 and vertex 11 with a capacity of 4.\nThere is an edge between vertex 2 and vertex 3 with a capacity of 3.\nThere is an edge between vertex 11 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 4 and vertex 5 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 6 with a capacity of 2.\nThere is an edge between vertex 7 and vertex 11 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 10 with a capacity of 7.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 6 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 4.\nThere is an edge between vertex 6 and vertex 1 with a capacity of 10.\nThere is an edge between vertex 4 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 11 and vertex 6 with a capacity of 3.\nThere is an edge between vertex 8 and vertex 3 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 5 with a capacity of 10.\nThere is an edge between vertex 8 and vertex 11 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 3 with a capacity of 9.\nThere is an edge between vertex 11 and vertex 1 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 4 with a capacity of 4.\nThere is an edge between vertex 7 and vertex 3 with a capacity of 3.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 7.\nThere is an edge between vertex 2 and vertex 11 with a capacity of 4.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 7.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 7.\nThere is an edge between vertex 8 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 5 and vertex 11 with a capacity of 7.\nThere is an edge between vertex 6 and vertex 2 with a capacity of 2.\n",
    "graph_output": "11 37\n1 2 10\n2 7 10\n1 9 4\n2 8 9\n9 11 4\n2 3 3\n11 4 6\n1 10 10\n4 5 5\n9 6 2\n7 11 9\n5 10 7\n1 5 2\n4 6 2\n5 9 9\n3 5 4\n6 1 10\n4 10 9\n11 6 3\n8 3 2\n2 5 10\n8 11 3\n1 8 1\n11 3 9\n11 1 9\n1 4 3\n7 4 4\n7 3 3\n6 3 7\n2 11 4\n2 10 7\n5 6 2\n4 3 8\n7 8 7\n8 6 10\n5 11 7\n6 2 2\n",
    "vertices": [
      3,
      10
    ],
    "answer": 33,
    "description_type": "natural"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 12 vertices and 57 edges\n\nEdges (Format: Node Node):\n8 5\n2 4\n3 7\n6 11\n4 1\n8 11\n3 12\n12 4\n2 10\n1 10\n7 12\n9 3\n7 4\n2 8\n7 8\n3 5\n5 9\n12 1\n10 3\n6 12\n12 8\n6 5\n12 2\n9 10\n2 6\n7 10\n2 5\n12 9\n1 8\n11 3\n12 11\n7 5\n3 4\n1 2\n9 7\n5 1\n10 11\n11 2\n3 6\n2 9\n3 2\n6 8\n3 8\n7 2\n4 6\n1 7\n8 10\n1 11\n6 10\n6 7\n5 4\n7 11\n9 6\n10 5\n6 1\n12 5\n9 8\n",
    "graph_output": "12 57\n8 5\n2 4\n3 7\n6 11\n4 1\n8 11\n3 12\n12 4\n2 10\n1 10\n7 12\n9 3\n7 4\n2 8\n7 8\n3 5\n5 9\n12 1\n10 3\n6 12\n12 8\n6 5\n12 2\n9 10\n2 6\n7 10\n2 5\n12 9\n1 8\n11 3\n12 11\n7 5\n3 4\n1 2\n9 7\n5 1\n10 11\n11 2\n3 6\n2 9\n3 2\n6 8\n3 8\n7 2\n4 6\n1 7\n8 10\n1 11\n6 10\n6 7\n5 4\n7 11\n9 6\n10 5\n6 1\n12 5\n9 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 143,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 17 vertices and 102 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   0   1   1   0   1   0   0   1   0   1   1   0   1   0   1 \n 2 |  1   0   0   1   1   1   1   1   1   1   0   1   1   0   1   1   0 \n 3 |  0   0   0   1   1   1   1   1   1   1   1   0   1   1   1   0   1 \n 4 |  1   1   1   0   0   1   1   0   1   1   1   0   1   1   0   1   1 \n 5 |  1   1   1   0   0   1   1   1   1   1   1   1   0   1   1   1   1 \n 6 |  0   1   1   1   1   0   0   1   1   1   1   1   1   0   1   0   0 \n 7 |  1   1   1   1   1   0   0   1   1   1   1   1   0   1   1   1   0 \n 8 |  0   1   1   0   1   1   1   0   1   1   1   1   1   1   1   1   0 \n 9 |  0   1   1   1   1   1   1   1   0   1   1   1   1   1   0   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   0   0   1   1   1   0 \n11 |  0   0   1   1   1   1   1   1   1   1   0   1   1   1   0   1   1 \n12 |  1   1   0   0   1   1   1   1   1   0   1   0   1   1   1   0   1 \n13 |  1   1   1   1   0   1   0   1   1   0   1   1   0   0   1   1   1 \n14 |  0   0   1   1   1   0   1   1   1   1   1   1   0   0   1   0   1 \n15 |  1   1   1   0   1   1   1   1   0   1   0   1   1   1   0   0   1 \n16 |  0   1   0   1   1   0   1   1   1   1   1   0   1   0   0   0   1 \n17 |  1   0   1   1   1   0   0   0   1   0   1   1   1   1   1   1   0 \n",
    "graph_output": "17 102\n1 10\n10 7\n7 9\n9 16\n1 15\n15 3\n15 5\n1 17\n10 2\n5 8\n16 4\n9 6\n1 13\n7 14\n6 11\n9 12\n11 5\n12 13\n1 12\n9 14\n3 17\n1 2\n10 6\n16 10\n17 12\n11 10\n14 11\n2 12\n6 15\n15 13\n4 10\n9 4\n9 2\n16 11\n14 15\n12 5\n8 11\n8 6\n10 9\n4 6\n8 10\n6 5\n7 4\n17 4\n5 14\n2 6\n16 2\n7 3\n13 6\n11 3\n16 5\n5 17\n12 15\n4 1\n14 3\n14 12\n11 9\n17 15\n7 16\n3 6\n12 7\n16 17\n11 13\n15 2\n15 8\n5 7\n4 3\n7 11\n2 4\n3 10\n8 13\n17 11\n9 3\n3 8\n9 8\n3 13\n17 14\n3 5\n7 2\n9 5\n16 8\n13 4\n15 7\n17 9\n8 2\n14 4\n11 12\n8 7\n1 7\n14 10\n13 16\n5 2\n11 4\n6 12\n5 10\n1 5\n12 8\n14 8\n13 2\n17 13\n13 9\n10 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 102 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 13 and vertex 17.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 8 and vertex 17.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 17 and vertex 15.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 5 and vertex 17.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 17 and vertex 3.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 17 and vertex 14.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 17 and vertex 16.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 1 and vertex 10.\n",
    "graph_output": "17 102\n1 6\n6 16\n1 12\n6 7\n6 3\n3 13\n6 15\n6 4\n3 5\n7 11\n6 8\n8 14\n13 10\n5 9\n13 17\n10 2\n2 9\n15 13\n15 1\n8 17\n2 15\n16 9\n5 13\n13 9\n14 2\n3 16\n11 16\n13 11\n8 7\n3 4\n8 2\n16 1\n13 4\n16 15\n4 5\n5 1\n14 7\n15 12\n11 9\n7 1\n15 7\n3 7\n3 15\n8 4\n3 10\n17 15\n1 14\n2 7\n2 4\n10 6\n7 13\n9 6\n10 16\n3 9\n2 3\n7 4\n4 11\n14 4\n1 13\n5 11\n2 13\n15 11\n8 3\n5 17\n14 9\n1 2\n10 9\n8 9\n5 2\n16 2\n15 8\n10 12\n14 5\n1 9\n17 3\n1 17\n17 14\n16 12\n7 10\n12 2\n12 6\n6 11\n11 17\n17 2\n2 6\n12 14\n17 16\n4 1\n4 10\n8 12\n14 6\n15 14\n8 16\n10 8\n15 4\n12 9\n5 15\n12 17\n10 15\n12 4\n8 11\n1 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 26 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   1   1   1   0   1   0   1   1   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   1   0   1   0   0   0   0   0   1   0   0 \n 3 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  1   0   0   0   0   0   0   0   1   0   0   1   1   0   0   0 \n 5 |  1   0   0   0   0   1   0   0   0   0   1   1   0   0   0   0 \n 6 |  0   1   0   0   1   0   0   0   0   0   0   0   1   0   0   0 \n 7 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 8 |  0   1   0   0   0   0   0   0   0   1   0   0   1   0   0   0 \n 9 |  1   0   0   1   0   0   0   0   0   0   0   0   0   1   0   1 \n10 |  1   0   0   0   0   0   0   1   0   0   0   1   0   0   1   0 \n11 |  0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   1 \n12 |  0   0   0   1   1   0   0   0   0   1   1   0   0   1   0   0 \n13 |  0   0   0   1   0   1   0   1   0   0   0   0   0   0   0   0 \n14 |  0   1   0   0   0   0   0   0   1   0   0   1   0   0   0   0 \n15 |  0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0 \n",
    "graph_output": "16 26\n1 5\n1 10\n5 12\n10 15\n1 4\n12 11\n10 8\n11 16\n5 6\n4 13\n1 7\n6 2\n2 14\n1 3\n4 9\n10 12\n16 9\n5 11\n15 7\n9 1\n12 4\n13 8\n9 14\n13 6\n2 8\n12 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 56 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0  75  89  71   0  33  37  68  91   6  50  15 \n 2 | 75   0  24   0  44  16  77  90   0  18  19   0 \n 3 | 89  24   0  32   0  33  57   0  13  29   0  22 \n 4 | 71   0  32   0  60  41  99  15   0  30  11   4 \n 5 |  0  44   0  60   0  78  23  95  91  84  51   0 \n 6 | 33  16  33  41  78   0  65  63  22  37   0  14 \n 7 | 37  77  57  99  23  65   0  30  61  16  35  48 \n 8 | 68  90   0  15  95  63  30   0  54  46  13  15 \n 9 | 91   0  13   0  91  22  61  54   0  54  64  50 \n10 |  6  18  29  30  84  37  16  46  54   0  80  77 \n11 | 50  19   0  11  51   0  35  13  64  80   0  82 \n12 | 15   0  22   4   0  14  48  15  50  77  82   0 \n",
    "graph_output": "12 56\n1 8 68\n1 11 50\n1 10 6\n11 4 11\n1 3 89\n4 5 60\n1 9 91\n9 6 22\n5 2 44\n8 7 30\n6 12 14\n8 5 95\n12 4 4\n2 3 24\n10 7 16\n12 10 77\n2 11 19\n9 12 50\n12 7 48\n10 6 37\n8 9 54\n4 1 71\n6 8 63\n8 4 15\n9 7 61\n6 7 65\n12 8 15\n11 10 80\n11 8 13\n5 11 51\n8 2 90\n1 12 15\n9 5 91\n2 10 18\n5 10 84\n10 3 29\n6 4 41\n8 10 46\n2 6 16\n12 11 82\n7 4 99\n3 4 32\n1 7 37\n10 4 30\n3 9 13\n11 7 35\n7 3 57\n2 1 75\n5 7 23\n3 12 22\n6 5 78\n2 7 77\n9 10 54\n6 1 33\n3 6 33\n11 9 64\n",
    "vertices": [
      null,
      null
    ],
    "answer": 155,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 24 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 16, 6, 14, 3\nVertex 2: 16, 11, 15, 8\nVertex 3: 14, 12, 6, 1, 16\nVertex 4: 13, 8\nVertex 5: 9\nVertex 6: 1, 7, 3\nVertex 7: 6, 9\nVertex 8: 12, 15, 2, 4\nVertex 9: 1, 5, 7\nVertex 10: 14\nVertex 11: 2, 14, 12\nVertex 12: 3, 8, 11\nVertex 13: 16, 4\nVertex 14: 1, 10, 3, 11\nVertex 15: 8, 2\nVertex 16: 1, 2, 13, 3\n",
    "graph_output": "16 24\n1 9\n1 16\n1 6\n1 14\n14 10\n16 2\n14 3\n16 13\n13 4\n3 12\n2 11\n12 8\n8 15\n6 7\n9 5\n3 6\n3 1\n2 15\n14 11\n7 9\n2 8\n4 8\n11 12\n16 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 6 (source) to vertex 3 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 45 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 10 (weight=38, capacity=6), 4 (weight=85, capacity=5), 3 (weight=40, capacity=5), 5 (weight=94, capacity=4), 7 (weight=28, capacity=9), 2 (weight=21, capacity=3), 6 (weight=14, capacity=2), 8 (weight=100, capacity=2), 9 (weight=86, capacity=7)\nVertex 2: 4 (weight=16, capacity=5), 6 (weight=16, capacity=6), 9 (weight=46, capacity=8), 5 (weight=81, capacity=7), 1 (weight=21, capacity=3), 8 (weight=84, capacity=2), 10 (weight=59, capacity=8), 7 (weight=15, capacity=8), 3 (weight=69, capacity=9), 11 (weight=20, capacity=3)\nVertex 3: 10 (weight=71, capacity=9), 7 (weight=9, capacity=2), 11 (weight=89, capacity=7), 1 (weight=40, capacity=5), 6 (weight=95, capacity=3), 2 (weight=69, capacity=9), 9 (weight=22, capacity=2), 4 (weight=96, capacity=10)\nVertex 4: 10 (weight=47, capacity=7), 2 (weight=16, capacity=5), 5 (weight=82, capacity=6), 1 (weight=85, capacity=5), 3 (weight=96, capacity=10), 8 (weight=87, capacity=6), 7 (weight=65, capacity=4)\nVertex 5: 4 (weight=82, capacity=6), 9 (weight=98, capacity=3), 2 (weight=81, capacity=7), 1 (weight=94, capacity=4), 6 (weight=80, capacity=5), 10 (weight=20, capacity=5), 7 (weight=21, capacity=9), 11 (weight=27, capacity=5), 8 (weight=13, capacity=3)\nVertex 6: 10 (weight=3, capacity=6), 11 (weight=97, capacity=2), 2 (weight=16, capacity=6), 3 (weight=95, capacity=3), 5 (weight=80, capacity=5), 1 (weight=14, capacity=2), 7 (weight=94, capacity=2)\nVertex 7: 3 (weight=9, capacity=2), 1 (weight=28, capacity=9), 2 (weight=15, capacity=8), 11 (weight=26, capacity=5), 6 (weight=94, capacity=2), 9 (weight=67, capacity=4), 5 (weight=21, capacity=9), 4 (weight=65, capacity=4)\nVertex 8: 10 (weight=35, capacity=1), 11 (weight=70, capacity=1), 2 (weight=84, capacity=2), 4 (weight=87, capacity=6), 1 (weight=100, capacity=2), 9 (weight=40, capacity=7), 5 (weight=13, capacity=3)\nVertex 9: 11 (weight=64, capacity=10), 2 (weight=46, capacity=8), 5 (weight=98, capacity=3), 3 (weight=22, capacity=2), 7 (weight=67, capacity=4), 8 (weight=40, capacity=7), 1 (weight=86, capacity=7), 10 (weight=31, capacity=6)\nVertex 10: 1 (weight=38, capacity=6), 6 (weight=3, capacity=6), 4 (weight=47, capacity=7), 3 (weight=71, capacity=9), 8 (weight=35, capacity=1), 2 (weight=59, capacity=8), 11 (weight=9, capacity=6), 5 (weight=20, capacity=5), 9 (weight=31, capacity=6)\nVertex 11: 6 (weight=97, capacity=2), 9 (weight=64, capacity=10), 3 (weight=89, capacity=7), 8 (weight=70, capacity=1), 10 (weight=9, capacity=6), 2 (weight=20, capacity=3), 7 (weight=26, capacity=5), 5 (weight=27, capacity=5)\n",
    "graph_output": "11 45\n1 10 38 6\n10 6 3 6\n10 4 47 7\n10 3 71 9\n4 2 16 5\n3 7 9 2\n6 11 97 2\n10 8 35 1\n4 5 82 6\n11 9 64 10\n2 6 16 6\n4 1 85 5\n2 9 46 8\n5 9 98 3\n5 2 81 7\n11 3 89 7\n3 1 40 5\n5 1 94 4\n7 1 28 9\n11 8 70 1\n6 3 95 3\n1 2 21 3\n8 2 84 2\n5 6 80 5\n10 2 59 8\n2 7 15 8\n2 3 69 9\n1 6 14 2\n3 9 22 2\n10 11 9 6\n2 11 20 3\n11 7 26 5\n4 3 96 10\n6 7 94 2\n5 10 20 5\n9 7 67 4\n8 4 87 6\n1 8 100 2\n9 8 40 7\n1 9 86 7\n5 7 21 9\n11 5 27 5\n4 7 65 4\n8 5 13 3\n10 9 31 6\n",
    "vertices": [
      6,
      3
    ],
    "answer": 2714,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 107 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   0   1   0   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n 3 |  1   1   0   1   1   1   1   1   1   0   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   0   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   0   1   1   1   1 \n 6 |  0   1   1   1   1   0   1   1   1   0   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 8 |  0   1   1   1   1   1   1   0   0   1   1   0   1   1   1   0 \n 9 |  1   1   1   1   1   1   1   0   0   1   1   1   1   1   1   1 \n10 |  1   1   0   1   1   0   1   1   1   0   1   1   1   1   1   1 \n11 |  1   1   1   0   1   1   1   1   1   1   0   1   1   1   1   0 \n12 |  1   1   1   1   0   1   1   0   1   1   1   0   1   1   0   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   0   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   0   1   0   0   1 \n16 |  1   0   1   1   1   1   1   0   1   1   0   1   1   1   1   0 \n",
    "graph_output": "16 107\n9 14\n16 1\n12 2\n9 1\n8 14\n10 13\n13 4\n6 11\n5 1\n9 7\n5 2\n1 4\n3 1\n4 15\n7 14\n4 2\n10 9\n6 16\n6 14\n6 2\n12 9\n16 5\n3 12\n16 3\n1 14\n15 6\n6 7\n11 10\n7 5\n4 16\n1 13\n12 11\n12 1\n8 13\n7 2\n8 6\n4 12\n13 2\n1 7\n14 3\n11 2\n5 11\n12 10\n16 7\n10 15\n2 10\n8 7\n4 6\n15 9\n1 15\n13 3\n4 7\n5 9\n6 9\n16 15\n13 5\n3 7\n15 2\n5 10\n14 4\n16 12\n12 7\n9 2\n13 15\n4 5\n10 1\n16 10\n3 9\n11 15\n3 2\n9 16\n7 13\n5 6\n15 5\n11 7\n8 11\n10 4\n7 10\n3 8\n16 13\n16 14\n9 4\n13 6\n14 5\n13 9\n1 2\n13 12\n5 8\n3 5\n2 8\n13 11\n6 12\n14 2\n11 3\n12 14\n8 15\n3 4\n11 1\n8 4\n15 7\n14 13\n6 3\n3 15\n14 10\n11 14\n8 10\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 87 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 5, 15, 12, 6, 8, 2, 14, 11, 13, 7\nVertex 2: 5, 13, 10, 15, 1, 3, 4, 8, 7, 9, 11\nVertex 3: 1, 7, 6, 2, 13, 4, 8, 14, 5, 15\nVertex 4: 14, 12, 15, 13, 6, 10, 2, 7, 11, 3, 8, 9\nVertex 5: 1, 8, 2, 14, 6, 11, 13, 12, 10, 15, 9, 7, 3\nVertex 6: 1, 5, 3, 15, 4, 14, 9, 11, 7, 10, 12, 8\nVertex 7: 3, 10, 15, 13, 12, 4, 9, 5, 6, 2, 8, 1\nVertex 8: 5, 10, 1, 12, 9, 3, 2, 14, 4, 15, 13, 6, 7\nVertex 9: 11, 10, 14, 8, 6, 13, 7, 5, 12, 4, 2\nVertex 10: 7, 9, 8, 14, 2, 4, 13, 11, 5, 6, 12\nVertex 11: 12, 9, 5, 15, 10, 6, 4, 13, 1, 14, 2\nVertex 12: 1, 13, 11, 4, 8, 15, 7, 14, 5, 6, 9, 10\nVertex 13: 12, 2, 4, 7, 5, 10, 9, 3, 11, 15, 1, 8\nVertex 14: 5, 4, 9, 10, 6, 12, 1, 8, 3, 11, 15\nVertex 15: 1, 7, 4, 6, 12, 2, 11, 13, 5, 8, 3, 14\n",
    "graph_output": "15 87\n1 3\n1 5\n1 15\n1 12\n5 8\n5 2\n3 7\n12 13\n12 11\n5 14\n11 9\n7 10\n1 6\n14 4\n10 9\n5 6\n4 12\n10 8\n8 1\n6 3\n15 7\n2 13\n15 4\n6 15\n8 12\n15 12\n4 13\n9 14\n7 13\n5 11\n10 14\n10 2\n6 4\n10 4\n8 9\n14 6\n7 12\n5 13\n9 6\n2 15\n13 10\n14 12\n1 2\n9 13\n3 2\n11 15\n11 10\n6 11\n3 13\n2 4\n12 5\n4 7\n4 11\n10 5\n3 4\n8 3\n13 11\n14 1\n8 2\n14 8\n7 9\n1 11\n15 13\n8 4\n15 5\n5 9\n5 7\n7 6\n1 13\n3 14\n15 8\n6 10\n11 14\n13 8\n6 12\n9 12\n7 2\n3 5\n15 3\n6 8\n7 8\n1 7\n4 9\n9 2\n12 10\n2 11\n15 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 9 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 16 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5 with a capacity of 7.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 10 and vertex 11 with a capacity of 6.\nThere is an edge between vertex 1 and vertex 7 with a capacity of 2.\nThere is an edge between vertex 7 and vertex 12 with a capacity of 10.\nThere is an edge between vertex 12 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 12 and vertex 2 with a capacity of 6.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 13 with a capacity of 8.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 3 and vertex 1 with a capacity of 3.\nThere is an edge between vertex 2 and vertex 3 with a capacity of 4.\nThere is an edge between vertex 10 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 11 and vertex 3 with a capacity of 5.\n",
    "graph_output": "13 16\n1 5 7\n1 10 10\n10 11 6\n1 7 2\n7 12 10\n12 6 10\n12 2 6\n6 3 9\n1 4 2\n2 9 4\n4 13 8\n6 8 4\n3 1 3\n2 3 4\n10 9 4\n11 3 5\n",
    "vertices": [
      9,
      10
    ],
    "answer": 8,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 24 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a weight of 88.\nThere is an edge between vertex 1 and vertex 6 with a weight of 38.\nThere is an edge between vertex 1 and vertex 2 with a weight of 72.\nThere is an edge between vertex 6 and vertex 15 with a weight of 19.\nThere is an edge between vertex 6 and vertex 10 with a weight of 84.\nThere is an edge between vertex 1 and vertex 8 with a weight of 49.\nThere is an edge between vertex 10 and vertex 13 with a weight of 53.\nThere is an edge between vertex 8 and vertex 11 with a weight of 82.\nThere is an edge between vertex 13 and vertex 5 with a weight of 67.\nThere is an edge between vertex 6 and vertex 9 with a weight of 17.\nThere is an edge between vertex 3 and vertex 12 with a weight of 41.\nThere is an edge between vertex 12 and vertex 14 with a weight of 26.\nThere is an edge between vertex 11 and vertex 7 with a weight of 18.\nThere is an edge between vertex 5 and vertex 4 with a weight of 87.\nThere is an edge between vertex 8 and vertex 6 with a weight of 75.\nThere is an edge between vertex 4 and vertex 12 with a weight of 92.\nThere is an edge between vertex 15 and vertex 4 with a weight of 99.\nThere is an edge between vertex 12 and vertex 11 with a weight of 30.\nThere is an edge between vertex 1 and vertex 15 with a weight of 4.\nThere is an edge between vertex 10 and vertex 3 with a weight of 1.\nThere is an edge between vertex 2 and vertex 5 with a weight of 53.\nThere is an edge between vertex 9 and vertex 10 with a weight of 74.\nThere is an edge between vertex 15 and vertex 12 with a weight of 79.\nThere is an edge between vertex 2 and vertex 3 with a weight of 53.\n",
    "graph_output": "15 24\n1 3 88\n1 6 38\n1 2 72\n6 15 19\n6 10 84\n1 8 49\n10 13 53\n8 11 82\n13 5 67\n6 9 17\n3 12 41\n12 14 26\n11 7 18\n5 4 87\n8 6 75\n4 12 92\n15 4 99\n12 11 30\n1 15 4\n10 3 1\n2 5 53\n9 10 74\n15 12 79\n2 3 53\n",
    "vertices": [
      null,
      null
    ],
    "answer": 523,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 16 vertices and 19 edges\n\nEdges (Format: Node Node):\n1 6\n6 2\n6 16\n6 9\n6 11\n2 3\n2 7\n1 8\n16 4\n4 12\n7 10\n6 14\n8 5\n3 15\n15 13\n9 16\n12 1\n6 15\n4 6\n",
    "graph_output": "16 19\n1 6\n6 2\n6 16\n6 9\n6 11\n2 3\n2 7\n1 8\n16 4\n4 12\n7 10\n6 14\n8 5\n3 15\n15 13\n9 16\n12 1\n6 15\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 7 (source) to vertex 9 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 42 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6 with a weight of 30 and a capacity of 2.\nThere is an edge between vertex 1 and vertex 8 with a weight of 56 and a capacity of 10.\nThere is an edge between vertex 1 and vertex 4 with a weight of 12 and a capacity of 1.\nThere is an edge between vertex 4 and vertex 9 with a weight of 56 and a capacity of 3.\nThere is an edge between vertex 1 and vertex 2 with a weight of 1 and a capacity of 8.\nThere is an edge between vertex 1 and vertex 10 with a weight of 25 and a capacity of 1.\nThere is an edge between vertex 2 and vertex 5 with a weight of 60 and a capacity of 9.\nThere is an edge between vertex 8 and vertex 11 with a weight of 55 and a capacity of 6.\nThere is an edge between vertex 4 and vertex 7 with a weight of 77 and a capacity of 7.\nThere is an edge between vertex 5 and vertex 3 with a weight of 3 and a capacity of 8.\nThere is an edge between vertex 11 and vertex 4 with a weight of 43 and a capacity of 10.\nThere is an edge between vertex 10 and vertex 7 with a weight of 44 and a capacity of 6.\nThere is an edge between vertex 9 and vertex 6 with a weight of 59 and a capacity of 2.\nThere is an edge between vertex 7 and vertex 6 with a weight of 69 and a capacity of 6.\nThere is an edge between vertex 7 and vertex 11 with a weight of 73 and a capacity of 8.\nThere is an edge between vertex 6 and vertex 4 with a weight of 79 and a capacity of 9.\nThere is an edge between vertex 11 and vertex 1 with a weight of 10 and a capacity of 7.\nThere is an edge between vertex 3 and vertex 1 with a weight of 38 and a capacity of 8.\nThere is an edge between vertex 2 and vertex 3 with a weight of 8 and a capacity of 3.\nThere is an edge between vertex 10 and vertex 3 with a weight of 30 and a capacity of 2.\nThere is an edge between vertex 7 and vertex 8 with a weight of 22 and a capacity of 10.\nThere is an edge between vertex 7 and vertex 3 with a weight of 76 and a capacity of 2.\nThere is an edge between vertex 5 and vertex 9 with a weight of 5 and a capacity of 8.\nThere is an edge between vertex 5 and vertex 8 with a weight of 76 and a capacity of 7.\nThere is an edge between vertex 5 and vertex 6 with a weight of 44 and a capacity of 6.\nThere is an edge between vertex 1 and vertex 9 with a weight of 78 and a capacity of 4.\nThere is an edge between vertex 9 and vertex 8 with a weight of 48 and a capacity of 1.\nThere is an edge between vertex 7 and vertex 1 with a weight of 42 and a capacity of 1.\nThere is an edge between vertex 8 and vertex 6 with a weight of 39 and a capacity of 1.\nThere is an edge between vertex 10 and vertex 4 with a weight of 98 and a capacity of 7.\nThere is an edge between vertex 2 and vertex 8 with a weight of 42 and a capacity of 3.\nThere is an edge between vertex 6 and vertex 10 with a weight of 59 and a capacity of 4.\nThere is an edge between vertex 9 and vertex 2 with a weight of 47 and a capacity of 8.\nThere is an edge between vertex 3 and vertex 4 with a weight of 56 and a capacity of 4.\nThere is an edge between vertex 5 and vertex 4 with a weight of 90 and a capacity of 10.\nThere is an edge between vertex 7 and vertex 5 with a weight of 10 and a capacity of 7.\nThere is an edge between vertex 3 and vertex 11 with a weight of 71 and a capacity of 6.\nThere is an edge between vertex 7 and vertex 2 with a weight of 60 and a capacity of 7.\nThere is an edge between vertex 9 and vertex 7 with a weight of 52 and a capacity of 2.\nThere is an edge between vertex 8 and vertex 4 with a weight of 41 and a capacity of 2.\nThere is an edge between vertex 11 and vertex 2 with a weight of 59 and a capacity of 2.\nThere is an edge between vertex 10 and vertex 5 with a weight of 16 and a capacity of 6.\n",
    "graph_output": "11 42\n1 6 30 2\n1 8 56 10\n1 4 12 1\n4 9 56 3\n1 2 1 8\n1 10 25 1\n2 5 60 9\n8 11 55 6\n4 7 77 7\n5 3 3 8\n11 4 43 10\n10 7 44 6\n9 6 59 2\n7 6 69 6\n7 11 73 8\n6 4 79 9\n11 1 10 7\n3 1 38 8\n2 3 8 3\n10 3 30 2\n7 8 22 10\n7 3 76 2\n5 9 5 8\n5 8 76 7\n5 6 44 6\n1 9 78 4\n9 8 48 1\n7 1 42 1\n8 6 39 1\n10 4 98 7\n2 8 42 3\n6 10 59 4\n9 2 47 8\n3 4 56 4\n5 4 90 10\n7 5 10 7\n3 11 71 6\n7 2 60 7\n9 7 52 2\n8 4 41 2\n11 2 59 2\n10 5 16 6\n",
    "vertices": [
      7,
      9
    ],
    "answer": 2376,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 8 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 1 and vertex 2.\n",
    "graph_output": "6 8\n6 1\n3 2\n3 4\n3 1\n1 4\n2 4\n4 5\n1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 112 edges\n\nEdges (Format: Node Node):\n1 13\n1 9\n13 3\n1 2\n13 16\n1 12\n1 11\n11 8\n12 4\n11 10\n9 14\n8 15\n1 7\n15 5\n2 6\n15 4\n5 13\n9 13\n7 14\n2 5\n6 15\n1 8\n14 12\n10 2\n10 9\n13 10\n2 11\n6 11\n7 10\n2 15\n6 7\n3 4\n7 11\n7 12\n15 9\n6 14\n5 12\n3 10\n8 16\n8 4\n15 10\n9 11\n15 3\n12 2\n8 12\n12 13\n7 5\n2 13\n8 13\n3 5\n6 1\n9 16\n4 6\n15 1\n4 2\n5 14\n14 15\n3 8\n10 12\n6 13\n6 3\n4 11\n5 6\n2 16\n9 2\n10 6\n15 16\n16 12\n3 14\n5 11\n12 9\n13 15\n10 8\n13 4\n4 10\n1 3\n5 8\n6 9\n3 16\n9 8\n8 2\n14 1\n3 7\n16 5\n14 11\n8 6\n13 11\n1 16\n7 16\n4 14\n5 9\n10 14\n16 11\n1 10\n13 7\n7 9\n10 5\n5 1\n3 11\n16 6\n5 4\n14 16\n16 4\n9 4\n7 15\n12 15\n7 8\n12 11\n2 14\n14 8\n2 7\n3 2\n",
    "graph_output": "16 112\n1 13\n1 9\n13 3\n1 2\n13 16\n1 12\n1 11\n11 8\n12 4\n11 10\n9 14\n8 15\n1 7\n15 5\n2 6\n15 4\n5 13\n9 13\n7 14\n2 5\n6 15\n1 8\n14 12\n10 2\n10 9\n13 10\n2 11\n6 11\n7 10\n2 15\n6 7\n3 4\n7 11\n7 12\n15 9\n6 14\n5 12\n3 10\n8 16\n8 4\n15 10\n9 11\n15 3\n12 2\n8 12\n12 13\n7 5\n2 13\n8 13\n3 5\n6 1\n9 16\n4 6\n15 1\n4 2\n5 14\n14 15\n3 8\n10 12\n6 13\n6 3\n4 11\n5 6\n2 16\n9 2\n10 6\n15 16\n16 12\n3 14\n5 11\n12 9\n13 15\n10 8\n13 4\n4 10\n1 3\n5 8\n6 9\n3 16\n9 8\n8 2\n14 1\n3 7\n16 5\n14 11\n8 6\n13 11\n1 16\n7 16\n4 14\n5 9\n10 14\n16 11\n1 10\n13 7\n7 9\n10 5\n5 1\n3 11\n16 6\n5 4\n14 16\n16 4\n9 4\n7 15\n12 15\n7 8\n12 11\n2 14\n14 8\n2 7\n3 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 104 edges\n\nEdges (Format: Node Node):\n1 10\n1 12\n12 11\n11 15\n1 16\n10 13\n11 9\n9 7\n15 14\n11 3\n14 2\n13 6\n7 5\n10 4\n16 8\n16 12\n11 8\n16 9\n8 9\n9 2\n13 7\n15 12\n13 12\n16 13\n9 12\n2 16\n8 2\n3 14\n8 10\n3 10\n1 2\n1 7\n7 2\n8 4\n9 4\n15 16\n2 4\n1 13\n3 8\n4 7\n5 1\n13 8\n10 11\n1 15\n5 11\n1 9\n4 12\n7 3\n6 2\n3 13\n2 12\n14 1\n6 1\n14 9\n4 15\n1 8\n1 4\n4 6\n3 4\n13 11\n7 6\n10 14\n15 2\n12 5\n8 12\n9 5\n6 11\n9 3\n15 7\n4 14\n9 10\n2 5\n13 4\n16 7\n2 3\n10 7\n11 14\n12 7\n8 15\n16 11\n16 14\n4 5\n11 7\n9 6\n9 13\n8 5\n3 1\n13 15\n15 6\n6 5\n5 14\n6 3\n9 15\n16 3\n15 3\n3 5\n3 12\n6 10\n2 10\n8 6\n2 11\n4 16\n11 4\n5 10\n",
    "graph_output": "16 104\n1 10\n1 12\n12 11\n11 15\n1 16\n10 13\n11 9\n9 7\n15 14\n11 3\n14 2\n13 6\n7 5\n10 4\n16 8\n16 12\n11 8\n16 9\n8 9\n9 2\n13 7\n15 12\n13 12\n16 13\n9 12\n2 16\n8 2\n3 14\n8 10\n3 10\n1 2\n1 7\n7 2\n8 4\n9 4\n15 16\n2 4\n1 13\n3 8\n4 7\n5 1\n13 8\n10 11\n1 15\n5 11\n1 9\n4 12\n7 3\n6 2\n3 13\n2 12\n14 1\n6 1\n14 9\n4 15\n1 8\n1 4\n4 6\n3 4\n13 11\n7 6\n10 14\n15 2\n12 5\n8 12\n9 5\n6 11\n9 3\n15 7\n4 14\n9 10\n2 5\n13 4\n16 7\n2 3\n10 7\n11 14\n12 7\n8 15\n16 11\n16 14\n4 5\n11 7\n9 6\n9 13\n8 5\n3 1\n13 15\n15 6\n6 5\n5 14\n6 3\n9 15\n16 3\n15 3\n3 5\n3 12\n6 10\n2 10\n8 6\n2 11\n4 16\n11 4\n5 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 116 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 10 and vertex 17.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 13 and vertex 17.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 17 and vertex 15.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 15 and vertex 4.\n",
    "graph_output": "17 116\n6 8\n10 5\n4 17\n17 7\n6 17\n2 9\n17 5\n3 4\n1 16\n3 16\n16 13\n14 4\n1 2\n13 2\n10 8\n11 8\n5 13\n9 7\n3 8\n6 14\n7 16\n9 4\n9 8\n12 8\n17 12\n5 11\n12 3\n5 1\n3 17\n3 13\n14 13\n15 2\n14 5\n6 2\n1 17\n16 4\n10 17\n4 11\n11 1\n16 17\n12 13\n6 5\n12 14\n15 1\n16 10\n11 9\n5 8\n6 3\n10 2\n7 10\n2 11\n15 9\n1 3\n4 6\n1 4\n16 5\n5 4\n14 10\n15 5\n2 5\n10 11\n12 9\n13 9\n6 15\n16 12\n5 9\n13 17\n13 15\n8 4\n14 9\n5 3\n1 9\n1 14\n4 2\n1 7\n7 13\n2 14\n7 2\n14 15\n8 1\n8 13\n16 9\n11 16\n14 17\n6 16\n2 3\n12 11\n6 1\n14 8\n11 3\n1 12\n14 7\n4 12\n2 16\n13 10\n6 10\n17 2\n13 11\n10 3\n9 10\n15 16\n13 6\n10 15\n11 17\n5 7\n2 12\n11 6\n17 9\n6 12\n8 16\n7 15\n1 13\n17 15\n17 8\n8 2\n15 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 55 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 6 and vertex 5.\n",
    "graph_output": "11 55\n4 5\n2 3\n11 6\n7 9\n3 4\n3 7\n4 7\n10 4\n8 9\n8 11\n5 8\n2 7\n10 9\n4 1\n8 2\n3 10\n6 2\n11 7\n1 5\n1 3\n8 1\n3 9\n6 10\n6 8\n7 10\n7 6\n2 9\n11 10\n3 5\n11 5\n1 10\n1 6\n8 7\n9 6\n11 2\n5 7\n11 3\n1 7\n9 5\n6 3\n10 5\n4 6\n10 8\n4 11\n2 1\n5 2\n8 4\n9 4\n9 1\n2 10\n8 3\n1 11\n2 4\n11 9\n6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 8 vertices and 22 edges\n\nEdges (Format: Node Node):\n1 2\n1 7\n1 8\n1 4\n1 3\n2 6\n3 5\n2 3\n6 4\n7 6\n8 5\n6 1\n2 5\n2 4\n4 3\n4 7\n8 2\n8 3\n6 8\n7 3\n8 7\n6 5\n",
    "graph_output": "8 22\n1 2\n1 7\n1 8\n1 4\n1 3\n2 6\n3 5\n2 3\n6 4\n7 6\n8 5\n6 1\n2 5\n2 4\n4 3\n4 7\n8 2\n8 3\n6 8\n7 3\n8 7\n6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 39852,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 11 vertices and 49 edges\n\nEdges (Format: Node Node):\n10 9\n6 10\n9 3\n3 6\n9 7\n8 4\n4 5\n11 7\n5 6\n10 7\n9 11\n2 11\n7 2\n8 2\n2 10\n4 10\n11 8\n6 1\n6 4\n7 4\n9 1\n7 3\n3 8\n11 1\n2 3\n9 4\n2 5\n9 2\n1 4\n2 4\n5 1\n10 5\n5 7\n4 3\n11 5\n5 8\n5 9\n3 5\n6 9\n3 11\n9 8\n6 8\n7 1\n10 1\n3 10\n6 2\n11 6\n11 4\n8 1\n",
    "graph_output": "11 49\n10 9\n6 10\n9 3\n3 6\n9 7\n8 4\n4 5\n11 7\n5 6\n10 7\n9 11\n2 11\n7 2\n8 2\n2 10\n4 10\n11 8\n6 1\n6 4\n7 4\n9 1\n7 3\n3 8\n11 1\n2 3\n9 4\n2 5\n9 2\n1 4\n2 4\n5 1\n10 5\n5 7\n4 3\n11 5\n5 8\n5 9\n3 5\n6 9\n3 11\n9 8\n6 8\n7 1\n10 1\n3 10\n6 2\n11 6\n11 4\n8 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 18 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5 with a weight of 4.\nThere is an edge between vertex 1 and vertex 7 with a weight of 59.\nThere is an edge between vertex 7 and vertex 8 with a weight of 18.\nThere is an edge between vertex 1 and vertex 10 with a weight of 55.\nThere is an edge between vertex 5 and vertex 3 with a weight of 78.\nThere is an edge between vertex 7 and vertex 9 with a weight of 89.\nThere is an edge between vertex 5 and vertex 11 with a weight of 55.\nThere is an edge between vertex 10 and vertex 6 with a weight of 87.\nThere is an edge between vertex 9 and vertex 4 with a weight of 85.\nThere is an edge between vertex 7 and vertex 2 with a weight of 4.\nThere is an edge between vertex 8 and vertex 12 with a weight of 27.\nThere is an edge between vertex 6 and vertex 2 with a weight of 57.\nThere is an edge between vertex 12 and vertex 4 with a weight of 43.\nThere is an edge between vertex 6 and vertex 12 with a weight of 16.\nThere is an edge between vertex 8 and vertex 3 with a weight of 93.\nThere is an edge between vertex 6 and vertex 1 with a weight of 72.\nThere is an edge between vertex 5 and vertex 7 with a weight of 32.\nThere is an edge between vertex 10 and vertex 2 with a weight of 22.\n",
    "graph_output": "12 18\n1 5 4\n1 7 59\n7 8 18\n1 10 55\n5 3 78\n7 9 89\n5 11 55\n10 6 87\n9 4 85\n7 2 4\n8 12 27\n6 2 57\n12 4 43\n6 12 16\n8 3 93\n6 1 72\n5 7 32\n10 2 22\n",
    "vertices": [
      null,
      null
    ],
    "answer": 388,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 1 (source) to vertex 7 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 9 vertices and 8 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 5 29 6\n5 6 25 6\n5 9 90 6\n1 3 58 7\n1 8 4 9\n3 4 46 10\n4 7 83 1\n6 2 49 7\n",
    "graph_output": "9 8\n1 5 29 6\n5 6 25 6\n5 9 90 6\n1 3 58 7\n1 8 4 9\n3 4 46 10\n4 7 83 1\n6 2 49 7\n",
    "vertices": [
      1,
      7
    ],
    "answer": 187,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 11 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 6, 4, 5, 3\nVertex 2: 1, 4\nVertex 3: 6, 5, 1, 4\nVertex 4: 1, 6, 3, 2\nVertex 5: 1, 6, 3\nVertex 6: 1, 3, 5, 4\n",
    "graph_output": "6 11\n1 2\n1 6\n6 3\n1 4\n1 5\n6 5\n5 3\n6 4\n3 1\n4 3\n2 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 185,
    "description_type": "list"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 10\nVertex 2: 1, 20, 15, 23\nVertex 3: 6, 16\nVertex 4: 26, 29\nVertex 5: 6, 30\nVertex 6: 20, 3, 5\nVertex 7: 21\nVertex 8: 26, 9, 28\nVertex 9: 8\nVertex 10: 1\nVertex 11: 21\nVertex 12: 27, 17\nVertex 13: 15\nVertex 14: 15\nVertex 15: 2, 26, 13, 25, 22, 14\nVertex 16: 3\nVertex 17: 12, 19\nVertex 18: 22\nVertex 19: 17\nVertex 20: 2, 6\nVertex 21: 26, 11, 24, 7\nVertex 22: 15, 18\nVertex 23: 2\nVertex 24: 21\nVertex 25: 15, 27\nVertex 26: 15, 8, 21, 4\nVertex 27: 25, 12\nVertex 28: 8\nVertex 29: 4\nVertex 30: 5\n",
    "graph_output": "30 29\n1 2\n2 20\n2 15\n15 26\n15 13\n15 25\n26 8\n26 21\n26 4\n8 9\n25 27\n20 6\n6 3\n6 5\n21 11\n2 23\n1 10\n15 22\n27 12\n21 24\n3 16\n4 29\n21 7\n15 14\n8 28\n5 30\n22 18\n12 17\n17 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 15,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 4 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 21 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 9 and vertex 4 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 7 with a capacity of 1.\nThere is an edge between vertex 9 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 2 and vertex 12 with a capacity of 7.\nThere is an edge between vertex 3 and vertex 8 with a capacity of 6.\nThere is an edge between vertex 2 and vertex 5 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 11 and vertex 10 with a capacity of 6.\nThere is an edge between vertex 8 and vertex 13 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 2 with a capacity of 2.\nThere is an edge between vertex 12 and vertex 6 with a capacity of 8.\nThere is an edge between vertex 13 and vertex 4 with a capacity of 7.\nThere is an edge between vertex 1 and vertex 12 with a capacity of 5.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 3 and vertex 6 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 10 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 5.\n",
    "graph_output": "13 21\n1 9 9\n9 4 5\n1 3 5\n1 7 1\n9 2 10\n9 6 10\n2 12 7\n3 8 6\n2 5 10\n1 11 2\n11 10 6\n8 13 2\n4 2 2\n12 6 8\n13 4 7\n1 12 5\n6 8 4\n3 6 1\n6 2 1\n10 8 1\n3 5 5\n",
    "vertices": [
      4,
      10
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 55 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   1   1   1   0   1   1   1   1   1   1   1 \n 2 |  1   0   1   0   1   1   0   1   1   0   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   0   1   1 \n 4 |  1   0   1   0   1   0   1   1   1   1   1   1 \n 5 |  0   1   1   1   0   0   1   1   1   1   1   1 \n 6 |  1   1   1   0   0   0   0   1   1   1   0   0 \n 7 |  1   0   1   1   1   0   0   0   1   1   1   1 \n 8 |  1   1   1   1   1   1   0   0   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1 \n10 |  1   0   0   1   1   1   1   1   1   0   1   1 \n11 |  1   1   1   1   1   0   1   1   1   1   0   1 \n12 |  1   1   1   1   1   0   1   1   1   1   1   0 \n",
    "graph_output": "12 55\n11 10\n6 1\n9 3\n8 12\n6 8\n2 1\n6 2\n12 10\n5 8\n7 11\n1 4\n5 10\n4 11\n12 4\n7 5\n1 10\n1 11\n1 12\n4 5\n7 9\n3 8\n5 9\n5 12\n4 9\n1 8\n11 9\n10 9\n9 1\n8 10\n11 8\n7 1\n3 7\n6 3\n8 2\n2 5\n5 11\n3 11\n10 6\n11 2\n4 3\n4 8\n1 3\n9 2\n4 7\n2 3\n3 5\n12 2\n10 7\n11 12\n6 9\n12 7\n9 12\n12 3\n8 9\n4 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 3 (source) to vertex 5 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 10 vertices and 14 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 3 2 3\n3 7 89 6\n1 2 98 7\n1 4 38 4\n4 9 97 8\n2 8 24 7\n8 10 89 8\n1 5 21 1\n1 6 96 10\n10 7 56 10\n9 10 43 1\n2 5 22 9\n6 3 17 2\n6 2 49 6\n",
    "graph_output": "10 14\n1 3 2 3\n3 7 89 6\n1 2 98 7\n1 4 38 4\n4 9 97 8\n2 8 24 7\n8 10 89 8\n1 5 21 1\n1 6 96 10\n10 7 56 10\n9 10 43 1\n2 5 22 9\n6 3 17 2\n6 2 49 6\n",
    "vertices": [
      3,
      5
    ],
    "answer": 1843,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 18 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (14\u00d714):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14\n   --------------------------------------------------------\n 1 |  0   0  65   0  77  70   0   0   0   0  53  38   0   0 \n 2 |  0   0   0   0  71   0   0   0   0   0   0   0   0   0 \n 3 | 65   0   0   0  29   0   0   0  27  91   0   0   0   0 \n 4 |  0   0   0   0  52   0   0   0   0   0  31   0   0   0 \n 5 | 77  71  29  52   0   0  46   0   0   0   0   0   0   0 \n 6 | 70   0   0   0   0   0   0   0   0   0   0   0  58   0 \n 7 |  0   0   0   0  46   0   0  16   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0  16   0   3   0  88   0   0   0 \n 9 |  0   0  27   0   0   0   0   3   0   0   0   0   0   0 \n10 |  0   0  91   0   0   0   0   0   0   0   0   0   0   0 \n11 | 53   0   0  31   0   0   0  88   0   0   0   0   0   7 \n12 | 38   0   0   0   0   0   0   0   0   0   0   0   0  83 \n13 |  0   0   0   0   0  58   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   7  83   0   0 \n",
    "graph_output": "14 18\n1 3 65\n3 10 91\n3 9 27\n1 12 38\n1 11 53\n11 4 31\n1 5 77\n11 14 7\n5 7 46\n1 6 70\n5 2 71\n11 8 88\n6 13 58\n7 8 16\n4 5 52\n8 9 3\n14 12 83\n3 5 29\n",
    "vertices": [
      null,
      null
    ],
    "answer": 546,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 27 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 16 and vertex 6.\n",
    "graph_output": "16 27\n1 10\n1 15\n1 11\n11 16\n10 4\n15 7\n10 8\n7 13\n7 6\n11 3\n13 9\n8 5\n5 2\n3 12\n3 14\n6 15\n11 10\n5 6\n5 12\n1 13\n5 3\n15 12\n15 16\n9 2\n16 8\n14 11\n16 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 104 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 9, 4, 5, 2, 10, 15, 11, 12, 3, 13\nVertex 2: 14, 8, 3, 15, 1, 7, 11, 5, 4, 9, 12\nVertex 3: 2, 10, 6, 15, 5, 12, 4, 16, 1, 13, 8, 11, 7, 14\nVertex 4: 1, 10, 11, 8, 16, 3, 14, 2, 9, 5, 7, 12\nVertex 5: 1, 16, 7, 12, 9, 3, 14, 15, 8, 11, 6, 2, 13, 4\nVertex 6: 13, 12, 3, 15, 7, 9, 8, 14, 16, 5, 11, 10\nVertex 7: 13, 15, 2, 5, 6, 11, 9, 10, 8, 4, 3, 16, 14\nVertex 8: 2, 9, 4, 6, 15, 14, 12, 11, 5, 16, 13, 3, 7, 10\nVertex 9: 1, 12, 13, 8, 16, 14, 6, 5, 15, 10, 4, 7, 11, 2\nVertex 10: 3, 4, 11, 13, 15, 1, 9, 16, 7, 8, 6, 12\nVertex 11: 14, 4, 10, 2, 16, 8, 15, 1, 7, 5, 12, 6, 9, 3\nVertex 12: 9, 16, 6, 5, 3, 15, 8, 1, 13, 11, 14, 4, 2, 10\nVertex 13: 9, 6, 7, 10, 14, 15, 12, 16, 3, 1, 5, 8\nVertex 14: 1, 2, 11, 9, 6, 8, 13, 16, 5, 15, 4, 12, 3, 7\nVertex 15: 2, 7, 6, 10, 8, 9, 3, 1, 12, 11, 5, 13, 14, 16\nVertex 16: 12, 9, 5, 14, 11, 4, 6, 10, 3, 13, 8, 15, 7\n",
    "graph_output": "16 104\n1 14\n14 2\n1 9\n2 8\n2 3\n9 12\n9 13\n1 4\n3 10\n2 15\n13 6\n1 5\n14 11\n12 16\n13 7\n8 9\n7 15\n1 2\n6 12\n4 10\n6 3\n2 7\n9 16\n6 15\n4 11\n11 10\n13 10\n15 10\n9 14\n5 16\n7 5\n8 4\n1 10\n12 5\n6 7\n6 9\n11 2\n6 8\n8 15\n9 5\n6 14\n15 9\n8 14\n15 3\n13 14\n16 14\n5 3\n14 5\n3 12\n9 10\n16 11\n1 15\n4 16\n15 12\n6 16\n10 16\n12 8\n3 4\n8 11\n15 11\n5 15\n1 11\n15 13\n11 7\n1 12\n3 16\n5 8\n1 3\n5 11\n14 15\n12 13\n14 4\n5 6\n16 13\n3 13\n8 16\n16 15\n2 5\n13 1\n2 4\n9 4\n12 11\n14 12\n5 13\n7 9\n6 11\n11 9\n8 13\n7 10\n8 3\n7 8\n4 5\n3 11\n7 4\n9 2\n10 8\n7 3\n12 4\n7 16\n14 3\n7 14\n12 2\n10 6\n12 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 15 vertices and 98 edges\n\nEdges (Format: Node Node):\n1 14\n14 10\n10 9\n10 8\n10 12\n14 5\n14 3\n8 2\n9 15\n3 13\n14 4\n14 7\n8 11\n9 6\n7 10\n7 6\n3 10\n8 5\n15 11\n14 8\n13 15\n4 10\n2 11\n12 8\n2 1\n6 8\n3 7\n3 11\n3 8\n9 13\n6 11\n14 9\n2 14\n2 4\n12 4\n4 1\n11 1\n1 6\n4 11\n11 14\n12 13\n13 5\n5 11\n1 12\n9 4\n13 11\n2 5\n14 12\n11 7\n4 6\n10 6\n7 12\n5 7\n4 15\n6 5\n5 1\n5 9\n13 8\n6 2\n8 9\n4 7\n12 9\n9 7\n12 11\n13 14\n7 1\n11 10\n6 15\n13 6\n7 13\n3 2\n4 13\n14 15\n13 1\n2 15\n15 3\n1 3\n5 3\n9 3\n1 9\n4 8\n8 1\n8 7\n10 13\n15 8\n2 10\n12 5\n15 10\n15 5\n12 2\n10 1\n6 3\n12 6\n4 3\n3 12\n7 15\n2 13\n6 14\n",
    "graph_output": "15 98\n1 14\n14 10\n10 9\n10 8\n10 12\n14 5\n14 3\n8 2\n9 15\n3 13\n14 4\n14 7\n8 11\n9 6\n7 10\n7 6\n3 10\n8 5\n15 11\n14 8\n13 15\n4 10\n2 11\n12 8\n2 1\n6 8\n3 7\n3 11\n3 8\n9 13\n6 11\n14 9\n2 14\n2 4\n12 4\n4 1\n11 1\n1 6\n4 11\n11 14\n12 13\n13 5\n5 11\n1 12\n9 4\n13 11\n2 5\n14 12\n11 7\n4 6\n10 6\n7 12\n5 7\n4 15\n6 5\n5 1\n5 9\n13 8\n6 2\n8 9\n4 7\n12 9\n9 7\n12 11\n13 14\n7 1\n11 10\n6 15\n13 6\n7 13\n3 2\n4 13\n14 15\n13 1\n2 15\n15 3\n1 3\n5 3\n9 3\n1 9\n4 8\n8 1\n8 7\n10 13\n15 8\n2 10\n12 5\n15 10\n15 5\n12 2\n10 1\n6 3\n12 6\n4 3\n3 12\n7 15\n2 13\n6 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 18 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 3 (weight=65), 12 (weight=38), 11 (weight=53), 5 (weight=77), 6 (weight=70)\nVertex 2: 5 (weight=71)\nVertex 3: 1 (weight=65), 10 (weight=91), 9 (weight=27), 5 (weight=29)\nVertex 4: 11 (weight=31), 5 (weight=52)\nVertex 5: 1 (weight=77), 7 (weight=46), 2 (weight=71), 4 (weight=52), 3 (weight=29)\nVertex 6: 1 (weight=70), 13 (weight=58)\nVertex 7: 5 (weight=46), 8 (weight=16)\nVertex 8: 11 (weight=88), 7 (weight=16), 9 (weight=3)\nVertex 9: 3 (weight=27), 8 (weight=3)\nVertex 10: 3 (weight=91)\nVertex 11: 1 (weight=53), 4 (weight=31), 14 (weight=7), 8 (weight=88)\nVertex 12: 1 (weight=38), 14 (weight=83)\nVertex 13: 6 (weight=58)\nVertex 14: 11 (weight=7), 12 (weight=83)\n",
    "graph_output": "14 18\n1 3 65\n3 10 91\n3 9 27\n1 12 38\n1 11 53\n11 4 31\n1 5 77\n11 14 7\n5 7 46\n1 6 70\n5 2 71\n11 8 88\n6 13 58\n7 8 16\n4 5 52\n8 9 3\n14 12 83\n3 5 29\n",
    "vertices": [
      null,
      null
    ],
    "answer": 546,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 17 and vertex 14 are connected.\n\nThis is an undirected graph with 17 vertices and 115 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 8 and vertex 17.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 2 and vertex 17.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 7 and vertex 17.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 17 and vertex 6.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 17 and vertex 11.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 10 and vertex 17.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 17 and vertex 14.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 5 and vertex 6.\n",
    "graph_output": "17 115\n17 5\n8 17\n2 4\n4 16\n12 15\n13 11\n1 8\n3 1\n1 5\n13 10\n15 6\n6 1\n15 8\n13 3\n13 5\n11 9\n5 16\n13 16\n15 14\n14 9\n1 15\n11 14\n14 1\n8 11\n2 13\n2 17\n7 5\n6 4\n3 8\n15 7\n7 17\n8 2\n3 9\n6 12\n7 16\n9 7\n13 6\n9 8\n2 14\n17 6\n17 12\n16 15\n13 1\n12 2\n4 10\n3 17\n2 11\n10 14\n7 13\n7 4\n6 7\n17 4\n14 8\n5 4\n11 10\n8 13\n6 16\n14 5\n8 10\n5 10\n15 11\n16 1\n1 7\n7 2\n12 9\n9 16\n6 3\n11 7\n1 4\n16 2\n12 16\n10 9\n12 5\n4 11\n3 14\n17 9\n6 2\n17 11\n4 13\n15 2\n15 9\n10 15\n9 6\n4 12\n6 10\n2 1\n12 7\n1 10\n11 3\n3 15\n5 3\n3 12\n13 12\n8 16\n11 16\n8 7\n5 2\n15 17\n2 3\n9 2\n1 12\n5 15\n3 10\n7 3\n4 15\n10 17\n8 12\n14 12\n17 14\n16 17\n11 6\n11 1\n13 9\n13 14\n5 6\n",
    "vertices": [
      17,
      14
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 13 and vertex 11.\n",
    "graph_output": "16 28\n1 8\n1 6\n8 10\n1 13\n13 9\n13 4\n10 12\n4 2\n12 16\n4 5\n4 15\n6 11\n2 3\n12 14\n13 7\n16 10\n15 16\n3 4\n9 6\n3 1\n5 2\n5 7\n8 2\n3 6\n7 15\n14 13\n14 8\n13 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 87 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   0   1   1   1   1   1   0   1   1   1 \n 2 |  1   0   1   0   1   0   0   1   1   1   0   0   1   1   1 \n 3 |  1   1   0   1   0   0   1   1   1   1   1   1   1   0   1 \n 4 |  1   0   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   0   1   0   1   1   1   0   1   1   1   1   0   0 \n 6 |  0   0   0   1   1   0   1   1   1   1   1   0   1   1   1 \n 7 |  1   0   1   1   1   1   0   1   1   1   1   0   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   0   1   1   1   0   1   0   1   0   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n11 |  1   0   1   1   1   1   1   1   0   1   0   0   1   1   1 \n12 |  0   0   1   1   1   0   0   1   1   1   0   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   0   1   1   1   0   1   1 \n14 |  1   1   0   1   0   1   1   1   1   1   1   1   1   0   1 \n15 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 87\n1 15\n1 9\n15 8\n15 13\n13 12\n15 14\n8 10\n14 6\n1 2\n10 7\n10 4\n8 3\n4 5\n10 11\n1 13\n4 6\n15 10\n9 3\n7 14\n10 6\n15 7\n6 15\n14 9\n5 2\n11 8\n7 9\n14 2\n15 3\n1 11\n5 6\n2 10\n9 6\n13 5\n1 3\n8 7\n5 11\n11 3\n1 8\n9 8\n10 9\n15 2\n5 7\n11 15\n14 10\n11 14\n1 5\n5 8\n13 11\n11 7\n6 7\n1 4\n5 12\n2 13\n14 4\n9 4\n12 8\n3 4\n8 4\n3 7\n13 14\n9 15\n9 12\n4 15\n7 1\n6 8\n13 3\n3 12\n14 1\n6 13\n8 2\n6 11\n13 8\n4 13\n2 9\n10 1\n5 10\n3 10\n4 7\n15 12\n13 7\n13 10\n14 12\n4 11\n8 14\n4 12\n12 10\n2 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 25 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 10, 7, 11\nVertex 2: 15, 8, 7, 12\nVertex 3: 13, 7\nVertex 4: 13\nVertex 5: 15, 12, 13, 9\nVertex 6: 7, 15, 8, 11\nVertex 7: 1, 6, 3, 2, 8\nVertex 8: 12, 2, 6, 7\nVertex 9: 5, 11\nVertex 10: 1\nVertex 11: 1, 13, 9, 6\nVertex 12: 5, 8, 14, 2\nVertex 13: 5, 3, 4, 11\nVertex 14: 12, 15\nVertex 15: 1, 5, 2, 6, 14\n",
    "graph_output": "15 25\n1 15\n15 5\n5 12\n5 13\n1 10\n15 2\n1 7\n13 3\n5 9\n13 4\n12 8\n12 14\n7 6\n1 11\n15 6\n3 7\n11 13\n8 2\n11 9\n6 8\n7 2\n6 11\n15 14\n8 7\n2 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 87 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 9, 2, 13, 11, 3, 8, 5, 4, 7, 14, 10\nVertex 2: 1, 5, 14, 10, 15, 13, 8, 9, 3\nVertex 3: 8, 9, 15, 1, 11, 4, 7, 13, 12, 10, 2\nVertex 4: 10, 5, 6, 1, 14, 9, 3, 8, 15, 13, 7, 11, 12\nVertex 5: 4, 2, 6, 13, 11, 7, 1, 8, 12, 10\nVertex 6: 14, 4, 10, 15, 5, 9, 7, 8, 13, 11\nVertex 7: 10, 14, 15, 9, 8, 5, 11, 6, 3, 1, 4, 13\nVertex 8: 15, 10, 3, 11, 7, 1, 9, 5, 12, 4, 6, 2, 13, 14\nVertex 9: 1, 3, 14, 7, 6, 8, 10, 4, 15, 12, 2\nVertex 10: 8, 7, 4, 11, 15, 6, 2, 9, 14, 1, 5, 3, 13, 12\nVertex 11: 10, 8, 1, 5, 3, 15, 14, 13, 7, 6, 4\nVertex 12: 13, 5, 8, 9, 3, 15, 14, 4, 10\nVertex 13: 15, 12, 1, 5, 11, 2, 14, 3, 6, 8, 4, 7, 10\nVertex 14: 15, 6, 7, 9, 2, 10, 11, 4, 13, 1, 12, 8\nVertex 15: 1, 8, 13, 14, 10, 7, 6, 3, 2, 11, 9, 4, 12\n",
    "graph_output": "15 87\n1 15\n1 9\n15 8\n15 13\n13 12\n15 14\n8 10\n14 6\n1 2\n10 7\n10 4\n8 3\n4 5\n10 11\n1 13\n4 6\n15 10\n9 3\n7 14\n10 6\n15 7\n6 15\n14 9\n5 2\n11 8\n7 9\n14 2\n15 3\n1 11\n5 6\n2 10\n9 6\n13 5\n1 3\n8 7\n5 11\n11 3\n1 8\n9 8\n10 9\n15 2\n5 7\n11 15\n14 10\n11 14\n1 5\n5 8\n13 11\n11 7\n6 7\n1 4\n5 12\n2 13\n14 4\n9 4\n12 8\n3 4\n8 4\n3 7\n13 14\n9 15\n9 12\n4 15\n7 1\n6 8\n13 3\n3 12\n14 1\n6 13\n8 2\n6 11\n13 8\n4 13\n2 9\n10 1\n5 10\n3 10\n4 7\n15 12\n13 7\n13 10\n14 12\n4 11\n8 14\n4 12\n12 10\n2 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 125 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 12, 13, 9, 16, 11, 17, 5, 14, 4, 6, 10, 2, 7, 15\nVertex 2: 13, 10, 17, 16, 5, 8, 14, 6, 9, 1, 15, 11, 4, 3, 7\nVertex 3: 13, 10, 14, 9, 6, 15, 5, 17, 11, 8, 16, 4, 7, 2\nVertex 4: 17, 7, 6, 15, 10, 1, 12, 9, 5, 8, 16, 3, 14, 2, 13\nVertex 5: 12, 8, 15, 11, 7, 9, 16, 1, 2, 3, 13, 4, 10, 6, 14, 17\nVertex 6: 8, 12, 4, 3, 17, 16, 1, 2, 14, 9, 5, 13, 10, 7, 15, 11\nVertex 7: 5, 4, 8, 17, 9, 15, 16, 13, 3, 12, 1, 14, 6, 2\nVertex 8: 5, 6, 11, 13, 2, 7, 15, 12, 3, 4, 17, 14, 10, 16, 9\nVertex 9: 1, 10, 14, 3, 5, 12, 16, 15, 7, 4, 6, 2, 17, 8, 11\nVertex 10: 9, 3, 16, 2, 11, 4, 12, 1, 5, 15, 17, 8, 6, 14\nVertex 11: 5, 1, 8, 12, 10, 16, 17, 3, 15, 14, 2, 6, 9\nVertex 12: 1, 5, 14, 17, 6, 11, 9, 4, 10, 16, 8, 7, 13, 15\nVertex 13: 1, 3, 2, 8, 5, 15, 6, 7, 16, 12, 14, 4, 17\nVertex 14: 12, 9, 3, 1, 2, 6, 16, 5, 8, 10, 11, 7, 13, 4, 15\nVertex 15: 5, 3, 4, 17, 13, 8, 9, 16, 7, 10, 11, 2, 1, 14, 6, 12\nVertex 16: 1, 10, 5, 11, 2, 17, 9, 6, 15, 12, 7, 14, 3, 4, 13, 8\nVertex 17: 12, 4, 1, 2, 6, 16, 15, 7, 3, 11, 10, 8, 5, 13, 9\n",
    "graph_output": "17 125\n1 12\n1 13\n13 3\n12 5\n5 8\n13 2\n1 9\n12 14\n8 6\n12 17\n9 10\n5 15\n1 16\n5 11\n17 4\n5 7\n3 10\n7 4\n11 1\n17 1\n6 12\n8 11\n9 14\n12 11\n3 14\n10 16\n9 3\n5 9\n10 2\n9 12\n11 10\n4 6\n16 5\n5 1\n2 17\n6 3\n16 11\n6 17\n14 1\n8 13\n15 3\n15 4\n2 16\n17 16\n2 5\n2 8\n3 5\n9 16\n15 17\n10 4\n16 6\n1 4\n5 13\n8 7\n15 13\n15 8\n1 6\n15 9\n17 7\n15 16\n17 3\n12 4\n9 7\n11 17\n7 15\n12 10\n1 10\n2 14\n6 2\n12 16\n8 12\n7 16\n9 4\n11 3\n6 14\n3 8\n6 9\n4 5\n5 10\n8 4\n6 5\n13 6\n10 15\n9 2\n15 11\n14 16\n17 10\n14 5\n17 8\n7 13\n3 16\n14 8\n2 1\n10 8\n4 16\n3 4\n7 3\n6 10\n2 15\n12 7\n10 14\n13 16\n11 14\n1 7\n7 14\n11 2\n13 12\n14 13\n4 14\n5 17\n4 2\n13 4\n1 15\n16 8\n17 13\n3 2\n6 7\n9 17\n2 7\n15 14\n6 15\n8 9\n11 6\n15 12\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 5 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 20 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0  62  11   0  32   0   0   0   0 \n 2 | 62   0  85   0  57  93  32   0   0 \n 3 | 11  85   0  36  27  96  56   0   0 \n 4 |  0   0  36   0   7  20  28   0  11 \n 5 | 32  57  27   7   0   0  73   0  97 \n 6 |  0  93  96  20   0   0   0  32   0 \n 7 |  0  32  56  28  73   0   0  50   0 \n 8 |  0   0   0   0   0  32  50   0  24 \n 9 |  0   0   0  11  97   0   0  24   0 \n\nCapacity Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0   6   7   0  10   0   0   0   0 \n 2 |  6   0   1   0   9  10   5   0   0 \n 3 |  7   1   0   4   2   7   2   0   0 \n 4 |  0   0   4   0   9   3   5   0   8 \n 5 | 10   9   2   9   0   0   6   0  10 \n 6 |  0  10   7   3   0   0   0   9   0 \n 7 |  0   5   2   5   6   0   0   7   0 \n 8 |  0   0   0   0   0   9   7   0   4 \n 9 |  0   0   0   8  10   0   0   4   0 \n",
    "graph_output": "9 20\n1 2 62 6\n2 7 32 5\n2 6 93 10\n7 4 28 5\n6 8 32 9\n2 5 57 9\n5 9 97 10\n7 3 56 2\n5 3 27 2\n3 1 11 7\n7 8 50 7\n4 3 36 4\n6 4 20 3\n6 3 96 7\n3 2 85 1\n9 8 24 4\n5 4 7 9\n5 7 73 6\n4 9 11 8\n5 1 32 10\n",
    "vertices": [
      4,
      5
    ],
    "answer": 2193,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 11 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (6\u00d76):\n\n      1   2   3   4   5   6\n   ------------------------\n 1 |  0   1   1   1   0   0 \n 2 |  1   0   0   1   1   1 \n 3 |  1   0   0   1   1   0 \n 4 |  1   1   1   0   1   1 \n 5 |  0   1   1   1   0   1 \n 6 |  0   1   0   1   1   0 \n",
    "graph_output": "6 11\n3 5\n1 4\n4 6\n5 4\n2 5\n6 2\n1 2\n2 4\n6 5\n4 3\n3 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 35,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 61 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 10 and vertex 9.\n",
    "graph_output": "12 61\n7 1\n3 4\n12 8\n6 4\n8 7\n10 8\n5 12\n11 7\n8 1\n11 12\n1 6\n4 8\n5 10\n2 3\n5 3\n9 6\n12 10\n11 9\n9 3\n4 12\n9 2\n6 8\n6 3\n5 6\n12 3\n4 1\n4 11\n6 10\n6 2\n4 9\n4 2\n7 6\n10 11\n3 1\n5 7\n3 8\n12 9\n1 5\n10 7\n10 4\n9 5\n8 2\n7 9\n5 8\n5 11\n2 12\n1 11\n3 7\n2 11\n3 10\n2 7\n11 3\n10 2\n10 1\n8 11\n12 6\n7 4\n12 1\n8 9\n4 5\n10 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 20 edges\n\nEdges (Format: Node Node Weight):\n1 2 22\n1 3 69\n2 13 13\n1 7 58\n1 14 89\n1 16 91\n13 12 47\n13 5 88\n2 10 62\n10 9 98\n1 6 51\n10 8 48\n14 4 10\n4 15 29\n15 11 52\n9 1 32\n15 10 9\n11 7 71\n8 11 35\n14 11 77\n",
    "graph_output": "16 20\n1 2 22\n1 3 69\n2 13 13\n1 7 58\n1 14 89\n1 16 91\n13 12 47\n13 5 88\n2 10 62\n10 9 98\n1 6 51\n10 8 48\n14 4 10\n4 15 29\n15 11 52\n9 1 32\n15 10 9\n11 7 71\n8 11 35\n14 11 77\n",
    "vertices": [
      null,
      null
    ],
    "answer": 664,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 22 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 12, 11\nVertex 2: 10, 3, 14\nVertex 3: 8, 15, 2\nVertex 4: 12\nVertex 5: 12, 16, 6, 11\nVertex 6: 16, 5, 13\nVertex 7: No connections\nVertex 8: 3, 13, 9\nVertex 9: 16, 8, 15\nVertex 10: 2, 11\nVertex 11: 17, 1, 10, 5\nVertex 12: 5, 1, 14, 4\nVertex 13: 8, 15, 6\nVertex 14: 12, 2\nVertex 15: 13, 9, 3\nVertex 16: 5, 9, 6\nVertex 17: 11\n",
    "graph_output": "17 22\n12 5\n1 12\n8 3\n12 14\n5 16\n9 16\n13 8\n13 15\n16 6\n11 17\n11 1\n9 8\n6 5\n13 6\n10 2\n11 10\n5 11\n9 15\n3 15\n2 3\n4 12\n14 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 3 (source) to vertex 8 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 52 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 2 (capacity=5), 6 (capacity=2), 8 (capacity=2), 4 (capacity=7), 9 (capacity=8), 10 (capacity=3), 3 (capacity=3), 5 (capacity=1)\nVertex 2: 1 (capacity=5), 11 (capacity=10), 3 (capacity=4), 4 (capacity=7), 5 (capacity=6), 6 (capacity=2), 7 (capacity=1), 10 (capacity=5), 9 (capacity=7), 8 (capacity=9)\nVertex 3: 2 (capacity=4), 7 (capacity=5), 9 (capacity=1), 11 (capacity=3), 5 (capacity=8), 1 (capacity=3), 4 (capacity=7), 10 (capacity=4), 6 (capacity=7), 8 (capacity=10)\nVertex 4: 2 (capacity=7), 1 (capacity=7), 8 (capacity=6), 9 (capacity=9), 5 (capacity=6), 6 (capacity=1), 10 (capacity=8), 7 (capacity=3), 11 (capacity=9), 3 (capacity=7)\nVertex 5: 2 (capacity=6), 11 (capacity=2), 6 (capacity=10), 10 (capacity=9), 7 (capacity=9), 8 (capacity=2), 4 (capacity=6), 3 (capacity=8), 1 (capacity=1), 9 (capacity=3)\nVertex 6: 1 (capacity=2), 8 (capacity=2), 10 (capacity=1), 11 (capacity=1), 2 (capacity=2), 5 (capacity=10), 9 (capacity=10), 7 (capacity=7), 4 (capacity=1), 3 (capacity=7)\nVertex 7: 3 (capacity=5), 2 (capacity=1), 5 (capacity=9), 11 (capacity=7), 6 (capacity=7), 8 (capacity=4), 4 (capacity=3), 10 (capacity=5), 9 (capacity=5)\nVertex 8: 6 (capacity=2), 1 (capacity=2), 10 (capacity=4), 4 (capacity=6), 5 (capacity=2), 7 (capacity=4), 9 (capacity=4), 2 (capacity=9), 3 (capacity=10)\nVertex 9: 10 (capacity=5), 3 (capacity=1), 11 (capacity=2), 1 (capacity=8), 6 (capacity=10), 4 (capacity=9), 2 (capacity=7), 8 (capacity=4), 5 (capacity=3), 7 (capacity=5)\nVertex 10: 6 (capacity=1), 9 (capacity=5), 8 (capacity=4), 5 (capacity=9), 1 (capacity=3), 2 (capacity=5), 4 (capacity=8), 3 (capacity=4), 11 (capacity=9), 7 (capacity=5)\nVertex 11: 2 (capacity=10), 6 (capacity=1), 9 (capacity=2), 5 (capacity=2), 3 (capacity=3), 7 (capacity=7), 4 (capacity=9), 10 (capacity=9)\n",
    "graph_output": "11 52\n1 2 5\n1 6 2\n2 11 10\n6 8 2\n2 3 4\n6 10 1\n3 7 5\n2 4 7\n10 9 5\n2 5 6\n3 9 1\n11 6 1\n9 11 2\n6 2 2\n1 8 2\n4 1 7\n8 10 4\n5 11 2\n9 1 8\n6 5 10\n9 6 10\n5 10 9\n7 2 1\n8 4 6\n4 9 9\n10 1 3\n10 2 5\n7 5 9\n8 5 2\n11 3 3\n11 7 7\n4 5 6\n7 6 7\n3 5 8\n1 3 3\n6 4 1\n8 7 4\n4 10 8\n4 7 3\n11 4 9\n4 3 7\n10 3 4\n9 2 7\n8 9 4\n1 5 1\n8 2 9\n10 11 9\n9 5 3\n10 7 5\n6 3 7\n7 9 5\n3 8 10\n",
    "vertices": [
      3,
      8
    ],
    "answer": 43,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 1 to vertex 8 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 100 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 14 with a weight of 90.\nThere is an edge between vertex 14 and vertex 10 with a weight of 47.\nThere is an edge between vertex 1 and vertex 11 with a weight of 57.\nThere is an edge between vertex 14 and vertex 2 with a weight of 61.\nThere is an edge between vertex 11 and vertex 15 with a weight of 59.\nThere is an edge between vertex 10 and vertex 12 with a weight of 4.\nThere is an edge between vertex 12 and vertex 4 with a weight of 75.\nThere is an edge between vertex 4 and vertex 6 with a weight of 36.\nThere is an edge between vertex 6 and vertex 9 with a weight of 34.\nThere is an edge between vertex 15 and vertex 8 with a weight of 98.\nThere is an edge between vertex 11 and vertex 13 with a weight of 17.\nThere is an edge between vertex 6 and vertex 5 with a weight of 35.\nThere is an edge between vertex 11 and vertex 3 with a weight of 3.\nThere is an edge between vertex 10 and vertex 7 with a weight of 35.\nThere is an edge between vertex 14 and vertex 6 with a weight of 27.\nThere is an edge between vertex 7 and vertex 12 with a weight of 17.\nThere is an edge between vertex 13 and vertex 1 with a weight of 100.\nThere is an edge between vertex 5 and vertex 15 with a weight of 81.\nThere is an edge between vertex 14 and vertex 3 with a weight of 75.\nThere is an edge between vertex 9 and vertex 3 with a weight of 15.\nThere is an edge between vertex 6 and vertex 1 with a weight of 50.\nThere is an edge between vertex 11 and vertex 7 with a weight of 55.\nThere is an edge between vertex 15 and vertex 7 with a weight of 35.\nThere is an edge between vertex 14 and vertex 12 with a weight of 66.\nThere is an edge between vertex 4 and vertex 5 with a weight of 1.\nThere is an edge between vertex 13 and vertex 6 with a weight of 99.\nThere is an edge between vertex 13 and vertex 2 with a weight of 52.\nThere is an edge between vertex 4 and vertex 3 with a weight of 74.\nThere is an edge between vertex 1 and vertex 7 with a weight of 20.\nThere is an edge between vertex 14 and vertex 4 with a weight of 31.\nThere is an edge between vertex 2 and vertex 9 with a weight of 10.\nThere is an edge between vertex 4 and vertex 1 with a weight of 18.\nThere is an edge between vertex 2 and vertex 4 with a weight of 70.\nThere is an edge between vertex 5 and vertex 14 with a weight of 99.\nThere is an edge between vertex 15 and vertex 6 with a weight of 76.\nThere is an edge between vertex 7 and vertex 14 with a weight of 48.\nThere is an edge between vertex 10 and vertex 5 with a weight of 56.\nThere is an edge between vertex 9 and vertex 4 with a weight of 47.\nThere is an edge between vertex 5 and vertex 8 with a weight of 61.\nThere is an edge between vertex 12 and vertex 6 with a weight of 85.\nThere is an edge between vertex 10 and vertex 3 with a weight of 11.\nThere is an edge between vertex 1 and vertex 15 with a weight of 93.\nThere is an edge between vertex 10 and vertex 15 with a weight of 57.\nThere is an edge between vertex 15 and vertex 3 with a weight of 13.\nThere is an edge between vertex 11 and vertex 6 with a weight of 48.\nThere is an edge between vertex 14 and vertex 11 with a weight of 13.\nThere is an edge between vertex 5 and vertex 13 with a weight of 23.\nThere is an edge between vertex 12 and vertex 2 with a weight of 33.\nThere is an edge between vertex 8 and vertex 4 with a weight of 79.\nThere is an edge between vertex 7 and vertex 9 with a weight of 48.\nThere is an edge between vertex 3 and vertex 2 with a weight of 32.\nThere is an edge between vertex 4 and vertex 11 with a weight of 29.\nThere is an edge between vertex 12 and vertex 3 with a weight of 30.\nThere is an edge between vertex 9 and vertex 12 with a weight of 93.\nThere is an edge between vertex 9 and vertex 8 with a weight of 36.\nThere is an edge between vertex 3 and vertex 13 with a weight of 2.\nThere is an edge between vertex 3 and vertex 6 with a weight of 85.\nThere is an edge between vertex 11 and vertex 2 with a weight of 25.\nThere is an edge between vertex 13 and vertex 8 with a weight of 19.\nThere is an edge between vertex 15 and vertex 12 with a weight of 50.\nThere is an edge between vertex 1 and vertex 8 with a weight of 12.\nThere is an edge between vertex 9 and vertex 1 with a weight of 30.\nThere is an edge between vertex 7 and vertex 4 with a weight of 81.\nThere is an edge between vertex 1 and vertex 12 with a weight of 48.\nThere is an edge between vertex 2 and vertex 6 with a weight of 87.\nThere is an edge between vertex 13 and vertex 12 with a weight of 53.\nThere is an edge between vertex 11 and vertex 5 with a weight of 32.\nThere is an edge between vertex 2 and vertex 15 with a weight of 32.\nThere is an edge between vertex 7 and vertex 8 with a weight of 43.\nThere is an edge between vertex 10 and vertex 2 with a weight of 88.\nThere is an edge between vertex 13 and vertex 4 with a weight of 11.\nThere is an edge between vertex 10 and vertex 13 with a weight of 3.\nThere is an edge between vertex 11 and vertex 10 with a weight of 51.\nThere is an edge between vertex 2 and vertex 1 with a weight of 94.\nThere is an edge between vertex 2 and vertex 7 with a weight of 87.\nThere is an edge between vertex 7 and vertex 13 with a weight of 94.\nThere is an edge between vertex 8 and vertex 10 with a weight of 58.\nThere is an edge between vertex 3 and vertex 1 with a weight of 98.\nThere is an edge between vertex 8 and vertex 12 with a weight of 3.\nThere is an edge between vertex 10 and vertex 4 with a weight of 71.\nThere is an edge between vertex 7 and vertex 3 with a weight of 38.\nThere is an edge between vertex 7 and vertex 6 with a weight of 77.\nThere is an edge between vertex 9 and vertex 11 with a weight of 44.\nThere is an edge between vertex 5 and vertex 1 with a weight of 18.\nThere is an edge between vertex 11 and vertex 12 with a weight of 7.\nThere is an edge between vertex 9 and vertex 10 with a weight of 58.\nThere is an edge between vertex 5 and vertex 9 with a weight of 90.\nThere is an edge between vertex 7 and vertex 5 with a weight of 50.\nThere is an edge between vertex 13 and vertex 15 with a weight of 36.\nThere is an edge between vertex 15 and vertex 14 with a weight of 68.\nThere is an edge between vertex 5 and vertex 3 with a weight of 42.\nThere is an edge between vertex 10 and vertex 6 with a weight of 52.\nThere is an edge between vertex 9 and vertex 14 with a weight of 54.\nThere is an edge between vertex 13 and vertex 9 with a weight of 80.\nThere is an edge between vertex 12 and vertex 5 with a weight of 7.\nThere is an edge between vertex 15 and vertex 4 with a weight of 39.\nThere is an edge between vertex 2 and vertex 8 with a weight of 72.\nThere is an edge between vertex 14 and vertex 8 with a weight of 82.\nThere is an edge between vertex 5 and vertex 2 with a weight of 24.\nThere is an edge between vertex 11 and vertex 8 with a weight of 88.\n",
    "graph_output": "15 100\n1 14 90\n14 10 47\n1 11 57\n14 2 61\n11 15 59\n10 12 4\n12 4 75\n4 6 36\n6 9 34\n15 8 98\n11 13 17\n6 5 35\n11 3 3\n10 7 35\n14 6 27\n7 12 17\n13 1 100\n5 15 81\n14 3 75\n9 3 15\n6 1 50\n11 7 55\n15 7 35\n14 12 66\n4 5 1\n13 6 99\n13 2 52\n4 3 74\n1 7 20\n14 4 31\n2 9 10\n4 1 18\n2 4 70\n5 14 99\n15 6 76\n7 14 48\n10 5 56\n9 4 47\n5 8 61\n12 6 85\n10 3 11\n1 15 93\n10 15 57\n15 3 13\n11 6 48\n14 11 13\n5 13 23\n12 2 33\n8 4 79\n7 9 48\n3 2 32\n4 11 29\n12 3 30\n9 12 93\n9 8 36\n3 13 2\n3 6 85\n11 2 25\n13 8 19\n15 12 50\n1 8 12\n9 1 30\n7 4 81\n1 12 48\n2 6 87\n13 12 53\n11 5 32\n2 15 32\n7 8 43\n10 2 88\n13 4 11\n10 13 3\n11 10 51\n2 1 94\n2 7 87\n7 13 94\n8 10 58\n3 1 98\n8 12 3\n10 4 71\n7 3 38\n7 6 77\n9 11 44\n5 1 18\n11 12 7\n9 10 58\n5 9 90\n7 5 50\n13 15 36\n15 14 68\n5 3 42\n10 6 52\n9 14 54\n13 9 80\n12 5 7\n15 4 39\n2 8 72\n14 8 82\n5 2 24\n11 8 88\n",
    "vertices": [
      1,
      8
    ],
    "answer": 12,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 100 edges\n\nEdges (Format: Node Node):\n1 7\n7 10\n1 3\n10 2\n7 12\n3 15\n1 13\n7 5\n5 8\n3 6\n5 11\n8 16\n2 4\n3 14\n4 9\n3 8\n15 12\n16 14\n9 10\n1 10\n16 1\n12 10\n8 4\n5 16\n11 8\n9 11\n3 16\n16 9\n15 14\n2 13\n11 1\n14 4\n2 16\n13 3\n1 2\n11 10\n2 9\n14 7\n16 7\n7 3\n14 12\n4 10\n6 9\n9 1\n4 12\n16 6\n15 8\n15 2\n15 13\n12 2\n14 10\n13 5\n11 12\n9 7\n1 14\n11 4\n7 15\n9 3\n2 7\n13 14\n4 3\n5 4\n5 2\n4 6\n15 11\n8 12\n6 11\n6 14\n11 7\n1 8\n11 13\n9 8\n16 15\n12 1\n14 11\n6 13\n5 14\n5 12\n5 1\n12 6\n13 4\n15 10\n4 1\n6 10\n4 16\n5 9\n7 4\n10 8\n7 13\n15 5\n11 2\n1 15\n15 6\n6 2\n8 13\n15 9\n9 14\n13 12\n3 5\n13 10\n",
    "graph_output": "16 100\n1 7\n7 10\n1 3\n10 2\n7 12\n3 15\n1 13\n7 5\n5 8\n3 6\n5 11\n8 16\n2 4\n3 14\n4 9\n3 8\n15 12\n16 14\n9 10\n1 10\n16 1\n12 10\n8 4\n5 16\n11 8\n9 11\n3 16\n16 9\n15 14\n2 13\n11 1\n14 4\n2 16\n13 3\n1 2\n11 10\n2 9\n14 7\n16 7\n7 3\n14 12\n4 10\n6 9\n9 1\n4 12\n16 6\n15 8\n15 2\n15 13\n12 2\n14 10\n13 5\n11 12\n9 7\n1 14\n11 4\n7 15\n9 3\n2 7\n13 14\n4 3\n5 4\n5 2\n4 6\n15 11\n8 12\n6 11\n6 14\n11 7\n1 8\n11 13\n9 8\n16 15\n12 1\n14 11\n6 13\n5 14\n5 12\n5 1\n12 6\n13 4\n15 10\n4 1\n6 10\n4 16\n5 9\n7 4\n10 8\n7 13\n15 5\n11 2\n1 15\n15 6\n6 2\n8 13\n15 9\n9 14\n13 12\n3 5\n13 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nUndirected Graph with 30 vertices and 29 edges\n\nEdges (Format: Node Node):\n1 15\n15 8\n1 20\n1 3\n3 9\n1 27\n3 26\n3 28\n28 22\n15 17\n3 11\n17 12\n28 4\n1 30\n22 14\n26 25\n8 10\n26 16\n14 2\n8 21\n22 23\n9 5\n26 29\n3 19\n5 24\n2 18\n12 6\n9 13\n19 7\n",
    "graph_output": "30 29\n1 15\n15 8\n1 20\n1 3\n3 9\n1 27\n3 26\n3 28\n28 22\n15 17\n3 11\n17 12\n28 4\n1 30\n22 14\n26 25\n8 10\n26 16\n14 2\n8 21\n22 23\n9 5\n26 29\n3 19\n5 24\n2 18\n12 6\n9 13\n19 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 22 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 10, 15, 3\nVertex 2: 10, 9, 16, 7\nVertex 3: 8, 7, 14, 1\nVertex 4: 11\nVertex 5: 10\nVertex 6: 8\nVertex 7: 11, 14, 3, 2\nVertex 8: 11, 3, 6\nVertex 9: 2\nVertex 10: 1, 2, 13, 5\nVertex 11: 1, 8, 7, 14, 4, 13\nVertex 12: 15, 16\nVertex 13: 10, 11\nVertex 14: 11, 7, 3\nVertex 15: 1, 12\nVertex 16: 2, 12\n",
    "graph_output": "16 22\n1 11\n11 8\n1 10\n8 3\n11 7\n11 14\n10 2\n11 4\n2 9\n10 13\n2 16\n10 5\n1 15\n15 12\n8 6\n7 14\n3 7\n7 2\n12 16\n13 11\n3 14\n1 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 18 and 23 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (29\u00d729):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n   --------------------------------------------------------------------------------------------------------------------\n 1 |  0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0 \n 2 |  1   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   1   0   0 \n 3 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0 \n 9 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  1   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0 \n19 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1 \n21 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n23 |  1   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "29 28\n1 23\n1 2\n1 5\n23 8\n1 18\n18 21\n18 13\n2 15\n21 12\n23 11\n8 25\n11 29\n23 22\n2 9\n9 19\n5 4\n8 3\n2 26\n18 10\n29 20\n12 14\n2 27\n14 7\n18 28\n13 17\n20 24\n27 6\n24 16\n",
    "vertices": [
      18,
      23
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 24 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 12, 5, 6\nVertex 2: 6, 7, 9\nVertex 3: 8, 13, 10, 5, 12\nVertex 4: 13, 5\nVertex 5: 11, 4, 9, 3, 1, 10\nVertex 6: 2, 9, 1, 8\nVertex 7: 12, 11, 2, 9\nVertex 8: 3, 11, 6\nVertex 9: 7, 5, 2, 6\nVertex 10: 3, 5, 11\nVertex 11: 7, 5, 13, 8, 10\nVertex 12: 7, 1, 3\nVertex 13: 4, 3, 11\n",
    "graph_output": "13 24\n3 8\n13 4\n3 13\n2 6\n7 12\n7 11\n7 2\n11 5\n7 9\n4 5\n11 13\n10 3\n8 11\n9 5\n1 12\n3 5\n3 12\n2 9\n6 9\n1 5\n10 5\n1 6\n8 6\n11 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 68 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 5 and vertex 13.\n",
    "graph_output": "13 68\n1 3\n6 1\n12 3\n11 2\n10 5\n3 11\n12 4\n7 12\n8 6\n2 13\n2 5\n1 11\n8 7\n2 12\n11 4\n10 2\n7 2\n5 8\n5 1\n10 7\n9 10\n4 1\n9 8\n1 7\n3 7\n6 9\n3 13\n10 3\n12 13\n4 2\n6 13\n1 9\n5 9\n11 9\n11 10\n4 5\n4 10\n6 10\n6 11\n12 5\n11 8\n2 6\n12 1\n3 8\n12 10\n13 7\n5 6\n1 13\n1 2\n13 8\n3 6\n5 3\n7 9\n8 1\n8 10\n12 11\n2 3\n12 6\n4 13\n4 7\n9 13\n4 3\n3 9\n11 7\n5 7\n8 12\n11 5\n5 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 38 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   0   0   0   1   1   0   1   1 \n 2 |  1   0   1   1   1   1   0   1   1   0   0 \n 3 |  1   1   0   1   1   0   1   1   1   1   1 \n 4 |  0   1   1   0   1   0   1   0   1   0   1 \n 5 |  0   1   1   1   0   1   1   1   1   1   0 \n 6 |  0   1   0   0   1   0   0   1   1   0   1 \n 7 |  1   0   1   1   1   0   0   1   1   1   1 \n 8 |  1   1   1   0   1   1   1   0   1   1   0 \n 9 |  0   1   1   1   1   1   1   1   0   0   0 \n10 |  1   0   1   0   1   0   1   1   0   0   1 \n11 |  1   0   1   1   0   1   1   0   0   1   0 \n",
    "graph_output": "11 38\n9 2\n5 6\n11 3\n7 1\n10 1\n10 5\n11 10\n7 11\n3 8\n10 3\n8 10\n1 2\n9 4\n3 4\n2 3\n11 4\n7 5\n10 7\n5 4\n11 6\n9 6\n7 4\n2 4\n5 9\n5 2\n11 1\n7 8\n6 2\n3 5\n6 8\n8 2\n8 9\n3 7\n9 7\n3 9\n8 5\n8 1\n1 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 8 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 14 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 7 (capacity=9), 2 (capacity=2), 11 (capacity=8), 10 (capacity=6), 3 (capacity=7), 5 (capacity=4)\nVertex 2: 1 (capacity=2), 8 (capacity=8), 6 (capacity=7)\nVertex 3: 1 (capacity=7)\nVertex 4: 8 (capacity=9), 9 (capacity=6)\nVertex 5: 8 (capacity=2), 1 (capacity=4)\nVertex 6: 2 (capacity=7), 9 (capacity=7)\nVertex 7: 1 (capacity=9), 9 (capacity=9)\nVertex 8: 2 (capacity=8), 4 (capacity=9), 5 (capacity=2)\nVertex 9: 7 (capacity=9), 4 (capacity=6), 6 (capacity=7)\nVertex 10: 1 (capacity=6), 11 (capacity=2)\nVertex 11: 1 (capacity=8), 10 (capacity=2)\n",
    "graph_output": "11 14\n1 7 9\n1 2 2\n7 9 9\n2 8 8\n1 11 8\n2 6 7\n8 4 9\n1 10 6\n8 5 2\n1 3 7\n9 4 6\n6 9 7\n10 11 2\n5 1 4\n",
    "vertices": [
      8,
      4
    ],
    "answer": 15,
    "description_type": "list"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (30\u00d730):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n   ------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   1 \n 2 |  0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 3 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0 \n 5 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   1   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n17 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n18 |  1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   1   0   1   0   0 \n21 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   1   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n30 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n",
    "graph_output": "30 29\n1 18\n1 20\n1 30\n30 27\n27 14\n18 8\n20 17\n20 26\n20 23\n20 4\n23 13\n17 5\n23 12\n4 9\n30 15\n15 24\n27 7\n1 11\n5 29\n5 2\n5 19\n2 21\n27 6\n4 25\n20 28\n7 10\n2 3\n23 22\n25 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 19,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 42 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   1   1   0   1   1   0   1   0   0   0   1 \n 2 |  1   0   0   1   1   0   1   1   1   1   1   1 \n 3 |  1   0   0   1   1   0   1   1   1   1   1   1 \n 4 |  0   1   1   0   0   1   0   1   1   0   0   1 \n 5 |  1   1   1   0   0   0   1   1   0   0   1   1 \n 6 |  1   0   0   1   0   0   1   1   0   1   1   0 \n 7 |  0   1   1   0   1   1   0   1   0   1   1   0 \n 8 |  1   1   1   1   1   1   1   0   0   1   0   0 \n 9 |  0   1   1   1   0   0   0   0   0   1   1   0 \n10 |  0   1   1   0   0   1   1   1   1   0   1   0 \n11 |  0   1   1   0   1   1   1   0   1   1   0   1 \n12 |  1   1   1   1   1   0   0   0   0   0   1   0 \n",
    "graph_output": "12 42\n6 11\n11 10\n10 8\n10 3\n5 2\n5 3\n9 10\n3 8\n12 2\n10 2\n7 8\n11 2\n3 1\n11 12\n1 6\n3 7\n12 5\n5 1\n11 9\n11 7\n12 4\n12 1\n2 7\n8 4\n5 11\n4 2\n2 1\n7 5\n9 2\n1 8\n3 4\n4 9\n7 10\n2 8\n6 10\n6 8\n5 8\n3 9\n4 6\n3 11\n6 7\n3 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 25 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 5 and vertex 8.\n",
    "graph_output": "8 25\n4 6\n4 7\n1 8\n6 3\n5 4\n2 8\n7 5\n7 6\n1 2\n5 6\n3 8\n1 6\n2 7\n3 7\n7 8\n5 2\n3 5\n2 6\n3 1\n3 2\n3 4\n1 7\n8 4\n4 2\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3422,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 24 edges\n\nEdges (Format: Node Node):\n1 9\n1 16\n1 6\n1 14\n14 10\n16 2\n14 3\n16 13\n13 4\n3 12\n2 11\n12 8\n8 15\n6 7\n9 5\n3 6\n3 1\n2 15\n14 11\n7 9\n2 8\n4 8\n11 12\n16 3\n",
    "graph_output": "16 24\n1 9\n1 16\n1 6\n1 14\n14 10\n16 2\n14 3\n16 13\n13 4\n3 12\n2 11\n12 8\n8 15\n6 7\n9 5\n3 6\n3 1\n2 15\n14 11\n7 9\n2 8\n4 8\n11 12\n16 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 112 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 13, 6, 5, 12, 8, 16, 4, 2, 3, 15, 14, 10, 7, 9\nVertex 2: 5, 8, 14, 10, 13, 7, 15, 11, 3, 1, 16, 6, 9, 4, 12\nVertex 3: 6, 9, 15, 8, 12, 7, 4, 14, 2, 1, 5, 16, 10, 11\nVertex 4: 11, 16, 9, 6, 8, 10, 13, 12, 5, 1, 7, 14, 3, 15, 2\nVertex 5: 1, 7, 2, 10, 16, 12, 4, 8, 9, 14, 3, 13, 15, 6, 11\nVertex 6: 1, 3, 4, 11, 12, 14, 7, 15, 8, 10, 2, 16, 9, 5, 13\nVertex 7: 5, 10, 9, 8, 11, 3, 2, 4, 12, 13, 6, 1, 15, 16\nVertex 8: 2, 4, 9, 12, 1, 7, 3, 5, 16, 15, 11, 13, 6, 10, 14\nVertex 9: 4, 3, 8, 7, 13, 16, 5, 11, 10, 2, 15, 6, 1\nVertex 10: 7, 14, 15, 12, 5, 4, 2, 11, 1, 6, 9, 16, 3, 8\nVertex 11: 1, 4, 6, 10, 16, 7, 12, 8, 2, 9, 15, 5, 3\nVertex 12: 10, 1, 13, 8, 4, 5, 6, 3, 11, 14, 7, 15, 16, 2\nVertex 13: 1, 4, 16, 12, 9, 2, 15, 14, 7, 8, 5, 6\nVertex 14: 10, 15, 2, 6, 4, 5, 12, 3, 13, 1, 8\nVertex 15: 10, 14, 3, 8, 2, 13, 1, 6, 11, 4, 16, 7, 12, 5, 9\nVertex 16: 4, 13, 5, 1, 11, 9, 8, 3, 2, 10, 15, 7, 6, 12\n",
    "graph_output": "16 112\n1 11\n1 13\n1 6\n1 5\n5 7\n11 4\n7 10\n10 14\n6 3\n5 2\n4 16\n4 9\n2 8\n10 15\n10 12\n6 4\n9 3\n15 14\n4 8\n9 8\n10 5\n3 15\n4 10\n13 4\n11 6\n12 1\n13 16\n12 13\n2 14\n12 8\n1 8\n9 7\n2 10\n16 5\n10 11\n13 9\n4 12\n16 1\n12 5\n6 12\n16 11\n8 7\n5 4\n2 13\n3 8\n8 5\n12 3\n11 7\n9 16\n11 12\n8 16\n7 3\n6 14\n4 1\n5 9\n2 7\n7 4\n15 8\n14 4\n5 14\n4 3\n15 2\n8 11\n14 12\n15 13\n2 11\n11 9\n3 14\n3 2\n14 13\n7 12\n13 7\n2 1\n3 1\n7 6\n5 3\n16 3\n16 2\n15 1\n6 15\n1 14\n13 8\n10 1\n6 8\n6 10\n11 15\n10 9\n15 4\n7 1\n2 6\n16 10\n16 15\n10 3\n8 10\n7 15\n16 7\n2 9\n5 13\n15 12\n15 5\n6 16\n9 15\n6 9\n5 6\n16 12\n5 11\n4 2\n1 9\n14 8\n12 2\n11 3\n13 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 40 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4 with a weight of 87.\nThere is an edge between vertex 1 and vertex 9 with a weight of 67.\nThere is an edge between vertex 1 and vertex 5 with a weight of 44.\nThere is an edge between vertex 1 and vertex 8 with a weight of 89.\nThere is an edge between vertex 9 and vertex 11 with a weight of 33.\nThere is an edge between vertex 5 and vertex 10 with a weight of 23.\nThere is an edge between vertex 11 and vertex 2 with a weight of 29.\nThere is an edge between vertex 11 and vertex 6 with a weight of 44.\nThere is an edge between vertex 4 and vertex 7 with a weight of 88.\nThere is an edge between vertex 8 and vertex 3 with a weight of 76.\nThere is an edge between vertex 10 and vertex 11 with a weight of 41.\nThere is an edge between vertex 7 and vertex 1 with a weight of 36.\nThere is an edge between vertex 6 and vertex 2 with a weight of 76.\nThere is an edge between vertex 5 and vertex 7 with a weight of 55.\nThere is an edge between vertex 2 and vertex 10 with a weight of 95.\nThere is an edge between vertex 4 and vertex 5 with a weight of 64.\nThere is an edge between vertex 2 and vertex 9 with a weight of 46.\nThere is an edge between vertex 10 and vertex 9 with a weight of 45.\nThere is an edge between vertex 1 and vertex 2 with a weight of 59.\nThere is an edge between vertex 11 and vertex 7 with a weight of 92.\nThere is an edge between vertex 10 and vertex 3 with a weight of 73.\nThere is an edge between vertex 8 and vertex 4 with a weight of 8.\nThere is an edge between vertex 10 and vertex 7 with a weight of 86.\nThere is an edge between vertex 11 and vertex 4 with a weight of 81.\nThere is an edge between vertex 9 and vertex 7 with a weight of 74.\nThere is an edge between vertex 5 and vertex 9 with a weight of 74.\nThere is an edge between vertex 8 and vertex 10 with a weight of 64.\nThere is an edge between vertex 11 and vertex 5 with a weight of 71.\nThere is an edge between vertex 5 and vertex 6 with a weight of 100.\nThere is an edge between vertex 9 and vertex 3 with a weight of 6.\nThere is an edge between vertex 3 and vertex 7 with a weight of 78.\nThere is an edge between vertex 2 and vertex 4 with a weight of 13.\nThere is an edge between vertex 6 and vertex 3 with a weight of 93.\nThere is an edge between vertex 3 and vertex 4 with a weight of 41.\nThere is an edge between vertex 10 and vertex 4 with a weight of 88.\nThere is an edge between vertex 6 and vertex 10 with a weight of 97.\nThere is an edge between vertex 5 and vertex 2 with a weight of 90.\nThere is an edge between vertex 3 and vertex 2 with a weight of 35.\nThere is an edge between vertex 8 and vertex 11 with a weight of 7.\nThere is an edge between vertex 6 and vertex 1 with a weight of 12.\n",
    "graph_output": "11 40\n1 4 87\n1 9 67\n1 5 44\n1 8 89\n9 11 33\n5 10 23\n11 2 29\n11 6 44\n4 7 88\n8 3 76\n10 11 41\n7 1 36\n6 2 76\n5 7 55\n2 10 95\n4 5 64\n2 9 46\n10 9 45\n1 2 59\n11 7 92\n10 3 73\n8 4 8\n10 7 86\n11 4 81\n9 7 74\n5 9 74\n8 10 64\n11 5 71\n5 6 100\n9 3 6\n3 7 78\n2 4 13\n6 3 93\n3 4 41\n10 4 88\n6 10 97\n5 2 90\n3 2 35\n8 11 7\n6 1 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 225,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 130 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 17 and vertex 10.\nThere is an edge between vertex 17 and vertex 15.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 13 and vertex 17.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 7 and vertex 17.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 17 and vertex 6.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 17 and vertex 16.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 17 and vertex 1.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 17 and vertex 14.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 2 and vertex 17.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 4 and vertex 14.\n",
    "graph_output": "17 130\n1 2\n2 6\n2 7\n6 15\n7 14\n1 3\n7 8\n3 12\n6 16\n16 11\n14 10\n3 9\n3 17\n10 13\n1 4\n4 5\n8 2\n10 4\n6 14\n5 9\n7 10\n4 6\n7 13\n16 7\n15 7\n13 11\n13 9\n6 12\n3 7\n3 8\n1 12\n14 12\n5 13\n6 10\n7 4\n8 11\n16 15\n12 13\n2 16\n5 12\n11 14\n2 15\n13 2\n11 15\n17 5\n10 3\n14 3\n16 1\n17 10\n17 15\n8 15\n13 17\n10 12\n6 7\n9 12\n9 2\n4 17\n5 8\n16 9\n8 14\n4 15\n12 7\n4 13\n1 9\n6 13\n5 6\n8 6\n11 7\n10 15\n5 1\n7 17\n2 4\n1 15\n12 11\n1 14\n2 5\n2 14\n17 6\n14 13\n11 3\n10 16\n9 11\n8 1\n1 6\n4 12\n9 4\n11 2\n3 15\n15 13\n17 16\n16 3\n13 1\n17 1\n14 9\n15 12\n10 1\n4 3\n7 9\n3 2\n15 14\n17 14\n9 10\n16 5\n5 11\n8 13\n15 5\n13 16\n17 8\n8 4\n6 9\n8 9\n3 6\n8 16\n10 5\n15 9\n16 12\n11 17\n12 8\n8 10\n7 1\n14 5\n2 17\n4 11\n12 2\n13 3\n5 3\n12 17\n11 6\n14 16\n4 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 19 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 7\nVertex 2: No connections\nVertex 3: 15, 12, 13, 6\nVertex 4: 15\nVertex 5: 6, 14\nVertex 6: 14, 5, 3, 8, 13\nVertex 7: 11, 1\nVertex 8: 14, 1, 6\nVertex 9: 15\nVertex 10: 11\nVertex 11: 16, 10, 7, 14\nVertex 12: 3\nVertex 13: 3, 6\nVertex 14: 8, 15, 6, 11, 5\nVertex 15: 14, 3, 4, 9\nVertex 16: 11\n",
    "graph_output": "16 19\n16 11\n11 10\n14 8\n15 14\n8 1\n14 6\n3 15\n11 7\n4 15\n5 6\n12 3\n3 13\n11 14\n5 14\n3 6\n8 6\n9 15\n13 6\n1 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 29 and 27 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 20, 9\nVertex 2: 7\nVertex 3: 29\nVertex 4: 29\nVertex 5: 29, 16\nVertex 6: 22\nVertex 7: 20, 10, 2\nVertex 8: 22\nVertex 9: 1\nVertex 10: 7, 15, 27\nVertex 11: 22, 21\nVertex 12: 25\nVertex 13: 17, 19\nVertex 14: 20\nVertex 15: 10\nVertex 16: 5\nVertex 17: 22, 28, 13\nVertex 18: 22\nVertex 19: 13, 23\nVertex 20: 1, 7, 22, 14, 30, 26\nVertex 21: 11\nVertex 22: 20, 31, 17, 11, 18, 25, 6, 8\nVertex 23: 19\nVertex 24: 29\nVertex 25: 22, 12\nVertex 26: 20\nVertex 27: 10\nVertex 28: 17\nVertex 29: 30, 3, 4, 5, 24\nVertex 30: 20, 29\nVertex 31: 22\n",
    "graph_output": "31 30\n1 20\n20 7\n1 9\n20 22\n22 31\n7 10\n10 15\n7 2\n20 14\n20 30\n22 17\n22 11\n22 18\n30 29\n17 28\n17 13\n13 19\n19 23\n29 3\n22 25\n20 26\n22 6\n29 4\n29 5\n11 21\n25 12\n5 16\n22 8\n10 27\n29 24\n",
    "vertices": [
      29,
      27
    ],
    "answer": 20,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 85 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 8 and vertex 3.\n",
    "graph_output": "15 85\n1 8\n8 2\n2 6\n8 7\n1 13\n7 14\n8 11\n8 10\n11 15\n6 3\n1 9\n8 4\n9 12\n13 5\n10 4\n11 14\n14 2\n6 8\n13 12\n10 5\n13 4\n1 5\n11 5\n2 1\n1 15\n15 7\n12 7\n2 9\n2 13\n2 15\n12 3\n9 5\n15 14\n5 2\n14 10\n14 1\n4 3\n8 5\n4 7\n15 13\n12 11\n7 2\n10 13\n12 15\n4 1\n3 2\n13 6\n12 14\n12 2\n13 3\n5 6\n15 4\n13 14\n3 1\n4 14\n10 1\n13 11\n3 10\n3 11\n10 12\n13 8\n7 10\n3 7\n10 2\n9 13\n11 6\n3 5\n7 6\n9 10\n5 15\n5 14\n9 8\n3 9\n6 12\n7 11\n10 11\n4 9\n14 9\n6 1\n1 7\n15 8\n15 6\n10 6\n4 11\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 14 to vertex 10 in the weighted graph.\n\nUndirected, Weighted Graph with 14 vertices and 89 edges\n\nEdges (Format: Node Node Weight):\n1 13 94\n1 14 16\n13 8 23\n8 2 4\n1 9 70\n2 6 62\n1 3 32\n6 11 59\n13 12 49\n1 4 6\n3 10 85\n2 5 67\n12 7 35\n4 2 92\n5 7 37\n6 5 41\n12 3 81\n2 9 15\n7 3 66\n5 9 31\n10 12 78\n8 14 22\n14 2 40\n10 7 95\n12 4 11\n6 1 100\n11 4 69\n7 2 30\n1 2 37\n3 6 3\n12 14 68\n8 1 50\n11 9 38\n5 10 19\n2 13 6\n14 6 91\n12 6 40\n9 7 33\n3 11 14\n13 6 50\n1 5 20\n4 7 60\n9 10 71\n11 10 57\n13 5 23\n10 1 8\n9 3 12\n14 9 89\n8 5 91\n3 2 22\n2 12 28\n4 8 61\n12 11 56\n8 10 92\n3 8 39\n10 14 90\n4 14 1\n11 14 4\n7 6 98\n13 9 67\n4 5 29\n6 8 55\n11 2 57\n13 10 5\n9 8 56\n4 9 9\n6 4 5\n11 7 23\n3 13 80\n3 14 41\n12 1 41\n11 5 36\n7 1 76\n4 10 86\n8 11 21\n3 5 31\n7 8 60\n4 13 25\n14 7 47\n3 4 95\n9 6 60\n12 9 8\n14 13 62\n12 8 77\n6 10 23\n11 1 54\n5 12 17\n13 7 23\n5 14 98\n",
    "graph_output": "14 89\n1 13 94\n1 14 16\n13 8 23\n8 2 4\n1 9 70\n2 6 62\n1 3 32\n6 11 59\n13 12 49\n1 4 6\n3 10 85\n2 5 67\n12 7 35\n4 2 92\n5 7 37\n6 5 41\n12 3 81\n2 9 15\n7 3 66\n5 9 31\n10 12 78\n8 14 22\n14 2 40\n10 7 95\n12 4 11\n6 1 100\n11 4 69\n7 2 30\n1 2 37\n3 6 3\n12 14 68\n8 1 50\n11 9 38\n5 10 19\n2 13 6\n14 6 91\n12 6 40\n9 7 33\n3 11 14\n13 6 50\n1 5 20\n4 7 60\n9 10 71\n11 10 57\n13 5 23\n10 1 8\n9 3 12\n14 9 89\n8 5 91\n3 2 22\n2 12 28\n4 8 61\n12 11 56\n8 10 92\n3 8 39\n10 14 90\n4 14 1\n11 14 4\n7 6 98\n13 9 67\n4 5 29\n6 8 55\n11 2 57\n13 10 5\n9 8 56\n4 9 9\n6 4 5\n11 7 23\n3 13 80\n3 14 41\n12 1 41\n11 5 36\n7 1 76\n4 10 86\n8 11 21\n3 5 31\n7 8 60\n4 13 25\n14 7 47\n3 4 95\n9 6 60\n12 9 8\n14 13 62\n12 8 77\n6 10 23\n11 1 54\n5 12 17\n13 7 23\n5 14 98\n",
    "vertices": [
      14,
      10
    ],
    "answer": 15,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 113 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 13, 2, 3, 4, 16, 9, 6, 15, 11, 8, 10, 5, 7, 12\nVertex 2: 8, 7, 5, 1, 14, 16, 13, 15, 9, 3, 4, 10\nVertex 3: 11, 6, 13, 8, 9, 14, 16, 1, 10, 4, 15, 5, 2, 7\nVertex 4: 7, 9, 16, 10, 5, 11, 6, 1, 15, 14, 12, 3, 13, 2, 8\nVertex 5: 13, 2, 16, 7, 4, 14, 8, 15, 6, 11, 12, 3, 9, 1, 10\nVertex 6: 3, 15, 8, 16, 14, 4, 11, 1, 5, 10, 12, 9, 13, 7\nVertex 7: 8, 4, 11, 2, 10, 5, 15, 13, 14, 16, 3, 1, 9, 6\nVertex 8: 7, 9, 3, 10, 2, 16, 6, 12, 15, 5, 11, 13, 1, 14, 4\nVertex 9: 8, 4, 16, 3, 10, 14, 13, 1, 11, 12, 2, 5, 6, 7\nVertex 10: 8, 7, 12, 4, 9, 16, 15, 14, 3, 13, 6, 1, 5, 2\nVertex 11: 3, 14, 7, 16, 13, 4, 6, 9, 1, 12, 15, 8, 5\nVertex 12: 16, 10, 14, 8, 13, 4, 11, 9, 5, 6, 15, 1\nVertex 13: 3, 5, 1, 15, 11, 9, 2, 12, 10, 16, 7, 4, 8, 14, 6\nVertex 14: 1, 11, 12, 15, 3, 9, 2, 6, 10, 16, 5, 4, 7, 13, 8\nVertex 15: 16, 6, 14, 13, 7, 8, 10, 4, 2, 5, 1, 3, 11, 12\nVertex 16: 15, 12, 9, 4, 11, 8, 5, 10, 3, 6, 2, 14, 1, 13, 7\n",
    "graph_output": "16 113\n16 15\n3 11\n14 1\n7 8\n7 4\n8 9\n4 9\n3 6\n13 3\n12 16\n11 14\n9 16\n5 13\n3 8\n15 6\n7 11\n8 10\n8 2\n7 2\n13 1\n10 7\n12 10\n16 4\n4 10\n9 3\n14 12\n11 16\n5 2\n8 16\n16 5\n15 14\n9 10\n1 2\n14 3\n5 7\n6 8\n10 16\n3 16\n9 14\n4 5\n14 2\n13 15\n6 16\n11 13\n12 8\n13 9\n2 16\n6 14\n4 11\n7 15\n15 8\n3 1\n10 15\n10 14\n6 4\n2 13\n4 1\n11 6\n14 16\n1 16\n10 3\n1 9\n5 14\n6 1\n13 12\n15 4\n8 5\n15 2\n13 10\n4 14\n15 5\n13 16\n12 4\n7 13\n11 9\n1 15\n1 11\n4 3\n6 5\n11 12\n15 3\n14 7\n11 15\n8 11\n13 4\n12 9\n5 11\n10 6\n5 12\n5 3\n8 13\n2 9\n7 16\n14 13\n9 5\n12 6\n1 8\n1 10\n3 2\n5 1\n4 2\n14 8\n6 9\n4 8\n3 7\n7 1\n13 6\n12 15\n5 10\n1 12\n9 7\n10 2\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 8 vertices and 7 edges\n\nEdges (Format: Node Node):\n1 8\n4 3\n8 4\n8 7\n4 2\n1 4\n4 5\n",
    "graph_output": "8 7\n1 8\n4 3\n8 4\n8 7\n4 2\n1 4\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 5 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 22 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0  15   0  95   0   0 \n 2 |  0   0   0   0   0   0  55   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0  34   0   0  40   0   0   0 \n 4 |  0   0   0   0   0   0  28   0   0   0   9   0   0   0   0 \n 5 |  0   0   0   0   0   0   0  51   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0  91   0   0   0   0 \n 7 |  0  55   0  28   0   0   0  84   0   0   0  14   0   0  81 \n 8 |  0   0   0   0  51   0  84   0   0  61   0   7   0   0   0 \n 9 |  0   0  34   0   0   0   0   0   0   0  23   0   0  76   0 \n10 |  0   0   0   0   0   0   0  61   0   0   0   0  44   0   0 \n11 | 15   0   0   9   0  91   0   0  23   0   0  65   0   0  24 \n12 |  0   0  40   0   0   0  14   7   0   0  65   0   0  72   0 \n13 | 95   0   0   0   0   0   0   0   0  44   0   0   0   1   0 \n14 |  0   0   0   0   0   0   0   0  76   0   0  72   1   0  89 \n15 |  0   0   0   0   0   0  81   0   0   0  24   0   0  89   0 \n",
    "graph_output": "15 22\n1 13 95\n1 11 15\n13 14 1\n11 12 65\n11 4 9\n12 7 14\n11 9 23\n12 3 40\n12 8 7\n7 2 55\n11 6 91\n11 15 24\n8 5 51\n8 10 61\n12 14 72\n14 15 89\n10 13 44\n3 9 34\n7 4 28\n7 15 81\n7 8 84\n14 9 76\n",
    "vertices": [
      4,
      5
    ],
    "answer": 100,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 11 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 3 and vertex 1.\n",
    "graph_output": "6 11\n3 5\n1 4\n4 6\n5 4\n2 5\n6 2\n1 2\n2 4\n6 5\n4 3\n3 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 35,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 15 vertices and 105 edges\n\nEdges (Format: Node Node):\n10 4\n14 11\n2 8\n2 3\n12 14\n14 5\n13 11\n1 7\n10 13\n5 3\n3 13\n11 8\n3 1\n12 9\n7 3\n11 4\n3 9\n6 13\n11 9\n2 6\n10 8\n15 6\n4 9\n10 1\n3 8\n4 3\n5 6\n15 8\n6 12\n2 12\n13 12\n6 14\n14 15\n4 2\n7 13\n9 8\n2 14\n8 14\n7 5\n7 14\n5 8\n2 7\n12 5\n15 13\n2 11\n7 9\n8 4\n2 9\n14 1\n11 3\n4 13\n8 13\n6 9\n10 15\n14 3\n13 5\n13 9\n4 7\n6 7\n1 11\n15 12\n14 10\n1 2\n15 3\n12 1\n12 3\n10 7\n14 4\n1 5\n10 6\n8 12\n13 14\n14 9\n7 15\n8 7\n4 6\n1 6\n12 7\n5 10\n4 1\n2 13\n3 10\n8 6\n15 4\n11 10\n11 15\n1 8\n9 5\n10 12\n9 10\n11 12\n2 10\n5 4\n15 1\n9 1\n12 4\n7 11\n2 15\n2 5\n15 5\n1 13\n15 9\n6 11\n5 11\n3 6\n",
    "graph_output": "15 105\n10 4\n14 11\n2 8\n2 3\n12 14\n14 5\n13 11\n1 7\n10 13\n5 3\n3 13\n11 8\n3 1\n12 9\n7 3\n11 4\n3 9\n6 13\n11 9\n2 6\n10 8\n15 6\n4 9\n10 1\n3 8\n4 3\n5 6\n15 8\n6 12\n2 12\n13 12\n6 14\n14 15\n4 2\n7 13\n9 8\n2 14\n8 14\n7 5\n7 14\n5 8\n2 7\n12 5\n15 13\n2 11\n7 9\n8 4\n2 9\n14 1\n11 3\n4 13\n8 13\n6 9\n10 15\n14 3\n13 5\n13 9\n4 7\n6 7\n1 11\n15 12\n14 10\n1 2\n15 3\n12 1\n12 3\n10 7\n14 4\n1 5\n10 6\n8 12\n13 14\n14 9\n7 15\n8 7\n4 6\n1 6\n12 7\n5 10\n4 1\n2 13\n3 10\n8 6\n15 4\n11 10\n11 15\n1 8\n9 5\n10 12\n9 10\n11 12\n2 10\n5 4\n15 1\n9 1\n12 4\n7 11\n2 15\n2 5\n15 5\n1 13\n15 9\n6 11\n5 11\n3 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 16 vertices and 31 edges\n\nEdges (Format: Node Node):\n1 11\n1 3\n11 7\n1 16\n1 12\n7 9\n11 4\n3 8\n1 13\n11 15\n4 2\n2 6\n15 14\n16 10\n2 5\n9 14\n6 13\n4 5\n8 9\n16 12\n16 4\n5 1\n5 10\n2 1\n10 15\n10 8\n9 1\n14 12\n11 12\n5 16\n2 11\n",
    "graph_output": "16 31\n1 11\n1 3\n11 7\n1 16\n1 12\n7 9\n11 4\n3 8\n1 13\n11 15\n4 2\n2 6\n15 14\n16 10\n2 5\n9 14\n6 13\n4 5\n8 9\n16 12\n16 4\n5 1\n5 10\n2 1\n10 15\n10 8\n9 1\n14 12\n11 12\n5 16\n2 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 8 and vertex 6 are connected.\n\nThis is an undirected graph with 15 vertices and 91 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   0   1   1   1   0   1   1   1   1   1   0 \n 2 |  1   0   0   1   1   0   1   1   1   1   1   1   1   1   1 \n 3 |  1   0   0   1   1   1   1   1   1   0   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   0   1   1   1   1   1   1   1   1 \n 5 |  0   1   1   1   0   1   1   0   1   1   0   1   1   0   1 \n 6 |  1   0   1   1   1   0   1   1   1   1   0   1   1   1   1 \n 7 |  1   1   1   0   1   1   0   1   0   1   1   1   1   1   0 \n 8 |  1   1   1   1   0   1   1   0   1   0   1   1   1   1   1 \n 9 |  0   1   1   1   1   1   0   1   0   1   1   1   1   1   1 \n10 |  1   1   0   1   1   1   1   0   1   0   1   1   1   1   1 \n11 |  1   1   1   1   0   0   1   1   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   1   0   1   1   1   1   1   1   1   1   0   1 \n15 |  0   1   1   1   1   1   0   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 91\n6 15\n8 12\n13 11\n8 4\n2 14\n5 4\n2 7\n14 13\n5 7\n9 5\n10 4\n14 3\n9 4\n9 6\n6 10\n12 6\n13 2\n9 10\n4 12\n2 9\n2 10\n5 2\n3 1\n13 8\n1 4\n7 11\n1 14\n11 8\n15 11\n3 7\n9 13\n11 14\n9 3\n13 7\n14 6\n3 11\n9 15\n10 5\n12 7\n3 8\n4 13\n10 7\n3 15\n1 11\n3 6\n15 13\n12 14\n1 8\n1 12\n4 14\n12 13\n12 11\n3 4\n7 8\n6 13\n15 4\n13 5\n12 3\n10 13\n8 15\n12 2\n4 11\n11 9\n1 7\n14 15\n11 2\n6 8\n8 14\n4 6\n6 1\n9 12\n5 12\n1 10\n5 6\n9 8\n4 2\n14 10\n9 14\n7 14\n13 3\n5 3\n15 5\n15 12\n1 13\n10 12\n10 11\n2 8\n2 1\n7 6\n15 2\n15 10\n",
    "vertices": [
      8,
      6
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 19 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   1   0   1   0   0   0   1   0   0   0   0 \n 2 |  0   0   1   0   0   1   1   0   0   0   0   0   0   0   0   0 \n 3 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 4 |  0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   1 \n 5 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 6 |  1   1   0   1   0   0   0   0   1   0   1   0   0   1   1   1 \n 7 |  0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 8 |  1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1 \n10 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n12 |  1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n14 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   1   0   0   1   0   0   0   0   0   0   1   0   0   0 \n16 |  0   0   0   1   0   1   0   0   1   0   0   0   0   0   0   0 \n",
    "graph_output": "16 19\n1 6\n6 2\n6 16\n6 9\n6 11\n2 3\n2 7\n1 8\n16 4\n4 12\n7 10\n6 14\n8 5\n3 15\n15 13\n9 16\n12 1\n6 15\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 27 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   1   1   0   1   0   1   0 \n 2 |  0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   1   0   0   0   0   0   1   1   0   1   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 5 |  0   1   1   0   0   1   0   1   0   0   0   1   0   0   0   0 \n 6 |  0   0   0   0   1   0   1   0   0   0   0   0   0   0   1   1 \n 7 |  0   0   0   0   0   1   0   0   0   0   0   0   1   0   1   0 \n 8 |  0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   1 \n 9 |  0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n10 |  1   0   0   1   0   0   0   1   0   0   1   0   0   0   0   0 \n11 |  1   0   1   0   0   0   0   0   0   1   0   0   0   1   0   1 \n12 |  0   0   1   0   1   0   0   0   0   0   0   0   0   0   1   0 \n13 |  1   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0 \n14 |  0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0 \n15 |  1   0   0   0   0   1   1   0   0   0   0   1   0   0   0   1 \n16 |  0   0   0   0   0   1   0   1   0   0   1   0   0   0   1   0 \n",
    "graph_output": "16 27\n1 10\n1 15\n1 11\n11 16\n10 4\n15 7\n10 8\n7 13\n7 6\n11 3\n13 9\n8 5\n5 2\n3 12\n3 14\n6 15\n11 10\n5 6\n5 12\n1 13\n5 3\n15 12\n15 16\n9 2\n16 8\n14 11\n16 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 87 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0  63  71  65  46  41  62  85  93  72  42  68  41  44  66 \n 2 | 63   0  91  51  38  37  88  36  47  52  98  74  34  44   0 \n 3 | 71  91   0  63  21   0  15   0  20   0  32   0   0  97  68 \n 4 | 65  51  63   0  55  84  60  10  76  15   6  11  19   0   1 \n 5 | 46  38  21  55   0  41   9   0   0  28   0   0   0  36  48 \n 6 | 41  37   0  84  41   0  60  93  89  36  41  35  89  79  14 \n 7 | 62  88  15  60   9  60   0  24  86  91  48  71  66  29  67 \n 8 | 85  36   0  10   0  93  24   0  25  78  37  60  29  65   0 \n 9 | 93  47  20  76   0  89  86  25   0  81  20  85  22  21   0 \n10 | 72  52   0  15  28  36  91  78  81   0   7   0   0   0  53 \n11 | 42  98  32   6   0  41  48  37  20   7   0  13  82  42   9 \n12 | 68  74   0  11   0  35  71  60  85   0  13   0  83   1   0 \n13 | 41  34   0  19   0  89  66  29  22   0  82  83   0  27   4 \n14 | 44  44  97   0  36  79  29  65  21   0  42   1  27   0  67 \n15 | 66   0  68   1  48  14  67   0   0  53   9   0   4  67   0 \n",
    "graph_output": "15 87\n1 15 66\n15 13 4\n13 2 34\n1 11 42\n11 7 48\n7 3 15\n3 5 21\n5 6 41\n13 9 22\n2 12 74\n13 4 19\n11 14 42\n2 10 52\n2 8 36\n11 3 32\n15 10 53\n12 7 71\n2 9 47\n1 12 68\n11 6 41\n8 13 29\n1 10 72\n14 1 44\n7 10 91\n14 15 67\n4 6 84\n11 10 7\n3 2 91\n6 9 89\n15 3 68\n1 2 63\n8 10 78\n15 4 1\n1 3 71\n10 4 15\n7 15 67\n8 12 60\n9 11 20\n8 1 85\n14 5 36\n8 6 93\n7 2 88\n7 1 62\n5 2 38\n12 11 13\n6 7 60\n3 4 63\n15 6 14\n14 12 1\n15 5 48\n3 14 97\n14 6 79\n4 8 10\n7 14 29\n13 7 66\n6 2 37\n4 1 65\n10 9 81\n14 13 27\n4 2 51\n4 9 76\n4 11 6\n13 12 83\n14 2 44\n11 15 9\n13 1 41\n4 12 11\n7 5 9\n14 8 65\n6 13 89\n13 11 82\n10 6 36\n7 4 60\n9 7 86\n8 11 37\n9 1 93\n7 8 24\n11 2 98\n6 12 35\n4 5 55\n5 1 46\n6 1 41\n14 9 21\n8 9 25\n3 9 20\n12 9 85\n10 5 28\n",
    "vertices": [
      null,
      null
    ],
    "answer": 193,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 31 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 10\n1 2\n2 3\n3 24\n10 21\n21 20\n20 5\n20 17\n24 6\n10 28\n28 13\n6 8\n10 7\n10 19\n5 29\n19 18\n29 25\n3 4\n24 12\n1 16\n21 22\n21 15\n29 26\n2 30\n26 31\n3 11\n8 9\n18 23\n2 14\n3 27\n",
    "graph_output": "31 30\n1 10\n1 2\n2 3\n3 24\n10 21\n21 20\n20 5\n20 17\n24 6\n10 28\n28 13\n6 8\n10 7\n10 19\n5 29\n19 18\n29 25\n3 4\n24 12\n1 16\n21 22\n21 15\n29 26\n2 30\n26 31\n3 11\n8 9\n18 23\n2 14\n3 27\n",
    "vertices": [
      null,
      null
    ],
    "answer": 19,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 5 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 20 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2 with a weight of 62 and a capacity of 6.\nThere is an edge between vertex 2 and vertex 7 with a weight of 32 and a capacity of 5.\nThere is an edge between vertex 2 and vertex 6 with a weight of 93 and a capacity of 10.\nThere is an edge between vertex 7 and vertex 4 with a weight of 28 and a capacity of 5.\nThere is an edge between vertex 6 and vertex 8 with a weight of 32 and a capacity of 9.\nThere is an edge between vertex 2 and vertex 5 with a weight of 57 and a capacity of 9.\nThere is an edge between vertex 5 and vertex 9 with a weight of 97 and a capacity of 10.\nThere is an edge between vertex 7 and vertex 3 with a weight of 56 and a capacity of 2.\nThere is an edge between vertex 5 and vertex 3 with a weight of 27 and a capacity of 2.\nThere is an edge between vertex 3 and vertex 1 with a weight of 11 and a capacity of 7.\nThere is an edge between vertex 7 and vertex 8 with a weight of 50 and a capacity of 7.\nThere is an edge between vertex 4 and vertex 3 with a weight of 36 and a capacity of 4.\nThere is an edge between vertex 6 and vertex 4 with a weight of 20 and a capacity of 3.\nThere is an edge between vertex 6 and vertex 3 with a weight of 96 and a capacity of 7.\nThere is an edge between vertex 3 and vertex 2 with a weight of 85 and a capacity of 1.\nThere is an edge between vertex 9 and vertex 8 with a weight of 24 and a capacity of 4.\nThere is an edge between vertex 5 and vertex 4 with a weight of 7 and a capacity of 9.\nThere is an edge between vertex 5 and vertex 7 with a weight of 73 and a capacity of 6.\nThere is an edge between vertex 4 and vertex 9 with a weight of 11 and a capacity of 8.\nThere is an edge between vertex 5 and vertex 1 with a weight of 32 and a capacity of 10.\n",
    "graph_output": "9 20\n1 2 62 6\n2 7 32 5\n2 6 93 10\n7 4 28 5\n6 8 32 9\n2 5 57 9\n5 9 97 10\n7 3 56 2\n5 3 27 2\n3 1 11 7\n7 8 50 7\n4 3 36 4\n6 4 20 3\n6 3 96 7\n3 2 85 1\n9 8 24 4\n5 4 7 9\n5 7 73 6\n4 9 11 8\n5 1 32 10\n",
    "vertices": [
      4,
      5
    ],
    "answer": 2193,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 3 (source) to vertex 5 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 14 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (10\u00d710):\n\n      1   2   3   4   5   6   7   8   9  10\n   ----------------------------------------\n 1 |  0  98   2  38  21  96   0   0   0   0 \n 2 | 98   0   0   0  22  49   0  24   0   0 \n 3 |  2   0   0   0   0  17  89   0   0   0 \n 4 | 38   0   0   0   0   0   0   0  97   0 \n 5 | 21  22   0   0   0   0   0   0   0   0 \n 6 | 96  49  17   0   0   0   0   0   0   0 \n 7 |  0   0  89   0   0   0   0   0   0  56 \n 8 |  0  24   0   0   0   0   0   0   0  89 \n 9 |  0   0   0  97   0   0   0   0   0  43 \n10 |  0   0   0   0   0   0  56  89  43   0 \n\nCapacity Matrix (10\u00d710):\n\n      1   2   3   4   5   6   7   8   9  10\n   ----------------------------------------\n 1 |  0   7   3   4   1  10   0   0   0   0 \n 2 |  7   0   0   0   9   6   0   7   0   0 \n 3 |  3   0   0   0   0   2   6   0   0   0 \n 4 |  4   0   0   0   0   0   0   0   8   0 \n 5 |  1   9   0   0   0   0   0   0   0   0 \n 6 | 10   6   2   0   0   0   0   0   0   0 \n 7 |  0   0   6   0   0   0   0   0   0  10 \n 8 |  0   7   0   0   0   0   0   0   0   8 \n 9 |  0   0   0   8   0   0   0   0   0   1 \n10 |  0   0   0   0   0   0  10   8   1   0 \n",
    "graph_output": "10 14\n1 3 2 3\n3 7 89 6\n1 2 98 7\n1 4 38 4\n4 9 97 8\n2 8 24 7\n8 10 89 8\n1 5 21 1\n1 6 96 10\n10 7 56 10\n9 10 43 1\n2 5 22 9\n6 3 17 2\n6 2 49 6\n",
    "vertices": [
      3,
      5
    ],
    "answer": 1843,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 11 vertices and 37 edges\n\nEdges (Format: Node Node):\n1 4\n9 10\n3 7\n1 6\n6 7\n1 2\n3 1\n10 6\n11 5\n2 9\n11 8\n10 1\n9 1\n5 6\n2 7\n3 4\n11 10\n5 1\n3 9\n2 4\n2 3\n8 1\n11 1\n2 10\n3 8\n2 6\n9 5\n6 11\n10 4\n4 8\n10 3\n9 4\n9 7\n7 5\n11 9\n4 7\n8 9\n",
    "graph_output": "11 37\n1 4\n9 10\n3 7\n1 6\n6 7\n1 2\n3 1\n10 6\n11 5\n2 9\n11 8\n10 1\n9 1\n5 6\n2 7\n3 4\n11 10\n5 1\n3 9\n2 4\n2 3\n8 1\n11 1\n2 10\n3 8\n2 6\n9 5\n6 11\n10 4\n4 8\n10 3\n9 4\n9 7\n7 5\n11 9\n4 7\n8 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 50,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 19 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 4 and vertex 6.\n",
    "graph_output": "13 19\n2 13\n7 1\n7 6\n7 8\n9 10\n2 5\n5 6\n1 4\n11 7\n5 7\n3 11\n10 1\n5 11\n2 11\n7 10\n13 8\n13 3\n11 12\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 19 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 13 and vertex 15.\n",
    "graph_output": "16 19\n1 9\n1 3\n9 15\n15 10\n10 12\n10 6\n3 4\n1 13\n12 14\n10 8\n4 7\n14 16\n4 11\n16 2\n3 5\n7 1\n12 8\n14 3\n13 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 14 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 8\nVertex 2: 8, 9\nVertex 3: 12, 8, 6\nVertex 4: 1\nVertex 5: 7, 13\nVertex 6: 12, 3\nVertex 7: 12, 5\nVertex 8: 2, 3, 1\nVertex 9: 15, 2, 14\nVertex 10: No connections\nVertex 11: 13\nVertex 12: 3, 7, 6\nVertex 13: 11, 5\nVertex 14: 9\nVertex 15: 9\n",
    "graph_output": "15 14\n8 2\n3 12\n11 13\n1 4\n7 12\n9 15\n3 8\n9 2\n7 5\n5 13\n6 12\n8 1\n3 6\n14 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 12 and vertex 11.\n",
    "graph_output": "16 28\n4 6\n11 10\n15 4\n12 5\n8 13\n4 9\n3 2\n13 4\n11 1\n2 6\n3 15\n7 16\n12 4\n13 7\n5 3\n5 14\n11 15\n6 5\n6 15\n11 5\n4 2\n1 2\n13 10\n5 8\n4 16\n14 7\n12 2\n12 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 27\nVertex 2: 29\nVertex 3: 5\nVertex 4: 25\nVertex 5: 7, 24, 3\nVertex 6: 15\nVertex 7: 10, 5, 13, 26\nVertex 8: 15\nVertex 9: 18\nVertex 10: 1, 7, 14, 29\nVertex 11: 13, 25\nVertex 12: 30, 28\nVertex 13: 7, 20, 11\nVertex 14: 10, 17\nVertex 15: 28, 31, 6, 8\nVertex 16: 30\nVertex 17: 14, 21, 30\nVertex 18: 28, 9\nVertex 19: 30\nVertex 20: 13\nVertex 21: 17\nVertex 22: 24\nVertex 23: 30\nVertex 24: 5, 22\nVertex 25: 11, 4\nVertex 26: 7\nVertex 27: 1\nVertex 28: 12, 18, 15\nVertex 29: 10, 2\nVertex 30: 17, 12, 16, 23, 19\nVertex 31: 15\n",
    "graph_output": "31 30\n1 10\n10 7\n10 14\n14 17\n7 5\n7 13\n1 27\n17 21\n13 20\n17 30\n10 29\n30 12\n12 28\n13 11\n28 18\n28 15\n15 31\n11 25\n30 16\n5 24\n24 22\n18 9\n15 6\n7 26\n29 2\n30 23\n15 8\n30 19\n25 4\n5 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 12,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 87 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 3 and vertex 4.\n",
    "graph_output": "15 87\n1 15\n15 10\n1 9\n10 3\n15 5\n10 6\n9 2\n10 12\n9 14\n2 7\n1 4\n6 11\n15 13\n13 8\n14 10\n3 1\n10 4\n5 13\n12 15\n9 4\n12 13\n4 11\n1 10\n9 12\n9 5\n4 2\n8 2\n5 14\n9 10\n9 6\n11 9\n5 12\n1 11\n5 1\n10 11\n4 12\n4 8\n14 4\n6 13\n10 7\n2 6\n3 2\n8 12\n3 8\n14 7\n6 8\n14 2\n7 12\n15 9\n14 13\n8 10\n12 2\n3 12\n6 1\n11 8\n13 2\n11 14\n2 5\n13 9\n13 3\n15 4\n6 4\n9 7\n5 8\n2 11\n7 13\n5 11\n9 3\n10 5\n7 5\n11 15\n1 13\n11 3\n8 1\n4 13\n4 5\n11 12\n2 15\n8 14\n14 3\n7 15\n7 11\n2 1\n3 6\n2 10\n6 5\n3 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 14 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 5, 3, 6, 2, 7\nVertex 2: 7, 6, 1\nVertex 3: 1, 6\nVertex 4: 1, 8, 6, 5\nVertex 5: 1, 7, 8, 4\nVertex 6: 4, 2, 1, 3\nVertex 7: 5, 2, 1\nVertex 8: 4, 5\n",
    "graph_output": "8 14\n1 4\n4 8\n1 5\n5 7\n7 2\n4 6\n1 3\n6 2\n6 1\n6 3\n8 5\n2 1\n4 5\n7 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 755,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 4 (source) to vertex 12 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 13 vertices and 56 edges\n\nEdges (Format: Node Node Capacity):\n1 13 6\n1 8 8\n1 2 9\n13 9 4\n2 6 2\n2 10 5\n10 5 3\n10 12 8\n9 3 8\n3 11 3\n8 7 6\n5 4 5\n7 5 10\n10 8 1\n9 2 8\n12 5 3\n7 13 4\n4 1 9\n6 5 1\n9 12 4\n13 12 3\n13 8 2\n4 12 10\n10 9 5\n11 5 3\n9 4 4\n2 7 5\n3 6 10\n2 8 5\n9 11 6\n5 13 4\n11 7 6\n2 4 6\n4 8 8\n7 6 8\n3 12 3\n1 5 9\n8 3 1\n6 13 5\n1 12 1\n3 7 3\n12 2 9\n2 13 2\n10 6 9\n3 2 6\n1 7 7\n10 3 3\n1 3 1\n6 11 1\n10 7 4\n10 4 10\n9 7 9\n1 10 4\n11 1 2\n10 13 4\n12 11 8\n",
    "graph_output": "13 56\n1 13 6\n1 8 8\n1 2 9\n13 9 4\n2 6 2\n2 10 5\n10 5 3\n10 12 8\n9 3 8\n3 11 3\n8 7 6\n5 4 5\n7 5 10\n10 8 1\n9 2 8\n12 5 3\n7 13 4\n4 1 9\n6 5 1\n9 12 4\n13 12 3\n13 8 2\n4 12 10\n10 9 5\n11 5 3\n9 4 4\n2 7 5\n3 6 10\n2 8 5\n9 11 6\n5 13 4\n11 7 6\n2 4 6\n4 8 8\n7 6 8\n3 12 3\n1 5 9\n8 3 1\n6 13 5\n1 12 1\n3 7 3\n12 2 9\n2 13 2\n10 6 9\n3 2 6\n1 7 7\n10 3 3\n1 3 1\n6 11 1\n10 7 4\n10 4 10\n9 7 9\n1 10 4\n11 1 2\n10 13 4\n12 11 8\n",
    "vertices": [
      4,
      12
    ],
    "answer": 49,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 112 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   0   1   1   1   1   1   1   1   1   0   1   1   0   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n 3 |  1   1   0   1   0   1   1   0   1   0   1   1   1   1   1   1   1 \n 4 |  0   1   1   0   0   1   1   1   1   0   1   1   1   1   1   1   1 \n 5 |  1   1   0   0   0   0   0   1   1   0   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   0   0   1   0   1   1   1   0   1   1   0   1   1 \n 7 |  1   1   1   1   0   1   0   1   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   0   1   1   0   1   0   0   1   0   0   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   0   0   1   0   1   1   0   1   1   1 \n10 |  1   1   0   0   0   1   1   1   1   0   1   1   1   1   1   1   0 \n11 |  1   1   1   1   1   1   1   0   0   1   0   1   1   1   1   1   1 \n12 |  1   1   1   1   1   0   1   0   1   1   1   0   0   1   1   1   1 \n13 |  0   1   1   1   1   1   1   1   1   1   1   0   0   1   1   0   0 \n14 |  1   1   1   1   1   1   1   1   0   1   1   1   1   0   1   1   1 \n15 |  1   0   1   1   1   0   1   1   1   1   1   1   1   1   0   1   1 \n16 |  0   1   1   1   1   1   1   1   1   1   1   1   0   1   1   0   1 \n17 |  1   1   1   1   1   1   1   1   1   0   1   1   0   1   1   1   0 \n",
    "graph_output": "17 112\n1 2\n2 6\n6 14\n2 8\n6 3\n2 10\n1 7\n1 9\n14 17\n9 4\n14 16\n1 11\n8 15\n17 5\n2 12\n7 13\n7 9\n2 4\n17 1\n9 6\n4 15\n14 7\n9 12\n5 1\n15 11\n15 10\n14 2\n8 14\n16 5\n13 9\n9 10\n11 4\n1 6\n8 7\n14 11\n7 4\n14 4\n11 2\n7 15\n13 4\n16 12\n4 17\n11 13\n13 3\n1 3\n6 7\n14 12\n3 12\n14 13\n2 3\n15 9\n15 17\n15 1\n6 11\n15 5\n12 10\n10 6\n5 11\n3 7\n14 15\n14 1\n10 8\n16 11\n8 1\n17 3\n13 5\n11 12\n16 6\n12 5\n11 7\n16 3\n11 3\n17 11\n1 12\n13 6\n2 17\n12 4\n16 15\n7 17\n14 5\n17 6\n3 9\n9 5\n16 7\n3 15\n8 13\n16 2\n13 10\n4 6\n16 9\n13 2\n12 17\n8 16\n10 14\n10 1\n4 3\n13 15\n5 2\n4 8\n16 4\n10 11\n9 17\n5 8\n15 12\n7 10\n17 16\n14 3\n2 9\n8 17\n12 7\n10 16\n2 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 59 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   0   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   0 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   0 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   0   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   0 \n 8 |  1   1   1   1   1   1   1   0   1   0   1   1 \n 9 |  0   1   1   1   1   1   1   1   0   1   1   1 \n10 |  1   1   1   1   1   0   1   0   1   0   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   0 \n12 |  1   0   1   0   1   1   0   1   1   1   0   0 \n",
    "graph_output": "12 59\n3 12\n8 9\n7 6\n12 6\n3 4\n8 11\n6 2\n6 3\n1 8\n7 9\n12 9\n2 3\n1 7\n5 3\n10 4\n7 3\n11 6\n1 6\n9 11\n8 7\n5 2\n12 10\n9 5\n9 4\n4 6\n5 1\n1 4\n8 2\n3 10\n2 11\n11 10\n10 7\n7 5\n7 11\n3 9\n4 11\n8 12\n6 5\n2 10\n9 2\n10 9\n10 1\n9 6\n5 12\n7 4\n2 1\n4 8\n1 11\n8 5\n7 2\n2 4\n11 3\n3 8\n12 1\n3 1\n4 5\n8 6\n5 10\n5 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 40 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   0   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   0   0   0   1   1 \n 3 |  0   1   0   0   1   0   1   1   0   1   1 \n 4 |  1   1   0   0   1   1   0   1   0   1   1 \n 5 |  1   1   1   1   0   1   0   1   1   1   1 \n 6 |  1   1   0   1   1   0   0   1   0   1   1 \n 7 |  1   0   1   0   0   0   0   1   1   1   0 \n 8 |  1   0   1   1   1   1   1   0   1   0   1 \n 9 |  1   0   0   0   1   0   1   1   0   1   1 \n10 |  1   1   1   1   1   1   1   0   1   0   0 \n11 |  1   1   1   1   1   1   0   1   1   0   0 \n",
    "graph_output": "11 40\n2 6\n3 7\n6 4\n5 1\n8 6\n10 2\n10 1\n5 10\n10 6\n8 1\n9 5\n3 2\n2 5\n11 4\n1 9\n2 1\n2 4\n10 9\n1 6\n11 5\n1 7\n8 7\n5 6\n3 5\n8 5\n8 4\n7 10\n11 2\n11 9\n3 10\n9 8\n6 11\n1 11\n7 9\n1 4\n4 10\n11 8\n8 3\n3 11\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 62,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 15 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   1   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   1   1   0 \n 4 |  0   0   0   0   0   0   0   1   0   0   1   0 \n 5 |  0   0   0   0   0   0   1   0   1   0   0   0 \n 6 |  0   0   0   0   0   0   1   0   1   0   0   0 \n 7 |  0   1   0   0   1   1   0   0   0   1   0   0 \n 8 |  0   0   0   1   0   0   0   0   1   1   0   1 \n 9 |  0   0   0   0   1   1   0   1   0   1   1   0 \n10 |  0   0   1   0   0   0   1   1   1   0   0   0 \n11 |  0   0   1   1   0   0   0   0   1   0   0   0 \n12 |  0   0   0   0   0   0   0   1   0   0   0   0 \n",
    "graph_output": "12 15\n10 7\n11 9\n8 4\n9 5\n7 6\n9 6\n8 9\n5 7\n12 8\n3 10\n4 11\n7 2\n11 3\n10 9\n8 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 123 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 10 and vertex 17.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 17 and vertex 3.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 17 and vertex 16.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 17 and vertex 13.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 16 and vertex 4.\n",
    "graph_output": "17 123\n1 15\n1 16\n15 9\n15 13\n1 8\n13 3\n16 10\n13 4\n15 14\n15 7\n8 5\n5 6\n8 11\n16 2\n10 17\n2 12\n5 1\n5 9\n17 7\n14 13\n2 10\n9 1\n4 2\n11 14\n3 12\n16 14\n8 6\n15 4\n14 17\n4 11\n16 5\n14 2\n17 3\n12 16\n17 8\n9 6\n6 4\n9 11\n16 6\n17 16\n10 12\n4 14\n1 11\n2 1\n6 11\n16 15\n3 1\n9 2\n12 1\n10 9\n14 12\n10 6\n11 16\n7 2\n10 4\n11 5\n6 17\n9 13\n17 9\n6 14\n9 4\n11 12\n10 11\n4 17\n1 17\n1 7\n13 6\n17 5\n16 3\n8 13\n5 14\n1 14\n3 5\n5 13\n2 11\n14 9\n14 7\n6 3\n12 7\n11 3\n8 10\n9 8\n7 11\n11 13\n2 3\n4 1\n10 3\n7 16\n13 2\n8 15\n4 5\n17 13\n9 3\n9 7\n3 15\n8 4\n10 7\n2 6\n3 7\n8 7\n17 12\n13 1\n15 17\n10 15\n10 14\n17 2\n10 1\n8 16\n11 17\n12 8\n7 5\n8 2\n13 16\n6 7\n3 14\n5 15\n13 12\n8 3\n9 12\n15 11\n5 2\n10 13\n16 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 103 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 7 and vertex 17.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 17 and vertex 14.\nThere is an edge between vertex 10 and vertex 17.\nThere is an edge between vertex 17 and vertex 16.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 5 and vertex 17.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 11 and vertex 9.\n",
    "graph_output": "17 103\n1 15\n15 2\n1 12\n2 11\n12 13\n2 7\n1 16\n11 10\n12 14\n2 5\n7 9\n11 8\n7 17\n5 6\n17 4\n7 3\n13 1\n13 15\n6 16\n6 13\n14 2\n17 14\n10 17\n17 16\n8 9\n12 10\n17 12\n12 15\n1 7\n1 5\n13 9\n17 2\n1 10\n15 4\n9 10\n6 3\n4 3\n11 13\n13 2\n4 13\n11 7\n6 11\n7 6\n1 4\n4 16\n1 14\n16 10\n16 2\n17 8\n10 2\n7 13\n8 7\n4 12\n5 4\n8 10\n3 17\n12 2\n15 17\n13 16\n3 13\n1 2\n5 17\n14 3\n5 11\n2 6\n9 5\n3 1\n5 7\n12 9\n3 9\n1 11\n16 3\n10 4\n8 13\n6 8\n5 3\n12 3\n5 14\n6 14\n12 6\n5 13\n15 6\n14 9\n5 10\n13 14\n17 9\n10 13\n8 2\n6 10\n16 14\n7 10\n14 10\n12 5\n16 12\n8 1\n2 4\n11 15\n12 8\n14 4\n3 10\n14 11\n1 17\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 42 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 3 and vertex 12.\n",
    "graph_output": "12 42\n6 11\n11 10\n10 8\n10 3\n5 2\n5 3\n9 10\n3 8\n12 2\n10 2\n7 8\n11 2\n3 1\n11 12\n1 6\n3 7\n12 5\n5 1\n11 9\n11 7\n12 4\n12 1\n2 7\n8 4\n5 11\n4 2\n2 1\n7 5\n9 2\n1 8\n3 4\n4 9\n7 10\n2 8\n6 10\n6 8\n5 8\n3 9\n4 6\n3 11\n6 7\n3 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 1 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 13 vertices and 77 edges\n\nEdges (Format: Node Node Capacity):\n1 7 4\n1 6 3\n1 3 6\n7 12 4\n12 4 7\n6 13 7\n3 9 2\n3 10 5\n9 2 7\n6 5 10\n4 11 6\n1 8 4\n1 12 7\n11 8 6\n10 6 5\n7 10 4\n1 4 8\n9 5 10\n1 9 1\n6 3 4\n9 6 9\n4 2 3\n8 7 5\n2 10 5\n9 8 3\n11 12 8\n9 12 2\n9 13 10\n7 11 3\n5 8 2\n11 10 8\n3 12 8\n4 5 9\n5 3 4\n5 7 2\n2 7 4\n8 2 9\n9 10 9\n11 9 7\n6 8 5\n13 8 3\n3 8 6\n13 11 10\n3 11 6\n5 10 9\n4 7 1\n2 13 6\n13 3 8\n3 4 7\n13 1 6\n6 12 2\n12 2 9\n5 11 5\n3 7 1\n10 4 5\n2 11 10\n10 1 4\n10 12 1\n2 3 9\n13 12 7\n5 13 6\n8 10 7\n11 6 9\n1 2 4\n13 7 4\n2 5 8\n13 4 8\n4 9 6\n6 4 6\n10 13 9\n8 12 5\n12 5 1\n6 7 6\n6 2 10\n11 1 9\n1 5 3\n7 9 2\n",
    "graph_output": "13 77\n1 7 4\n1 6 3\n1 3 6\n7 12 4\n12 4 7\n6 13 7\n3 9 2\n3 10 5\n9 2 7\n6 5 10\n4 11 6\n1 8 4\n1 12 7\n11 8 6\n10 6 5\n7 10 4\n1 4 8\n9 5 10\n1 9 1\n6 3 4\n9 6 9\n4 2 3\n8 7 5\n2 10 5\n9 8 3\n11 12 8\n9 12 2\n9 13 10\n7 11 3\n5 8 2\n11 10 8\n3 12 8\n4 5 9\n5 3 4\n5 7 2\n2 7 4\n8 2 9\n9 10 9\n11 9 7\n6 8 5\n13 8 3\n3 8 6\n13 11 10\n3 11 6\n5 10 9\n4 7 1\n2 13 6\n13 3 8\n3 4 7\n13 1 6\n6 12 2\n12 2 9\n5 11 5\n3 7 1\n10 4 5\n2 11 10\n10 1 4\n10 12 1\n2 3 9\n13 12 7\n5 13 6\n8 10 7\n11 6 9\n1 2 4\n13 7 4\n2 5 8\n13 4 8\n4 9 6\n6 4 6\n10 13 9\n8 12 5\n12 5 1\n6 7 6\n6 2 10\n11 1 9\n1 5 3\n7 9 2\n",
    "vertices": [
      1,
      6
    ],
    "answer": 59,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 17, 25\nVertex 2: 15\nVertex 3: 29\nVertex 4: 26, 19\nVertex 5: 6\nVertex 6: 28, 10, 5\nVertex 7: 21, 9\nVertex 8: 17\nVertex 9: 7\nVertex 10: 6\nVertex 11: 14\nVertex 12: 20\nVertex 13: 18, 26\nVertex 14: 24, 11\nVertex 15: 1, 24, 18, 2\nVertex 16: 21\nVertex 17: 1, 20, 27, 8\nVertex 18: 15, 13\nVertex 19: 4\nVertex 20: 17, 12, 29\nVertex 21: 28, 7, 16\nVertex 22: 24\nVertex 23: 28\nVertex 24: 15, 28, 14, 22\nVertex 25: 1\nVertex 26: 13, 4\nVertex 27: 17\nVertex 28: 24, 6, 23, 21\nVertex 29: 20, 3\n",
    "graph_output": "29 28\n1 15\n15 24\n24 28\n15 18\n1 17\n28 6\n24 14\n17 20\n18 13\n28 23\n20 12\n28 21\n14 11\n20 29\n17 27\n15 2\n6 10\n17 8\n13 26\n21 7\n1 25\n29 3\n24 22\n21 16\n6 5\n26 4\n7 9\n4 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 16,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 1 to vertex 7 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 16 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8 with a weight of 46.\nThere is an edge between vertex 8 and vertex 12 with a weight of 22.\nThere is an edge between vertex 12 and vertex 3 with a weight of 86.\nThere is an edge between vertex 1 and vertex 11 with a weight of 8.\nThere is an edge between vertex 1 and vertex 7 with a weight of 62.\nThere is an edge between vertex 7 and vertex 13 with a weight of 79.\nThere is an edge between vertex 12 and vertex 2 with a weight of 86.\nThere is an edge between vertex 2 and vertex 14 with a weight of 9.\nThere is an edge between vertex 12 and vertex 15 with a weight of 53.\nThere is an edge between vertex 1 and vertex 5 with a weight of 34.\nThere is an edge between vertex 15 and vertex 10 with a weight of 45.\nThere is an edge between vertex 10 and vertex 6 with a weight of 79.\nThere is an edge between vertex 1 and vertex 9 with a weight of 73.\nThere is an edge between vertex 14 and vertex 4 with a weight of 84.\nThere is an edge between vertex 7 and vertex 12 with a weight of 15.\nThere is an edge between vertex 9 and vertex 12 with a weight of 24.\n",
    "graph_output": "15 16\n1 8 46\n8 12 22\n12 3 86\n1 11 8\n1 7 62\n7 13 79\n12 2 86\n2 14 9\n12 15 53\n1 5 34\n15 10 45\n10 6 79\n1 9 73\n14 4 84\n7 12 15\n9 12 24\n",
    "vertices": [
      1,
      7
    ],
    "answer": 62,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 21 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 17 and vertex 1.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 8 and vertex 3.\n",
    "graph_output": "17 21\n14 3\n12 5\n14 9\n8 4\n12 2\n8 9\n15 13\n11 16\n7 13\n1 14\n6 15\n17 1\n16 14\n15 3\n2 9\n13 4\n17 9\n5 9\n6 14\n4 3\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 56 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8 with a weight of 68.\nThere is an edge between vertex 1 and vertex 11 with a weight of 50.\nThere is an edge between vertex 1 and vertex 10 with a weight of 6.\nThere is an edge between vertex 11 and vertex 4 with a weight of 11.\nThere is an edge between vertex 1 and vertex 3 with a weight of 89.\nThere is an edge between vertex 4 and vertex 5 with a weight of 60.\nThere is an edge between vertex 1 and vertex 9 with a weight of 91.\nThere is an edge between vertex 9 and vertex 6 with a weight of 22.\nThere is an edge between vertex 5 and vertex 2 with a weight of 44.\nThere is an edge between vertex 8 and vertex 7 with a weight of 30.\nThere is an edge between vertex 6 and vertex 12 with a weight of 14.\nThere is an edge between vertex 8 and vertex 5 with a weight of 95.\nThere is an edge between vertex 12 and vertex 4 with a weight of 4.\nThere is an edge between vertex 2 and vertex 3 with a weight of 24.\nThere is an edge between vertex 10 and vertex 7 with a weight of 16.\nThere is an edge between vertex 12 and vertex 10 with a weight of 77.\nThere is an edge between vertex 2 and vertex 11 with a weight of 19.\nThere is an edge between vertex 9 and vertex 12 with a weight of 50.\nThere is an edge between vertex 12 and vertex 7 with a weight of 48.\nThere is an edge between vertex 10 and vertex 6 with a weight of 37.\nThere is an edge between vertex 8 and vertex 9 with a weight of 54.\nThere is an edge between vertex 4 and vertex 1 with a weight of 71.\nThere is an edge between vertex 6 and vertex 8 with a weight of 63.\nThere is an edge between vertex 8 and vertex 4 with a weight of 15.\nThere is an edge between vertex 9 and vertex 7 with a weight of 61.\nThere is an edge between vertex 6 and vertex 7 with a weight of 65.\nThere is an edge between vertex 12 and vertex 8 with a weight of 15.\nThere is an edge between vertex 11 and vertex 10 with a weight of 80.\nThere is an edge between vertex 11 and vertex 8 with a weight of 13.\nThere is an edge between vertex 5 and vertex 11 with a weight of 51.\nThere is an edge between vertex 8 and vertex 2 with a weight of 90.\nThere is an edge between vertex 1 and vertex 12 with a weight of 15.\nThere is an edge between vertex 9 and vertex 5 with a weight of 91.\nThere is an edge between vertex 2 and vertex 10 with a weight of 18.\nThere is an edge between vertex 5 and vertex 10 with a weight of 84.\nThere is an edge between vertex 10 and vertex 3 with a weight of 29.\nThere is an edge between vertex 6 and vertex 4 with a weight of 41.\nThere is an edge between vertex 8 and vertex 10 with a weight of 46.\nThere is an edge between vertex 2 and vertex 6 with a weight of 16.\nThere is an edge between vertex 12 and vertex 11 with a weight of 82.\nThere is an edge between vertex 7 and vertex 4 with a weight of 99.\nThere is an edge between vertex 3 and vertex 4 with a weight of 32.\nThere is an edge between vertex 1 and vertex 7 with a weight of 37.\nThere is an edge between vertex 10 and vertex 4 with a weight of 30.\nThere is an edge between vertex 3 and vertex 9 with a weight of 13.\nThere is an edge between vertex 11 and vertex 7 with a weight of 35.\nThere is an edge between vertex 7 and vertex 3 with a weight of 57.\nThere is an edge between vertex 2 and vertex 1 with a weight of 75.\nThere is an edge between vertex 5 and vertex 7 with a weight of 23.\nThere is an edge between vertex 3 and vertex 12 with a weight of 22.\nThere is an edge between vertex 6 and vertex 5 with a weight of 78.\nThere is an edge between vertex 2 and vertex 7 with a weight of 77.\nThere is an edge between vertex 9 and vertex 10 with a weight of 54.\nThere is an edge between vertex 6 and vertex 1 with a weight of 33.\nThere is an edge between vertex 3 and vertex 6 with a weight of 33.\nThere is an edge between vertex 11 and vertex 9 with a weight of 64.\n",
    "graph_output": "12 56\n1 8 68\n1 11 50\n1 10 6\n11 4 11\n1 3 89\n4 5 60\n1 9 91\n9 6 22\n5 2 44\n8 7 30\n6 12 14\n8 5 95\n12 4 4\n2 3 24\n10 7 16\n12 10 77\n2 11 19\n9 12 50\n12 7 48\n10 6 37\n8 9 54\n4 1 71\n6 8 63\n8 4 15\n9 7 61\n6 7 65\n12 8 15\n11 10 80\n11 8 13\n5 11 51\n8 2 90\n1 12 15\n9 5 91\n2 10 18\n5 10 84\n10 3 29\n6 4 41\n8 10 46\n2 6 16\n12 11 82\n7 4 99\n3 4 32\n1 7 37\n10 4 30\n3 9 13\n11 7 35\n7 3 57\n2 1 75\n5 7 23\n3 12 22\n6 5 78\n2 7 77\n9 10 54\n6 1 33\n3 6 33\n11 9 64\n",
    "vertices": [
      null,
      null
    ],
    "answer": 155,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 17 vertices and 107 edges\n\nEdges (Format: Node Node):\n15 14\n14 5\n2 10\n16 10\n11 8\n6 7\n14 7\n1 3\n12 17\n3 6\n15 8\n8 13\n8 9\n3 16\n17 1\n7 12\n15 10\n4 14\n8 6\n3 8\n13 9\n4 11\n16 2\n5 13\n12 1\n4 8\n17 11\n14 17\n11 2\n10 3\n13 1\n7 3\n3 11\n11 12\n12 4\n7 11\n9 17\n9 6\n1 14\n16 14\n2 3\n1 7\n12 6\n12 10\n1 11\n10 7\n4 16\n8 2\n12 9\n15 13\n6 4\n6 1\n10 8\n2 17\n7 16\n10 11\n3 12\n11 14\n5 3\n4 7\n4 1\n6 5\n2 12\n11 16\n1 2\n4 5\n16 8\n11 5\n12 8\n2 5\n2 9\n2 15\n12 14\n11 15\n10 1\n4 13\n17 4\n12 16\n16 1\n13 3\n5 17\n6 13\n10 14\n2 4\n15 4\n5 8\n15 3\n17 10\n14 3\n15 9\n5 10\n6 14\n15 12\n6 15\n7 8\n10 13\n3 17\n2 13\n5 1\n5 7\n5 12\n7 9\n2 6\n11 6\n15 7\n8 1\n6 10\n",
    "graph_output": "17 107\n15 14\n14 5\n2 10\n16 10\n11 8\n6 7\n14 7\n1 3\n12 17\n3 6\n15 8\n8 13\n8 9\n3 16\n17 1\n7 12\n15 10\n4 14\n8 6\n3 8\n13 9\n4 11\n16 2\n5 13\n12 1\n4 8\n17 11\n14 17\n11 2\n10 3\n13 1\n7 3\n3 11\n11 12\n12 4\n7 11\n9 17\n9 6\n1 14\n16 14\n2 3\n1 7\n12 6\n12 10\n1 11\n10 7\n4 16\n8 2\n12 9\n15 13\n6 4\n6 1\n10 8\n2 17\n7 16\n10 11\n3 12\n11 14\n5 3\n4 7\n4 1\n6 5\n2 12\n11 16\n1 2\n4 5\n16 8\n11 5\n12 8\n2 5\n2 9\n2 15\n12 14\n11 15\n10 1\n4 13\n17 4\n12 16\n16 1\n13 3\n5 17\n6 13\n10 14\n2 4\n15 4\n5 8\n15 3\n17 10\n14 3\n15 9\n5 10\n6 14\n15 12\n6 15\n7 8\n10 13\n3 17\n2 13\n5 1\n5 7\n5 12\n7 9\n2 6\n11 6\n15 7\n8 1\n6 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 5 in the weighted graph.\n\nUndirected, Weighted Graph with 14 vertices and 86 edges\n\nEdges (Format: Node Node Weight):\n1 11 85\n11 7 13\n11 14 37\n14 4 13\n1 12 19\n12 6 98\n1 3 73\n14 10 74\n7 9 89\n6 13 80\n7 5 7\n1 8 33\n8 2 35\n1 9 70\n10 11 28\n2 12 85\n8 3 30\n11 12 38\n2 3 87\n2 11 98\n3 13 19\n11 5 3\n2 5 71\n2 4 81\n6 1 25\n7 14 97\n2 9 83\n3 14 98\n5 12 27\n8 6 24\n5 10 71\n5 6 94\n8 10 57\n14 5 73\n10 4 26\n8 11 39\n7 13 85\n7 8 9\n9 14 1\n12 14 80\n12 4 44\n13 12 50\n1 4 72\n9 12 41\n13 2 12\n13 10 12\n7 4 38\n12 7 12\n9 13 45\n4 6 4\n13 8 35\n1 13 70\n10 6 66\n2 6 16\n10 7 4\n5 8 94\n5 9 17\n6 3 25\n9 6 63\n9 3 44\n3 11 33\n14 2 32\n9 4 25\n11 13 10\n5 3 3\n3 4 45\n3 7 60\n12 8 84\n2 10 60\n8 9 7\n1 14 90\n5 13 28\n11 9 28\n7 2 71\n1 10 91\n6 7 31\n2 1 21\n14 6 2\n10 9 86\n6 11 25\n14 13 92\n4 5 83\n7 1 7\n5 1 96\n4 13 73\n4 8 18\n",
    "graph_output": "14 86\n1 11 85\n11 7 13\n11 14 37\n14 4 13\n1 12 19\n12 6 98\n1 3 73\n14 10 74\n7 9 89\n6 13 80\n7 5 7\n1 8 33\n8 2 35\n1 9 70\n10 11 28\n2 12 85\n8 3 30\n11 12 38\n2 3 87\n2 11 98\n3 13 19\n11 5 3\n2 5 71\n2 4 81\n6 1 25\n7 14 97\n2 9 83\n3 14 98\n5 12 27\n8 6 24\n5 10 71\n5 6 94\n8 10 57\n14 5 73\n10 4 26\n8 11 39\n7 13 85\n7 8 9\n9 14 1\n12 14 80\n12 4 44\n13 12 50\n1 4 72\n9 12 41\n13 2 12\n13 10 12\n7 4 38\n12 7 12\n9 13 45\n4 6 4\n13 8 35\n1 13 70\n10 6 66\n2 6 16\n10 7 4\n5 8 94\n5 9 17\n6 3 25\n9 6 63\n9 3 44\n3 11 33\n14 2 32\n9 4 25\n11 13 10\n5 3 3\n3 4 45\n3 7 60\n12 8 84\n2 10 60\n8 9 7\n1 14 90\n5 13 28\n11 9 28\n7 2 71\n1 10 91\n6 7 31\n2 1 21\n14 6 2\n10 9 86\n6 11 25\n14 13 92\n4 5 83\n7 1 7\n5 1 96\n4 13 73\n4 8 18\n",
    "vertices": [
      8,
      5
    ],
    "answer": 16,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 102 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   0   1 \n 6 |  1   1   1   1   1   0   1   1   1   0   1   1   1   1   1 \n 7 |  1   0   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n10 |  1   1   1   1   1   0   1   1   1   0   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   1   0   1   1   1   1   1   1   1   1   0   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 102\n1 3\n3 2\n3 5\n5 13\n1 4\n4 7\n1 6\n2 15\n5 12\n3 9\n15 10\n15 11\n7 8\n9 14\n12 4\n7 12\n6 4\n3 13\n15 7\n9 12\n11 8\n3 12\n14 13\n3 11\n9 7\n9 1\n14 4\n15 14\n7 6\n13 4\n7 5\n14 6\n9 5\n4 5\n14 7\n3 15\n4 10\n2 9\n10 2\n13 2\n5 10\n4 11\n11 7\n10 3\n15 9\n13 1\n13 11\n13 10\n1 10\n6 3\n3 7\n11 2\n2 5\n1 12\n1 5\n9 11\n15 5\n8 10\n8 12\n6 9\n6 13\n2 4\n14 8\n8 1\n9 13\n8 5\n8 6\n4 9\n11 14\n6 15\n1 7\n12 2\n5 6\n12 15\n6 12\n1 11\n2 14\n12 11\n2 1\n11 10\n6 2\n1 14\n7 10\n7 13\n15 4\n3 14\n8 15\n8 3\n15 13\n13 8\n2 8\n4 3\n8 9\n14 12\n5 11\n13 12\n6 11\n10 12\n10 14\n4 8\n10 9\n1 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 15 vertices and 26 edges\n\nEdges (Format: Node Node):\n14 11\n14 10\n14 12\n13 11\n12 1\n8 4\n3 12\n15 1\n14 5\n15 3\n4 2\n2 11\n1 2\n2 13\n5 3\n2 3\n3 10\n6 9\n8 12\n13 10\n11 1\n1 8\n10 11\n6 14\n3 8\n10 5\n",
    "graph_output": "15 26\n14 11\n14 10\n14 12\n13 11\n12 1\n8 4\n3 12\n15 1\n14 5\n15 3\n4 2\n2 11\n1 2\n2 13\n5 3\n2 3\n3 10\n6 9\n8 12\n13 10\n11 1\n1 8\n10 11\n6 14\n3 8\n10 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 18 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 7, 10, 11, 15\nVertex 2: 1\nVertex 3: 4, 9\nVertex 4: 3, 15, 9, 6\nVertex 5: 6, 12\nVertex 6: 5, 12, 4\nVertex 7: 1\nVertex 8: 9\nVertex 9: 10, 14, 8, 3, 4\nVertex 10: 9, 1, 14\nVertex 11: 13, 1\nVertex 12: 6, 5\nVertex 13: 11\nVertex 14: 9, 10\nVertex 15: 4, 1\n",
    "graph_output": "15 18\n1 2\n10 9\n4 3\n13 11\n5 6\n6 12\n9 14\n7 1\n4 15\n12 5\n1 10\n10 14\n9 8\n9 3\n1 11\n4 9\n6 4\n15 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 18 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 2, 7\nVertex 2: 1, 4, 9, 12, 14, 6\nVertex 3: 5, 15\nVertex 4: 2, 5, 13\nVertex 5: 11, 3, 4\nVertex 6: 2\nVertex 7: 1, 8\nVertex 8: 7, 10\nVertex 9: 2, 13\nVertex 10: 11, 8\nVertex 11: 1, 5, 10\nVertex 12: 2\nVertex 13: 9, 4, 14\nVertex 14: 2, 13\nVertex 15: 3\n",
    "graph_output": "15 18\n1 11\n1 2\n2 4\n11 5\n2 9\n1 7\n5 3\n11 10\n3 15\n2 12\n2 14\n7 8\n2 6\n9 13\n8 10\n4 5\n4 13\n14 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 15 vertices and 105 edges\n\nEdges (Format: Node Node):\n1 8\n1 7\n7 6\n1 11\n7 13\n13 3\n13 5\n7 12\n7 15\n5 9\n5 14\n15 2\n1 4\n13 10\n8 3\n15 12\n1 13\n14 1\n3 15\n9 13\n2 1\n14 8\n2 14\n7 11\n12 14\n5 3\n4 9\n10 7\n7 2\n2 4\n11 9\n14 7\n14 6\n12 4\n7 4\n8 15\n11 10\n4 10\n2 13\n2 12\n8 12\n12 5\n2 6\n1 10\n12 6\n10 15\n7 9\n5 11\n15 4\n2 10\n10 6\n6 8\n9 2\n1 5\n13 8\n11 14\n6 15\n11 15\n6 13\n6 4\n7 3\n9 14\n15 1\n8 9\n13 15\n2 5\n10 9\n6 5\n6 1\n11 12\n2 11\n3 6\n12 3\n11 8\n3 10\n5 15\n13 12\n3 4\n3 2\n1 3\n8 2\n3 11\n9 3\n14 4\n10 14\n11 4\n12 10\n7 8\n5 7\n1 9\n14 3\n1 12\n15 9\n12 9\n5 8\n4 5\n13 11\n13 14\n8 10\n4 8\n15 14\n9 6\n6 11\n10 5\n13 4\n",
    "graph_output": "15 105\n1 8\n1 7\n7 6\n1 11\n7 13\n13 3\n13 5\n7 12\n7 15\n5 9\n5 14\n15 2\n1 4\n13 10\n8 3\n15 12\n1 13\n14 1\n3 15\n9 13\n2 1\n14 8\n2 14\n7 11\n12 14\n5 3\n4 9\n10 7\n7 2\n2 4\n11 9\n14 7\n14 6\n12 4\n7 4\n8 15\n11 10\n4 10\n2 13\n2 12\n8 12\n12 5\n2 6\n1 10\n12 6\n10 15\n7 9\n5 11\n15 4\n2 10\n10 6\n6 8\n9 2\n1 5\n13 8\n11 14\n6 15\n11 15\n6 13\n6 4\n7 3\n9 14\n15 1\n8 9\n13 15\n2 5\n10 9\n6 5\n6 1\n11 12\n2 11\n3 6\n12 3\n11 8\n3 10\n5 15\n13 12\n3 4\n3 2\n1 3\n8 2\n3 11\n9 3\n14 4\n10 14\n11 4\n12 10\n7 8\n5 7\n1 9\n14 3\n1 12\n15 9\n12 9\n5 8\n4 5\n13 11\n13 14\n8 10\n4 8\n15 14\n9 6\n6 11\n10 5\n13 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 15,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 12 vertices and 43 edges\n\nEdges (Format: Node Node):\n1 2\n4 6\n11 1\n1 10\n3 9\n9 12\n9 10\n4 11\n3 11\n2 12\n3 1\n9 4\n2 5\n4 3\n12 8\n11 9\n5 1\n12 10\n3 2\n6 1\n9 6\n7 11\n4 1\n2 8\n5 4\n4 8\n2 11\n2 10\n1 9\n6 12\n7 9\n12 11\n4 7\n10 8\n11 8\n12 7\n2 7\n6 3\n12 5\n12 3\n8 7\n12 1\n3 10\n",
    "graph_output": "12 43\n1 2\n4 6\n11 1\n1 10\n3 9\n9 12\n9 10\n4 11\n3 11\n2 12\n3 1\n9 4\n2 5\n4 3\n12 8\n11 9\n5 1\n12 10\n3 2\n6 1\n9 6\n7 11\n4 1\n2 8\n5 4\n4 8\n2 11\n2 10\n1 9\n6 12\n7 9\n12 11\n4 7\n10 8\n11 8\n12 7\n2 7\n6 3\n12 5\n12 3\n8 7\n12 1\n3 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 61,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 50 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   1   1   0   1   1   1   1   1 \n 2 |  1   0   1   1   0   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   0   1   1   0 \n 4 |  1   1   1   0   1   1   1   1   1   1   1 \n 5 |  1   0   1   1   0   1   1   1   0   1   1 \n 6 |  0   1   1   1   1   0   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1 \n 8 |  1   1   0   1   1   1   1   0   1   1   1 \n 9 |  1   1   1   1   0   1   1   1   0   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1 \n11 |  1   1   0   1   1   1   1   1   1   1   0 \n",
    "graph_output": "11 50\n7 3\n8 11\n11 5\n8 7\n3 1\n6 3\n9 8\n4 9\n2 1\n6 8\n10 8\n7 10\n9 2\n3 9\n7 4\n10 2\n9 7\n5 1\n10 5\n6 7\n5 3\n4 10\n1 10\n10 9\n4 2\n10 11\n9 1\n10 6\n3 4\n4 11\n8 5\n11 9\n11 6\n1 11\n2 8\n10 3\n11 7\n2 7\n7 5\n9 6\n4 1\n2 6\n5 4\n2 11\n4 6\n7 1\n1 8\n2 3\n5 6\n4 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (29\u00d729):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n   --------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0 \n 6 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   1   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 8 |  0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  1   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1 \n10 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n12 |  0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n15 |  0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n23 |  0   0   0   0   1   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   1   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n",
    "graph_output": "29 28\n1 6\n6 15\n1 9\n9 23\n6 20\n9 8\n15 2\n9 12\n6 18\n23 14\n23 5\n9 29\n29 7\n5 19\n8 4\n12 21\n12 16\n5 3\n20 28\n12 13\n15 25\n13 24\n29 11\n29 27\n3 22\n16 17\n11 10\n22 26\n",
    "vertices": [
      null,
      null
    ],
    "answer": 16,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 16 edges\n\nEdges (Format: Node Node):\n1 6\n6 5\n6 16\n5 3\n1 9\n5 4\n1 7\n16 2\n4 8\n8 13\n5 12\n7 10\n8 14\n2 15\n14 11\n6 11\n",
    "graph_output": "16 16\n1 6\n6 5\n6 16\n5 3\n1 9\n5 4\n1 7\n16 2\n4 8\n8 13\n5 12\n7 10\n8 14\n2 15\n14 11\n6 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 2 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 69 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a capacity of 10.\nThere is an edge between vertex 3 and vertex 13 with a capacity of 9.\nThere is an edge between vertex 3 and vertex 12 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 2 with a capacity of 4.\nThere is an edge between vertex 3 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 9 and vertex 4 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 6 with a capacity of 6.\nThere is an edge between vertex 4 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 6 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 11 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 6 and vertex 5 with a capacity of 4.\nThere is an edge between vertex 9 and vertex 6 with a capacity of 4.\nThere is an edge between vertex 8 and vertex 11 with a capacity of 3.\nThere is an edge between vertex 4 and vertex 6 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 11 and vertex 13 with a capacity of 5.\nThere is an edge between vertex 12 and vertex 8 with a capacity of 10.\nThere is an edge between vertex 5 and vertex 13 with a capacity of 8.\nThere is an edge between vertex 5 and vertex 3 with a capacity of 7.\nThere is an edge between vertex 2 and vertex 1 with a capacity of 10.\nThere is an edge between vertex 3 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 3 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 11 with a capacity of 7.\nThere is an edge between vertex 11 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 7 and vertex 1 with a capacity of 7.\nThere is an edge between vertex 3 and vertex 6 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 12 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 10 and vertex 13 with a capacity of 1.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 10 and vertex 12 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 1 with a capacity of 1.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 13 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 12 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 12 with a capacity of 6.\nThere is an edge between vertex 3 and vertex 11 with a capacity of 1.\nThere is an edge between vertex 7 and vertex 4 with a capacity of 4.\nThere is an edge between vertex 8 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 8 and vertex 1 with a capacity of 7.\nThere is an edge between vertex 5 and vertex 12 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 4 with a capacity of 10.\nThere is an edge between vertex 12 and vertex 1 with a capacity of 3.\nThere is an edge between vertex 11 and vertex 7 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 12 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 11 with a capacity of 4.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 8.\nThere is an edge between vertex 13 and vertex 4 with a capacity of 3.\nThere is an edge between vertex 8 and vertex 9 with a capacity of 8.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 5 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 13 with a capacity of 5.\nThere is an edge between vertex 4 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 3.\nThere is an edge between vertex 13 and vertex 2 with a capacity of 6.\nThere is an edge between vertex 9 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 11 with a capacity of 8.\nThere is an edge between vertex 13 and vertex 8 with a capacity of 6.\nThere is an edge between vertex 5 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 6 and vertex 13 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 12 with a capacity of 4.\nThere is an edge between vertex 12 and vertex 6 with a capacity of 4.\n",
    "graph_output": "13 69\n1 3 10\n3 13 9\n3 12 2\n3 2 4\n3 9 9\n9 4 9\n1 6 6\n4 11 2\n6 10 9\n2 7 4\n11 5 2\n4 8 2\n6 5 4\n9 6 4\n8 11 3\n4 6 1\n6 7 6\n11 13 5\n12 8 10\n5 13 8\n5 3 7\n2 1 10\n3 8 5\n10 3 1\n2 11 7\n11 10 10\n7 1 7\n3 6 1\n2 9 9\n12 7 3\n7 10 10\n10 13 1\n7 8 1\n10 12 2\n5 1 1\n1 10 9\n13 9 5\n12 11 2\n2 12 6\n3 11 1\n7 4 4\n8 2 10\n8 1 7\n5 12 5\n3 4 10\n12 1 3\n11 7 1\n3 7 4\n4 12 1\n2 4 6\n6 8 9\n1 11 4\n1 9 8\n13 4 3\n8 9 8\n9 7 6\n7 5 3\n7 13 5\n4 10 5\n1 4 3\n13 2 6\n9 10 10\n9 11 8\n13 8 6\n5 4 2\n2 5 2\n6 13 10\n9 12 4\n12 6 4\n",
    "vertices": [
      2,
      4
    ],
    "answer": 48,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 5 (source) to vertex 3 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 16 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   1   1   0   0   0   0   1   1 \n 2 |  1   0   1   0   0   0   0   0   0   0   1 \n 3 |  1   1   0   0   0   0   0   0   0   0   0 \n 4 |  1   0   0   0   0   0   0   1   0   1   1 \n 5 |  1   0   0   0   0   0   1   0   0   0   0 \n 6 |  0   0   0   0   0   0   1   0   0   1   0 \n 7 |  0   0   0   0   1   1   0   0   1   0   1 \n 8 |  0   0   0   1   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   1   0   0   0   0 \n10 |  1   0   0   1   0   1   0   0   0   0   0 \n11 |  1   1   0   1   0   0   1   0   0   0   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   5   1   2   0   0   0   0   7   2 \n 2 |  1   0   1   0   0   0   0   0   0   0   8 \n 3 |  5   1   0   0   0   0   0   0   0   0   0 \n 4 |  1   0   0   0   0   0   0   5   0  10   6 \n 5 |  2   0   0   0   0   0   9   0   0   0   0 \n 6 |  0   0   0   0   0   0   8   0   0   4   0 \n 7 |  0   0   0   0   9   8   0   0   1   0   8 \n 8 |  0   0   0   5   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   1   0   0   0   0 \n10 |  7   0   0  10   0   4   0   0   0   0   0 \n11 |  2   8   0   6   0   0   8   0   0   0   0 \n",
    "graph_output": "11 16\n1 3 5\n1 5 2\n5 7 9\n7 6 8\n3 2 1\n1 4 1\n2 11 8\n4 10 10\n4 8 5\n7 9 1\n11 4 6\n1 11 2\n1 10 7\n6 10 4\n11 7 8\n2 1 1\n",
    "vertices": [
      5,
      3
    ],
    "answer": 6,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 11 vertices and 22 edges\n\nEdges (Format: Node Node):\n8 9\n2 3\n11 7\n3 11\n6 2\n3 10\n8 11\n1 9\n4 7\n4 8\n5 7\n2 10\n8 10\n10 6\n6 11\n10 4\n5 6\n5 4\n5 8\n11 2\n6 9\n4 2\n",
    "graph_output": "11 22\n8 9\n2 3\n11 7\n3 11\n6 2\n3 10\n8 11\n1 9\n4 7\n4 8\n5 7\n2 10\n8 10\n10 6\n6 11\n10 4\n5 6\n5 4\n5 8\n11 2\n6 9\n4 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 15 to vertex 13 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 31 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   6   0  26   0   0   0   0   0   3   0   0   0   0 \n 2 |  0   0   0   9   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0  45  16   0   0   0  54   0  23   0   0   0   0   0 \n 4 |  6   9  45   0   0   0   0   0   0   0   0   0  16  66  44   0 \n 5 |  0   0  16   0   0   0   5   0   0  97   0  12   0   0   0  91 \n 6 | 26   0   0   0   0   0   0   0  81  67   0   0   0   0   0   0 \n 7 |  0   0   0   0   5   0   0   0   0  52  66  41   0   0  35   0 \n 8 |  0   0   0   0   0   0   0   0   0  75   0   0   0  29   0   0 \n 9 |  0   0  54   0   0  81   0   0   0   0   0   0   0   0  23   0 \n10 |  0   0   0   0  97  67  52  75   0   0  32  64   0   0   0   0 \n11 |  0   0  23   0   0   0  66   0   0  32   0   0  79   0   0   0 \n12 |  3   0   0   0  12   0  41   0   0  64   0   0   8  29   0   0 \n13 |  0   0   0  16   0   0   0   0   0   0  79   8   0  74   0   0 \n14 |  0   0   0  66   0   0   0  29   0   0   0  29  74   0   0   9 \n15 |  0   0   0  44   0   0  35   0  23   0   0   0   0   0   0   0 \n16 |  0   0   0   0  91   0   0   0   0   0   0   0   0   9   0   0 \n",
    "graph_output": "16 31\n1 12 3\n12 10 64\n10 8 75\n12 7 41\n7 15 35\n12 5 12\n5 3 16\n1 4 6\n4 13 16\n8 14 29\n4 2 9\n3 9 54\n1 6 26\n5 16 91\n13 11 79\n12 13 8\n9 6 81\n7 11 66\n10 5 97\n14 13 74\n16 14 9\n11 3 23\n12 14 29\n4 15 44\n9 15 23\n10 6 67\n14 4 66\n10 11 32\n5 7 5\n7 10 52\n3 4 45\n",
    "vertices": [
      15,
      13
    ],
    "answer": 60,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 12 vertices and 21 edges\n\nEdges (Format: Node Node):\n12 10\n6 1\n1 12\n9 8\n1 7\n7 10\n11 12\n3 8\n2 12\n2 7\n4 3\n2 3\n12 6\n1 5\n3 9\n9 12\n2 9\n4 8\n9 7\n10 2\n2 5\n",
    "graph_output": "12 21\n12 10\n6 1\n1 12\n9 8\n1 7\n7 10\n11 12\n3 8\n2 12\n2 7\n4 3\n2 3\n12 6\n1 5\n3 9\n9 12\n2 9\n4 8\n9 7\n10 2\n2 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 18 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 7 and vertex 13.\n",
    "graph_output": "15 18\n12 5\n10 4\n6 4\n12 11\n9 5\n9 12\n2 11\n12 7\n15 7\n8 1\n14 13\n1 3\n13 11\n8 13\n4 3\n12 10\n7 14\n7 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 87 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 2 and vertex 3.\n",
    "graph_output": "15 87\n1 15\n1 9\n15 8\n15 13\n13 12\n15 14\n8 10\n14 6\n1 2\n10 7\n10 4\n8 3\n4 5\n10 11\n1 13\n4 6\n15 10\n9 3\n7 14\n10 6\n15 7\n6 15\n14 9\n5 2\n11 8\n7 9\n14 2\n15 3\n1 11\n5 6\n2 10\n9 6\n13 5\n1 3\n8 7\n5 11\n11 3\n1 8\n9 8\n10 9\n15 2\n5 7\n11 15\n14 10\n11 14\n1 5\n5 8\n13 11\n11 7\n6 7\n1 4\n5 12\n2 13\n14 4\n9 4\n12 8\n3 4\n8 4\n3 7\n13 14\n9 15\n9 12\n4 15\n7 1\n6 8\n13 3\n3 12\n14 1\n6 13\n8 2\n6 11\n13 8\n4 13\n2 9\n10 1\n5 10\n3 10\n4 7\n15 12\n13 7\n13 10\n14 12\n4 11\n8 14\n4 12\n12 10\n2 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "natural"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 13 vertices and 53 edges\n\nEdges (Format: Node Node Weight):\n1 8 78\n1 9 46\n8 5 38\n8 13 63\n1 11 17\n5 7 77\n9 3 66\n3 12 55\n12 10 17\n3 2 92\n11 6 7\n3 4 84\n2 10 73\n3 5 82\n11 12 73\n6 9 98\n1 12 100\n11 8 40\n7 2 2\n13 10 71\n6 2 95\n7 4 91\n12 8 74\n1 10 18\n12 13 21\n6 4 64\n3 13 86\n3 7 18\n12 2 2\n8 2 2\n13 1 15\n7 12 60\n7 6 20\n5 2 65\n8 6 92\n4 2 76\n5 12 62\n10 11 53\n13 7 24\n8 7 15\n5 9 38\n13 4 48\n7 9 23\n9 10 3\n11 13 3\n5 11 74\n4 10 56\n4 1 7\n4 11 4\n10 6 28\n1 7 30\n8 10 68\n2 9 67\n",
    "graph_output": "13 53\n1 8 78\n1 9 46\n8 5 38\n8 13 63\n1 11 17\n5 7 77\n9 3 66\n3 12 55\n12 10 17\n3 2 92\n11 6 7\n3 4 84\n2 10 73\n3 5 82\n11 12 73\n6 9 98\n1 12 100\n11 8 40\n7 2 2\n13 10 71\n6 2 95\n7 4 91\n12 8 74\n1 10 18\n12 13 21\n6 4 64\n3 13 86\n3 7 18\n12 2 2\n8 2 2\n13 1 15\n7 12 60\n7 6 20\n5 2 65\n8 6 92\n4 2 76\n5 12 62\n10 11 53\n13 7 24\n8 7 15\n5 9 38\n13 4 48\n7 9 23\n9 10 3\n11 13 3\n5 11 74\n4 10 56\n4 1 7\n4 11 4\n10 6 28\n1 7 30\n8 10 68\n2 9 67\n",
    "vertices": [
      null,
      null
    ],
    "answer": 123,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 30 vertices and 29 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 1 and vertex 30.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 20.\nThere is an edge between vertex 14 and vertex 24.\nThere is an edge between vertex 20 and vertex 15.\nThere is an edge between vertex 24 and vertex 21.\nThere is an edge between vertex 15 and vertex 18.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 20 and vertex 2.\nThere is an edge between vertex 30 and vertex 8.\nThere is an edge between vertex 20 and vertex 9.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 15 and vertex 27.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 20 and vertex 13.\nThere is an edge between vertex 5 and vertex 22.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 21 and vertex 4.\nThere is an edge between vertex 10 and vertex 26.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 22 and vertex 25.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 30 and vertex 29.\nThere is an edge between vertex 20 and vertex 28.\nThere is an edge between vertex 28 and vertex 19.\nThere is an edge between vertex 3 and vertex 23.\n",
    "graph_output": "30 29\n1 14\n1 30\n1 11\n1 20\n14 24\n20 15\n24 21\n15 18\n11 12\n20 2\n30 8\n20 9\n12 16\n2 7\n15 27\n8 10\n7 5\n20 13\n5 22\n12 17\n21 4\n10 26\n9 6\n22 25\n16 3\n30 29\n20 28\n28 19\n3 23\n",
    "vertices": [
      null,
      null
    ],
    "answer": 11,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 17 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 7, 2\nVertex 2: 6, 4, 7, 5, 1\nVertex 3: 4, 7, 6, 5\nVertex 4: 3, 2, 7, 6, 5\nVertex 5: 6, 2, 4, 3, 7\nVertex 6: 2, 7, 3, 1, 5, 4\nVertex 7: 2, 3, 6, 4, 1, 5\n",
    "graph_output": "7 17\n4 3\n2 6\n4 2\n7 2\n7 3\n7 6\n6 3\n7 4\n1 6\n5 6\n7 1\n5 2\n1 2\n4 6\n5 4\n5 3\n5 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 274,
    "description_type": "list"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 17 and 21 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 31 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 30.\nThere is an edge between vertex 30 and vertex 29.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 29 and vertex 19.\nThere is an edge between vertex 30 and vertex 25.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 25 and vertex 28.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 4 and vertex 26.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 19 and vertex 31.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 18.\nThere is an edge between vertex 17 and vertex 21.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 28 and vertex 3.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 6 and vertex 20.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 19 and vertex 2.\nThere is an edge between vertex 25 and vertex 9.\nThere is an edge between vertex 13 and vertex 27.\nThere is an edge between vertex 25 and vertex 12.\nThere is an edge between vertex 6 and vertex 24.\nThere is an edge between vertex 24 and vertex 23.\nThere is an edge between vertex 9 and vertex 22.\n",
    "graph_output": "31 30\n1 30\n30 29\n1 11\n1 4\n1 10\n29 19\n30 25\n4 8\n1 17\n25 28\n10 6\n10 13\n4 26\n6 15\n19 31\n1 7\n7 18\n17 21\n6 14\n28 3\n7 5\n6 20\n14 16\n19 2\n25 9\n13 27\n25 12\n6 24\n24 23\n9 22\n",
    "vertices": [
      17,
      21
    ],
    "answer": 17,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 8 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 7 and vertex 2.\n",
    "graph_output": "7 8\n1 5\n5 7\n1 2\n1 3\n3 4\n3 6\n7 4\n7 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 16,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 13 vertices and 20 edges\n\nEdges (Format: Node Node):\n3 9\n5 10\n3 10\n3 8\n8 5\n7 8\n3 5\n12 13\n9 10\n2 4\n2 9\n10 12\n10 2\n11 1\n11 8\n9 6\n4 9\n6 13\n2 5\n10 7\n",
    "graph_output": "13 20\n3 9\n5 10\n3 10\n3 8\n8 5\n7 8\n3 5\n12 13\n9 10\n2 4\n2 9\n10 12\n10 2\n11 1\n11 8\n9 6\n4 9\n6 13\n2 5\n10 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 16 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0 \n 2 |  0   0   1   0   0   0   0   1   1   0   0   0   1   0   0   0 \n 3 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 8 |  0   1   0   0   0   0   1   0   1   0   1   1   0   0   0   0 \n 9 |  0   1   0   0   0   0   0   1   0   0   0   0   0   1   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n11 |  1   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0 \n13 |  0   1   0   0   0   0   0   0   0   1   0   0   0   1   0   1 \n14 |  0   0   0   0   0   0   0   0   1   0   0   1   1   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n",
    "graph_output": "16 16\n11 6\n14 9\n2 9\n3 2\n8 9\n2 13\n13 10\n2 8\n8 11\n13 14\n12 14\n16 13\n8 7\n1 11\n12 8\n4 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 10 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 3 and vertex 5.\n",
    "graph_output": "6 10\n1 4\n4 3\n1 6\n4 5\n5 2\n2 3\n2 6\n1 2\n6 5\n3 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 130,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 99 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 6 and vertex 12.\n",
    "graph_output": "15 99\n1 4\n1 11\n1 6\n4 12\n6 13\n6 5\n6 7\n13 8\n13 2\n13 10\n1 3\n5 9\n1 15\n3 14\n15 9\n10 14\n3 15\n15 7\n2 14\n12 15\n14 9\n3 6\n12 1\n9 12\n2 5\n2 3\n5 1\n4 2\n11 4\n5 13\n6 9\n15 11\n5 14\n1 8\n3 9\n7 3\n11 9\n14 11\n11 3\n5 10\n14 15\n10 15\n7 13\n9 7\n13 11\n12 13\n1 2\n10 12\n5 3\n6 8\n10 1\n12 5\n3 8\n9 8\n14 4\n12 11\n8 12\n4 5\n4 10\n5 7\n6 10\n9 13\n2 8\n6 11\n15 5\n9 2\n10 7\n6 15\n7 14\n10 2\n14 12\n3 12\n7 4\n7 8\n5 8\n7 2\n7 1\n15 13\n8 15\n7 12\n4 15\n1 13\n10 11\n5 11\n13 14\n12 2\n2 6\n4 8\n10 8\n6 14\n11 7\n6 4\n1 14\n11 2\n15 2\n13 4\n3 13\n10 3\n6 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 13 vertices and 13 edges\n\nEdges (Format: Node Node):\n6 12\n10 2\n1 6\n10 12\n1 13\n9 1\n4 10\n6 13\n10 7\n11 13\n7 1\n13 2\n8 7\n",
    "graph_output": "13 13\n6 12\n10 2\n1 6\n10 12\n1 13\n9 1\n4 10\n6 13\n10 7\n11 13\n7 1\n13 2\n8 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 5 (source) to vertex 3 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 16 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 7 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 6 with a capacity of 8.\nThere is an edge between vertex 3 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 11 with a capacity of 8.\nThere is an edge between vertex 4 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 4 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 9 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 1 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 7.\nThere is an edge between vertex 6 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 11 and vertex 7 with a capacity of 8.\nThere is an edge between vertex 2 and vertex 1 with a capacity of 1.\n",
    "graph_output": "11 16\n1 3 5\n1 5 2\n5 7 9\n7 6 8\n3 2 1\n1 4 1\n2 11 8\n4 10 10\n4 8 5\n7 9 1\n11 4 6\n1 11 2\n1 10 7\n6 10 4\n11 7 8\n2 1 1\n",
    "vertices": [
      5,
      3
    ],
    "answer": 6,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 8 and vertex 1 are connected.\n\nUndirected Graph with 16 vertices and 18 edges\n\nEdges (Format: Node Node):\n5 12\n7 16\n5 4\n11 3\n11 9\n16 3\n1 12\n5 1\n7 8\n5 13\n10 4\n15 16\n14 7\n14 3\n8 1\n2 8\n3 7\n14 11\n",
    "graph_output": "16 18\n5 12\n7 16\n5 4\n11 3\n11 9\n16 3\n1 12\n5 1\n7 8\n5 13\n10 4\n15 16\n14 7\n14 3\n8 1\n2 8\n3 7\n14 11\n",
    "vertices": [
      8,
      1
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 30 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 12 (weight=31), 3 (weight=86), 2 (weight=51), 15 (weight=72), 14 (weight=19)\nVertex 2: 1 (weight=51), 16 (weight=57), 8 (weight=80), 4 (weight=64), 9 (weight=72), 6 (weight=92)\nVertex 3: 1 (weight=86), 14 (weight=94)\nVertex 4: 9 (weight=67), 7 (weight=91), 2 (weight=64)\nVertex 5: 11 (weight=6), 7 (weight=26), 14 (weight=39), 15 (weight=29)\nVertex 6: 11 (weight=67), 2 (weight=92)\nVertex 7: 4 (weight=91), 5 (weight=26)\nVertex 8: 14 (weight=44), 10 (weight=35), 2 (weight=80)\nVertex 9: 14 (weight=64), 4 (weight=67), 2 (weight=72), 13 (weight=25), 15 (weight=34)\nVertex 10: 8 (weight=35), 12 (weight=2)\nVertex 11: 14 (weight=77), 6 (weight=67), 5 (weight=6), 15 (weight=73)\nVertex 12: 1 (weight=31), 13 (weight=96), 10 (weight=2), 14 (weight=77)\nVertex 13: 12 (weight=96), 14 (weight=5), 9 (weight=25), 16 (weight=46)\nVertex 14: 3 (weight=94), 11 (weight=77), 9 (weight=64), 8 (weight=44), 13 (weight=5), 5 (weight=39), 1 (weight=19), 12 (weight=77)\nVertex 15: 1 (weight=72), 5 (weight=29), 11 (weight=73), 9 (weight=34)\nVertex 16: 2 (weight=57), 13 (weight=46)\n",
    "graph_output": "16 30\n1 12 31\n1 3 86\n3 14 94\n14 11 77\n1 2 51\n14 9 64\n9 4 67\n1 15 72\n12 13 96\n14 8 44\n11 6 67\n8 10 35\n2 16 57\n4 7 91\n11 5 6\n5 7 26\n2 8 80\n12 10 2\n4 2 64\n13 14 5\n14 5 39\n15 5 29\n11 15 73\n2 9 72\n13 9 25\n15 9 34\n6 2 92\n1 14 19\n13 16 46\n14 12 77\n",
    "vertices": [
      null,
      null
    ],
    "answer": 526,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 109 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7 with a weight of 50.\nThere is an edge between vertex 7 and vertex 16 with a weight of 75.\nThere is an edge between vertex 1 and vertex 12 with a weight of 64.\nThere is an edge between vertex 1 and vertex 13 with a weight of 2.\nThere is an edge between vertex 16 and vertex 3 with a weight of 94.\nThere is an edge between vertex 12 and vertex 5 with a weight of 78.\nThere is an edge between vertex 13 and vertex 15 with a weight of 98.\nThere is an edge between vertex 7 and vertex 9 with a weight of 27.\nThere is an edge between vertex 15 and vertex 14 with a weight of 62.\nThere is an edge between vertex 3 and vertex 4 with a weight of 18.\nThere is an edge between vertex 13 and vertex 11 with a weight of 99.\nThere is an edge between vertex 3 and vertex 2 with a weight of 71.\nThere is an edge between vertex 13 and vertex 6 with a weight of 39.\nThere is an edge between vertex 6 and vertex 10 with a weight of 17.\nThere is an edge between vertex 7 and vertex 8 with a weight of 23.\nThere is an edge between vertex 9 and vertex 6 with a weight of 62.\nThere is an edge between vertex 5 and vertex 15 with a weight of 4.\nThere is an edge between vertex 12 and vertex 13 with a weight of 87.\nThere is an edge between vertex 16 and vertex 10 with a weight of 57.\nThere is an edge between vertex 13 and vertex 14 with a weight of 47.\nThere is an edge between vertex 5 and vertex 9 with a weight of 2.\nThere is an edge between vertex 10 and vertex 13 with a weight of 83.\nThere is an edge between vertex 5 and vertex 6 with a weight of 58.\nThere is an edge between vertex 14 and vertex 7 with a weight of 69.\nThere is an edge between vertex 10 and vertex 14 with a weight of 16.\nThere is an edge between vertex 5 and vertex 16 with a weight of 24.\nThere is an edge between vertex 7 and vertex 3 with a weight of 87.\nThere is an edge between vertex 9 and vertex 3 with a weight of 37.\nThere is an edge between vertex 3 and vertex 10 with a weight of 62.\nThere is an edge between vertex 11 and vertex 12 with a weight of 31.\nThere is an edge between vertex 2 and vertex 13 with a weight of 98.\nThere is an edge between vertex 4 and vertex 16 with a weight of 16.\nThere is an edge between vertex 3 and vertex 13 with a weight of 26.\nThere is an edge between vertex 1 and vertex 10 with a weight of 68.\nThere is an edge between vertex 2 and vertex 6 with a weight of 70.\nThere is an edge between vertex 10 and vertex 11 with a weight of 30.\nThere is an edge between vertex 3 and vertex 1 with a weight of 17.\nThere is an edge between vertex 11 and vertex 4 with a weight of 97.\nThere is an edge between vertex 14 and vertex 8 with a weight of 97.\nThere is an edge between vertex 2 and vertex 11 with a weight of 25.\nThere is an edge between vertex 5 and vertex 14 with a weight of 93.\nThere is an edge between vertex 4 and vertex 7 with a weight of 10.\nThere is an edge between vertex 15 and vertex 9 with a weight of 22.\nThere is an edge between vertex 2 and vertex 15 with a weight of 86.\nThere is an edge between vertex 10 and vertex 5 with a weight of 61.\nThere is an edge between vertex 11 and vertex 16 with a weight of 37.\nThere is an edge between vertex 8 and vertex 13 with a weight of 86.\nThere is an edge between vertex 5 and vertex 7 with a weight of 71.\nThere is an edge between vertex 12 and vertex 4 with a weight of 38.\nThere is an edge between vertex 16 and vertex 1 with a weight of 94.\nThere is an edge between vertex 7 and vertex 12 with a weight of 52.\nThere is an edge between vertex 1 and vertex 15 with a weight of 100.\nThere is an edge between vertex 9 and vertex 2 with a weight of 65.\nThere is an edge between vertex 8 and vertex 3 with a weight of 17.\nThere is an edge between vertex 2 and vertex 4 with a weight of 31.\nThere is an edge between vertex 4 and vertex 10 with a weight of 44.\nThere is an edge between vertex 14 and vertex 16 with a weight of 54.\nThere is an edge between vertex 15 and vertex 12 with a weight of 12.\nThere is an edge between vertex 15 and vertex 16 with a weight of 21.\nThere is an edge between vertex 8 and vertex 9 with a weight of 8.\nThere is an edge between vertex 16 and vertex 12 with a weight of 24.\nThere is an edge between vertex 15 and vertex 4 with a weight of 14.\nThere is an edge between vertex 15 and vertex 10 with a weight of 95.\nThere is an edge between vertex 2 and vertex 1 with a weight of 92.\nThere is an edge between vertex 5 and vertex 1 with a weight of 27.\nThere is an edge between vertex 9 and vertex 13 with a weight of 80.\nThere is an edge between vertex 2 and vertex 14 with a weight of 56.\nThere is an edge between vertex 16 and vertex 9 with a weight of 40.\nThere is an edge between vertex 8 and vertex 16 with a weight of 84.\nThere is an edge between vertex 12 and vertex 8 with a weight of 9.\nThere is an edge between vertex 14 and vertex 6 with a weight of 99.\nThere is an edge between vertex 15 and vertex 7 with a weight of 93.\nThere is an edge between vertex 4 and vertex 5 with a weight of 25.\nThere is an edge between vertex 6 and vertex 3 with a weight of 70.\nThere is an edge between vertex 5 and vertex 13 with a weight of 90.\nThere is an edge between vertex 5 and vertex 11 with a weight of 1.\nThere is an edge between vertex 6 and vertex 4 with a weight of 22.\nThere is an edge between vertex 7 and vertex 11 with a weight of 99.\nThere is an edge between vertex 7 and vertex 10 with a weight of 1.\nThere is an edge between vertex 9 and vertex 11 with a weight of 23.\nThere is an edge between vertex 15 and vertex 11 with a weight of 89.\nThere is an edge between vertex 14 and vertex 4 with a weight of 25.\nThere is an edge between vertex 5 and vertex 3 with a weight of 67.\nThere is an edge between vertex 8 and vertex 6 with a weight of 87.\nThere is an edge between vertex 8 and vertex 2 with a weight of 2.\nThere is an edge between vertex 14 and vertex 12 with a weight of 1.\nThere is an edge between vertex 15 and vertex 8 with a weight of 28.\nThere is an edge between vertex 14 and vertex 11 with a weight of 33.\nThere is an edge between vertex 9 and vertex 10 with a weight of 46.\nThere is an edge between vertex 2 and vertex 16 with a weight of 7.\nThere is an edge between vertex 12 and vertex 6 with a weight of 79.\nThere is an edge between vertex 7 and vertex 13 with a weight of 66.\nThere is an edge between vertex 14 and vertex 9 with a weight of 46.\nThere is an edge between vertex 1 and vertex 8 with a weight of 11.\nThere is an edge between vertex 15 and vertex 6 with a weight of 97.\nThere is an edge between vertex 2 and vertex 5 with a weight of 77.\nThere is an edge between vertex 8 and vertex 10 with a weight of 13.\nThere is an edge between vertex 16 and vertex 13 with a weight of 36.\nThere is an edge between vertex 10 and vertex 12 with a weight of 64.\nThere is an edge between vertex 4 and vertex 13 with a weight of 54.\nThere is an edge between vertex 3 and vertex 12 with a weight of 74.\nThere is an edge between vertex 9 and vertex 12 with a weight of 20.\nThere is an edge between vertex 4 and vertex 8 with a weight of 19.\nThere is an edge between vertex 1 and vertex 9 with a weight of 74.\nThere is an edge between vertex 2 and vertex 7 with a weight of 19.\nThere is an edge between vertex 12 and vertex 2 with a weight of 43.\nThere is an edge between vertex 10 and vertex 2 with a weight of 7.\nThere is an edge between vertex 11 and vertex 6 with a weight of 86.\nThere is an edge between vertex 11 and vertex 8 with a weight of 59.\n",
    "graph_output": "16 109\n1 7 50\n7 16 75\n1 12 64\n1 13 2\n16 3 94\n12 5 78\n13 15 98\n7 9 27\n15 14 62\n3 4 18\n13 11 99\n3 2 71\n13 6 39\n6 10 17\n7 8 23\n9 6 62\n5 15 4\n12 13 87\n16 10 57\n13 14 47\n5 9 2\n10 13 83\n5 6 58\n14 7 69\n10 14 16\n5 16 24\n7 3 87\n9 3 37\n3 10 62\n11 12 31\n2 13 98\n4 16 16\n3 13 26\n1 10 68\n2 6 70\n10 11 30\n3 1 17\n11 4 97\n14 8 97\n2 11 25\n5 14 93\n4 7 10\n15 9 22\n2 15 86\n10 5 61\n11 16 37\n8 13 86\n5 7 71\n12 4 38\n16 1 94\n7 12 52\n1 15 100\n9 2 65\n8 3 17\n2 4 31\n4 10 44\n14 16 54\n15 12 12\n15 16 21\n8 9 8\n16 12 24\n15 4 14\n15 10 95\n2 1 92\n5 1 27\n9 13 80\n2 14 56\n16 9 40\n8 16 84\n12 8 9\n14 6 99\n15 7 93\n4 5 25\n6 3 70\n5 13 90\n5 11 1\n6 4 22\n7 11 99\n7 10 1\n9 11 23\n15 11 89\n14 4 25\n5 3 67\n8 6 87\n8 2 2\n14 12 1\n15 8 28\n14 11 33\n9 10 46\n2 16 7\n12 6 79\n7 13 66\n14 9 46\n1 8 11\n15 6 97\n2 5 77\n8 10 13\n16 13 36\n10 12 64\n4 13 54\n3 12 74\n9 12 20\n4 8 19\n1 9 74\n2 7 19\n12 2 43\n10 2 7\n11 6 86\n11 8 59\n",
    "vertices": [
      null,
      null
    ],
    "answer": 99,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 13 to vertex 5 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 63 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 4 (weight=43), 7 (weight=99), 14 (weight=95), 13 (weight=95), 9 (weight=40), 8 (weight=17), 2 (weight=44), 11 (weight=54), 3 (weight=72), 12 (weight=35)\nVertex 2: 4 (weight=86), 12 (weight=49), 7 (weight=50), 8 (weight=88), 10 (weight=43), 1 (weight=44), 3 (weight=41), 9 (weight=80), 11 (weight=80)\nVertex 3: 12 (weight=20), 8 (weight=36), 9 (weight=99), 6 (weight=20), 10 (weight=15), 2 (weight=41), 1 (weight=72), 13 (weight=81)\nVertex 4: 1 (weight=43), 8 (weight=70), 2 (weight=86), 11 (weight=87), 13 (weight=5), 12 (weight=89), 5 (weight=75), 10 (weight=7), 14 (weight=30), 9 (weight=1), 6 (weight=83)\nVertex 5: 12 (weight=98), 9 (weight=21), 4 (weight=75), 6 (weight=52)\nVertex 6: 8 (weight=50), 13 (weight=86), 12 (weight=3), 14 (weight=3), 10 (weight=100), 11 (weight=36), 7 (weight=10), 4 (weight=83), 3 (weight=20), 5 (weight=52), 9 (weight=88)\nVertex 7: 1 (weight=99), 13 (weight=12), 2 (weight=50), 12 (weight=95), 6 (weight=10), 9 (weight=55), 14 (weight=72)\nVertex 8: 4 (weight=70), 6 (weight=50), 3 (weight=36), 12 (weight=30), 2 (weight=88), 1 (weight=17), 10 (weight=18), 9 (weight=21), 11 (weight=35)\nVertex 9: 12 (weight=39), 10 (weight=20), 11 (weight=7), 5 (weight=21), 1 (weight=40), 8 (weight=21), 13 (weight=57), 4 (weight=1), 3 (weight=99), 7 (weight=55), 2 (weight=80), 6 (weight=88)\nVertex 10: 9 (weight=20), 6 (weight=100), 4 (weight=7), 11 (weight=59), 2 (weight=43), 8 (weight=18), 14 (weight=67), 3 (weight=15)\nVertex 11: 4 (weight=87), 9 (weight=7), 10 (weight=59), 12 (weight=40), 6 (weight=36), 13 (weight=68), 14 (weight=57), 1 (weight=54), 8 (weight=35), 2 (weight=80)\nVertex 12: 2 (weight=49), 5 (weight=98), 9 (weight=39), 3 (weight=20), 6 (weight=3), 14 (weight=65), 4 (weight=89), 11 (weight=40), 8 (weight=30), 7 (weight=95), 1 (weight=35)\nVertex 13: 7 (weight=12), 6 (weight=86), 4 (weight=5), 1 (weight=95), 11 (weight=68), 9 (weight=57), 14 (weight=74), 3 (weight=81)\nVertex 14: 1 (weight=95), 12 (weight=65), 6 (weight=3), 11 (weight=57), 4 (weight=30), 10 (weight=67), 13 (weight=74), 7 (weight=72)\n",
    "graph_output": "14 63\n1 4 43\n4 8 70\n4 2 86\n2 12 49\n12 5 98\n1 7 99\n12 9 39\n7 13 12\n1 14 95\n4 11 87\n9 10 20\n12 3 20\n8 6 50\n9 11 7\n13 6 86\n13 4 5\n7 2 50\n12 6 3\n1 13 95\n14 12 65\n14 6 3\n6 10 100\n5 9 21\n12 4 89\n4 5 75\n10 4 7\n8 3 36\n10 11 59\n12 11 40\n8 12 30\n1 9 40\n2 8 88\n2 10 43\n1 8 17\n12 7 95\n11 6 36\n13 11 68\n10 8 18\n11 14 57\n2 1 44\n11 1 54\n8 9 21\n9 13 57\n14 4 30\n9 4 1\n7 6 10\n3 9 99\n6 4 83\n14 10 67\n6 3 20\n8 11 35\n13 14 74\n7 9 55\n3 10 15\n2 3 41\n6 5 52\n1 3 72\n14 7 72\n2 9 80\n1 12 35\n6 9 88\n2 11 80\n3 13 81\n",
    "vertices": [
      13,
      5
    ],
    "answer": 27,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 10 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 54 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 6 with a capacity of 7.\nThere is an edge between vertex 6 and vertex 9 with a capacity of 3.\nThere is an edge between vertex 8 and vertex 4 with a capacity of 10.\nThere is an edge between vertex 6 and vertex 11 with a capacity of 6.\nThere is an edge between vertex 8 and vertex 2 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 10 with a capacity of 1.\nThere is an edge between vertex 4 and vertex 3 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 2 with a capacity of 9.\nThere is an edge between vertex 11 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 10 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 4 and vertex 7 with a capacity of 9.\nThere is an edge between vertex 8 and vertex 1 with a capacity of 8.\nThere is an edge between vertex 4 and vertex 1 with a capacity of 9.\nThere is an edge between vertex 10 and vertex 11 with a capacity of 10.\nThere is an edge between vertex 4 and vertex 9 with a capacity of 7.\nThere is an edge between vertex 8 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 2 and vertex 11 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 2 and vertex 9 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 8.\nThere is an edge between vertex 10 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 8 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 10 and vertex 1 with a capacity of 7.\nThere is an edge between vertex 7 and vertex 6 with a capacity of 3.\nThere is an edge between vertex 9 and vertex 1 with a capacity of 8.\nThere is an edge between vertex 6 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 4 and vertex 6 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 4 with a capacity of 8.\nThere is an edge between vertex 11 and vertex 1 with a capacity of 1.\nThere is an edge between vertex 7 and vertex 11 with a capacity of 3.\nThere is an edge between vertex 9 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 4 with a capacity of 10.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 5.\nThere is an edge between vertex 8 and vertex 11 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 5 with a capacity of 6.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 1 and vertex 6 with a capacity of 6.\nThere is an edge between vertex 5 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 3.\nThere is an edge between vertex 10 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 4 and vertex 2 with a capacity of 2.\nThere is an edge between vertex 11 and vertex 9 with a capacity of 10.\nThere is an edge between vertex 7 and vertex 1 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 2 with a capacity of 4.\nThere is an edge between vertex 6 and vertex 2 with a capacity of 7.\nThere is an edge between vertex 5 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 1 and vertex 2 with a capacity of 4.\nThere is an edge between vertex 10 and vertex 8 with a capacity of 7.\n",
    "graph_output": "11 54\n1 3 2\n1 5 5\n3 8 2\n5 7 5\n3 6 7\n6 9 3\n8 4 10\n6 11 6\n8 2 5\n7 10 1\n4 3 2\n3 2 9\n11 3 8\n10 5 2\n3 7 5\n4 7 9\n8 1 8\n4 1 9\n10 11 10\n4 9 7\n8 7 3\n2 11 5\n9 7 3\n2 9 2\n3 5 8\n10 3 5\n8 9 6\n10 1 7\n7 6 3\n9 1 8\n6 10 10\n4 6 1\n11 4 8\n11 1 1\n7 11 3\n9 3 5\n10 4 10\n5 6 5\n8 11 5\n9 5 9\n4 5 6\n6 8 4\n1 6 6\n5 2 10\n2 10 3\n10 9 6\n4 2 2\n11 9 10\n7 1 5\n7 2 4\n6 2 7\n5 8 1\n1 2 4\n10 8 7\n",
    "vertices": [
      10,
      2
    ],
    "answer": 51,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 115 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 17, 4, 11, 10, 9, 2, 12, 13, 8, 5, 15, 6\nVertex 2: 8, 17, 5, 11, 1, 7, 14, 15, 6, 4, 12, 16\nVertex 3: 1, 13, 12, 10, 9, 5, 7, 4, 16, 14, 11, 6, 8, 17\nVertex 4: 8, 1, 13, 16, 3, 10, 5, 12, 14, 17, 9, 2, 15, 11\nVertex 5: 3, 7, 14, 17, 13, 2, 4, 16, 15, 11, 1, 10, 12, 9\nVertex 6: 15, 14, 10, 16, 13, 7, 11, 9, 3, 12, 2, 8, 17, 1\nVertex 7: 13, 5, 3, 6, 16, 2, 9, 12, 10, 14\nVertex 8: 4, 16, 15, 2, 14, 12, 10, 17, 1, 11, 6, 3, 13\nVertex 9: 3, 12, 11, 1, 14, 10, 6, 7, 15, 4, 5, 16, 13, 17\nVertex 10: 13, 11, 3, 16, 1, 6, 12, 4, 8, 9, 15, 14, 7, 17, 5\nVertex 11: 10, 12, 1, 13, 16, 9, 6, 2, 3, 14, 5, 17, 8, 15, 4\nVertex 12: 13, 3, 11, 9, 15, 10, 8, 1, 4, 7, 6, 17, 5, 16, 2\nVertex 13: 7, 12, 10, 3, 5, 4, 11, 16, 6, 1, 15, 14, 9, 8\nVertex 14: 6, 5, 8, 17, 16, 9, 15, 3, 10, 2, 11, 13, 4, 7\nVertex 15: 17, 6, 8, 12, 14, 10, 2, 9, 13, 5, 4, 11, 1\nVertex 16: 8, 10, 13, 11, 6, 4, 7, 14, 3, 5, 12, 2, 9\nVertex 17: 15, 1, 5, 2, 14, 8, 10, 12, 4, 11, 6, 3, 9\n",
    "graph_output": "17 115\n7 13\n4 8\n12 13\n3 1\n13 10\n15 17\n1 17\n8 16\n15 6\n13 3\n6 14\n11 10\n1 4\n3 12\n8 15\n3 10\n3 9\n3 5\n5 7\n5 14\n8 2\n16 10\n17 5\n13 5\n14 8\n4 13\n12 11\n17 2\n14 17\n1 11\n13 11\n10 1\n16 13\n9 12\n7 3\n16 11\n6 10\n15 12\n16 6\n12 10\n13 6\n4 16\n6 7\n11 9\n1 9\n12 8\n3 4\n16 7\n5 2\n16 14\n3 16\n14 9\n11 6\n10 4\n10 8\n11 2\n2 1\n7 2\n14 15\n9 10\n10 15\n14 3\n1 12\n14 10\n6 9\n5 4\n9 7\n3 11\n13 1\n5 16\n17 8\n4 12\n7 12\n2 14\n15 2\n15 9\n3 6\n11 14\n6 12\n15 13\n10 7\n8 1\n13 14\n10 17\n15 5\n6 2\n5 11\n12 17\n14 4\n4 17\n11 17\n14 7\n1 5\n11 8\n4 9\n5 10\n8 6\n12 5\n5 9\n12 16\n3 8\n4 2\n15 4\n15 11\n6 17\n1 15\n2 12\n3 17\n6 1\n16 2\n9 16\n4 11\n13 9\n17 9\n13 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 13 to vertex 5 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 63 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4 with a weight of 43.\nThere is an edge between vertex 4 and vertex 8 with a weight of 70.\nThere is an edge between vertex 4 and vertex 2 with a weight of 86.\nThere is an edge between vertex 2 and vertex 12 with a weight of 49.\nThere is an edge between vertex 12 and vertex 5 with a weight of 98.\nThere is an edge between vertex 1 and vertex 7 with a weight of 99.\nThere is an edge between vertex 12 and vertex 9 with a weight of 39.\nThere is an edge between vertex 7 and vertex 13 with a weight of 12.\nThere is an edge between vertex 1 and vertex 14 with a weight of 95.\nThere is an edge between vertex 4 and vertex 11 with a weight of 87.\nThere is an edge between vertex 9 and vertex 10 with a weight of 20.\nThere is an edge between vertex 12 and vertex 3 with a weight of 20.\nThere is an edge between vertex 8 and vertex 6 with a weight of 50.\nThere is an edge between vertex 9 and vertex 11 with a weight of 7.\nThere is an edge between vertex 13 and vertex 6 with a weight of 86.\nThere is an edge between vertex 13 and vertex 4 with a weight of 5.\nThere is an edge between vertex 7 and vertex 2 with a weight of 50.\nThere is an edge between vertex 12 and vertex 6 with a weight of 3.\nThere is an edge between vertex 1 and vertex 13 with a weight of 95.\nThere is an edge between vertex 14 and vertex 12 with a weight of 65.\nThere is an edge between vertex 14 and vertex 6 with a weight of 3.\nThere is an edge between vertex 6 and vertex 10 with a weight of 100.\nThere is an edge between vertex 5 and vertex 9 with a weight of 21.\nThere is an edge between vertex 12 and vertex 4 with a weight of 89.\nThere is an edge between vertex 4 and vertex 5 with a weight of 75.\nThere is an edge between vertex 10 and vertex 4 with a weight of 7.\nThere is an edge between vertex 8 and vertex 3 with a weight of 36.\nThere is an edge between vertex 10 and vertex 11 with a weight of 59.\nThere is an edge between vertex 12 and vertex 11 with a weight of 40.\nThere is an edge between vertex 8 and vertex 12 with a weight of 30.\nThere is an edge between vertex 1 and vertex 9 with a weight of 40.\nThere is an edge between vertex 2 and vertex 8 with a weight of 88.\nThere is an edge between vertex 2 and vertex 10 with a weight of 43.\nThere is an edge between vertex 1 and vertex 8 with a weight of 17.\nThere is an edge between vertex 12 and vertex 7 with a weight of 95.\nThere is an edge between vertex 11 and vertex 6 with a weight of 36.\nThere is an edge between vertex 13 and vertex 11 with a weight of 68.\nThere is an edge between vertex 10 and vertex 8 with a weight of 18.\nThere is an edge between vertex 11 and vertex 14 with a weight of 57.\nThere is an edge between vertex 2 and vertex 1 with a weight of 44.\nThere is an edge between vertex 11 and vertex 1 with a weight of 54.\nThere is an edge between vertex 8 and vertex 9 with a weight of 21.\nThere is an edge between vertex 9 and vertex 13 with a weight of 57.\nThere is an edge between vertex 14 and vertex 4 with a weight of 30.\nThere is an edge between vertex 9 and vertex 4 with a weight of 1.\nThere is an edge between vertex 7 and vertex 6 with a weight of 10.\nThere is an edge between vertex 3 and vertex 9 with a weight of 99.\nThere is an edge between vertex 6 and vertex 4 with a weight of 83.\nThere is an edge between vertex 14 and vertex 10 with a weight of 67.\nThere is an edge between vertex 6 and vertex 3 with a weight of 20.\nThere is an edge between vertex 8 and vertex 11 with a weight of 35.\nThere is an edge between vertex 13 and vertex 14 with a weight of 74.\nThere is an edge between vertex 7 and vertex 9 with a weight of 55.\nThere is an edge between vertex 3 and vertex 10 with a weight of 15.\nThere is an edge between vertex 2 and vertex 3 with a weight of 41.\nThere is an edge between vertex 6 and vertex 5 with a weight of 52.\nThere is an edge between vertex 1 and vertex 3 with a weight of 72.\nThere is an edge between vertex 14 and vertex 7 with a weight of 72.\nThere is an edge between vertex 2 and vertex 9 with a weight of 80.\nThere is an edge between vertex 1 and vertex 12 with a weight of 35.\nThere is an edge between vertex 6 and vertex 9 with a weight of 88.\nThere is an edge between vertex 2 and vertex 11 with a weight of 80.\nThere is an edge between vertex 3 and vertex 13 with a weight of 81.\n",
    "graph_output": "14 63\n1 4 43\n4 8 70\n4 2 86\n2 12 49\n12 5 98\n1 7 99\n12 9 39\n7 13 12\n1 14 95\n4 11 87\n9 10 20\n12 3 20\n8 6 50\n9 11 7\n13 6 86\n13 4 5\n7 2 50\n12 6 3\n1 13 95\n14 12 65\n14 6 3\n6 10 100\n5 9 21\n12 4 89\n4 5 75\n10 4 7\n8 3 36\n10 11 59\n12 11 40\n8 12 30\n1 9 40\n2 8 88\n2 10 43\n1 8 17\n12 7 95\n11 6 36\n13 11 68\n10 8 18\n11 14 57\n2 1 44\n11 1 54\n8 9 21\n9 13 57\n14 4 30\n9 4 1\n7 6 10\n3 9 99\n6 4 83\n14 10 67\n6 3 20\n8 11 35\n13 14 74\n7 9 55\n3 10 15\n2 3 41\n6 5 52\n1 3 72\n14 7 72\n2 9 80\n1 12 35\n6 9 88\n2 11 80\n3 13 81\n",
    "vertices": [
      13,
      5
    ],
    "answer": 27,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 4 (source) to vertex 8 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 53 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 8.\nThere is an edge between vertex 8 and vertex 7 with a capacity of 10.\nThere is an edge between vertex 8 and vertex 3 with a capacity of 7.\nThere is an edge between vertex 5 and vertex 11 with a capacity of 7.\nThere is an edge between vertex 11 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 8 and vertex 4 with a capacity of 8.\nThere is an edge between vertex 4 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 8.\nThere is an edge between vertex 7 and vertex 5 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 2 and vertex 9 with a capacity of 8.\nThere is an edge between vertex 5 and vertex 2 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 7 with a capacity of 1.\nThere is an edge between vertex 10 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 8 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 6 and vertex 1 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 2 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 8 with a capacity of 3.\nThere is an edge between vertex 4 and vertex 1 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 3.\nThere is an edge between vertex 10 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 3 and vertex 1 with a capacity of 5.\nThere is an edge between vertex 11 and vertex 4 with a capacity of 4.\nThere is an edge between vertex 11 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 6.\nThere is an edge between vertex 9 and vertex 6 with a capacity of 4.\nThere is an edge between vertex 3 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 10 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 9 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 5 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 11 and vertex 2 with a capacity of 3.\nThere is an edge between vertex 9 and vertex 3 with a capacity of 3.\nThere is an edge between vertex 11 and vertex 10 with a capacity of 6.\nThere is an edge between vertex 10 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 10 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 9 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 11 and vertex 1 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 9 and vertex 4 with a capacity of 5.\nThere is an edge between vertex 5 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 10 with a capacity of 8.\nThere is an edge between vertex 2 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 6 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 10 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 7 with a capacity of 2.\n",
    "graph_output": "11 53\n1 8 10\n1 5 9\n1 10 8\n8 7 10\n8 3 7\n5 11 7\n11 6 10\n1 9 6\n8 4 8\n4 2 1\n9 7 8\n7 5 5\n3 7 3\n2 9 8\n5 2 8\n1 7 1\n10 4 6\n8 2 1\n6 3 6\n7 6 9\n6 8 5\n6 1 1\n3 2 5\n9 8 3\n4 1 1\n3 5 3\n10 7 6\n3 1 5\n11 4 4\n11 7 5\n5 6 6\n9 6 4\n3 11 2\n10 8 2\n5 9 9\n9 10 10\n5 8 1\n11 8 4\n11 2 3\n9 3 3\n11 10 6\n10 6 9\n10 2 1\n9 11 2\n11 1 9\n7 2 1\n9 4 5\n5 4 2\n5 10 8\n2 6 9\n4 6 1\n3 10 2\n4 7 2\n",
    "vertices": [
      4,
      8
    ],
    "answer": 30,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 6, 13, 3\nVertex 2: 4, 3, 5, 8\nVertex 3: 2, 4, 1, 6\nVertex 4: 13, 2, 5, 15, 3\nVertex 5: 4, 2, 7\nVertex 6: 1, 11, 9, 3\nVertex 7: 13, 5, 15\nVertex 8: 1, 10, 2, 14\nVertex 9: 13, 6\nVertex 10: 8, 12, 16\nVertex 11: 6, 13\nVertex 12: 10, 16, 14\nVertex 13: 1, 9, 4, 7, 14, 11\nVertex 14: 12, 13, 8\nVertex 15: 4, 16, 7\nVertex 16: 12, 10, 15\n",
    "graph_output": "16 28\n1 8\n1 6\n8 10\n1 13\n13 9\n13 4\n10 12\n4 2\n12 16\n4 5\n4 15\n6 11\n2 3\n12 14\n13 7\n16 10\n15 16\n3 4\n9 6\n3 1\n5 2\n5 7\n8 2\n3 6\n7 15\n14 13\n14 8\n13 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 118 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   0   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   0   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   0   0   1   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n14 |  1   1   1   1   0   1   1   1   1   1   1   1   1   0   1   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n16 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "16 118\n1 9\n9 7\n9 12\n9 3\n12 11\n11 5\n3 14\n7 2\n2 4\n14 16\n2 13\n4 8\n8 15\n1 6\n1 10\n6 4\n16 2\n8 14\n4 7\n3 12\n4 16\n11 10\n4 3\n9 6\n7 3\n8 6\n12 8\n2 11\n12 6\n7 6\n8 13\n15 5\n6 2\n3 15\n11 1\n8 1\n12 7\n7 1\n1 16\n12 16\n5 16\n8 11\n7 15\n15 1\n12 15\n3 8\n2 3\n7 8\n11 7\n14 1\n9 4\n1 3\n9 2\n7 10\n4 13\n7 13\n15 11\n13 3\n4 1\n10 4\n5 8\n16 9\n15 16\n9 11\n15 10\n11 3\n16 3\n12 10\n4 14\n3 5\n9 10\n10 6\n1 2\n7 5\n4 11\n1 12\n7 16\n14 12\n15 4\n14 10\n3 6\n6 16\n13 15\n8 2\n2 12\n13 12\n10 3\n9 14\n16 13\n4 12\n5 6\n13 1\n9 5\n4 5\n12 5\n8 10\n13 10\n2 14\n2 15\n5 13\n10 16\n6 11\n13 14\n6 14\n8 16\n9 13\n9 15\n5 1\n13 6\n15 6\n11 13\n14 11\n7 14\n2 10\n10 5\n5 2\n11 16\n15 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 44 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 5 (weight=68), 4 (weight=84), 8 (weight=49), 3 (weight=94), 2 (weight=45), 6 (weight=95), 11 (weight=4), 7 (weight=71), 9 (weight=20), 10 (weight=52)\nVertex 2: 4 (weight=68), 1 (weight=45), 10 (weight=56), 11 (weight=99), 8 (weight=80), 6 (weight=54), 7 (weight=20), 3 (weight=50)\nVertex 3: 9 (weight=59), 10 (weight=31), 1 (weight=94), 11 (weight=5), 4 (weight=99), 7 (weight=62), 2 (weight=50), 5 (weight=3)\nVertex 4: 1 (weight=84), 2 (weight=68), 6 (weight=6), 10 (weight=98), 7 (weight=21), 11 (weight=96), 3 (weight=99), 8 (weight=17), 5 (weight=97)\nVertex 5: 1 (weight=68), 10 (weight=85), 7 (weight=98), 9 (weight=58), 11 (weight=100), 4 (weight=97), 8 (weight=48), 6 (weight=71), 3 (weight=3)\nVertex 6: 4 (weight=6), 8 (weight=43), 1 (weight=95), 7 (weight=63), 2 (weight=54), 5 (weight=71)\nVertex 7: 8 (weight=94), 4 (weight=21), 11 (weight=54), 6 (weight=63), 5 (weight=98), 3 (weight=62), 1 (weight=71), 2 (weight=20)\nVertex 8: 1 (weight=49), 7 (weight=94), 9 (weight=3), 6 (weight=43), 11 (weight=33), 4 (weight=17), 2 (weight=80), 5 (weight=48)\nVertex 9: 8 (weight=3), 3 (weight=59), 10 (weight=20), 5 (weight=58), 1 (weight=20), 11 (weight=97)\nVertex 10: 4 (weight=98), 11 (weight=25), 3 (weight=31), 2 (weight=56), 5 (weight=85), 9 (weight=20), 1 (weight=52)\nVertex 11: 10 (weight=25), 4 (weight=96), 3 (weight=5), 1 (weight=4), 2 (weight=99), 7 (weight=54), 8 (weight=33), 5 (weight=100), 9 (weight=97)\n",
    "graph_output": "11 44\n1 5 68\n1 4 84\n1 8 49\n8 7 94\n8 9 3\n4 2 68\n4 6 6\n4 10 98\n10 11 25\n9 3 59\n3 10 31\n1 3 94\n4 7 21\n11 4 96\n1 2 45\n2 10 56\n6 8 43\n11 3 5\n1 6 95\n11 1 4\n3 4 99\n2 11 99\n11 7 54\n6 7 63\n10 5 85\n11 8 33\n8 4 17\n10 9 20\n8 2 80\n5 7 98\n9 5 58\n11 5 100\n2 6 54\n7 3 62\n7 1 71\n7 2 20\n4 5 97\n1 9 20\n11 9 97\n8 5 48\n5 6 71\n10 1 52\n2 3 50\n5 3 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 124,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 17 vertices and 102 edges\n\nEdges (Format: Node Node):\n1 6\n6 16\n1 12\n6 7\n6 3\n3 13\n6 15\n6 4\n3 5\n7 11\n6 8\n8 14\n13 10\n5 9\n13 17\n10 2\n2 9\n15 13\n15 1\n8 17\n2 15\n16 9\n5 13\n13 9\n14 2\n3 16\n11 16\n13 11\n8 7\n3 4\n8 2\n16 1\n13 4\n16 15\n4 5\n5 1\n14 7\n15 12\n11 9\n7 1\n15 7\n3 7\n3 15\n8 4\n3 10\n17 15\n1 14\n2 7\n2 4\n10 6\n7 13\n9 6\n10 16\n3 9\n2 3\n7 4\n4 11\n14 4\n1 13\n5 11\n2 13\n15 11\n8 3\n5 17\n14 9\n1 2\n10 9\n8 9\n5 2\n16 2\n15 8\n10 12\n14 5\n1 9\n17 3\n1 17\n17 14\n16 12\n7 10\n12 2\n12 6\n6 11\n11 17\n17 2\n2 6\n12 14\n17 16\n4 1\n4 10\n8 12\n14 6\n15 14\n8 16\n10 8\n15 4\n12 9\n5 15\n12 17\n10 15\n12 4\n8 11\n1 10\n",
    "graph_output": "17 102\n1 6\n6 16\n1 12\n6 7\n6 3\n3 13\n6 15\n6 4\n3 5\n7 11\n6 8\n8 14\n13 10\n5 9\n13 17\n10 2\n2 9\n15 13\n15 1\n8 17\n2 15\n16 9\n5 13\n13 9\n14 2\n3 16\n11 16\n13 11\n8 7\n3 4\n8 2\n16 1\n13 4\n16 15\n4 5\n5 1\n14 7\n15 12\n11 9\n7 1\n15 7\n3 7\n3 15\n8 4\n3 10\n17 15\n1 14\n2 7\n2 4\n10 6\n7 13\n9 6\n10 16\n3 9\n2 3\n7 4\n4 11\n14 4\n1 13\n5 11\n2 13\n15 11\n8 3\n5 17\n14 9\n1 2\n10 9\n8 9\n5 2\n16 2\n15 8\n10 12\n14 5\n1 9\n17 3\n1 17\n17 14\n16 12\n7 10\n12 2\n12 6\n6 11\n11 17\n17 2\n2 6\n12 14\n17 16\n4 1\n4 10\n8 12\n14 6\n15 14\n8 16\n10 8\n15 4\n12 9\n5 15\n12 17\n10 15\n12 4\n8 11\n1 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 53 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0  65 100  62  23  24  18  48  64  34   0  47 \n 2 | 65   0  43  74  53  65  23   0  36   0   0   0 \n 3 |100  43   0  16   0   0  88  97  15  23  56  83 \n 4 | 62  74  16   0  22   0  23  30  77   0 100   0 \n 5 | 23  53   0  22   0  65  44  27  49  61  12  30 \n 6 | 24  65   0   0  65   0  95  87  47   0  15  75 \n 7 | 18  23  88  23  44  95   0  34   2  21   1  81 \n 8 | 48   0  97  30  27  87  34   0  69  60  89  48 \n 9 | 64  36  15  77  49  47   2  69   0  69   0   0 \n10 | 34   0  23   0  61   0  21  60  69   0  97   4 \n11 |  0   0  56 100  12  15   1  89   0  97   0 100 \n12 | 47   0  83   0  30  75  81  48   0   4 100   0 \n",
    "graph_output": "12 53\n1 12 47\n12 6 75\n6 2 65\n2 7 23\n7 10 21\n6 5 65\n7 8 34\n8 4 30\n10 9 69\n7 11 1\n7 3 88\n5 12 30\n1 9 64\n3 10 23\n1 6 24\n9 8 69\n4 2 74\n11 12 100\n7 1 18\n2 9 36\n11 6 15\n7 12 81\n4 9 77\n8 6 87\n12 10 4\n10 1 34\n7 5 44\n10 11 97\n4 5 22\n4 1 62\n8 5 27\n8 10 60\n11 8 89\n5 9 49\n2 3 43\n12 8 48\n10 5 61\n3 11 56\n3 4 16\n4 7 23\n8 1 48\n3 1 100\n9 3 15\n9 6 47\n4 11 100\n12 3 83\n5 2 53\n5 11 12\n7 6 95\n1 5 23\n2 1 65\n8 3 97\n9 7 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 156,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 105 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   0   1   0   0   1   1   1   1   1   1   1   1   1   0 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   0   0   1   1   1   0 \n 3 |  1   1   0   1   1   1   1   0   0   0   0   1   1   1   1   1   0 \n 4 |  0   1   1   0   1   0   0   1   0   1   1   1   0   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   0   1   0 \n 6 |  0   1   1   0   1   0   1   1   1   0   1   1   1   1   1   1   1 \n 7 |  0   1   1   0   1   1   0   1   1   1   0   1   1   0   1   0   1 \n 8 |  1   1   0   1   1   1   1   0   1   1   1   1   1   1   1   1   0 \n 9 |  1   1   0   0   1   1   1   1   0   1   0   1   1   1   1   1   1 \n10 |  1   1   0   1   1   0   1   1   1   0   1   0   1   1   1   1   1 \n11 |  1   1   0   1   1   1   0   1   0   1   0   1   1   1   0   1   1 \n12 |  1   0   1   1   1   1   1   1   1   0   1   0   1   1   1   1   0 \n13 |  1   0   1   0   1   1   1   1   1   1   1   1   0   1   0   1   1 \n14 |  1   1   1   1   1   1   0   1   1   1   1   1   1   0   0   0   1 \n15 |  1   1   1   1   0   1   1   1   1   1   0   1   0   0   0   1   1 \n16 |  1   1   1   1   1   1   0   1   1   1   1   1   1   0   1   0   0 \n17 |  0   0   0   1   0   1   1   0   1   1   1   0   1   1   1   0   0 \n",
    "graph_output": "17 105\n16 2\n6 3\n3 4\n13 1\n16 6\n9 12\n14 8\n16 10\n13 9\n15 6\n16 3\n1 12\n8 5\n11 10\n10 5\n16 5\n16 1\n14 12\n2 3\n15 2\n15 3\n8 7\n1 10\n3 13\n15 7\n6 13\n13 17\n4 14\n5 3\n11 16\n8 1\n15 10\n4 8\n4 16\n11 4\n2 10\n12 4\n3 7\n6 5\n9 16\n11 6\n6 2\n7 12\n2 7\n2 8\n15 9\n6 9\n10 13\n2 5\n2 1\n11 1\n4 2\n8 6\n1 14\n10 17\n10 7\n5 7\n13 16\n11 8\n15 17\n15 16\n12 15\n14 9\n4 10\n13 5\n13 8\n15 4\n16 12\n2 9\n2 14\n12 8\n17 7\n7 9\n10 8\n7 6\n8 9\n17 6\n11 17\n17 14\n17 4\n12 5\n5 9\n5 1\n13 12\n11 2\n13 11\n14 5\n16 8\n9 1\n1 3\n15 1\n12 6\n14 11\n15 8\n6 14\n14 3\n9 10\n5 4\n12 3\n17 9\n11 5\n12 11\n14 10\n14 13\n7 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 9 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 13 vertices and 16 edges\n\nEdges (Format: Node Node Capacity):\n1 5 7\n1 10 10\n10 11 6\n1 7 2\n7 12 10\n12 6 10\n12 2 6\n6 3 9\n1 4 2\n2 9 4\n4 13 8\n6 8 4\n3 1 3\n2 3 4\n10 9 4\n11 3 5\n",
    "graph_output": "13 16\n1 5 7\n1 10 10\n10 11 6\n1 7 2\n7 12 10\n12 6 10\n12 2 6\n6 3 9\n1 4 2\n2 9 4\n4 13 8\n6 8 4\n3 1 3\n2 3 4\n10 9 4\n11 3 5\n",
    "vertices": [
      9,
      10
    ],
    "answer": 8,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 5 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 22 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 13 (weight=95), 11 (weight=15)\nVertex 2: 7 (weight=55)\nVertex 3: 12 (weight=40), 9 (weight=34)\nVertex 4: 11 (weight=9), 7 (weight=28)\nVertex 5: 8 (weight=51)\nVertex 6: 11 (weight=91)\nVertex 7: 12 (weight=14), 2 (weight=55), 4 (weight=28), 15 (weight=81), 8 (weight=84)\nVertex 8: 12 (weight=7), 5 (weight=51), 10 (weight=61), 7 (weight=84)\nVertex 9: 11 (weight=23), 3 (weight=34), 14 (weight=76)\nVertex 10: 8 (weight=61), 13 (weight=44)\nVertex 11: 1 (weight=15), 12 (weight=65), 4 (weight=9), 9 (weight=23), 6 (weight=91), 15 (weight=24)\nVertex 12: 11 (weight=65), 7 (weight=14), 3 (weight=40), 8 (weight=7), 14 (weight=72)\nVertex 13: 1 (weight=95), 14 (weight=1), 10 (weight=44)\nVertex 14: 13 (weight=1), 12 (weight=72), 15 (weight=89), 9 (weight=76)\nVertex 15: 11 (weight=24), 14 (weight=89), 7 (weight=81)\n",
    "graph_output": "15 22\n1 13 95\n1 11 15\n13 14 1\n11 12 65\n11 4 9\n12 7 14\n11 9 23\n12 3 40\n12 8 7\n7 2 55\n11 6 91\n11 15 24\n8 5 51\n8 10 61\n12 14 72\n14 15 89\n10 13 44\n3 9 34\n7 4 28\n7 15 81\n7 8 84\n14 9 76\n",
    "vertices": [
      4,
      5
    ],
    "answer": 100,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 7 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 2\nVertex 2: 1, 4, 8, 7\nVertex 3: 4\nVertex 4: 3, 1, 2\nVertex 5: No connections\nVertex 6: 8\nVertex 7: 2\nVertex 8: 6, 2\n",
    "graph_output": "8 7\n3 4\n4 1\n8 6\n1 2\n2 4\n2 8\n2 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 16 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 6, 5, 2, 7\nVertex 2: 3, 7, 5, 1, 8, 4\nVertex 3: 5, 2, 7\nVertex 4: 1, 6, 2\nVertex 5: 1, 3, 2, 7\nVertex 6: 1, 4, 8\nVertex 7: 2, 8, 5, 3, 1\nVertex 8: 7, 2, 6\n",
    "graph_output": "8 16\n1 4\n1 6\n1 5\n5 3\n3 2\n2 7\n7 8\n2 5\n4 6\n5 7\n2 1\n2 8\n4 2\n6 8\n7 3\n1 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2631,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 20 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11\nVertex 2: 4, 9, 10, 5\nVertex 3: 9, 10, 8, 5\nVertex 4: 2, 9\nVertex 5: 10, 8, 3, 2\nVertex 6: 9, 13\nVertex 7: 8, 10\nVertex 8: 3, 5, 7, 11\nVertex 9: 3, 10, 2, 6, 4\nVertex 10: 5, 3, 9, 12, 2, 7\nVertex 11: 1, 8\nVertex 12: 13, 10\nVertex 13: 12, 6\n",
    "graph_output": "13 20\n3 9\n5 10\n3 10\n3 8\n8 5\n7 8\n3 5\n12 13\n9 10\n2 4\n2 9\n10 12\n10 2\n11 1\n11 8\n9 6\n4 9\n6 13\n2 5\n10 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 88 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 2, 8, 5, 10, 4, 9, 14, 15, 3, 12, 13\nVertex 2: 1, 9, 10, 15, 6, 12, 3, 5, 8, 11, 7, 4\nVertex 3: 9, 14, 4, 10, 12, 11, 1, 2, 8, 15, 5\nVertex 4: 9, 11, 1, 12, 3, 6, 13, 7, 8, 10, 5, 14, 2\nVertex 5: 13, 8, 10, 1, 7, 15, 6, 2, 4, 14, 12, 3\nVertex 6: 11, 9, 14, 15, 4, 10, 8, 13, 2, 5, 12\nVertex 7: 11, 15, 12, 5, 10, 4, 13, 14, 9, 2\nVertex 8: 1, 10, 5, 14, 6, 2, 11, 4, 15, 13, 3, 9\nVertex 9: 6, 3, 4, 11, 14, 2, 1, 13, 7, 12, 8\nVertex 10: 8, 5, 15, 1, 7, 6, 11, 3, 2, 14, 13, 4, 12\nVertex 11: 1, 13, 7, 6, 9, 4, 10, 3, 15, 8, 2, 14\nVertex 12: 7, 13, 4, 3, 2, 1, 14, 15, 6, 10, 5, 9\nVertex 13: 11, 5, 12, 4, 6, 7, 10, 9, 14, 8, 1\nVertex 14: 6, 15, 3, 8, 9, 1, 10, 12, 7, 13, 5, 11, 4\nVertex 15: 7, 14, 10, 6, 2, 1, 5, 11, 12, 8, 3\n",
    "graph_output": "15 88\n1 11\n11 13\n1 2\n11 7\n11 6\n7 15\n6 9\n9 3\n13 5\n7 12\n6 14\n1 8\n8 10\n9 4\n9 11\n8 5\n5 10\n14 15\n15 10\n5 1\n12 13\n14 3\n5 7\n1 10\n8 14\n4 11\n4 1\n12 4\n9 14\n3 4\n6 15\n4 6\n9 2\n13 4\n7 10\n6 10\n11 10\n6 8\n3 10\n2 10\n6 13\n15 2\n9 1\n6 2\n7 4\n1 14\n1 15\n12 3\n7 13\n2 12\n3 11\n5 15\n10 14\n13 10\n1 3\n12 1\n3 2\n15 11\n6 5\n2 5\n14 12\n8 2\n8 11\n12 15\n14 7\n11 2\n9 13\n7 9\n8 4\n4 10\n13 14\n5 4\n12 6\n15 8\n13 8\n12 10\n5 14\n13 1\n5 12\n14 11\n3 8\n14 4\n3 15\n9 12\n2 7\n2 4\n5 3\n9 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 11 vertices and 37 edges\n\nEdges (Format: Node Node Weight):\n1 9 49\n9 4 81\n4 6 57\n9 8 11\n1 11 59\n6 2 99\n11 10 62\n4 5 26\n9 3 24\n3 7 34\n9 5 40\n2 5 24\n7 11 5\n1 8 3\n10 9 75\n8 10 26\n2 9 22\n10 4 20\n4 8 37\n6 5 18\n7 10 99\n11 8 15\n1 2 27\n4 11 18\n7 8 23\n2 3 16\n7 2 15\n8 2 27\n4 3 62\n10 3 10\n3 1 40\n6 7 99\n11 2 76\n5 1 92\n3 11 34\n6 1 24\n9 11 25\n",
    "graph_output": "11 37\n1 9 49\n9 4 81\n4 6 57\n9 8 11\n1 11 59\n6 2 99\n11 10 62\n4 5 26\n9 3 24\n3 7 34\n9 5 40\n2 5 24\n7 11 5\n1 8 3\n10 9 75\n8 10 26\n2 9 22\n10 4 20\n4 8 37\n6 5 18\n7 10 99\n11 8 15\n1 2 27\n4 11 18\n7 8 23\n2 3 16\n7 2 15\n8 2 27\n4 3 62\n10 3 10\n3 1 40\n6 7 99\n11 2 76\n5 1 92\n3 11 34\n6 1 24\n9 11 25\n",
    "vertices": [
      null,
      null
    ],
    "answer": 137,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 15 vertices and 21 edges\n\nEdges (Format: Node Node):\n3 15\n5 1\n2 11\n5 7\n13 7\n5 9\n14 2\n6 5\n8 7\n9 4\n5 14\n13 5\n5 10\n14 7\n14 10\n2 5\n1 4\n15 14\n11 5\n13 11\n14 11\n",
    "graph_output": "15 21\n3 15\n5 1\n2 11\n5 7\n13 7\n5 9\n14 2\n6 5\n8 7\n9 4\n5 14\n13 5\n5 10\n14 7\n14 10\n2 5\n1 4\n15 14\n11 5\n13 11\n14 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 11 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 6, 3, 2\nVertex 2: 4, 6, 5, 1\nVertex 3: 4, 5, 1\nVertex 4: 1, 2, 3, 6, 5\nVertex 5: 4, 2, 3\nVertex 6: 4, 2, 1\n",
    "graph_output": "6 11\n1 4\n4 2\n4 3\n4 6\n4 5\n2 6\n5 2\n1 6\n3 5\n1 3\n1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 209,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 10 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 11 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 3 (capacity=9)\nVertex 2: 11 (capacity=2), 10 (capacity=9), 7 (capacity=3)\nVertex 3: 1 (capacity=9), 11 (capacity=8)\nVertex 4: 11 (capacity=8)\nVertex 5: 8 (capacity=5)\nVertex 6: 11 (capacity=10), 10 (capacity=9)\nVertex 7: 2 (capacity=3), 8 (capacity=5)\nVertex 8: 7 (capacity=5), 9 (capacity=6), 5 (capacity=5)\nVertex 9: 8 (capacity=6)\nVertex 10: 2 (capacity=9), 6 (capacity=9)\nVertex 11: 3 (capacity=8), 2 (capacity=2), 4 (capacity=8), 6 (capacity=10)\n",
    "graph_output": "11 11\n1 3 9\n3 11 8\n11 2 2\n2 10 9\n11 4 8\n2 7 3\n7 8 5\n11 6 10\n8 9 6\n8 5 5\n10 6 9\n",
    "vertices": [
      10,
      2
    ],
    "answer": 11,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 115 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   0   1   0   1   1   1   1   1   1   0   0   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   0   1   1   0   0   1 \n 3 |  1   1   0   1   1   0   0   1   1   1   1   0   0   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   0   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   0   0   0   1   1   1   1   1 \n 6 |  0   1   0   1   1   0   1   1   1   1   0   1   1   1   0   0   1 \n 7 |  1   1   0   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 8 |  0   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   0   1   1 \n10 |  1   1   1   1   0   1   1   1   1   0   1   1   1   1   1   1   1 \n11 |  1   1   1   1   0   0   1   1   1   1   0   1   1   1   1   1   1 \n12 |  1   0   0   1   0   1   1   1   1   1   1   0   1   1   1   0   1 \n13 |  1   1   0   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n14 |  1   1   1   0   1   1   1   1   1   1   1   1   1   0   1   1   0 \n15 |  0   0   1   1   1   0   1   1   0   1   1   1   1   1   0   1   1 \n16 |  0   0   1   1   1   0   1   1   1   1   1   0   1   1   1   0   1 \n17 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   0 \n",
    "graph_output": "17 115\n14 10\n16 15\n15 10\n12 17\n7 12\n17 7\n13 4\n1 11\n9 1\n11 4\n16 5\n17 4\n4 3\n2 9\n14 6\n2 13\n14 2\n10 1\n7 13\n8 5\n8 13\n15 3\n8 6\n5 15\n16 3\n11 12\n16 14\n13 15\n9 14\n5 9\n10 13\n9 17\n2 5\n12 14\n14 1\n15 8\n5 3\n1 17\n7 2\n7 14\n3 17\n11 8\n3 10\n11 7\n17 2\n4 9\n13 11\n16 10\n17 6\n7 9\n10 4\n10 17\n5 14\n13 6\n10 7\n1 4\n17 16\n7 16\n10 11\n17 8\n6 9\n4 8\n15 14\n9 11\n12 10\n4 16\n8 7\n8 12\n10 6\n7 15\n3 1\n4 5\n1 2\n13 5\n2 8\n16 9\n3 8\n2 4\n16 13\n4 6\n2 6\n8 10\n13 9\n16 11\n5 1\n4 12\n17 11\n14 8\n8 16\n11 15\n9 12\n14 13\n4 7\n15 12\n7 6\n17 5\n12 1\n15 4\n11 2\n17 13\n17 15\n2 3\n9 3\n12 13\n12 6\n10 9\n3 11\n14 11\n1 7\n9 8\n13 1\n7 5\n6 5\n3 14\n2 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 103 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   0   1   0   0   0   1   1   0   1   1 \n 2 |  1   0   0   1   1   1   1   1   0   1   1   1   1   1   1   0   1 \n 3 |  1   0   0   1   1   0   1   1   1   0   1   0   1   1   1   1   1 \n 4 |  1   1   1   0   1   0   0   1   1   1   1   0   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   0   1   1   1   0   1   1   0   1   1   1 \n 6 |  1   1   0   0   1   0   1   1   1   1   1   0   1   0   0   1   1 \n 7 |  1   1   1   0   0   1   0   1   1   0   0   1   0   1   1   1   1 \n 8 |  0   1   1   1   1   1   1   0   1   0   1   0   1   1   1   1   1 \n 9 |  1   0   1   1   1   1   1   1   0   1   1   1   1   1   1   0   1 \n10 |  0   1   0   1   1   1   0   0   1   0   1   0   1   1   1   1   1 \n11 |  0   1   1   1   0   1   0   1   1   1   0   1   1   0   1   0   0 \n12 |  0   1   0   0   1   0   1   0   1   0   1   0   1   0   1   1   0 \n13 |  1   1   1   1   1   1   0   1   1   1   1   1   0   1   1   1   1 \n14 |  1   1   1   1   0   0   1   1   1   1   0   0   1   0   1   1   1 \n15 |  0   1   1   1   1   0   1   1   1   1   1   1   1   1   0   1   0 \n16 |  1   0   1   1   1   1   1   1   0   1   0   1   1   1   1   0   1 \n17 |  1   1   1   1   1   1   1   1   1   1   0   0   1   1   0   1   0 \n",
    "graph_output": "17 103\n5 12\n17 7\n11 10\n11 3\n2 13\n13 8\n2 4\n16 10\n11 6\n6 7\n9 15\n13 14\n7 8\n8 15\n9 1\n13 10\n2 7\n16 13\n4 14\n12 7\n3 13\n17 10\n9 17\n15 4\n15 16\n12 16\n10 4\n3 14\n10 2\n15 14\n6 5\n1 7\n3 9\n3 8\n5 10\n3 17\n13 15\n11 13\n15 10\n12 9\n12 2\n4 17\n1 17\n10 6\n2 8\n6 13\n15 5\n9 8\n5 4\n4 1\n4 11\n3 4\n14 8\n7 9\n16 6\n5 2\n8 11\n14 17\n17 8\n1 2\n4 13\n1 14\n11 9\n11 2\n5 8\n13 5\n14 9\n5 9\n12 11\n14 7\n6 1\n6 2\n16 1\n16 5\n16 14\n14 10\n17 2\n11 15\n2 15\n3 1\n16 17\n15 12\n17 6\n13 9\n10 9\n4 9\n6 8\n7 16\n5 1\n6 9\n5 17\n4 8\n16 8\n2 14\n4 16\n3 5\n16 3\n7 3\n13 1\n15 7\n13 17\n15 3\n12 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 2 (source) to vertex 4 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 11 vertices and 21 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 9 86 10\n1 6 13 9\n6 8 7 7\n8 2 20 2\n6 10 63 7\n10 4 37 2\n1 11 93 4\n6 3 45 9\n6 5 15 5\n1 7 56 2\n9 8 26 9\n8 10 4 3\n11 2 49 7\n4 6 29 7\n3 7 6 8\n2 1 65 2\n10 3 37 9\n11 8 82 9\n9 4 15 10\n10 11 62 5\n5 2 84 9\n",
    "graph_output": "11 21\n1 9 86 10\n1 6 13 9\n6 8 7 7\n8 2 20 2\n6 10 63 7\n10 4 37 2\n1 11 93 4\n6 3 45 9\n6 5 15 5\n1 7 56 2\n9 8 26 9\n8 10 4 3\n11 2 49 7\n4 6 29 7\n3 7 6 8\n2 1 65 2\n10 3 37 9\n11 8 82 9\n9 4 15 10\n10 11 62 5\n5 2 84 9\n",
    "vertices": [
      2,
      4
    ],
    "answer": 2084,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 100 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 13 and vertex 10.\n",
    "graph_output": "16 100\n1 7\n7 10\n1 3\n10 2\n7 12\n3 15\n1 13\n7 5\n5 8\n3 6\n5 11\n8 16\n2 4\n3 14\n4 9\n3 8\n15 12\n16 14\n9 10\n1 10\n16 1\n12 10\n8 4\n5 16\n11 8\n9 11\n3 16\n16 9\n15 14\n2 13\n11 1\n14 4\n2 16\n13 3\n1 2\n11 10\n2 9\n14 7\n16 7\n7 3\n14 12\n4 10\n6 9\n9 1\n4 12\n16 6\n15 8\n15 2\n15 13\n12 2\n14 10\n13 5\n11 12\n9 7\n1 14\n11 4\n7 15\n9 3\n2 7\n13 14\n4 3\n5 4\n5 2\n4 6\n15 11\n8 12\n6 11\n6 14\n11 7\n1 8\n11 13\n9 8\n16 15\n12 1\n14 11\n6 13\n5 14\n5 12\n5 1\n12 6\n13 4\n15 10\n4 1\n6 10\n4 16\n5 9\n7 4\n10 8\n7 13\n15 5\n11 2\n1 15\n15 6\n6 2\n8 13\n15 9\n9 14\n13 12\n3 5\n13 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 6 and vertex 18.\nThere is an edge between vertex 1 and vertex 29.\nThere is an edge between vertex 18 and vertex 4.\nThere is an edge between vertex 6 and vertex 25.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 4 and vertex 27.\nThere is an edge between vertex 29 and vertex 3.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 4 and vertex 24.\nThere is an edge between vertex 24 and vertex 19.\nThere is an edge between vertex 25 and vertex 16.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 25 and vertex 28.\nThere is an edge between vertex 15 and vertex 21.\nThere is an edge between vertex 6 and vertex 26.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 4 and vertex 23.\nThere is an edge between vertex 19 and vertex 11.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 25 and vertex 20.\nThere is an edge between vertex 28 and vertex 14.\nThere is an edge between vertex 23 and vertex 22.\nThere is an edge between vertex 11 and vertex 13.\n",
    "graph_output": "29 28\n1 15\n15 10\n15 6\n6 18\n1 29\n18 4\n6 25\n6 9\n4 27\n29 3\n10 2\n4 24\n24 19\n25 16\n16 17\n1 5\n25 28\n15 21\n6 26\n16 12\n4 23\n19 11\n15 7\n1 8\n25 20\n28 14\n23 22\n11 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 17,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 5 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 12 vertices and 20 edges\n\nEdges (Format: Node Node Capacity):\n1 8 1\n8 7 3\n8 11 1\n11 6 6\n1 9 4\n9 10 4\n6 5 10\n9 2 10\n9 12 1\n1 4 6\n2 3 4\n7 6 2\n3 10 9\n7 10 6\n6 2 2\n6 3 9\n5 2 4\n3 1 5\n4 6 4\n2 10 7\n",
    "graph_output": "12 20\n1 8 1\n8 7 3\n8 11 1\n11 6 6\n1 9 4\n9 10 4\n6 5 10\n9 2 10\n9 12 1\n1 4 6\n2 3 4\n7 6 2\n3 10 9\n7 10 6\n6 2 2\n6 3 9\n5 2 4\n3 1 5\n4 6 4\n2 10 7\n",
    "vertices": [
      5,
      2
    ],
    "answer": 14,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 53 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 4 and vertex 8.\n",
    "graph_output": "12 53\n7 2\n1 4\n7 12\n2 4\n4 7\n9 7\n1 2\n11 3\n6 12\n4 5\n9 1\n10 9\n9 3\n7 8\n10 7\n11 4\n2 5\n3 6\n5 9\n9 4\n6 5\n7 11\n7 1\n6 8\n4 3\n6 7\n10 5\n2 8\n6 9\n2 10\n5 1\n12 10\n10 6\n8 1\n8 11\n3 5\n2 3\n12 1\n2 9\n12 2\n11 9\n11 6\n12 9\n10 1\n8 9\n2 6\n10 4\n3 8\n12 4\n1 6\n8 12\n7 3\n4 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 7 and vertex 1 are connected.\n\nThis is an undirected graph with 15 vertices and 21 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   0   1   1   0   1   0   0   0   0   1   0   0 \n 2 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  1   0   0   0   0   0   0   0   0   0   1   0   1   0   0 \n 4 |  0   0   0   0   1   1   0   0   0   0   0   0   0   0   0 \n 5 |  1   0   0   1   0   1   1   0   1   0   0   0   0   0   0 \n 6 |  1   0   0   1   1   0   0   0   0   1   1   0   1   0   0 \n 7 |  0   0   0   0   1   0   0   0   0   0   0   0   0   1   0 \n 8 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   1   0   0   0   0   0   1   0   0   1 \n11 |  0   0   1   0   0   1   0   0   0   0   0   1   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   1   1   0   0   0   0 \n13 |  1   0   1   0   0   1   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   1 \n15 |  0   0   0   0   0   0   0   0   0   1   0   0   0   1   0 \n",
    "graph_output": "15 21\n3 1\n11 6\n5 9\n13 6\n10 12\n10 15\n15 14\n5 7\n6 10\n13 1\n11 12\n2 1\n11 3\n3 13\n5 1\n5 6\n6 4\n5 4\n6 1\n1 8\n7 14\n",
    "vertices": [
      7,
      1
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 16 and vertex 1 are connected.\n\nThis is an undirected graph with 16 vertices and 89 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   0   1   1   0   1   1   0   1   1   0   1   1   1   0 \n 2 |  1   0   1   1   1   0   0   1   1   1   1   1   0   1   1   1 \n 3 |  0   1   0   1   1   1   1   1   1   1   0   1   0   0   0   1 \n 4 |  1   1   1   0   0   1   1   1   1   1   1   1   0   1   1   0 \n 5 |  1   1   1   0   0   1   1   1   1   1   1   1   1   0   0   1 \n 6 |  0   0   1   1   1   0   1   1   1   1   1   1   0   1   1   1 \n 7 |  1   0   1   1   1   1   0   1   1   0   1   0   1   1   0   0 \n 8 |  1   1   1   1   1   1   1   0   1   0   1   1   0   0   0   1 \n 9 |  0   1   1   1   1   1   1   1   0   1   1   1   1   0   0   1 \n10 |  1   1   1   1   1   1   0   0   1   0   0   1   0   1   1   1 \n11 |  1   1   0   1   1   1   1   1   1   0   0   1   1   1   0   1 \n12 |  0   1   1   1   1   1   0   1   1   1   1   0   1   1   1   1 \n13 |  1   0   0   0   1   0   1   0   1   0   1   1   0   1   1   1 \n14 |  1   1   0   1   0   1   1   0   0   1   1   1   1   0   1   1 \n15 |  1   1   0   1   0   1   0   0   0   1   0   1   1   1   0   1 \n16 |  0   1   1   0   1   1   0   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "16 89\n8 1\n16 10\n14 16\n3 7\n14 13\n4 8\n11 14\n10 9\n2 16\n5 6\n3 10\n13 1\n13 11\n8 16\n12 2\n11 2\n3 6\n9 16\n4 1\n4 10\n14 12\n5 7\n12 10\n1 10\n16 13\n13 12\n3 4\n8 5\n1 14\n1 15\n4 9\n10 2\n9 12\n6 8\n11 4\n5 16\n6 14\n14 4\n15 14\n12 15\n13 15\n16 3\n9 11\n1 5\n6 12\n7 14\n8 2\n2 1\n12 11\n13 9\n3 12\n7 8\n3 9\n2 15\n16 12\n7 13\n6 4\n2 9\n6 15\n4 2\n7 4\n5 9\n8 12\n9 6\n11 6\n11 7\n10 5\n8 11\n10 6\n15 10\n15 4\n7 1\n14 10\n7 9\n3 5\n13 5\n8 3\n5 2\n12 5\n16 6\n11 1\n11 5\n9 8\n16 15\n4 12\n3 2\n11 16\n2 14\n7 6\n",
    "vertices": [
      16,
      1
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 22 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   1   0   1   1   1   0   0   0   1   0   0   1   1   0 \n 2 |  0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0 \n 3 |  1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1 \n 4 |  0   0   0   0   0   0   1   0   0   0   0   1   0   0   1   0 \n 5 |  1   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0 \n 6 |  1   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0 \n 9 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0 \n10 |  0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0 \n11 |  1   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0 \n12 |  0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n14 |  1   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0 \n15 |  1   0   0   1   0   0   0   1   1   0   0   0   0   1   0   0 \n16 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "16 22\n1 14\n14 15\n1 3\n3 16\n1 11\n3 6\n1 5\n15 8\n14 13\n5 9\n1 7\n6 2\n11 10\n2 12\n12 4\n9 15\n6 1\n10 5\n15 4\n1 15\n8 11\n4 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 12 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 6 and vertex 3.\n",
    "graph_output": "6 12\n4 2\n4 1\n5 3\n6 5\n4 6\n2 1\n3 1\n3 4\n2 3\n6 1\n2 6\n6 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 53,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 8 vertices and 21 edges\n\nEdges (Format: Node Node):\n1 2\n2 5\n5 8\n1 6\n2 4\n2 7\n7 3\n8 1\n4 6\n7 8\n7 4\n8 6\n3 6\n6 5\n3 2\n4 1\n5 3\n4 3\n1 7\n8 3\n6 7\n",
    "graph_output": "8 21\n1 2\n2 5\n5 8\n1 6\n2 4\n2 7\n7 3\n8 1\n4 6\n7 8\n7 4\n8 6\n3 6\n6 5\n3 2\n4 1\n5 3\n4 3\n1 7\n8 3\n6 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 28203,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 15 vertices and 18 edges\n\nEdges (Format: Node Node Weight):\n1 9 20\n9 6 27\n6 8 65\n6 3 62\n8 5 89\n8 10 61\n1 7 4\n1 15 49\n9 2 26\n1 4 63\n3 13 12\n10 11 25\n5 12 21\n9 14 23\n11 14 44\n8 12 93\n15 12 94\n3 8 57\n",
    "graph_output": "15 18\n1 9 20\n9 6 27\n6 8 65\n6 3 62\n8 5 89\n8 10 61\n1 7 4\n1 15 49\n9 2 26\n1 4 63\n3 13 12\n10 11 25\n5 12 21\n9 14 23\n11 14 44\n8 12 93\n15 12 94\n3 8 57\n",
    "vertices": [
      null,
      null
    ],
    "answer": 521,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 12 vertices and 21 edges\n\nEdges (Format: Node Node):\n7 11\n6 5\n12 7\n8 12\n2 11\n11 3\n7 10\n12 11\n4 10\n8 3\n8 10\n12 2\n4 1\n4 7\n4 3\n5 7\n3 1\n2 5\n3 9\n9 12\n10 6\n",
    "graph_output": "12 21\n7 11\n6 5\n12 7\n8 12\n2 11\n11 3\n7 10\n12 11\n4 10\n8 3\n8 10\n12 2\n4 1\n4 7\n4 3\n5 7\n3 1\n2 5\n3 9\n9 12\n10 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 8 vertices and 10 edges\n\nEdges (Format: Node Node):\n1 4\n4 6\n1 5\n1 8\n6 7\n4 3\n6 2\n2 4\n7 2\n7 5\n",
    "graph_output": "8 10\n1 4\n4 6\n1 5\n1 8\n6 7\n4 3\n6 2\n2 4\n7 2\n7 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 32,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 7 and vertex 13 are connected.\n\nThis is an undirected graph with 16 vertices and 96 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 12, 4, 8, 2, 7, 10, 11, 14, 6, 5, 13\nVertex 2: 8, 11, 1, 15, 16, 12, 3, 9, 5, 13, 7, 10\nVertex 3: 8, 9, 2, 5, 11, 7, 16, 4, 6, 10, 12\nVertex 4: 7, 13, 14, 1, 8, 9, 15, 5, 16, 6, 3, 10, 12\nVertex 5: 13, 11, 14, 3, 2, 4, 6, 15, 8, 1, 10\nVertex 6: 15, 9, 13, 14, 7, 12, 10, 4, 3, 1, 5\nVertex 7: 4, 15, 12, 13, 16, 8, 1, 10, 9, 11, 6, 3, 2, 14\nVertex 8: 2, 10, 11, 15, 1, 16, 7, 4, 3, 12, 9, 5, 14\nVertex 9: 12, 6, 10, 11, 7, 3, 4, 2, 14, 15, 8, 13, 16\nVertex 10: 15, 8, 9, 7, 1, 14, 11, 13, 6, 2, 4, 12, 5, 3\nVertex 11: 2, 8, 5, 12, 9, 15, 7, 3, 16, 10, 1, 13\nVertex 12: 9, 1, 7, 11, 2, 6, 8, 14, 4, 10, 3, 13\nVertex 13: 5, 4, 7, 15, 6, 10, 14, 2, 9, 11, 1, 12\nVertex 14: 4, 5, 6, 9, 10, 13, 15, 12, 1, 7, 8\nVertex 15: 10, 1, 6, 7, 8, 13, 2, 16, 11, 4, 9, 14, 5\nVertex 16: 7, 2, 8, 15, 11, 4, 3, 9\n",
    "graph_output": "16 96\n10 15\n2 8\n9 12\n13 5\n2 11\n1 15\n8 10\n4 7\n13 4\n6 15\n15 7\n12 1\n8 11\n4 14\n1 4\n12 7\n15 8\n5 11\n11 12\n13 7\n8 1\n9 6\n7 16\n14 5\n10 9\n2 1\n15 13\n11 9\n15 2\n2 16\n8 16\n7 8\n1 7\n16 15\n10 7\n12 2\n7 9\n8 4\n15 11\n3 8\n13 6\n3 9\n3 2\n3 5\n7 11\n6 14\n9 4\n1 10\n11 3\n2 9\n4 15\n6 7\n16 11\n9 14\n2 5\n6 12\n10 14\n10 11\n11 1\n13 10\n4 5\n13 14\n3 7\n4 16\n8 12\n10 6\n9 15\n3 16\n6 4\n15 14\n2 13\n7 2\n8 9\n2 10\n9 13\n4 3\n10 4\n14 12\n1 14\n3 6\n13 11\n6 1\n6 5\n15 5\n4 12\n7 14\n12 10\n5 8\n5 1\n8 14\n5 10\n3 10\n16 9\n12 3\n1 13\n12 13\n",
    "vertices": [
      7,
      13
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 105 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 5 and vertex 12.\n",
    "graph_output": "15 105\n1 15\n15 8\n8 2\n15 11\n2 5\n2 3\n3 12\n12 9\n2 14\n11 6\n8 13\n8 7\n13 10\n13 4\n12 2\n6 7\n1 4\n4 3\n11 10\n2 1\n14 8\n9 3\n1 7\n5 4\n13 7\n7 5\n14 6\n12 15\n13 9\n7 12\n15 14\n3 6\n14 7\n10 5\n4 14\n14 9\n10 9\n12 13\n9 8\n3 10\n10 14\n7 15\n9 6\n9 11\n6 8\n14 11\n13 14\n13 2\n7 9\n11 3\n6 15\n1 5\n12 4\n15 3\n2 4\n14 1\n5 9\n3 8\n3 13\n4 7\n2 7\n8 4\n5 13\n11 12\n3 5\n6 13\n7 3\n13 11\n12 14\n4 15\n10 7\n10 6\n1 3\n11 2\n8 11\n10 8\n1 9\n15 13\n11 7\n10 4\n11 1\n10 15\n1 8\n2 10\n4 9\n5 15\n6 5\n10 12\n6 4\n6 12\n5 8\n9 15\n2 6\n1 12\n3 14\n13 1\n6 1\n5 14\n10 1\n9 2\n15 2\n5 11\n11 4\n12 8\n5 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 15,
    "description_type": "natural"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 11 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0  20   0   0   0   0   0   0  38   0  30 \n 2 | 20   0   0   0   0   0   0   0   0  51   0 \n 3 |  0   0   0   0   0  43   0  11  61   0   0 \n 4 |  0   0   0   0   0   0  15   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0  10   0 \n 6 |  0   0  43   0   0   0   0   0   0   0   0 \n 7 |  0   0   0  15   0   0   0   0   0   0  77 \n 8 |  0   0  11   0   0   0   0   0   0   0  82 \n 9 | 38   0  61   0   0   0   0   0   0   0   0 \n10 |  0  51   0   0  10   0   0   0   0   0   0 \n11 | 30   0   0   0   0   0  77  82   0   0   0 \n",
    "graph_output": "11 11\n1 9 38\n1 2 20\n2 10 51\n1 11 30\n9 3 61\n3 6 43\n11 7 77\n10 5 10\n7 4 15\n11 8 82\n3 8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 377,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 115 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 9 and vertex 17.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 17 and vertex 6.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 10 and vertex 17.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 17 and vertex 16.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 17 and vertex 11.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 17 and vertex 13.\nThere is an edge between vertex 17 and vertex 15.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 2 and vertex 10.\n",
    "graph_output": "17 115\n14 10\n16 15\n15 10\n12 17\n7 12\n17 7\n13 4\n1 11\n9 1\n11 4\n16 5\n17 4\n4 3\n2 9\n14 6\n2 13\n14 2\n10 1\n7 13\n8 5\n8 13\n15 3\n8 6\n5 15\n16 3\n11 12\n16 14\n13 15\n9 14\n5 9\n10 13\n9 17\n2 5\n12 14\n14 1\n15 8\n5 3\n1 17\n7 2\n7 14\n3 17\n11 8\n3 10\n11 7\n17 2\n4 9\n13 11\n16 10\n17 6\n7 9\n10 4\n10 17\n5 14\n13 6\n10 7\n1 4\n17 16\n7 16\n10 11\n17 8\n6 9\n4 8\n15 14\n9 11\n12 10\n4 16\n8 7\n8 12\n10 6\n7 15\n3 1\n4 5\n1 2\n13 5\n2 8\n16 9\n3 8\n2 4\n16 13\n4 6\n2 6\n8 10\n13 9\n16 11\n5 1\n4 12\n17 11\n14 8\n8 16\n11 15\n9 12\n14 13\n4 7\n15 12\n7 6\n17 5\n12 1\n15 4\n11 2\n17 13\n17 15\n2 3\n9 3\n12 13\n12 6\n10 9\n3 11\n14 11\n1 7\n9 8\n13 1\n7 5\n6 5\n3 14\n2 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 30 vertices and 29 edges\n\nEdges (Format: Node Node):\n1 18\n1 20\n1 30\n30 27\n27 14\n18 8\n20 17\n20 26\n20 23\n20 4\n23 13\n17 5\n23 12\n4 9\n30 15\n15 24\n27 7\n1 11\n5 29\n5 2\n5 19\n2 21\n27 6\n4 25\n20 28\n7 10\n2 3\n23 22\n25 16\n",
    "graph_output": "30 29\n1 18\n1 20\n1 30\n30 27\n27 14\n18 8\n20 17\n20 26\n20 23\n20 4\n23 13\n17 5\n23 12\n4 9\n30 15\n15 24\n27 7\n1 11\n5 29\n5 2\n5 19\n2 21\n27 6\n4 25\n20 28\n7 10\n2 3\n23 22\n25 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 19,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 121 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   0 \n 2 |  1   0   1   1   1   1   1   1   1   0   1   1   1   1   1   1   0 \n 3 |  1   1   0   1   0   1   0   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   0   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   0   1   1   0   1   1   1   1   1 \n 7 |  1   1   0   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   0   1   1   1   0   0   1   1   1   1   1   0   1   0 \n 9 |  1   1   1   1   1   0   1   0   0   1   1   1   1   1   1   1   1 \n10 |  1   0   1   1   1   1   1   1   1   0   1   1   1   1   1   0   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   0   1   1   1   1   1 \n12 |  1   1   1   1   1   0   1   1   1   1   0   0   1   1   1   1   1 \n13 |  0   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   0   1   1 \n15 |  1   1   1   1   1   1   1   0   1   1   1   1   1   0   0   1   1 \n16 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1   0   1 \n17 |  0   0   1   1   1   1   1   0   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "17 121\n17 14\n14 3\n16 11\n16 17\n13 12\n8 12\n10 8\n16 6\n3 1\n15 10\n6 11\n14 2\n14 8\n5 8\n2 6\n15 6\n14 4\n5 15\n16 15\n10 14\n8 3\n13 4\n11 7\n11 10\n11 4\n3 17\n6 5\n3 10\n7 12\n15 4\n8 16\n6 10\n13 16\n5 17\n9 4\n7 5\n7 13\n13 14\n8 6\n11 14\n3 11\n6 13\n5 16\n9 11\n7 2\n1 4\n5 14\n4 16\n8 2\n1 15\n8 11\n17 13\n14 16\n14 7\n12 3\n3 13\n5 10\n11 1\n12 5\n4 10\n8 13\n2 15\n6 7\n6 17\n16 3\n5 13\n14 1\n9 17\n15 12\n7 17\n6 3\n5 9\n6 4\n2 13\n16 2\n4 12\n2 4\n10 12\n2 9\n2 12\n14 6\n14 12\n1 8\n1 9\n7 9\n10 17\n15 13\n14 9\n11 17\n3 9\n9 10\n2 3\n7 16\n1 10\n15 9\n4 17\n1 6\n1 7\n12 1\n10 13\n2 11\n7 8\n11 5\n2 5\n3 4\n13 9\n9 16\n12 9\n1 2\n1 5\n4 7\n10 7\n15 7\n5 4\n3 15\n12 17\n16 1\n16 12\n11 13\n15 17\n11 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 6 vertices and 6 edges\n\nEdges (Format: Node Node):\n4 3\n5 3\n4 6\n5 1\n3 1\n4 2\n",
    "graph_output": "6 6\n4 3\n5 3\n4 6\n5 1\n3 1\n4 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (31\u00d731):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31\n   ----------------------------------------------------------------------------------------------------------------------------\n 1 |  0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 2 |  1   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 3 |  0   1   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0 \n 4 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0 \n 6 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   1   0   0   0 \n11 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n14 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n16 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   1   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1 \n27 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0 \n30 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n31 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n",
    "graph_output": "31 30\n1 10\n1 2\n2 3\n3 24\n10 21\n21 20\n20 5\n20 17\n24 6\n10 28\n28 13\n6 8\n10 7\n10 19\n5 29\n19 18\n29 25\n3 4\n24 12\n1 16\n21 22\n21 15\n29 26\n2 30\n26 31\n3 11\n8 9\n18 23\n2 14\n3 27\n",
    "vertices": [
      null,
      null
    ],
    "answer": 19,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 18 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 15 and vertex 1.\n",
    "graph_output": "15 18\n1 2\n10 9\n4 3\n13 11\n5 6\n6 12\n9 14\n7 1\n4 15\n12 5\n1 10\n10 14\n9 8\n9 3\n1 11\n4 9\n6 4\n15 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 130 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 9 and vertex 17.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 17 and vertex 10.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 13 and vertex 17.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 17 and vertex 1.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 16 and vertex 14.\n",
    "graph_output": "17 130\n1 4\n1 9\n9 5\n9 8\n9 17\n1 12\n8 11\n9 3\n4 7\n1 6\n7 15\n11 16\n7 14\n5 13\n7 2\n17 10\n17 12\n15 2\n3 1\n9 2\n15 11\n12 2\n2 16\n12 10\n11 10\n15 8\n15 10\n5 3\n16 8\n10 6\n8 7\n3 4\n7 10\n15 1\n4 11\n6 17\n17 2\n14 4\n4 15\n10 8\n2 8\n6 3\n5 8\n12 15\n14 10\n10 5\n2 13\n13 12\n11 17\n12 8\n5 6\n7 1\n4 16\n16 15\n9 12\n7 5\n12 16\n5 12\n8 6\n14 15\n1 16\n17 8\n8 13\n13 17\n5 16\n17 7\n4 9\n11 13\n15 9\n14 13\n14 17\n7 3\n15 6\n6 12\n6 13\n2 5\n3 12\n4 8\n11 5\n17 5\n14 2\n5 15\n6 2\n8 3\n14 5\n1 8\n7 6\n1 13\n6 9\n4 12\n5 1\n9 13\n14 1\n3 14\n7 12\n6 4\n3 13\n13 16\n11 7\n14 11\n14 8\n11 1\n9 16\n2 3\n13 7\n16 7\n11 6\n15 17\n3 17\n16 6\n4 13\n14 9\n10 1\n6 14\n4 2\n4 10\n16 3\n11 9\n3 10\n17 1\n13 15\n17 4\n12 11\n9 7\n14 12\n2 1\n16 17\n10 16\n2 10\n16 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 4 and vertex 15 are connected.\n\nThis is an undirected graph with 16 vertices and 111 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   0   1   1   1   1   0   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   0   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   0   1   1   1 \n 8 |  1   1   0   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 9 |  0   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   0   1   1   1   1 \n11 |  1   1   1   0   1   1   1   1   1   1   0   1   1   1   0   1 \n12 |  1   1   1   1   1   1   1   1   1   0   1   0   1   1   0   0 \n13 |  1   1   1   1   1   1   0   1   1   1   1   1   0   1   1   1 \n14 |  0   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n15 |  1   1   1   1   1   1   1   1   1   1   0   0   1   1   0   1 \n16 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   0 \n",
    "graph_output": "16 111\n2 10\n13 16\n3 14\n5 13\n5 11\n15 8\n4 2\n13 1\n8 5\n12 5\n9 5\n14 2\n6 13\n6 2\n5 10\n14 11\n3 5\n2 1\n13 9\n2 7\n14 12\n3 6\n12 4\n10 3\n8 12\n4 1\n8 1\n11 1\n7 15\n16 2\n8 4\n7 3\n15 13\n11 16\n16 3\n15 9\n11 12\n5 1\n4 7\n2 11\n9 12\n6 16\n13 8\n2 13\n7 10\n10 14\n10 11\n9 16\n8 6\n4 16\n11 8\n6 10\n12 7\n4 10\n16 14\n7 1\n11 6\n10 8\n15 14\n5 15\n1 3\n6 4\n8 16\n4 15\n9 8\n7 8\n6 15\n7 9\n13 11\n9 3\n16 5\n14 13\n2 5\n10 15\n13 4\n11 9\n4 5\n12 1\n14 5\n3 13\n9 10\n16 1\n6 14\n10 13\n10 1\n6 1\n6 12\n2 15\n14 7\n2 9\n6 5\n14 9\n12 13\n3 11\n6 9\n15 16\n7 11\n12 2\n3 4\n9 4\n12 3\n6 7\n3 2\n7 5\n8 14\n8 2\n16 10\n15 3\n7 16\n14 4\n15 1\n",
    "vertices": [
      4,
      15
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 8 vertices and 12 edges\n\nEdges (Format: Node Node):\n1 7\n7 8\n7 3\n8 5\n8 6\n5 2\n1 4\n3 8\n3 4\n5 1\n5 4\n8 2\n",
    "graph_output": "8 12\n1 7\n7 8\n7 3\n8 5\n8 6\n5 2\n1 4\n3 8\n3 4\n5 1\n5 4\n8 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 195,
    "description_type": "structured"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 40 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   0   0   0   0   0   1   1   1 \n 2 |  1   0   1   1   1   1   1   0   1   1   0 \n 3 |  1   1   0   0   1   1   1   1   1   1   1 \n 4 |  0   1   0   0   1   1   1   1   1   0   1 \n 5 |  0   1   1   1   0   0   1   0   1   0   1 \n 6 |  0   1   1   1   0   0   0   1   1   1   0 \n 7 |  0   1   1   1   1   0   0   0   1   1   1 \n 8 |  0   0   1   1   0   1   0   0   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1 \n10 |  1   1   1   0   0   1   1   1   1   0   1 \n11 |  1   0   1   1   1   0   1   1   1   1   0 \n",
    "graph_output": "11 40\n10 6\n7 2\n7 5\n4 7\n5 2\n4 8\n11 5\n10 7\n4 9\n3 7\n10 11\n3 9\n2 6\n7 9\n10 2\n1 9\n10 9\n7 11\n3 8\n11 3\n10 8\n11 1\n8 9\n2 9\n5 3\n11 8\n9 5\n3 10\n3 1\n11 4\n4 6\n2 4\n8 6\n4 5\n2 3\n6 3\n1 10\n9 6\n2 1\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 11 (source) to vertex 7 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 16 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 2 (capacity=8), 6 (capacity=9), 5 (capacity=2)\nVertex 2: 1 (capacity=8), 11 (capacity=2), 4 (capacity=9), 7 (capacity=2), 10 (capacity=1), 3 (capacity=9)\nVertex 3: 4 (capacity=10), 8 (capacity=4), 7 (capacity=8), 2 (capacity=9)\nVertex 4: 2 (capacity=9), 3 (capacity=10)\nVertex 5: 1 (capacity=2), 6 (capacity=6)\nVertex 6: 1 (capacity=9), 7 (capacity=7), 9 (capacity=2), 5 (capacity=6)\nVertex 7: 6 (capacity=7), 10 (capacity=9), 3 (capacity=8), 2 (capacity=2), 8 (capacity=9)\nVertex 8: 3 (capacity=4), 7 (capacity=9)\nVertex 9: 6 (capacity=2)\nVertex 10: 7 (capacity=9), 2 (capacity=1)\nVertex 11: 2 (capacity=2)\n",
    "graph_output": "11 16\n1 2 8\n2 11 2\n1 6 9\n1 5 2\n6 7 7\n2 4 9\n6 9 2\n4 3 10\n7 10 9\n3 8 4\n7 3 8\n2 7 2\n2 10 1\n5 6 6\n7 8 9\n3 2 9\n",
    "vertices": [
      11,
      7
    ],
    "answer": 2,
    "description_type": "list"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 5, 24, 14\nVertex 2: 20\nVertex 3: 23\nVertex 4: 15, 20, 17, 12\nVertex 5: 1, 28, 29\nVertex 6: 28\nVertex 7: 28\nVertex 8: 17, 11\nVertex 9: 13\nVertex 10: 24\nVertex 11: 8\nVertex 12: 4\nVertex 13: 29, 9\nVertex 14: 1\nVertex 15: 1, 4, 23\nVertex 16: 23\nVertex 17: 4, 8, 19\nVertex 18: 23\nVertex 19: 17\nVertex 20: 4, 27, 2\nVertex 21: 24, 26\nVertex 22: 28\nVertex 23: 15, 18, 16, 3\nVertex 24: 1, 21, 10\nVertex 25: 28\nVertex 26: 21\nVertex 27: 20\nVertex 28: 5, 25, 6, 7, 22\nVertex 29: 5, 13\n",
    "graph_output": "29 28\n1 15\n1 5\n15 4\n1 24\n4 20\n15 23\n5 28\n24 21\n5 29\n29 13\n23 18\n1 14\n4 17\n23 16\n23 3\n17 8\n21 26\n24 10\n28 25\n13 9\n20 27\n28 6\n17 19\n28 7\n28 22\n8 11\n20 2\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 112 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 3 and vertex 2.\n",
    "graph_output": "16 112\n1 13\n1 9\n13 3\n1 2\n13 16\n1 12\n1 11\n11 8\n12 4\n11 10\n9 14\n8 15\n1 7\n15 5\n2 6\n15 4\n5 13\n9 13\n7 14\n2 5\n6 15\n1 8\n14 12\n10 2\n10 9\n13 10\n2 11\n6 11\n7 10\n2 15\n6 7\n3 4\n7 11\n7 12\n15 9\n6 14\n5 12\n3 10\n8 16\n8 4\n15 10\n9 11\n15 3\n12 2\n8 12\n12 13\n7 5\n2 13\n8 13\n3 5\n6 1\n9 16\n4 6\n15 1\n4 2\n5 14\n14 15\n3 8\n10 12\n6 13\n6 3\n4 11\n5 6\n2 16\n9 2\n10 6\n15 16\n16 12\n3 14\n5 11\n12 9\n13 15\n10 8\n13 4\n4 10\n1 3\n5 8\n6 9\n3 16\n9 8\n8 2\n14 1\n3 7\n16 5\n14 11\n8 6\n13 11\n1 16\n7 16\n4 14\n5 9\n10 14\n16 11\n1 10\n13 7\n7 9\n10 5\n5 1\n3 11\n16 6\n5 4\n14 16\n16 4\n9 4\n7 15\n12 15\n7 8\n12 11\n2 14\n14 8\n2 7\n3 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 8 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 14 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 3 with a capacity of 4.\nThere is an edge between vertex 3 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 1 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 11 and vertex 4 with a capacity of 9.\nThere is an edge between vertex 11 and vertex 5 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 10.\nThere is an edge between vertex 11 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 6 with a capacity of 1.\nThere is an edge between vertex 9 and vertex 6 with a capacity of 3.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 5 with a capacity of 7.\nThere is an edge between vertex 2 and vertex 3 with a capacity of 2.\n",
    "graph_output": "11 14\n1 7 6\n7 3 4\n3 11 2\n1 10 4\n1 2 10\n11 4 9\n11 5 5\n7 8 10\n11 9 5\n1 6 1\n9 6 3\n2 10 6\n7 5 7\n2 3 2\n",
    "vertices": [
      8,
      2
    ],
    "answer": 9,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 11 (source) to vertex 5 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 16 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 7 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 3.\nThere is an edge between vertex 5 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 8 and vertex 3 with a capacity of 9.\nThere is an edge between vertex 10 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 11 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 2 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 3.\nThere is an edge between vertex 5 and vertex 8 with a capacity of 3.\nThere is an edge between vertex 9 and vertex 1 with a capacity of 9.\nThere is an edge between vertex 3 and vertex 6 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 11 and vertex 6 with a capacity of 6.\n",
    "graph_output": "11 16\n1 6 9\n1 7 1\n6 4 2\n1 5 3\n5 10 5\n1 8 1\n8 3 9\n10 9 4\n4 11 9\n4 2 2\n5 6 3\n5 8 3\n9 1 9\n3 6 6\n7 3 5\n11 6 6\n",
    "vertices": [
      11,
      5
    ],
    "answer": 8,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 34 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   0   0   0   0   1   0   0   0   0   1   0   0 \n 2 |  1   0   0   0   0   0   0   0   0   1   1   0   1   0   0   0   0 \n 3 |  1   0   0   0   0   0   1   1   0   0   0   0   1   0   0   1   0 \n 4 |  1   0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   1 \n 5 |  1   0   0   0   0   1   0   0   0   0   0   0   0   1   0   1   0 \n 6 |  0   0   0   0   1   0   1   0   0   0   0   1   0   0   0   0   0 \n 7 |  0   0   1   0   0   1   0   0   0   0   0   0   1   0   0   0   0 \n 8 |  0   0   1   0   0   0   0   0   0   0   0   0   1   1   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n10 |  1   1   0   1   0   0   0   0   0   0   0   1   0   0   0   1   0 \n11 |  0   1   0   1   0   0   0   0   0   0   0   1   0   0   1   0   0 \n12 |  0   0   0   1   0   1   0   0   0   1   1   0   0   0   0   0   0 \n13 |  0   1   1   0   0   0   1   1   0   0   0   0   0   0   0   1   1 \n14 |  0   0   0   0   1   0   0   1   0   0   0   0   0   0   1   0   0 \n15 |  1   0   0   0   0   0   0   0   0   0   1   0   0   1   0   1   0 \n16 |  0   0   1   0   1   0   0   0   1   1   0   0   1   0   1   0   0 \n17 |  0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0 \n",
    "graph_output": "17 34\n6 5\n12 10\n16 15\n17 4\n11 2\n5 1\n8 14\n16 3\n1 10\n5 14\n13 7\n16 13\n12 4\n2 10\n6 7\n1 3\n2 1\n10 4\n14 15\n11 12\n16 10\n4 1\n15 11\n8 3\n9 16\n13 17\n5 16\n3 7\n15 1\n11 4\n12 6\n13 2\n13 8\n13 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 32 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 7, 8, 5, 10, 3, 12\nVertex 2: 13, 5, 11, 12, 8\nVertex 3: 7, 15, 5, 1\nVertex 4: 10, 5, 13\nVertex 5: 13, 1, 2, 3, 4\nVertex 6: 13\nVertex 7: 1, 3, 14, 15\nVertex 8: 1, 11, 15, 2\nVertex 9: 13\nVertex 10: 11, 4, 1\nVertex 11: 1, 13, 16, 10, 8, 2, 12, 15\nVertex 12: 16, 2, 11, 1\nVertex 13: 11, 2, 6, 9, 5, 4\nVertex 14: 7, 16\nVertex 15: 3, 8, 7, 11\nVertex 16: 11, 12, 14\n",
    "graph_output": "16 32\n1 11\n11 13\n13 2\n1 7\n1 8\n11 16\n7 3\n7 14\n13 6\n3 15\n13 9\n13 5\n11 10\n10 4\n16 12\n5 1\n11 8\n2 5\n3 5\n2 11\n8 15\n2 12\n7 15\n1 10\n5 4\n12 11\n13 4\n14 16\n1 3\n12 1\n15 11\n2 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 7 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (8\u00d78):\n\n      1   2   3   4   5   6   7   8\n   --------------------------------\n 1 |  0   0   0   1   0   0   0   1 \n 2 |  0   0   0   1   0   0   0   0 \n 3 |  0   0   0   1   0   0   0   0 \n 4 |  1   1   1   0   1   0   0   1 \n 5 |  0   0   0   1   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   1 \n 8 |  1   0   0   1   0   0   1   0 \n",
    "graph_output": "8 7\n1 8\n4 3\n8 4\n8 7\n4 2\n1 4\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 15 and vertex 13 are connected.\n\nThis is an undirected graph with 15 vertices and 98 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 5 and vertex 10.\n",
    "graph_output": "15 98\n9 1\n11 3\n10 4\n8 12\n7 15\n13 3\n8 4\n14 10\n4 3\n5 12\n8 10\n4 2\n5 15\n8 7\n11 12\n1 13\n8 14\n3 14\n13 8\n15 2\n10 3\n3 5\n9 13\n1 14\n10 1\n7 4\n9 11\n1 7\n5 8\n10 6\n4 1\n9 3\n12 3\n10 15\n5 14\n9 7\n4 12\n6 12\n13 6\n1 8\n5 1\n2 10\n10 9\n9 2\n9 6\n11 7\n2 8\n3 15\n15 1\n10 11\n6 4\n15 14\n14 12\n13 14\n12 15\n11 15\n9 5\n11 14\n4 11\n7 3\n2 5\n7 12\n10 12\n6 5\n2 1\n7 14\n8 15\n12 2\n3 8\n2 14\n1 12\n15 13\n12 13\n14 6\n14 9\n1 11\n5 7\n4 14\n7 10\n15 4\n9 12\n11 13\n9 15\n7 2\n5 4\n3 2\n11 8\n10 13\n1 6\n2 6\n15 6\n13 4\n11 5\n13 2\n6 3\n13 7\n9 8\n5 10\n",
    "vertices": [
      15,
      13
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 128 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   0   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  0   1   1   0   1   1   1   1   1   1   1   1   1   0   1   0   0 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  0   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   0   1   0   1 \n11 |  1   0   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n14 |  1   1   1   0   1   1   1   1   1   0   1   1   1   0   1   1   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n16 |  1   1   1   0   1   1   1   1   1   0   1   1   1   1   1   0   1 \n17 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "17 128\n1 3\n3 6\n6 13\n13 5\n1 7\n7 14\n13 10\n5 11\n13 17\n6 2\n11 9\n13 15\n9 4\n13 12\n13 16\n13 8\n14 3\n14 5\n1 5\n3 10\n14 17\n14 2\n8 17\n4 3\n8 5\n7 13\n4 12\n7 17\n6 15\n9 16\n10 5\n12 14\n15 8\n4 11\n11 10\n5 15\n9 6\n6 12\n1 12\n16 12\n12 7\n6 5\n3 8\n7 4\n8 6\n8 9\n2 12\n1 15\n8 12\n11 13\n1 8\n2 4\n6 16\n1 14\n14 6\n17 10\n16 17\n16 7\n2 3\n11 12\n12 17\n9 5\n9 2\n3 12\n16 14\n5 7\n14 8\n4 15\n12 5\n2 15\n9 10\n13 4\n11 3\n1 11\n8 16\n9 13\n10 2\n4 6\n15 17\n15 14\n10 7\n15 11\n6 11\n7 11\n17 1\n10 8\n4 5\n17 5\n3 16\n6 10\n10 4\n7 15\n9 17\n16 1\n1 9\n1 13\n2 17\n11 17\n7 9\n7 8\n3 13\n5 3\n2 5\n10 12\n3 9\n17 6\n16 15\n7 3\n8 2\n1 10\n17 3\n12 9\n8 11\n15 10\n14 11\n12 15\n16 2\n13 14\n3 15\n11 16\n1 2\n15 9\n8 4\n6 7\n2 7\n14 9\n2 13\n5 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (31\u00d731):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31\n   ----------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   1   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   1   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 5 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 6 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n13 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   1   0   0   1 \n16 |  0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n21 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n23 |  1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n25 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n27 |  1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n28 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n30 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n31 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "31 30\n1 20\n1 8\n1 23\n20 3\n1 27\n27 5\n23 10\n27 26\n3 25\n26 15\n8 4\n5 7\n3 21\n15 28\n20 17\n7 16\n16 9\n10 22\n17 19\n4 30\n22 11\n22 12\n1 6\n28 2\n15 31\n9 29\n15 18\n28 24\n29 14\n2 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 11,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 8 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (7\u00d77):\n\n      1   2   3   4   5   6   7\n   ----------------------------\n 1 |  0   1   1   0   1   0   0 \n 2 |  1   0   0   0   0   0   1 \n 3 |  1   0   0   1   0   1   0 \n 4 |  0   0   1   0   0   0   1 \n 5 |  1   0   0   0   0   0   1 \n 6 |  0   0   1   0   0   0   0 \n 7 |  0   1   0   1   1   0   0 \n",
    "graph_output": "7 8\n1 5\n5 7\n1 2\n1 3\n3 4\n3 6\n7 4\n7 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 16,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 11 vertices and 17 edges\n\nEdges (Format: Node Node Weight):\n1 6 9\n6 10 7\n1 4 64\n4 9 60\n4 11 88\n11 7 54\n10 5 38\n11 3 16\n5 8 62\n9 2 46\n5 1 82\n5 3 79\n3 7 84\n8 2 28\n10 2 13\n1 2 55\n7 6 49\n",
    "graph_output": "11 17\n1 6 9\n6 10 7\n1 4 64\n4 9 60\n4 11 88\n11 7 54\n10 5 38\n11 3 16\n5 8 62\n9 2 46\n5 1 82\n5 3 79\n3 7 84\n8 2 28\n10 2 13\n1 2 55\n7 6 49\n",
    "vertices": [
      null,
      null
    ],
    "answer": 324,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 12 vertices and 13 edges\n\nEdges (Format: Node Node):\n9 7\n5 1\n6 8\n8 11\n4 8\n10 1\n10 4\n4 1\n8 10\n6 9\n3 9\n5 11\n5 4\n",
    "graph_output": "12 13\n9 7\n5 1\n6 8\n8 11\n4 8\n10 1\n10 4\n4 1\n8 10\n6 9\n3 9\n5 11\n5 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 26 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 10, 4, 16, 7\nVertex 2: 9, 13\nVertex 3: 1, 11, 9, 7\nVertex 4: 1, 12, 16\nVertex 5: 6\nVertex 6: 11, 5, 8, 7\nVertex 7: 16, 14, 3, 1, 6, 12\nVertex 8: 6\nVertex 9: 3, 2, 14\nVertex 10: 1, 15, 14\nVertex 11: 3, 6\nVertex 12: 16, 4, 15, 7\nVertex 13: 2, 16\nVertex 14: 7, 9, 10, 16\nVertex 15: 10, 12\nVertex 16: 1, 7, 12, 13, 4, 14\n",
    "graph_output": "16 26\n1 3\n1 10\n10 15\n1 4\n3 11\n3 9\n1 16\n16 7\n11 6\n6 5\n9 2\n6 8\n7 14\n2 13\n16 12\n16 13\n7 3\n1 7\n4 12\n16 4\n7 6\n14 9\n10 14\n12 15\n12 7\n14 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 87 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   0   1   1   1   1   0   0   1   1   1   1   1 \n 2 |  1   0   1   1   1   0   1   1   1   1   1   0   1   0   1 \n 3 |  1   1   0   1   1   1   1   1   0   0   0   0   1   1   1 \n 4 |  0   1   1   0   0   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   0   0   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   0   1   1   1   0   1   1   1   1   1   1   0   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   0   1   1   0   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   0   1   1   1   1 \n 9 |  0   1   0   1   1   1   1   1   0   1   1   1   1   1   0 \n10 |  0   1   0   1   1   1   1   1   1   0   1   1   1   1   0 \n11 |  1   1   0   1   1   1   0   0   1   1   0   1   1   1   1 \n12 |  1   0   0   1   1   1   1   1   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   0   1   1   1   1   1   1   0   0   1 \n14 |  1   0   1   1   1   1   0   1   1   1   1   1   0   0   1 \n15 |  1   1   1   1   1   1   1   1   0   0   1   1   1   1   0 \n",
    "graph_output": "15 87\n1 3\n1 5\n1 15\n1 12\n5 8\n5 2\n3 7\n12 13\n12 11\n5 14\n11 9\n7 10\n1 6\n14 4\n10 9\n5 6\n4 12\n10 8\n8 1\n6 3\n15 7\n2 13\n15 4\n6 15\n8 12\n15 12\n4 13\n9 14\n7 13\n5 11\n10 14\n10 2\n6 4\n10 4\n8 9\n14 6\n7 12\n5 13\n9 6\n2 15\n13 10\n14 12\n1 2\n9 13\n3 2\n11 15\n11 10\n6 11\n3 13\n2 4\n12 5\n4 7\n4 11\n10 5\n3 4\n8 3\n13 11\n14 1\n8 2\n14 8\n7 9\n1 11\n15 13\n8 4\n15 5\n5 9\n5 7\n7 6\n1 13\n3 14\n15 8\n6 10\n11 14\n13 8\n6 12\n9 12\n7 2\n3 5\n15 3\n6 8\n7 8\n1 7\n4 9\n9 2\n12 10\n2 11\n15 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 12 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 8 and vertex 2.\n",
    "graph_output": "8 12\n1 7\n7 8\n7 3\n8 5\n8 6\n5 2\n1 4\n3 8\n3 4\n5 1\n5 4\n8 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 195,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 22 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 6 and vertex 5.\n",
    "graph_output": "8 22\n1 2\n1 7\n1 8\n1 4\n1 3\n2 6\n3 5\n2 3\n6 4\n7 6\n8 5\n6 1\n2 5\n2 4\n4 3\n4 7\n8 2\n8 3\n6 8\n7 3\n8 7\n6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 39852,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 105 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   0   1   1   1   1   0   1   1 \n 2 |  1   0   1   0   0   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   0   1   0   1   1   1   1   0   1   1   1   1   1   1   1 \n 5 |  1   0   1   1   0   1   1   0   0   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   0   1   0   1   1   1   1   0   1 \n 7 |  1   1   1   1   1   1   0   1   0   1   1   1   1   1   1   0 \n 8 |  1   1   1   1   0   0   1   0   0   1   1   1   1   1   1   0 \n 9 |  0   1   1   0   0   1   0   0   0   1   1   1   1   1   1   1 \n10 |  1   1   1   1   1   0   1   1   1   0   1   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   0   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n14 |  0   1   1   1   1   1   1   1   1   1   0   1   1   0   1   1 \n15 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   0   1 \n16 |  1   1   1   1   1   1   0   0   1   1   1   1   1   1   1   0 \n",
    "graph_output": "16 105\n1 15\n1 7\n7 13\n13 6\n15 5\n13 14\n13 2\n14 8\n8 4\n8 11\n4 10\n11 9\n9 16\n4 12\n9 3\n1 3\n4 16\n9 15\n13 1\n4 6\n15 16\n4 7\n11 1\n10 12\n15 12\n14 6\n16 2\n4 1\n7 6\n12 5\n1 5\n8 7\n5 16\n15 4\n2 10\n9 10\n10 1\n6 9\n1 6\n7 14\n11 13\n11 3\n13 5\n12 2\n11 16\n3 15\n13 8\n10 16\n15 8\n4 3\n4 14\n7 2\n2 8\n11 15\n10 3\n10 5\n3 16\n2 1\n3 6\n11 4\n10 15\n14 10\n7 3\n6 2\n12 1\n16 12\n14 15\n2 9\n15 2\n7 12\n14 3\n7 5\n15 7\n8 3\n1 8\n2 3\n11 6\n9 12\n15 13\n2 11\n16 6\n5 6\n1 16\n12 6\n10 13\n11 7\n3 12\n16 14\n13 16\n4 5\n13 9\n11 5\n8 10\n12 13\n14 5\n2 14\n8 12\n14 9\n12 14\n10 7\n11 12\n11 10\n13 4\n5 3\n3 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 44 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0  45  94  84  68  95  71  49  20  52   4 \n 2 | 45   0  50  68   0  54  20  80   0  56  99 \n 3 | 94  50   0  99   3   0  62   0  59  31   5 \n 4 | 84  68  99   0  97   6  21  17   0  98  96 \n 5 | 68   0   3  97   0  71  98  48  58  85 100 \n 6 | 95  54   0   6  71   0  63  43   0   0   0 \n 7 | 71  20  62  21  98  63   0  94   0   0  54 \n 8 | 49  80   0  17  48  43  94   0   3   0  33 \n 9 | 20   0  59   0  58   0   0   3   0  20  97 \n10 | 52  56  31  98  85   0   0   0  20   0  25 \n11 |  4  99   5  96 100   0  54  33  97  25   0 \n",
    "graph_output": "11 44\n1 5 68\n1 4 84\n1 8 49\n8 7 94\n8 9 3\n4 2 68\n4 6 6\n4 10 98\n10 11 25\n9 3 59\n3 10 31\n1 3 94\n4 7 21\n11 4 96\n1 2 45\n2 10 56\n6 8 43\n11 3 5\n1 6 95\n11 1 4\n3 4 99\n2 11 99\n11 7 54\n6 7 63\n10 5 85\n11 8 33\n8 4 17\n10 9 20\n8 2 80\n5 7 98\n9 5 58\n11 5 100\n2 6 54\n7 3 62\n7 1 71\n7 2 20\n4 5 97\n1 9 20\n11 9 97\n8 5 48\n5 6 71\n10 1 52\n2 3 50\n5 3 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 124,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 17 vertices and 23 edges\n\nEdges (Format: Node Node):\n11 1\n14 1\n17 12\n3 2\n3 12\n4 13\n7 15\n8 10\n4 15\n3 13\n7 12\n10 9\n13 9\n12 2\n15 9\n14 13\n7 16\n8 3\n10 12\n8 6\n11 2\n1 7\n1 4\n",
    "graph_output": "17 23\n11 1\n14 1\n17 12\n3 2\n3 12\n4 13\n7 15\n8 10\n4 15\n3 13\n7 12\n10 9\n13 9\n12 2\n15 9\n14 13\n7 16\n8 3\n10 12\n8 6\n11 2\n1 7\n1 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   1   0   0   1   0   1   0   0   0   0   1   0   0   0 \n 2 |  0   0   1   1   1   0   0   1   0   0   0   0   0   0   0   0 \n 3 |  1   1   0   1   0   1   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   1   1   0   1   0   0   0   0   0   0   0   1   0   1   0 \n 5 |  0   1   0   1   0   0   1   0   0   0   0   0   0   0   0   0 \n 6 |  1   0   1   0   0   0   0   0   1   0   1   0   0   0   0   0 \n 7 |  0   0   0   0   1   0   0   0   0   0   0   0   1   0   1   0 \n 8 |  1   1   0   0   0   0   0   0   0   1   0   0   0   1   0   0 \n 9 |  0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0 \n10 |  0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   1 \n11 |  0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   1 \n13 |  1   0   0   1   0   0   1   0   1   0   1   0   0   1   0   0 \n14 |  0   0   0   0   0   0   0   1   0   0   0   1   1   0   0   0 \n15 |  0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   1 \n16 |  0   0   0   0   0   0   0   0   0   1   0   1   0   0   1   0 \n",
    "graph_output": "16 28\n1 8\n1 6\n8 10\n1 13\n13 9\n13 4\n10 12\n4 2\n12 16\n4 5\n4 15\n6 11\n2 3\n12 14\n13 7\n16 10\n15 16\n3 4\n9 6\n3 1\n5 2\n5 7\n8 2\n3 6\n7 15\n14 13\n14 8\n13 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 12 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 6.\n",
    "graph_output": "7 12\n1 2\n2 6\n6 3\n2 7\n6 5\n5 4\n3 7\n2 5\n3 1\n4 1\n1 7\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 338,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 27 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 15 and vertex 13.\n",
    "graph_output": "15 27\n1 11\n11 14\n14 7\n14 13\n11 6\n14 3\n3 12\n11 15\n7 8\n11 9\n13 2\n7 4\n3 10\n2 5\n12 5\n10 6\n12 10\n3 9\n4 6\n5 4\n11 5\n13 10\n4 2\n15 12\n10 14\n3 11\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 69 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7 with a weight of 60.\nThere is an edge between vertex 7 and vertex 3 with a weight of 10.\nThere is an edge between vertex 3 and vertex 11 with a weight of 59.\nThere is an edge between vertex 11 and vertex 10 with a weight of 2.\nThere is an edge between vertex 3 and vertex 6 with a weight of 71.\nThere is an edge between vertex 7 and vertex 2 with a weight of 72.\nThere is an edge between vertex 11 and vertex 5 with a weight of 89.\nThere is an edge between vertex 5 and vertex 12 with a weight of 5.\nThere is an edge between vertex 6 and vertex 4 with a weight of 76.\nThere is an edge between vertex 1 and vertex 13 with a weight of 48.\nThere is an edge between vertex 2 and vertex 8 with a weight of 21.\nThere is an edge between vertex 8 and vertex 9 with a weight of 25.\nThere is an edge between vertex 11 and vertex 8 with a weight of 75.\nThere is an edge between vertex 9 and vertex 5 with a weight of 8.\nThere is an edge between vertex 13 and vertex 6 with a weight of 73.\nThere is an edge between vertex 1 and vertex 3 with a weight of 92.\nThere is an edge between vertex 12 and vertex 10 with a weight of 54.\nThere is an edge between vertex 7 and vertex 6 with a weight of 24.\nThere is an edge between vertex 10 and vertex 9 with a weight of 86.\nThere is an edge between vertex 4 and vertex 10 with a weight of 65.\nThere is an edge between vertex 4 and vertex 5 with a weight of 56.\nThere is an edge between vertex 9 and vertex 3 with a weight of 100.\nThere is an edge between vertex 4 and vertex 7 with a weight of 99.\nThere is an edge between vertex 12 and vertex 3 with a weight of 24.\nThere is an edge between vertex 3 and vertex 5 with a weight of 64.\nThere is an edge between vertex 13 and vertex 3 with a weight of 83.\nThere is an edge between vertex 8 and vertex 13 with a weight of 18.\nThere is an edge between vertex 11 and vertex 2 with a weight of 94.\nThere is an edge between vertex 9 and vertex 13 with a weight of 88.\nThere is an edge between vertex 6 and vertex 12 with a weight of 83.\nThere is an edge between vertex 6 and vertex 8 with a weight of 53.\nThere is an edge between vertex 1 and vertex 11 with a weight of 19.\nThere is an edge between vertex 7 and vertex 8 with a weight of 23.\nThere is an edge between vertex 2 and vertex 5 with a weight of 17.\nThere is an edge between vertex 12 and vertex 2 with a weight of 23.\nThere is an edge between vertex 10 and vertex 1 with a weight of 67.\nThere is an edge between vertex 1 and vertex 12 with a weight of 25.\nThere is an edge between vertex 12 and vertex 11 with a weight of 84.\nThere is an edge between vertex 5 and vertex 10 with a weight of 68.\nThere is an edge between vertex 7 and vertex 11 with a weight of 2.\nThere is an edge between vertex 2 and vertex 1 with a weight of 10.\nThere is an edge between vertex 11 and vertex 13 with a weight of 43.\nThere is an edge between vertex 12 and vertex 8 with a weight of 25.\nThere is an edge between vertex 3 and vertex 4 with a weight of 58.\nThere is an edge between vertex 8 and vertex 1 with a weight of 27.\nThere is an edge between vertex 7 and vertex 12 with a weight of 88.\nThere is an edge between vertex 2 and vertex 3 with a weight of 23.\nThere is an edge between vertex 9 and vertex 1 with a weight of 87.\nThere is an edge between vertex 2 and vertex 9 with a weight of 32.\nThere is an edge between vertex 13 and vertex 4 with a weight of 15.\nThere is an edge between vertex 1 and vertex 5 with a weight of 32.\nThere is an edge between vertex 10 and vertex 7 with a weight of 36.\nThere is an edge between vertex 4 and vertex 1 with a weight of 77.\nThere is an edge between vertex 6 and vertex 2 with a weight of 84.\nThere is an edge between vertex 7 and vertex 13 with a weight of 55.\nThere is an edge between vertex 10 and vertex 2 with a weight of 50.\nThere is an edge between vertex 10 and vertex 8 with a weight of 81.\nThere is an edge between vertex 4 and vertex 12 with a weight of 38.\nThere is an edge between vertex 8 and vertex 4 with a weight of 73.\nThere is an edge between vertex 6 and vertex 1 with a weight of 44.\nThere is an edge between vertex 8 and vertex 5 with a weight of 35.\nThere is an edge between vertex 5 and vertex 6 with a weight of 97.\nThere is an edge between vertex 13 and vertex 12 with a weight of 82.\nThere is an edge between vertex 2 and vertex 4 with a weight of 12.\nThere is an edge between vertex 4 and vertex 9 with a weight of 78.\nThere is an edge between vertex 10 and vertex 3 with a weight of 33.\nThere is an edge between vertex 13 and vertex 5 with a weight of 72.\nThere is an edge between vertex 10 and vertex 6 with a weight of 73.\nThere is an edge between vertex 9 and vertex 7 with a weight of 30.\n",
    "graph_output": "13 69\n1 7 60\n7 3 10\n3 11 59\n11 10 2\n3 6 71\n7 2 72\n11 5 89\n5 12 5\n6 4 76\n1 13 48\n2 8 21\n8 9 25\n11 8 75\n9 5 8\n13 6 73\n1 3 92\n12 10 54\n7 6 24\n10 9 86\n4 10 65\n4 5 56\n9 3 100\n4 7 99\n12 3 24\n3 5 64\n13 3 83\n8 13 18\n11 2 94\n9 13 88\n6 12 83\n6 8 53\n1 11 19\n7 8 23\n2 5 17\n12 2 23\n10 1 67\n1 12 25\n12 11 84\n5 10 68\n7 11 2\n2 1 10\n11 13 43\n12 8 25\n3 4 58\n8 1 27\n7 12 88\n2 3 23\n9 1 87\n2 9 32\n13 4 15\n1 5 32\n10 7 36\n4 1 77\n6 2 84\n7 13 55\n10 2 50\n10 8 81\n4 12 38\n8 4 73\n6 1 44\n8 5 35\n5 6 97\n13 12 82\n2 4 12\n4 9 78\n10 3 33\n13 5 72\n10 6 73\n9 7 30\n",
    "vertices": [
      null,
      null
    ],
    "answer": 145,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 1 (source) to vertex 7 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 8 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0   0  58   0  29   0   0   4   0 \n 2 |  0   0   0   0   0  49   0   0   0 \n 3 | 58   0   0  46   0   0   0   0   0 \n 4 |  0   0  46   0   0   0  83   0   0 \n 5 | 29   0   0   0   0  25   0   0  90 \n 6 |  0  49   0   0  25   0   0   0   0 \n 7 |  0   0   0  83   0   0   0   0   0 \n 8 |  4   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0  90   0   0   0   0 \n\nCapacity Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0   0   7   0   6   0   0   9   0 \n 2 |  0   0   0   0   0   7   0   0   0 \n 3 |  7   0   0  10   0   0   0   0   0 \n 4 |  0   0  10   0   0   0   1   0   0 \n 5 |  6   0   0   0   0   6   0   0   6 \n 6 |  0   7   0   0   6   0   0   0   0 \n 7 |  0   0   0   1   0   0   0   0   0 \n 8 |  9   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   6   0   0   0   0 \n",
    "graph_output": "9 8\n1 5 29 6\n5 6 25 6\n5 9 90 6\n1 3 58 7\n1 8 4 9\n3 4 46 10\n4 7 83 1\n6 2 49 7\n",
    "vertices": [
      1,
      7
    ],
    "answer": 187,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 29 and 27 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 31 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 20.\nThere is an edge between vertex 20 and vertex 7.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 20 and vertex 22.\nThere is an edge between vertex 22 and vertex 31.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 20 and vertex 14.\nThere is an edge between vertex 20 and vertex 30.\nThere is an edge between vertex 22 and vertex 17.\nThere is an edge between vertex 22 and vertex 11.\nThere is an edge between vertex 22 and vertex 18.\nThere is an edge between vertex 30 and vertex 29.\nThere is an edge between vertex 17 and vertex 28.\nThere is an edge between vertex 17 and vertex 13.\nThere is an edge between vertex 13 and vertex 19.\nThere is an edge between vertex 19 and vertex 23.\nThere is an edge between vertex 29 and vertex 3.\nThere is an edge between vertex 22 and vertex 25.\nThere is an edge between vertex 20 and vertex 26.\nThere is an edge between vertex 22 and vertex 6.\nThere is an edge between vertex 29 and vertex 4.\nThere is an edge between vertex 29 and vertex 5.\nThere is an edge between vertex 11 and vertex 21.\nThere is an edge between vertex 25 and vertex 12.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 22 and vertex 8.\nThere is an edge between vertex 10 and vertex 27.\nThere is an edge between vertex 29 and vertex 24.\n",
    "graph_output": "31 30\n1 20\n20 7\n1 9\n20 22\n22 31\n7 10\n10 15\n7 2\n20 14\n20 30\n22 17\n22 11\n22 18\n30 29\n17 28\n17 13\n13 19\n19 23\n29 3\n22 25\n20 26\n22 6\n29 4\n29 5\n11 21\n25 12\n5 16\n22 8\n10 27\n29 24\n",
    "vertices": [
      29,
      27
    ],
    "answer": 20,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 30 vertices and 29 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 1 and vertex 28.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 28 and vertex 22.\nThere is an edge between vertex 22 and vertex 21.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 22 and vertex 15.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 12 and vertex 29.\nThere is an edge between vertex 22 and vertex 6.\nThere is an edge between vertex 13 and vertex 19.\nThere is an edge between vertex 28 and vertex 16.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 16 and vertex 26.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 4 and vertex 30.\nThere is an edge between vertex 15 and vertex 27.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 15 and vertex 18.\nThere is an edge between vertex 19 and vertex 20.\nThere is an edge between vertex 18 and vertex 23.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 2 and vertex 25.\nThere is an edge between vertex 14 and vertex 24.\nThere is an edge between vertex 1 and vertex 17.\n",
    "graph_output": "30 29\n1 12\n1 28\n1 10\n1 7\n28 22\n22 21\n10 13\n22 15\n12 8\n12 29\n22 6\n13 19\n28 16\n16 4\n4 14\n16 26\n13 9\n4 30\n15 27\n10 11\n8 2\n15 18\n19 20\n18 23\n6 5\n10 3\n2 25\n14 24\n1 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 8 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 2, 3\nVertex 2: 1, 6, 5\nVertex 3: 5, 1\nVertex 4: 6, 5\nVertex 5: 3, 4, 2\nVertex 6: 1, 4, 2\n",
    "graph_output": "6 8\n1 6\n1 2\n3 5\n4 6\n6 2\n1 3\n4 5\n2 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 16 vertices and 24 edges\n\nEdges (Format: Node Node):\n15 10\n7 13\n2 4\n16 12\n8 11\n9 14\n1 8\n5 2\n16 3\n10 16\n7 12\n16 9\n13 1\n16 11\n7 2\n9 7\n4 5\n13 15\n15 12\n10 14\n6 9\n7 4\n5 8\n14 16\n",
    "graph_output": "16 24\n15 10\n7 13\n2 4\n16 12\n8 11\n9 14\n1 8\n5 2\n16 3\n10 16\n7 12\n16 9\n13 1\n16 11\n7 2\n9 7\n4 5\n13 15\n15 12\n10 14\n6 9\n7 4\n5 8\n14 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 85 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 13, 9, 5, 2, 15, 14, 4, 3, 10, 6, 7\nVertex 2: 8, 6, 14, 1, 9, 13, 15, 5, 7, 3, 12, 10\nVertex 3: 6, 12, 4, 2, 13, 1, 10, 11, 7, 5, 9, 8\nVertex 4: 8, 10, 13, 3, 7, 1, 15, 14, 9, 11\nVertex 5: 13, 10, 1, 11, 9, 2, 8, 6, 3, 15, 14\nVertex 6: 2, 3, 8, 13, 5, 11, 7, 12, 1, 15, 10\nVertex 7: 8, 14, 15, 12, 4, 2, 10, 3, 6, 11, 1\nVertex 8: 1, 2, 7, 11, 10, 4, 6, 5, 13, 9, 15, 3\nVertex 9: 1, 12, 2, 5, 13, 10, 8, 3, 4, 14\nVertex 10: 8, 4, 5, 14, 13, 1, 3, 12, 7, 2, 9, 11, 6\nVertex 11: 8, 15, 14, 5, 12, 13, 3, 6, 7, 10, 4\nVertex 12: 9, 13, 7, 3, 11, 15, 14, 2, 10, 6\nVertex 13: 1, 5, 12, 4, 2, 15, 10, 6, 3, 14, 11, 8, 9\nVertex 14: 7, 11, 2, 15, 10, 1, 12, 13, 4, 5, 9\nVertex 15: 11, 1, 7, 2, 14, 13, 12, 4, 5, 8, 6\n",
    "graph_output": "15 85\n1 8\n8 2\n2 6\n8 7\n1 13\n7 14\n8 11\n8 10\n11 15\n6 3\n1 9\n8 4\n9 12\n13 5\n10 4\n11 14\n14 2\n6 8\n13 12\n10 5\n13 4\n1 5\n11 5\n2 1\n1 15\n15 7\n12 7\n2 9\n2 13\n2 15\n12 3\n9 5\n15 14\n5 2\n14 10\n14 1\n4 3\n8 5\n4 7\n15 13\n12 11\n7 2\n10 13\n12 15\n4 1\n3 2\n13 6\n12 14\n12 2\n13 3\n5 6\n15 4\n13 14\n3 1\n4 14\n10 1\n13 11\n3 10\n3 11\n10 12\n13 8\n7 10\n3 7\n10 2\n9 13\n11 6\n3 5\n7 6\n9 10\n5 15\n5 14\n9 8\n3 9\n6 12\n7 11\n10 11\n4 9\n14 9\n6 1\n1 7\n15 8\n15 6\n10 6\n4 11\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 6 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 16 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   1   0   0   0   1   0   1   1   1 \n 2 |  0   0   0   0   0   0   1   0   0   1   0 \n 3 |  1   0   0   0   0   0   1   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   1 \n 5 |  0   0   0   0   0   1   1   1   1   0   1 \n 6 |  0   0   0   0   1   0   1   0   0   0   0 \n 7 |  1   1   1   0   1   1   0   0   0   0   1 \n 8 |  0   0   0   0   1   0   0   0   0   0   0 \n 9 |  1   0   0   0   1   0   0   0   0   0   0 \n10 |  1   1   0   0   0   0   0   0   0   0   0 \n11 |  1   0   0   1   1   0   1   0   0   0   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   1   0   0   0   3   0   6   2   4 \n 2 |  0   0   0   0   0   0   7   0   0   8   0 \n 3 |  1   0   0   0   0   0   1   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   7 \n 5 |  0   0   0   0   0   7   2   9  10   0   1 \n 6 |  0   0   0   0   7   0   3   0   0   0   0 \n 7 |  3   7   1   0   2   3   0   0   0   0   2 \n 8 |  0   0   0   0   9   0   0   0   0   0   0 \n 9 |  6   0   0   0  10   0   0   0   0   0   0 \n10 |  2   8   0   0   0   0   0   0   0   0   0 \n11 |  4   0   0   7   1   0   2   0   0   0   0 \n",
    "graph_output": "11 16\n1 7 3\n7 2 7\n7 3 1\n2 10 8\n1 9 6\n7 6 3\n7 11 2\n6 5 7\n5 8 9\n11 4 7\n11 5 1\n5 9 10\n1 10 2\n11 1 4\n5 7 2\n1 3 1\n",
    "vertices": [
      6,
      4
    ],
    "answer": 7,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 11 vertices and 40 edges\n\nEdges (Format: Node Node Weight):\n1 4 87\n1 9 67\n1 5 44\n1 8 89\n9 11 33\n5 10 23\n11 2 29\n11 6 44\n4 7 88\n8 3 76\n10 11 41\n7 1 36\n6 2 76\n5 7 55\n2 10 95\n4 5 64\n2 9 46\n10 9 45\n1 2 59\n11 7 92\n10 3 73\n8 4 8\n10 7 86\n11 4 81\n9 7 74\n5 9 74\n8 10 64\n11 5 71\n5 6 100\n9 3 6\n3 7 78\n2 4 13\n6 3 93\n3 4 41\n10 4 88\n6 10 97\n5 2 90\n3 2 35\n8 11 7\n6 1 12\n",
    "graph_output": "11 40\n1 4 87\n1 9 67\n1 5 44\n1 8 89\n9 11 33\n5 10 23\n11 2 29\n11 6 44\n4 7 88\n8 3 76\n10 11 41\n7 1 36\n6 2 76\n5 7 55\n2 10 95\n4 5 64\n2 9 46\n10 9 45\n1 2 59\n11 7 92\n10 3 73\n8 4 8\n10 7 86\n11 4 81\n9 7 74\n5 9 74\n8 10 64\n11 5 71\n5 6 100\n9 3 6\n3 7 78\n2 4 13\n6 3 93\n3 4 41\n10 4 88\n6 10 97\n5 2 90\n3 2 35\n8 11 7\n6 1 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 225,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 4 and vertex 15 are connected.\n\nThis is an undirected graph with 16 vertices and 111 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 15 and vertex 1.\n",
    "graph_output": "16 111\n2 10\n13 16\n3 14\n5 13\n5 11\n15 8\n4 2\n13 1\n8 5\n12 5\n9 5\n14 2\n6 13\n6 2\n5 10\n14 11\n3 5\n2 1\n13 9\n2 7\n14 12\n3 6\n12 4\n10 3\n8 12\n4 1\n8 1\n11 1\n7 15\n16 2\n8 4\n7 3\n15 13\n11 16\n16 3\n15 9\n11 12\n5 1\n4 7\n2 11\n9 12\n6 16\n13 8\n2 13\n7 10\n10 14\n10 11\n9 16\n8 6\n4 16\n11 8\n6 10\n12 7\n4 10\n16 14\n7 1\n11 6\n10 8\n15 14\n5 15\n1 3\n6 4\n8 16\n4 15\n9 8\n7 8\n6 15\n7 9\n13 11\n9 3\n16 5\n14 13\n2 5\n10 15\n13 4\n11 9\n4 5\n12 1\n14 5\n3 13\n9 10\n16 1\n6 14\n10 13\n10 1\n6 1\n6 12\n2 15\n14 7\n2 9\n6 5\n14 9\n12 13\n3 11\n6 9\n15 16\n7 11\n12 2\n3 4\n9 4\n12 3\n6 7\n3 2\n7 5\n8 14\n8 2\n16 10\n15 3\n7 16\n14 4\n15 1\n",
    "vertices": [
      4,
      15
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 30 vertices and 29 edges\n\nEdges (Format: Node Node):\n1 9\n9 16\n9 18\n16 21\n16 12\n18 22\n1 20\n21 8\n18 29\n1 25\n25 14\n8 5\n8 10\n1 3\n16 7\n12 19\n25 26\n26 6\n1 13\n18 2\n2 23\n14 28\n5 30\n23 17\n1 4\n7 24\n7 15\n29 11\n2 27\n",
    "graph_output": "30 29\n1 9\n9 16\n9 18\n16 21\n16 12\n18 22\n1 20\n21 8\n18 29\n1 25\n25 14\n8 5\n8 10\n1 3\n16 7\n12 19\n25 26\n26 6\n1 13\n18 2\n2 23\n14 28\n5 30\n23 17\n1 4\n7 24\n7 15\n29 11\n2 27\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 2, 16\nVertex 2: 1, 3, 30, 14\nVertex 3: 2, 24, 4, 11, 27\nVertex 4: 3\nVertex 5: 20, 29\nVertex 6: 24, 8\nVertex 7: 10\nVertex 8: 6, 9\nVertex 9: 8\nVertex 10: 1, 21, 28, 7, 19\nVertex 11: 3\nVertex 12: 24\nVertex 13: 28\nVertex 14: 2\nVertex 15: 21\nVertex 16: 1\nVertex 17: 20\nVertex 18: 19, 23\nVertex 19: 10, 18\nVertex 20: 21, 5, 17\nVertex 21: 10, 20, 22, 15\nVertex 22: 21\nVertex 23: 18\nVertex 24: 3, 6, 12\nVertex 25: 29\nVertex 26: 29, 31\nVertex 27: 3\nVertex 28: 10, 13\nVertex 29: 5, 25, 26\nVertex 30: 2\nVertex 31: 26\n",
    "graph_output": "31 30\n1 10\n1 2\n2 3\n3 24\n10 21\n21 20\n20 5\n20 17\n24 6\n10 28\n28 13\n6 8\n10 7\n10 19\n5 29\n19 18\n29 25\n3 4\n24 12\n1 16\n21 22\n21 15\n29 26\n2 30\n26 31\n3 11\n8 9\n18 23\n2 14\n3 27\n",
    "vertices": [
      null,
      null
    ],
    "answer": 19,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 16 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   0   1   0   0   0   0   1   0 \n 2 |  0   0   0   0   0   0   0   1   1   0   0 \n 3 |  0   0   0   0   0   1   0   1   0   1   0 \n 4 |  0   0   0   0   0   1   0   1   0   0   1 \n 5 |  1   0   0   0   0   1   1   0   0   0   0 \n 6 |  0   0   1   1   1   0   0   0   0   1   1 \n 7 |  0   0   0   0   1   0   0   0   0   1   0 \n 8 |  0   1   1   1   0   0   0   0   0   0   0 \n 9 |  0   1   0   0   0   0   0   0   0   1   0 \n10 |  1   0   1   0   0   1   1   0   1   0   0 \n11 |  0   0   0   1   0   1   0   0   0   0   0 \n",
    "graph_output": "11 16\n8 4\n6 10\n5 6\n8 2\n4 11\n10 7\n4 6\n5 1\n7 5\n10 1\n11 6\n3 6\n9 2\n3 10\n9 10\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 12 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 3, 4, 7\nVertex 2: 1, 6, 7, 5\nVertex 3: 6, 7, 1\nVertex 4: 5, 1\nVertex 5: 6, 4, 2\nVertex 6: 2, 3, 5, 7\nVertex 7: 2, 3, 1, 6\n",
    "graph_output": "7 12\n1 2\n2 6\n6 3\n2 7\n6 5\n5 4\n3 7\n2 5\n3 1\n4 1\n1 7\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 338,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 18 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   0   0   0   0   1   0   0   1   1   0   0   0   1 \n 2 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   1   0   0   0   0   1   0   0   0   0   0   0 \n 4 |  0   0   1   0   0   1   0   0   1   0   0   0   0   0   1 \n 5 |  0   0   0   0   0   1   0   0   0   0   0   1   0   0   0 \n 6 |  0   0   0   1   1   0   0   0   0   0   0   1   0   0   0 \n 7 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 9 |  0   0   1   1   0   0   0   1   0   1   0   0   0   1   0 \n10 |  1   0   0   0   0   0   0   0   1   0   0   0   0   1   0 \n11 |  1   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n12 |  0   0   0   0   1   1   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   1   1   0   0   0   0   0 \n15 |  1   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "15 18\n1 2\n10 9\n4 3\n13 11\n5 6\n6 12\n9 14\n7 1\n4 15\n12 5\n1 10\n10 14\n9 8\n9 3\n1 11\n4 9\n6 4\n15 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 10 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 7 and vertex 5.\n",
    "graph_output": "8 10\n1 4\n4 6\n1 5\n1 8\n6 7\n4 3\n6 2\n2 4\n7 2\n7 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 32,
    "description_type": "natural"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 15 and 8 in the given tree, with node 1 as the root.\n\nUndirected Graph with 29 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 19\n19 27\n19 2\n27 21\n19 16\n21 29\n1 18\n2 3\n29 23\n27 14\n3 25\n25 9\n3 6\n18 7\n25 24\n16 17\n19 10\n17 8\n1 28\n17 5\n8 15\n24 12\n12 26\n7 11\n3 20\n3 13\n10 4\n26 22\n",
    "graph_output": "29 28\n1 19\n19 27\n19 2\n27 21\n19 16\n21 29\n1 18\n2 3\n29 23\n27 14\n3 25\n25 9\n3 6\n18 7\n25 24\n16 17\n19 10\n17 8\n1 28\n17 5\n8 15\n24 12\n12 26\n7 11\n3 20\n3 13\n10 4\n26 22\n",
    "vertices": [
      15,
      8
    ],
    "answer": 8,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 27 edges\n\nEdges (Format: Node Node):\n1 10\n1 15\n1 11\n11 16\n10 4\n15 7\n10 8\n7 13\n7 6\n11 3\n13 9\n8 5\n5 2\n3 12\n3 14\n6 15\n11 10\n5 6\n5 12\n1 13\n5 3\n15 12\n15 16\n9 2\n16 8\n14 11\n16 6\n",
    "graph_output": "16 27\n1 10\n1 15\n1 11\n11 16\n10 4\n15 7\n10 8\n7 13\n7 6\n11 3\n13 9\n8 5\n5 2\n3 12\n3 14\n6 15\n11 10\n5 6\n5 12\n1 13\n5 3\n15 12\n15 16\n9 2\n16 8\n14 11\n16 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 81 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 13, 8, 15, 12, 2, 11, 10, 6, 7, 3, 14\nVertex 2: 12, 6, 13, 5, 10, 14, 1, 11, 7, 8, 4\nVertex 3: 5, 14, 4, 15, 9, 13, 6, 10, 11, 1, 7, 8\nVertex 4: 5, 3, 9, 14, 6, 8, 15, 13, 10, 2\nVertex 5: 1, 12, 4, 3, 15, 6, 10, 2, 13, 14, 7\nVertex 6: 5, 7, 2, 4, 13, 3, 12, 11, 15, 1, 14, 9\nVertex 7: 9, 6, 11, 15, 2, 10, 13, 8, 1, 12, 5, 3\nVertex 8: 1, 10, 15, 4, 11, 7, 14, 2, 3\nVertex 9: 14, 7, 4, 3, 12, 10, 15, 13, 6\nVertex 10: 12, 8, 5, 2, 13, 9, 15, 7, 1, 3, 14, 4\nVertex 11: 14, 7, 12, 1, 6, 2, 8, 3\nVertex 12: 5, 2, 10, 14, 1, 6, 11, 9, 13, 7, 15\nVertex 13: 1, 2, 3, 6, 5, 10, 7, 12, 4, 9\nVertex 14: 3, 9, 11, 12, 15, 4, 2, 10, 5, 8, 6, 1\nVertex 15: 5, 1, 14, 3, 8, 7, 10, 4, 6, 9, 12\n",
    "graph_output": "15 81\n1 5\n5 12\n12 2\n5 4\n5 3\n3 14\n14 9\n1 13\n5 15\n1 8\n9 7\n14 11\n5 6\n12 10\n3 4\n12 14\n4 9\n15 1\n14 15\n1 12\n6 7\n8 10\n6 2\n10 5\n15 3\n2 13\n9 3\n14 4\n7 11\n3 13\n6 4\n5 2\n15 8\n13 6\n5 13\n2 10\n15 7\n3 6\n2 14\n12 6\n11 12\n13 10\n12 9\n1 2\n11 1\n10 9\n4 8\n11 6\n11 2\n2 7\n15 10\n7 10\n4 15\n6 15\n13 7\n10 1\n11 8\n10 3\n1 6\n8 7\n10 14\n14 5\n8 14\n13 12\n15 9\n4 13\n6 14\n1 7\n11 3\n10 4\n9 13\n3 1\n8 2\n14 1\n7 12\n5 7\n2 4\n3 7\n9 6\n15 12\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 17 vertices and 126 edges\n\nEdges (Format: Node Node):\n6 9\n4 13\n12 11\n6 16\n11 7\n12 3\n8 16\n4 15\n6 10\n8 6\n16 14\n6 7\n8 11\n11 5\n7 8\n13 17\n7 3\n9 10\n8 13\n1 4\n3 10\n11 13\n15 6\n1 17\n14 7\n5 4\n14 10\n9 15\n17 4\n14 15\n12 5\n9 4\n14 11\n8 2\n1 11\n6 2\n3 8\n6 13\n2 16\n16 1\n5 10\n17 5\n9 12\n3 5\n17 12\n2 11\n10 7\n8 10\n7 17\n10 16\n8 17\n17 15\n17 14\n1 2\n16 11\n12 16\n13 10\n2 17\n3 4\n15 10\n17 9\n1 13\n16 13\n15 5\n5 14\n4 11\n15 1\n17 16\n2 3\n4 12\n13 5\n8 12\n10 2\n12 15\n1 12\n9 13\n13 7\n11 17\n4 8\n14 3\n16 15\n14 2\n3 6\n8 9\n1 5\n8 5\n7 16\n5 2\n12 6\n15 11\n4 2\n13 3\n3 9\n9 2\n10 12\n3 11\n13 2\n1 3\n7 5\n2 15\n12 7\n14 8\n6 5\n14 12\n6 14\n15 13\n10 1\n1 8\n7 4\n3 15\n10 4\n14 4\n8 15\n6 4\n10 17\n7 1\n2 12\n6 17\n1 14\n16 3\n13 14\n13 12\n16 9\n9 5\n5 16\n3 17\n",
    "graph_output": "17 126\n6 9\n4 13\n12 11\n6 16\n11 7\n12 3\n8 16\n4 15\n6 10\n8 6\n16 14\n6 7\n8 11\n11 5\n7 8\n13 17\n7 3\n9 10\n8 13\n1 4\n3 10\n11 13\n15 6\n1 17\n14 7\n5 4\n14 10\n9 15\n17 4\n14 15\n12 5\n9 4\n14 11\n8 2\n1 11\n6 2\n3 8\n6 13\n2 16\n16 1\n5 10\n17 5\n9 12\n3 5\n17 12\n2 11\n10 7\n8 10\n7 17\n10 16\n8 17\n17 15\n17 14\n1 2\n16 11\n12 16\n13 10\n2 17\n3 4\n15 10\n17 9\n1 13\n16 13\n15 5\n5 14\n4 11\n15 1\n17 16\n2 3\n4 12\n13 5\n8 12\n10 2\n12 15\n1 12\n9 13\n13 7\n11 17\n4 8\n14 3\n16 15\n14 2\n3 6\n8 9\n1 5\n8 5\n7 16\n5 2\n12 6\n15 11\n4 2\n13 3\n3 9\n9 2\n10 12\n3 11\n13 2\n1 3\n7 5\n2 15\n12 7\n14 8\n6 5\n14 12\n6 14\n15 13\n10 1\n1 8\n7 4\n3 15\n10 4\n14 4\n8 15\n6 4\n10 17\n7 1\n2 12\n6 17\n1 14\n16 3\n13 14\n13 12\n16 9\n9 5\n5 16\n3 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 16 and 25 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (29\u00d729):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n   --------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n10 |  0   0   0   0   1   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n11 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n14 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n21 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n24 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n25 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   1 \n27 |  0   0   0   0   1   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   1   0   0   0 \n",
    "graph_output": "29 28\n1 29\n29 24\n29 26\n26 3\n26 22\n22 10\n10 5\n10 13\n24 12\n5 27\n26 20\n22 16\n20 7\n27 15\n29 23\n16 25\n10 6\n22 2\n27 9\n2 14\n15 11\n25 18\n25 17\n29 8\n2 28\n13 19\n5 21\n11 4\n",
    "vertices": [
      16,
      25
    ],
    "answer": 16,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 19 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9 with a weight of 61.\nThere is an edge between vertex 1 and vertex 5 with a weight of 23.\nThere is an edge between vertex 1 and vertex 3 with a weight of 17.\nThere is an edge between vertex 1 and vertex 10 with a weight of 29.\nThere is an edge between vertex 10 and vertex 7 with a weight of 96.\nThere is an edge between vertex 9 and vertex 8 with a weight of 74.\nThere is an edge between vertex 8 and vertex 2 with a weight of 84.\nThere is an edge between vertex 7 and vertex 12 with a weight of 14.\nThere is an edge between vertex 10 and vertex 11 with a weight of 82.\nThere is an edge between vertex 7 and vertex 6 with a weight of 57.\nThere is an edge between vertex 1 and vertex 4 with a weight of 32.\nThere is an edge between vertex 11 and vertex 3 with a weight of 75.\nThere is an edge between vertex 3 and vertex 2 with a weight of 35.\nThere is an edge between vertex 6 and vertex 10 with a weight of 28.\nThere is an edge between vertex 1 and vertex 12 with a weight of 69.\nThere is an edge between vertex 10 and vertex 12 with a weight of 45.\nThere is an edge between vertex 12 and vertex 6 with a weight of 56.\nThere is an edge between vertex 8 and vertex 11 with a weight of 53.\nThere is an edge between vertex 7 and vertex 11 with a weight of 35.\n",
    "graph_output": "12 19\n1 9 61\n1 5 23\n1 3 17\n1 10 29\n10 7 96\n9 8 74\n8 2 84\n7 12 14\n10 11 82\n7 6 57\n1 4 32\n11 3 75\n3 2 35\n6 10 28\n1 12 69\n10 12 45\n12 6 56\n8 11 53\n7 11 35\n",
    "vertices": [
      null,
      null
    ],
    "answer": 383,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 8 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 2 and vertex 5.\n",
    "graph_output": "6 8\n1 6\n1 2\n3 5\n4 6\n6 2\n1 3\n4 5\n2 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 77 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   1   1   1   1   0   0   0   1   1   1   1   1   1 \n 2 |  0   0   0   1   1   0   1   1   1   0   1   1   0   1   1 \n 3 |  1   0   0   1   1   1   1   0   0   0   0   1   1   0   1 \n 4 |  1   1   1   0   1   1   1   1   0   1   1   1   0   1   1 \n 5 |  1   1   1   1   0   1   0   1   0   1   1   1   0   1   1 \n 6 |  1   0   1   1   1   0   1   1   0   1   1   1   1   1   0 \n 7 |  0   1   1   1   0   1   0   1   1   1   0   0   1   1   1 \n 8 |  0   1   0   1   1   1   1   0   1   0   1   1   1   0   1 \n 9 |  0   1   0   0   0   0   1   1   0   1   1   1   1   1   0 \n10 |  1   0   0   1   1   1   1   0   1   0   1   1   1   1   1 \n11 |  1   1   0   1   1   1   0   1   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   0   1   1   1   1   0   1   0   1 \n13 |  1   0   1   0   0   1   1   1   1   1   1   1   0   0   1 \n14 |  1   1   0   1   1   1   1   0   1   1   1   0   0   0   0 \n15 |  1   1   1   1   1   0   1   1   0   1   1   1   1   0   0 \n",
    "graph_output": "15 77\n1 4\n11 12\n6 1\n7 10\n5 12\n14 2\n7 3\n6 7\n10 11\n11 14\n4 14\n6 8\n6 14\n15 2\n1 3\n7 9\n8 12\n1 12\n15 7\n11 6\n8 7\n15 12\n13 11\n14 7\n5 15\n2 9\n13 8\n15 4\n2 7\n8 5\n5 3\n4 12\n1 5\n6 13\n14 1\n2 12\n6 10\n13 15\n7 4\n2 5\n5 11\n2 11\n3 6\n10 5\n1 13\n13 10\n9 13\n5 14\n10 1\n4 5\n6 5\n8 2\n15 1\n7 13\n12 13\n9 10\n9 12\n14 9\n3 15\n8 15\n3 4\n10 4\n10 15\n6 12\n11 4\n4 8\n4 6\n14 10\n4 2\n11 9\n12 10\n13 3\n15 11\n1 11\n3 12\n11 8\n9 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 14 vertices and 85 edges\n\nEdges (Format: Node Node Weight):\n1 7 92\n1 3 63\n7 9 84\n9 10 1\n10 2 55\n3 12 88\n12 4 65\n7 5 67\n9 13 80\n9 6 8\n3 14 23\n7 8 11\n10 11 69\n6 10 8\n10 8 90\n5 6 22\n4 9 3\n12 13 24\n11 2 68\n2 14 96\n8 2 94\n14 7 79\n1 13 47\n8 6 4\n3 6 44\n7 6 66\n11 9 84\n5 4 5\n11 3 76\n2 6 79\n6 13 95\n13 14 80\n7 12 33\n4 1 70\n12 10 20\n12 1 52\n14 5 49\n12 14 2\n5 10 78\n8 12 56\n3 9 8\n10 7 23\n3 8 3\n2 4 6\n12 2 28\n7 4 30\n1 11 62\n1 10 12\n13 2 42\n9 2 83\n5 9 18\n4 11 7\n4 3 11\n12 6 54\n5 11 84\n5 3 90\n8 5 75\n8 1 28\n9 12 80\n3 2 21\n13 4 45\n13 8 53\n4 6 97\n10 3 11\n6 14 97\n7 13 23\n12 5 49\n1 5 7\n3 7 60\n8 4 36\n11 14 80\n5 2 12\n14 4 58\n10 13 21\n1 14 38\n13 3 89\n6 11 39\n11 13 34\n9 8 22\n8 14 83\n11 12 87\n7 11 33\n8 11 24\n6 1 75\n10 4 30\n",
    "graph_output": "14 85\n1 7 92\n1 3 63\n7 9 84\n9 10 1\n10 2 55\n3 12 88\n12 4 65\n7 5 67\n9 13 80\n9 6 8\n3 14 23\n7 8 11\n10 11 69\n6 10 8\n10 8 90\n5 6 22\n4 9 3\n12 13 24\n11 2 68\n2 14 96\n8 2 94\n14 7 79\n1 13 47\n8 6 4\n3 6 44\n7 6 66\n11 9 84\n5 4 5\n11 3 76\n2 6 79\n6 13 95\n13 14 80\n7 12 33\n4 1 70\n12 10 20\n12 1 52\n14 5 49\n12 14 2\n5 10 78\n8 12 56\n3 9 8\n10 7 23\n3 8 3\n2 4 6\n12 2 28\n7 4 30\n1 11 62\n1 10 12\n13 2 42\n9 2 83\n5 9 18\n4 11 7\n4 3 11\n12 6 54\n5 11 84\n5 3 90\n8 5 75\n8 1 28\n9 12 80\n3 2 21\n13 4 45\n13 8 53\n4 6 97\n10 3 11\n6 14 97\n7 13 23\n12 5 49\n1 5 7\n3 7 60\n8 4 36\n11 14 80\n5 2 12\n14 4 58\n10 13 21\n1 14 38\n13 3 89\n6 11 39\n11 13 34\n9 8 22\n8 14 83\n11 12 87\n7 11 33\n8 11 24\n6 1 75\n10 4 30\n",
    "vertices": [
      null,
      null
    ],
    "answer": 98,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 93 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   0   1   1   1   0   1   1   0   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   0   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   0   1   1   1   1   1 \n 4 |  0   1   1   0   1   1   1   1   0   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   0   1   0   1   1   0   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   0 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  0   1   1   1   0   1   1   0   1   1   1   1   1   1   1 \n 9 |  1   1   1   0   1   1   1   1   0   1   1   0   1   1   1 \n10 |  1   1   0   1   0   1   1   1   1   0   1   1   1   1   1 \n11 |  0   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   0   1   1   0   0   1   1 \n13 |  1   0   1   1   0   1   1   1   1   1   1   0   0   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n15 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 93\n7 8\n4 13\n8 2\n3 12\n2 9\n9 14\n4 12\n12 2\n5 12\n11 4\n6 7\n1 3\n10 14\n3 7\n2 10\n6 14\n3 15\n7 11\n6 12\n8 12\n6 1\n13 9\n10 6\n3 11\n4 5\n14 15\n9 11\n2 1\n9 1\n14 13\n3 4\n7 14\n11 15\n3 8\n8 11\n15 8\n15 5\n14 8\n7 13\n9 3\n11 12\n5 6\n5 2\n6 11\n11 13\n13 8\n3 13\n13 15\n5 11\n10 11\n10 13\n5 7\n9 15\n4 2\n3 2\n5 9\n8 6\n6 13\n12 1\n15 1\n7 2\n10 8\n3 5\n15 4\n5 1\n8 9\n5 14\n7 9\n6 2\n12 14\n12 15\n6 9\n11 14\n1 13\n14 1\n7 12\n7 4\n2 15\n7 10\n12 10\n14 4\n4 10\n10 9\n3 14\n6 4\n1 10\n15 10\n3 6\n8 4\n1 7\n2 11\n15 7\n2 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 30 vertices and 29 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 18.\nThere is an edge between vertex 1 and vertex 20.\nThere is an edge between vertex 1 and vertex 30.\nThere is an edge between vertex 30 and vertex 27.\nThere is an edge between vertex 27 and vertex 14.\nThere is an edge between vertex 18 and vertex 8.\nThere is an edge between vertex 20 and vertex 17.\nThere is an edge between vertex 20 and vertex 26.\nThere is an edge between vertex 20 and vertex 23.\nThere is an edge between vertex 20 and vertex 4.\nThere is an edge between vertex 23 and vertex 13.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 23 and vertex 12.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 30 and vertex 15.\nThere is an edge between vertex 15 and vertex 24.\nThere is an edge between vertex 27 and vertex 7.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 5 and vertex 29.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 5 and vertex 19.\nThere is an edge between vertex 2 and vertex 21.\nThere is an edge between vertex 27 and vertex 6.\nThere is an edge between vertex 4 and vertex 25.\nThere is an edge between vertex 20 and vertex 28.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 23 and vertex 22.\nThere is an edge between vertex 25 and vertex 16.\n",
    "graph_output": "30 29\n1 18\n1 20\n1 30\n30 27\n27 14\n18 8\n20 17\n20 26\n20 23\n20 4\n23 13\n17 5\n23 12\n4 9\n30 15\n15 24\n27 7\n1 11\n5 29\n5 2\n5 19\n2 21\n27 6\n4 25\n20 28\n7 10\n2 3\n23 22\n25 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 19,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 2 and vertex 15 are connected.\n\nUndirected Graph with 16 vertices and 27 edges\n\nEdges (Format: Node Node):\n7 9\n10 1\n15 1\n9 12\n12 11\n14 9\n8 14\n5 10\n2 10\n11 13\n13 2\n16 12\n2 15\n6 8\n14 10\n9 1\n4 2\n4 14\n9 8\n16 9\n8 11\n14 1\n7 4\n12 14\n5 8\n15 9\n8 4\n",
    "graph_output": "16 27\n7 9\n10 1\n15 1\n9 12\n12 11\n14 9\n8 14\n5 10\n2 10\n11 13\n13 2\n16 12\n2 15\n6 8\n14 10\n9 1\n4 2\n4 14\n9 8\n16 9\n8 11\n14 1\n7 4\n12 14\n5 8\n15 9\n8 4\n",
    "vertices": [
      2,
      15
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 40 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 4 (weight=87), 9 (weight=67), 5 (weight=44), 8 (weight=89), 7 (weight=36), 2 (weight=59), 6 (weight=12)\nVertex 2: 11 (weight=29), 6 (weight=76), 10 (weight=95), 9 (weight=46), 1 (weight=59), 4 (weight=13), 5 (weight=90), 3 (weight=35)\nVertex 3: 8 (weight=76), 10 (weight=73), 9 (weight=6), 7 (weight=78), 6 (weight=93), 4 (weight=41), 2 (weight=35)\nVertex 4: 1 (weight=87), 7 (weight=88), 5 (weight=64), 8 (weight=8), 11 (weight=81), 2 (weight=13), 3 (weight=41), 10 (weight=88)\nVertex 5: 1 (weight=44), 10 (weight=23), 7 (weight=55), 4 (weight=64), 9 (weight=74), 11 (weight=71), 6 (weight=100), 2 (weight=90)\nVertex 6: 11 (weight=44), 2 (weight=76), 5 (weight=100), 3 (weight=93), 10 (weight=97), 1 (weight=12)\nVertex 7: 4 (weight=88), 1 (weight=36), 5 (weight=55), 11 (weight=92), 10 (weight=86), 9 (weight=74), 3 (weight=78)\nVertex 8: 1 (weight=89), 3 (weight=76), 4 (weight=8), 10 (weight=64), 11 (weight=7)\nVertex 9: 1 (weight=67), 11 (weight=33), 2 (weight=46), 10 (weight=45), 7 (weight=74), 5 (weight=74), 3 (weight=6)\nVertex 10: 5 (weight=23), 11 (weight=41), 2 (weight=95), 9 (weight=45), 3 (weight=73), 7 (weight=86), 8 (weight=64), 4 (weight=88), 6 (weight=97)\nVertex 11: 9 (weight=33), 2 (weight=29), 6 (weight=44), 10 (weight=41), 7 (weight=92), 4 (weight=81), 5 (weight=71), 8 (weight=7)\n",
    "graph_output": "11 40\n1 4 87\n1 9 67\n1 5 44\n1 8 89\n9 11 33\n5 10 23\n11 2 29\n11 6 44\n4 7 88\n8 3 76\n10 11 41\n7 1 36\n6 2 76\n5 7 55\n2 10 95\n4 5 64\n2 9 46\n10 9 45\n1 2 59\n11 7 92\n10 3 73\n8 4 8\n10 7 86\n11 4 81\n9 7 74\n5 9 74\n8 10 64\n11 5 71\n5 6 100\n9 3 6\n3 7 78\n2 4 13\n6 3 93\n3 4 41\n10 4 88\n6 10 97\n5 2 90\n3 2 35\n8 11 7\n6 1 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 225,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 70 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   1   1   0   1   1   1   1   1   1   1   0   1 \n 2 |  1   0   1   1   0   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1 \n 4 |  0   1   1   0   1   1   1   1   1   1   1   1   1 \n 5 |  1   0   1   1   0   1   1   0   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   0   0   1   1 \n 8 |  1   1   1   1   0   1   1   0   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   0   0   1 \n10 |  1   1   1   1   1   1   0   1   1   0   1   1   1 \n11 |  1   1   1   1   1   1   0   1   0   1   0   1   1 \n12 |  0   1   1   1   1   1   1   1   0   1   1   0   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "13 70\n3 11\n2 4\n1 7\n1 11\n3 6\n4 9\n8 1\n3 2\n3 13\n7 9\n3 7\n13 10\n10 5\n10 4\n6 5\n13 5\n12 13\n1 13\n4 12\n11 13\n8 13\n4 11\n8 9\n8 2\n3 12\n5 4\n2 13\n8 6\n10 9\n4 6\n8 10\n2 12\n5 11\n4 3\n10 12\n8 4\n9 13\n5 3\n10 1\n11 6\n11 8\n6 9\n4 7\n2 10\n9 3\n6 2\n9 5\n7 12\n1 9\n10 11\n1 3\n7 5\n6 7\n3 10\n8 7\n3 8\n11 12\n10 6\n9 2\n2 11\n7 2\n12 6\n1 2\n12 8\n1 5\n13 7\n5 12\n13 4\n6 13\n6 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 204,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 4 (source) to vertex 5 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 22 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 9 (capacity=6), 12 (capacity=10), 10 (capacity=9), 3 (capacity=7)\nVertex 2: 9 (capacity=5), 3 (capacity=4)\nVertex 3: 11 (capacity=9), 1 (capacity=7), 2 (capacity=4), 7 (capacity=2)\nVertex 4: 12 (capacity=5)\nVertex 5: 9 (capacity=9), 11 (capacity=7), 7 (capacity=9)\nVertex 6: 11 (capacity=1), 8 (capacity=4)\nVertex 7: 8 (capacity=10), 10 (capacity=7), 5 (capacity=9), 3 (capacity=2)\nVertex 8: 6 (capacity=4), 7 (capacity=10), 9 (capacity=10), 11 (capacity=5), 12 (capacity=4)\nVertex 9: 1 (capacity=6), 5 (capacity=9), 2 (capacity=5), 8 (capacity=10), 12 (capacity=7)\nVertex 10: 1 (capacity=9), 7 (capacity=7), 11 (capacity=4), 12 (capacity=1)\nVertex 11: 5 (capacity=7), 6 (capacity=1), 3 (capacity=9), 10 (capacity=4), 8 (capacity=5)\nVertex 12: 1 (capacity=10), 4 (capacity=5), 8 (capacity=4), 10 (capacity=1), 9 (capacity=7)\n",
    "graph_output": "12 22\n1 9 6\n9 5 9\n9 2 5\n5 11 7\n1 12 10\n11 6 1\n6 8 4\n12 4 5\n1 10 9\n8 7 10\n11 3 9\n7 10 7\n1 3 7\n2 3 4\n7 5 9\n10 11 4\n9 8 10\n7 3 2\n11 8 5\n12 8 4\n12 10 1\n12 9 7\n",
    "vertices": [
      4,
      5
    ],
    "answer": 5,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 25 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 12, 2\nVertex 2: 3, 8, 12, 10, 1, 4\nVertex 3: 4, 2, 16, 10\nVertex 4: 12, 6, 3, 11, 16, 10, 2\nVertex 5: 12, 9\nVertex 6: 4, 8, 14\nVertex 7: 9\nVertex 8: 6, 2, 10\nVertex 9: 5, 7, 13\nVertex 10: 4, 2, 8, 3\nVertex 11: 4, 16\nVertex 12: 1, 13, 4, 5, 2\nVertex 13: 12, 9\nVertex 14: 6, 15\nVertex 15: 14\nVertex 16: 4, 11, 3\n",
    "graph_output": "16 25\n1 12\n12 13\n12 4\n12 5\n4 6\n4 3\n6 8\n3 2\n5 9\n4 11\n6 14\n9 7\n4 16\n14 15\n4 10\n2 8\n2 12\n2 10\n10 8\n16 11\n1 2\n9 13\n3 16\n3 10\n2 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 9 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (7\u00d77):\n\n      1   2   3   4   5   6   7\n   ----------------------------\n 1 |  0   0   1   1   1   1   0 \n 2 |  0   0   0   1   0   1   1 \n 3 |  1   0   0   0   0   0   0 \n 4 |  1   1   0   0   0   1   0 \n 5 |  1   0   0   0   0   0   0 \n 6 |  1   1   0   1   0   0   1 \n 7 |  0   1   0   0   0   1   0 \n",
    "graph_output": "7 9\n1 4\n1 3\n4 6\n6 2\n1 5\n2 7\n7 6\n4 2\n6 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 21,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 7 vertices and 9 edges\n\nEdges (Format: Node Node):\n1 4\n1 3\n4 6\n6 2\n1 5\n2 7\n7 6\n4 2\n6 1\n",
    "graph_output": "7 9\n1 4\n1 3\n4 6\n6 2\n1 5\n2 7\n7 6\n4 2\n6 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 21,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 88 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 12 with a weight of 46.\nThere is an edge between vertex 12 and vertex 7 with a weight of 60.\nThere is an edge between vertex 7 and vertex 15 with a weight of 6.\nThere is an edge between vertex 15 and vertex 9 with a weight of 43.\nThere is an edge between vertex 12 and vertex 4 with a weight of 59.\nThere is an edge between vertex 12 and vertex 10 with a weight of 55.\nThere is an edge between vertex 7 and vertex 11 with a weight of 7.\nThere is an edge between vertex 15 and vertex 14 with a weight of 26.\nThere is an edge between vertex 9 and vertex 3 with a weight of 93.\nThere is an edge between vertex 14 and vertex 8 with a weight of 7.\nThere is an edge between vertex 12 and vertex 13 with a weight of 48.\nThere is an edge between vertex 11 and vertex 5 with a weight of 62.\nThere is an edge between vertex 13 and vertex 6 with a weight of 85.\nThere is an edge between vertex 15 and vertex 2 with a weight of 84.\nThere is an edge between vertex 14 and vertex 3 with a weight of 57.\nThere is an edge between vertex 3 and vertex 1 with a weight of 43.\nThere is an edge between vertex 7 and vertex 4 with a weight of 41.\nThere is an edge between vertex 3 and vertex 5 with a weight of 9.\nThere is an edge between vertex 5 and vertex 4 with a weight of 90.\nThere is an edge between vertex 12 and vertex 6 with a weight of 60.\nThere is an edge between vertex 14 and vertex 10 with a weight of 48.\nThere is an edge between vertex 4 and vertex 2 with a weight of 18.\nThere is an edge between vertex 13 and vertex 4 with a weight of 66.\nThere is an edge between vertex 15 and vertex 4 with a weight of 54.\nThere is an edge between vertex 5 and vertex 13 with a weight of 59.\nThere is an edge between vertex 7 and vertex 2 with a weight of 91.\nThere is an edge between vertex 11 and vertex 14 with a weight of 60.\nThere is an edge between vertex 8 and vertex 3 with a weight of 80.\nThere is an edge between vertex 11 and vertex 8 with a weight of 90.\nThere is an edge between vertex 12 and vertex 2 with a weight of 6.\nThere is an edge between vertex 5 and vertex 10 with a weight of 88.\nThere is an edge between vertex 11 and vertex 6 with a weight of 5.\nThere is an edge between vertex 2 and vertex 5 with a weight of 65.\nThere is an edge between vertex 3 and vertex 7 with a weight of 70.\nThere is an edge between vertex 14 and vertex 9 with a weight of 39.\nThere is an edge between vertex 11 and vertex 1 with a weight of 41.\nThere is an edge between vertex 8 and vertex 5 with a weight of 42.\nThere is an edge between vertex 9 and vertex 12 with a weight of 81.\nThere is an edge between vertex 7 and vertex 8 with a weight of 43.\nThere is an edge between vertex 4 and vertex 8 with a weight of 17.\nThere is an edge between vertex 9 and vertex 5 with a weight of 85.\nThere is an edge between vertex 11 and vertex 15 with a weight of 17.\nThere is an edge between vertex 8 and vertex 6 with a weight of 28.\nThere is an edge between vertex 1 and vertex 13 with a weight of 72.\nThere is an edge between vertex 11 and vertex 10 with a weight of 30.\nThere is an edge between vertex 4 and vertex 3 with a weight of 89.\nThere is an edge between vertex 14 and vertex 6 with a weight of 100.\nThere is an edge between vertex 6 and vertex 4 with a weight of 12.\nThere is an edge between vertex 3 and vertex 12 with a weight of 14.\nThere is an edge between vertex 8 and vertex 1 with a weight of 35.\nThere is an edge between vertex 6 and vertex 5 with a weight of 90.\nThere is an edge between vertex 11 and vertex 12 with a weight of 7.\nThere is an edge between vertex 14 and vertex 7 with a weight of 39.\nThere is an edge between vertex 10 and vertex 15 with a weight of 53.\nThere is an edge between vertex 13 and vertex 15 with a weight of 25.\nThere is an edge between vertex 15 and vertex 3 with a weight of 2.\nThere is an edge between vertex 11 and vertex 9 with a weight of 66.\nThere is an edge between vertex 5 and vertex 1 with a weight of 26.\nThere is an edge between vertex 5 and vertex 7 with a weight of 45.\nThere is an edge between vertex 10 and vertex 2 with a weight of 31.\nThere is an edge between vertex 7 and vertex 9 with a weight of 61.\nThere is an edge between vertex 10 and vertex 9 with a weight of 23.\nThere is an edge between vertex 7 and vertex 10 with a weight of 57.\nThere is an edge between vertex 13 and vertex 7 with a weight of 9.\nThere is an edge between vertex 13 and vertex 11 with a weight of 93.\nThere is an edge between vertex 5 and vertex 14 with a weight of 28.\nThere is an edge between vertex 15 and vertex 12 with a weight of 49.\nThere is an edge between vertex 2 and vertex 13 with a weight of 35.\nThere is an edge between vertex 1 and vertex 4 with a weight of 54.\nThere is an edge between vertex 6 and vertex 2 with a weight of 48.\nThere is an edge between vertex 12 and vertex 5 with a weight of 65.\nThere is an edge between vertex 6 and vertex 7 with a weight of 33.\nThere is an edge between vertex 15 and vertex 5 with a weight of 78.\nThere is an edge between vertex 9 and vertex 2 with a weight of 22.\nThere is an edge between vertex 9 and vertex 4 with a weight of 90.\nThere is an edge between vertex 2 and vertex 14 with a weight of 56.\nThere is an edge between vertex 11 and vertex 3 with a weight of 42.\nThere is an edge between vertex 1 and vertex 6 with a weight of 24.\nThere is an edge between vertex 8 and vertex 15 with a weight of 72.\nThere is an edge between vertex 4 and vertex 11 with a weight of 4.\nThere is an edge between vertex 6 and vertex 9 with a weight of 20.\nThere is an edge between vertex 8 and vertex 10 with a weight of 34.\nThere is an edge between vertex 2 and vertex 8 with a weight of 94.\nThere is an edge between vertex 1 and vertex 15 with a weight of 46.\nThere is an edge between vertex 1 and vertex 2 with a weight of 12.\nThere is an edge between vertex 9 and vertex 8 with a weight of 59.\nThere is an edge between vertex 14 and vertex 4 with a weight of 24.\nThere is an edge between vertex 15 and vertex 6 with a weight of 5.\n",
    "graph_output": "15 88\n1 12 46\n12 7 60\n7 15 6\n15 9 43\n12 4 59\n12 10 55\n7 11 7\n15 14 26\n9 3 93\n14 8 7\n12 13 48\n11 5 62\n13 6 85\n15 2 84\n14 3 57\n3 1 43\n7 4 41\n3 5 9\n5 4 90\n12 6 60\n14 10 48\n4 2 18\n13 4 66\n15 4 54\n5 13 59\n7 2 91\n11 14 60\n8 3 80\n11 8 90\n12 2 6\n5 10 88\n11 6 5\n2 5 65\n3 7 70\n14 9 39\n11 1 41\n8 5 42\n9 12 81\n7 8 43\n4 8 17\n9 5 85\n11 15 17\n8 6 28\n1 13 72\n11 10 30\n4 3 89\n14 6 100\n6 4 12\n3 12 14\n8 1 35\n6 5 90\n11 12 7\n14 7 39\n10 15 53\n13 15 25\n15 3 2\n11 9 66\n5 1 26\n5 7 45\n10 2 31\n7 9 61\n10 9 23\n7 10 57\n13 7 9\n13 11 93\n5 14 28\n15 12 49\n2 13 35\n1 4 54\n6 2 48\n12 5 65\n6 7 33\n15 5 78\n9 2 22\n9 4 90\n2 14 56\n11 3 42\n1 6 24\n8 15 72\n4 11 4\n6 9 20\n8 10 34\n2 8 94\n1 15 46\n1 2 12\n9 8 59\n14 4 24\n15 6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 132,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 17 vertices and 116 edges\n\nEdges (Format: Node Node):\n1 9\n9 2\n2 7\n2 3\n3 12\n9 14\n2 4\n4 15\n2 6\n1 13\n14 10\n13 8\n10 5\n5 17\n13 11\n17 16\n17 13\n15 5\n11 5\n3 17\n7 11\n7 1\n5 2\n7 17\n5 12\n15 7\n4 7\n3 10\n14 4\n8 3\n11 1\n8 10\n3 4\n9 4\n1 5\n15 17\n12 7\n7 5\n8 5\n3 14\n9 17\n9 3\n12 17\n12 6\n8 12\n10 11\n3 1\n12 2\n4 5\n17 1\n16 7\n16 2\n6 17\n2 13\n16 15\n4 13\n11 6\n17 11\n8 14\n16 5\n3 16\n15 8\n6 13\n10 4\n11 9\n7 14\n9 10\n10 1\n4 11\n12 11\n17 4\n15 13\n7 3\n6 1\n14 11\n9 5\n4 8\n7 8\n11 15\n7 9\n16 4\n16 6\n1 16\n13 3\n15 10\n12 14\n9 15\n5 3\n4 1\n4 6\n15 6\n4 12\n13 16\n15 3\n12 16\n14 2\n7 13\n6 9\n12 10\n12 15\n1 8\n14 5\n14 6\n2 15\n2 11\n8 9\n2 8\n11 8\n15 1\n9 16\n8 6\n7 10\n1 14\n10 13\n16 8\n3 11\n",
    "graph_output": "17 116\n1 9\n9 2\n2 7\n2 3\n3 12\n9 14\n2 4\n4 15\n2 6\n1 13\n14 10\n13 8\n10 5\n5 17\n13 11\n17 16\n17 13\n15 5\n11 5\n3 17\n7 11\n7 1\n5 2\n7 17\n5 12\n15 7\n4 7\n3 10\n14 4\n8 3\n11 1\n8 10\n3 4\n9 4\n1 5\n15 17\n12 7\n7 5\n8 5\n3 14\n9 17\n9 3\n12 17\n12 6\n8 12\n10 11\n3 1\n12 2\n4 5\n17 1\n16 7\n16 2\n6 17\n2 13\n16 15\n4 13\n11 6\n17 11\n8 14\n16 5\n3 16\n15 8\n6 13\n10 4\n11 9\n7 14\n9 10\n10 1\n4 11\n12 11\n17 4\n15 13\n7 3\n6 1\n14 11\n9 5\n4 8\n7 8\n11 15\n7 9\n16 4\n16 6\n1 16\n13 3\n15 10\n12 14\n9 15\n5 3\n4 1\n4 6\n15 6\n4 12\n13 16\n15 3\n12 16\n14 2\n7 13\n6 9\n12 10\n12 15\n1 8\n14 5\n14 6\n2 15\n2 11\n8 9\n2 8\n11 8\n15 1\n9 16\n8 6\n7 10\n1 14\n10 13\n16 8\n3 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 11 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 9 (weight=38), 2 (weight=20), 11 (weight=30)\nVertex 2: 1 (weight=20), 10 (weight=51)\nVertex 3: 9 (weight=61), 6 (weight=43), 8 (weight=11)\nVertex 4: 7 (weight=15)\nVertex 5: 10 (weight=10)\nVertex 6: 3 (weight=43)\nVertex 7: 11 (weight=77), 4 (weight=15)\nVertex 8: 11 (weight=82), 3 (weight=11)\nVertex 9: 1 (weight=38), 3 (weight=61)\nVertex 10: 2 (weight=51), 5 (weight=10)\nVertex 11: 1 (weight=30), 7 (weight=77), 8 (weight=82)\n",
    "graph_output": "11 11\n1 9 38\n1 2 20\n2 10 51\n1 11 30\n9 3 61\n3 6 43\n11 7 77\n10 5 10\n7 4 15\n11 8 82\n3 8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 377,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 19 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 5, 7, 4, 6\nVertex 2: 4, 7, 8, 5, 6\nVertex 3: 6, 7, 5, 4\nVertex 4: 2, 3, 1, 8\nVertex 5: 1, 3, 7, 2, 6\nVertex 6: 7, 3, 1, 2, 5\nVertex 7: 6, 2, 1, 3, 5, 8\nVertex 8: 1, 2, 4, 7\n",
    "graph_output": "8 19\n2 4\n6 7\n8 1\n7 2\n1 5\n3 6\n7 1\n7 3\n5 3\n3 4\n4 1\n5 7\n8 2\n6 1\n4 8\n5 2\n7 8\n6 2\n6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 522,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 15 vertices and 88 edges\n\nEdges (Format: Node Node):\n1 14\n1 11\n14 4\n1 15\n4 9\n9 3\n3 6\n9 7\n9 8\n1 12\n15 5\n7 10\n10 13\n10 2\n13 15\n4 3\n8 5\n2 12\n7 12\n5 13\n4 7\n4 13\n10 5\n2 13\n7 13\n15 8\n3 13\n6 4\n4 8\n13 6\n12 8\n8 1\n13 8\n15 7\n4 12\n12 14\n6 7\n3 7\n5 6\n11 7\n12 5\n2 1\n14 6\n3 11\n4 11\n12 10\n5 11\n11 2\n1 3\n2 15\n1 7\n14 5\n11 6\n1 13\n10 3\n10 11\n6 15\n2 6\n2 3\n8 10\n4 1\n7 5\n3 14\n7 2\n9 5\n9 12\n3 15\n14 11\n13 12\n11 12\n15 12\n4 15\n2 14\n14 15\n6 1\n10 9\n5 2\n8 11\n12 3\n12 6\n13 9\n8 6\n14 13\n9 1\n3 8\n2 9\n1 10\n5 3\n",
    "graph_output": "15 88\n1 14\n1 11\n14 4\n1 15\n4 9\n9 3\n3 6\n9 7\n9 8\n1 12\n15 5\n7 10\n10 13\n10 2\n13 15\n4 3\n8 5\n2 12\n7 12\n5 13\n4 7\n4 13\n10 5\n2 13\n7 13\n15 8\n3 13\n6 4\n4 8\n13 6\n12 8\n8 1\n13 8\n15 7\n4 12\n12 14\n6 7\n3 7\n5 6\n11 7\n12 5\n2 1\n14 6\n3 11\n4 11\n12 10\n5 11\n11 2\n1 3\n2 15\n1 7\n14 5\n11 6\n1 13\n10 3\n10 11\n6 15\n2 6\n2 3\n8 10\n4 1\n7 5\n3 14\n7 2\n9 5\n9 12\n3 15\n14 11\n13 12\n11 12\n15 12\n4 15\n2 14\n14 15\n6 1\n10 9\n5 2\n8 11\n12 3\n12 6\n13 9\n8 6\n14 13\n9 1\n3 8\n2 9\n1 10\n5 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 3 (source) to vertex 1 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 40 edges\n\nEdges (Format: Node Node Capacity):\n1 6 8\n1 2 9\n6 11 1\n11 3 8\n1 10 7\n3 5 4\n11 4 9\n3 7 10\n2 8 4\n7 9 6\n9 10 10\n5 6 2\n9 8 7\n10 4 3\n11 10 5\n1 9 8\n6 3 8\n1 3 8\n5 11 10\n4 1 1\n6 8 8\n2 10 5\n7 8 2\n9 4 8\n11 8 2\n10 8 6\n10 5 2\n11 2 9\n4 7 4\n9 2 2\n3 9 5\n7 1 6\n10 7 8\n8 4 6\n2 3 5\n10 3 6\n11 9 3\n1 5 10\n5 9 6\n11 1 8\n",
    "graph_output": "11 40\n1 6 8\n1 2 9\n6 11 1\n11 3 8\n1 10 7\n3 5 4\n11 4 9\n3 7 10\n2 8 4\n7 9 6\n9 10 10\n5 6 2\n9 8 7\n10 4 3\n11 10 5\n1 9 8\n6 3 8\n1 3 8\n5 11 10\n4 1 1\n6 8 8\n2 10 5\n7 8 2\n9 4 8\n11 8 2\n10 8 6\n10 5 2\n11 2 9\n4 7 4\n9 2 2\n3 9 5\n7 1 6\n10 7 8\n8 4 6\n2 3 5\n10 3 6\n11 9 3\n1 5 10\n5 9 6\n11 1 8\n",
    "vertices": [
      3,
      1
    ],
    "answer": 54,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 115 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 15, 11, 4, 6, 14, 12, 2, 5, 10, 16, 8, 7, 3, 9\nVertex 2: 7, 16, 12, 9, 14, 11, 3, 10, 1, 4, 6, 5, 13, 15, 8\nVertex 3: 14, 10, 13, 5, 6, 2, 8, 7, 12, 4, 16, 11, 15, 1, 9\nVertex 4: 13, 16, 15, 1, 9, 2, 3, 8, 11, 7, 12, 14, 5, 6, 10\nVertex 5: 13, 3, 15, 16, 11, 7, 1, 12, 6, 4, 14, 8, 2, 9, 10\nVertex 6: 12, 13, 10, 1, 3, 9, 15, 2, 16, 14, 5, 8, 4\nVertex 7: 13, 2, 12, 11, 16, 3, 9, 5, 14, 4, 8, 10, 1, 15\nVertex 8: 16, 3, 9, 4, 10, 12, 13, 1, 7, 5, 6, 11, 2\nVertex 9: 2, 13, 16, 6, 4, 8, 14, 7, 11, 15, 12, 10, 3, 5, 1\nVertex 10: 3, 16, 14, 12, 6, 2, 11, 8, 1, 13, 9, 7, 15, 4, 5\nVertex 11: 1, 7, 2, 5, 10, 16, 3, 9, 4, 15, 13, 8, 14\nVertex 12: 2, 6, 7, 13, 10, 1, 3, 14, 5, 8, 16, 9, 4, 15\nVertex 13: 1, 14, 5, 7, 4, 3, 9, 6, 12, 8, 10, 16, 15, 11, 2\nVertex 14: 13, 3, 16, 2, 10, 1, 9, 12, 6, 7, 4, 5, 15, 11\nVertex 15: 1, 5, 4, 16, 6, 9, 11, 13, 14, 2, 3, 7, 12, 10\nVertex 16: 2, 8, 10, 4, 14, 9, 15, 7, 5, 11, 3, 6, 1, 12, 13\n",
    "graph_output": "16 115\n1 13\n13 14\n13 5\n14 3\n13 7\n13 4\n1 15\n7 2\n2 16\n1 11\n2 12\n16 8\n3 10\n2 9\n12 6\n16 10\n16 4\n13 3\n3 5\n13 9\n15 5\n16 14\n15 4\n12 7\n14 2\n16 9\n15 16\n13 6\n14 10\n4 1\n13 12\n7 11\n2 11\n12 10\n10 6\n1 6\n16 7\n6 3\n2 3\n6 9\n4 9\n5 16\n10 2\n3 8\n5 11\n1 14\n10 11\n1 12\n15 6\n2 1\n2 4\n6 2\n3 7\n3 12\n16 11\n3 4\n9 8\n9 14\n9 7\n3 16\n12 14\n4 8\n5 7\n11 3\n10 8\n6 16\n1 5\n9 11\n15 9\n12 5\n12 8\n13 8\n1 10\n6 14\n4 11\n1 16\n7 14\n12 16\n7 4\n5 6\n13 10\n15 11\n16 13\n1 8\n8 7\n9 12\n12 4\n4 14\n9 10\n5 4\n15 13\n13 11\n5 14\n14 15\n10 7\n5 8\n5 2\n6 8\n1 7\n11 8\n13 2\n15 2\n15 3\n11 14\n4 6\n1 3\n7 15\n12 15\n9 3\n15 10\n8 2\n9 5\n4 10\n5 10\n1 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 13 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   0   1   0   0   1   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   1   1   0   0   0   0   1   0 \n 4 |  0   0   1   0   1   0   0   1   0   0   0 \n 5 |  1   0   1   1   0   1   1   0   0   0   0 \n 6 |  0   0   0   0   1   0   0   0   1   0   0 \n 7 |  0   0   0   0   1   0   0   1   0   0   0 \n 8 |  1   0   0   1   0   0   1   0   1   0   0 \n 9 |  0   0   0   0   0   1   0   1   0   0   0 \n10 |  0   0   1   0   0   0   0   0   0   0   1 \n11 |  0   0   0   0   0   0   0   0   0   1   0 \n",
    "graph_output": "11 13\n11 10\n8 1\n5 7\n7 8\n6 9\n5 1\n10 3\n9 8\n6 5\n5 3\n8 4\n3 4\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 15 vertices and 92 edges\n\nEdges (Format: Node Node):\n4 15\n15 7\n9 10\n15 6\n11 1\n14 3\n6 5\n15 2\n15 14\n14 4\n14 11\n1 3\n13 4\n2 12\n3 11\n2 8\n9 13\n11 15\n9 2\n2 14\n7 13\n9 6\n6 3\n8 6\n3 15\n7 8\n4 1\n10 14\n7 6\n11 2\n14 9\n10 11\n12 8\n12 15\n12 9\n4 3\n15 5\n14 8\n14 1\n15 8\n12 13\n4 2\n11 9\n14 13\n13 1\n2 1\n11 6\n12 5\n9 7\n10 2\n3 5\n1 12\n13 11\n9 5\n11 12\n3 10\n4 11\n15 10\n13 10\n1 6\n8 9\n8 5\n3 7\n2 5\n6 4\n10 5\n11 5\n14 5\n12 10\n4 8\n8 11\n2 3\n10 8\n1 8\n9 4\n3 12\n7 2\n5 4\n11 7\n7 5\n14 7\n12 14\n13 2\n9 3\n12 7\n6 12\n5 1\n13 6\n14 6\n9 15\n10 4\n4 12\n",
    "graph_output": "15 92\n4 15\n15 7\n9 10\n15 6\n11 1\n14 3\n6 5\n15 2\n15 14\n14 4\n14 11\n1 3\n13 4\n2 12\n3 11\n2 8\n9 13\n11 15\n9 2\n2 14\n7 13\n9 6\n6 3\n8 6\n3 15\n7 8\n4 1\n10 14\n7 6\n11 2\n14 9\n10 11\n12 8\n12 15\n12 9\n4 3\n15 5\n14 8\n14 1\n15 8\n12 13\n4 2\n11 9\n14 13\n13 1\n2 1\n11 6\n12 5\n9 7\n10 2\n3 5\n1 12\n13 11\n9 5\n11 12\n3 10\n4 11\n15 10\n13 10\n1 6\n8 9\n8 5\n3 7\n2 5\n6 4\n10 5\n11 5\n14 5\n12 10\n4 8\n8 11\n2 3\n10 8\n1 8\n9 4\n3 12\n7 2\n5 4\n11 7\n7 5\n14 7\n12 14\n13 2\n9 3\n12 7\n6 12\n5 1\n13 6\n14 6\n9 15\n10 4\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 132 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 9 and vertex 17.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 17 and vertex 13.\nThere is an edge between vertex 17 and vertex 14.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 17 and vertex 6.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 2 and vertex 17.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 8 and vertex 17.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 10 and vertex 17.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 16 and vertex 8.\n",
    "graph_output": "17 132\n1 9\n1 8\n8 5\n9 16\n8 11\n9 13\n5 4\n11 2\n11 15\n9 17\n2 6\n13 12\n11 7\n8 10\n15 14\n15 3\n17 13\n17 14\n14 2\n17 6\n4 10\n2 17\n17 7\n3 8\n3 13\n3 17\n16 1\n4 1\n16 10\n2 5\n14 9\n6 12\n15 13\n3 16\n5 13\n15 5\n3 9\n6 14\n6 9\n16 13\n10 11\n11 12\n6 8\n10 15\n8 9\n2 1\n7 10\n12 15\n12 1\n13 11\n5 16\n6 16\n14 10\n11 14\n17 5\n11 5\n6 1\n11 17\n5 14\n5 12\n16 2\n8 17\n3 12\n7 8\n17 12\n9 4\n12 10\n17 4\n3 14\n12 2\n13 14\n8 12\n14 12\n2 15\n7 2\n6 5\n7 12\n11 16\n4 13\n8 14\n7 15\n10 17\n3 2\n4 16\n11 6\n5 7\n3 7\n2 13\n14 4\n1 11\n13 10\n7 16\n10 9\n3 5\n14 1\n3 6\n4 12\n7 6\n7 14\n14 16\n8 13\n10 6\n15 8\n9 7\n15 6\n9 11\n16 17\n2 9\n12 9\n10 2\n10 5\n12 16\n13 1\n8 4\n15 4\n1 15\n9 15\n3 1\n10 3\n7 4\n6 4\n4 2\n9 5\n10 1\n4 11\n15 16\n1 17\n2 8\n13 6\n11 3\n7 13\n16 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 30 vertices and 29 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 9 and vertex 18.\nThere is an edge between vertex 16 and vertex 21.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 18 and vertex 22.\nThere is an edge between vertex 1 and vertex 20.\nThere is an edge between vertex 21 and vertex 8.\nThere is an edge between vertex 18 and vertex 29.\nThere is an edge between vertex 1 and vertex 25.\nThere is an edge between vertex 25 and vertex 14.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 12 and vertex 19.\nThere is an edge between vertex 25 and vertex 26.\nThere is an edge between vertex 26 and vertex 6.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 18 and vertex 2.\nThere is an edge between vertex 2 and vertex 23.\nThere is an edge between vertex 14 and vertex 28.\nThere is an edge between vertex 5 and vertex 30.\nThere is an edge between vertex 23 and vertex 17.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 7 and vertex 24.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 29 and vertex 11.\nThere is an edge between vertex 2 and vertex 27.\n",
    "graph_output": "30 29\n1 9\n9 16\n9 18\n16 21\n16 12\n18 22\n1 20\n21 8\n18 29\n1 25\n25 14\n8 5\n8 10\n1 3\n16 7\n12 19\n25 26\n26 6\n1 13\n18 2\n2 23\n14 28\n5 30\n23 17\n1 4\n7 24\n7 15\n29 11\n2 27\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 1 (source) to vertex 10 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 11 vertices and 10 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 2 97 10\n1 5 34 9\n2 4 25 1\n4 10 36 5\n5 9 6 10\n4 3 46 4\n4 7 20 2\n5 6 6 10\n3 8 71 1\n4 11 57 5\n",
    "graph_output": "11 10\n1 2 97 10\n1 5 34 9\n2 4 25 1\n4 10 36 5\n5 9 6 10\n4 3 46 4\n4 7 20 2\n5 6 6 10\n3 8 71 1\n4 11 57 5\n",
    "vertices": [
      1,
      10
    ],
    "answer": 158,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 16 vertices and 93 edges\n\nEdges (Format: Node Node):\n1 4\n4 16\n16 14\n16 2\n4 7\n16 12\n1 6\n14 13\n13 5\n7 3\n16 8\n14 15\n7 10\n2 11\n2 9\n7 16\n1 12\n3 4\n16 11\n14 2\n12 11\n6 15\n12 13\n1 7\n15 12\n1 11\n13 7\n11 14\n16 13\n4 10\n8 2\n11 9\n6 14\n10 12\n10 9\n9 14\n11 4\n4 13\n6 5\n4 5\n13 1\n2 6\n1 10\n3 15\n2 1\n6 16\n12 8\n8 3\n13 15\n1 3\n14 7\n5 9\n3 9\n2 4\n2 12\n1 8\n5 8\n6 8\n10 6\n9 16\n5 3\n13 9\n8 11\n5 16\n9 4\n5 11\n9 15\n2 15\n11 7\n9 7\n2 10\n15 4\n6 7\n12 7\n5 12\n13 8\n15 5\n7 2\n15 10\n4 12\n16 1\n1 15\n10 16\n14 8\n12 3\n9 1\n10 11\n11 15\n10 13\n6 11\n15 7\n11 13\n15 8\n",
    "graph_output": "16 93\n1 4\n4 16\n16 14\n16 2\n4 7\n16 12\n1 6\n14 13\n13 5\n7 3\n16 8\n14 15\n7 10\n2 11\n2 9\n7 16\n1 12\n3 4\n16 11\n14 2\n12 11\n6 15\n12 13\n1 7\n15 12\n1 11\n13 7\n11 14\n16 13\n4 10\n8 2\n11 9\n6 14\n10 12\n10 9\n9 14\n11 4\n4 13\n6 5\n4 5\n13 1\n2 6\n1 10\n3 15\n2 1\n6 16\n12 8\n8 3\n13 15\n1 3\n14 7\n5 9\n3 9\n2 4\n2 12\n1 8\n5 8\n6 8\n10 6\n9 16\n5 3\n13 9\n8 11\n5 16\n9 4\n5 11\n9 15\n2 15\n11 7\n9 7\n2 10\n15 4\n6 7\n12 7\n5 12\n13 8\n15 5\n7 2\n15 10\n4 12\n16 1\n1 15\n10 16\n14 8\n12 3\n9 1\n10 11\n11 15\n10 13\n6 11\n15 7\n11 13\n15 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 13 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 5 and vertex 4.\n",
    "graph_output": "12 13\n9 7\n5 1\n6 8\n8 11\n4 8\n10 1\n10 4\n4 1\n8 10\n6 9\n3 9\n5 11\n5 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 87 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 15 (weight=66), 11 (weight=42), 12 (weight=68), 10 (weight=72), 14 (weight=44), 2 (weight=63), 3 (weight=71), 8 (weight=85), 7 (weight=62), 4 (weight=65), 13 (weight=41), 9 (weight=93), 5 (weight=46), 6 (weight=41)\nVertex 2: 13 (weight=34), 12 (weight=74), 10 (weight=52), 8 (weight=36), 9 (weight=47), 3 (weight=91), 1 (weight=63), 7 (weight=88), 5 (weight=38), 6 (weight=37), 4 (weight=51), 14 (weight=44), 11 (weight=98)\nVertex 3: 7 (weight=15), 5 (weight=21), 11 (weight=32), 2 (weight=91), 15 (weight=68), 1 (weight=71), 4 (weight=63), 14 (weight=97), 9 (weight=20)\nVertex 4: 13 (weight=19), 6 (weight=84), 15 (weight=1), 10 (weight=15), 3 (weight=63), 8 (weight=10), 1 (weight=65), 2 (weight=51), 9 (weight=76), 11 (weight=6), 12 (weight=11), 7 (weight=60), 5 (weight=55)\nVertex 5: 3 (weight=21), 6 (weight=41), 14 (weight=36), 2 (weight=38), 15 (weight=48), 7 (weight=9), 4 (weight=55), 1 (weight=46), 10 (weight=28)\nVertex 6: 5 (weight=41), 11 (weight=41), 4 (weight=84), 9 (weight=89), 8 (weight=93), 7 (weight=60), 15 (weight=14), 14 (weight=79), 2 (weight=37), 13 (weight=89), 10 (weight=36), 12 (weight=35), 1 (weight=41)\nVertex 7: 11 (weight=48), 3 (weight=15), 12 (weight=71), 10 (weight=91), 15 (weight=67), 2 (weight=88), 1 (weight=62), 6 (weight=60), 14 (weight=29), 13 (weight=66), 5 (weight=9), 4 (weight=60), 9 (weight=86), 8 (weight=24)\nVertex 8: 2 (weight=36), 13 (weight=29), 10 (weight=78), 12 (weight=60), 1 (weight=85), 6 (weight=93), 4 (weight=10), 14 (weight=65), 11 (weight=37), 7 (weight=24), 9 (weight=25)\nVertex 9: 13 (weight=22), 2 (weight=47), 6 (weight=89), 11 (weight=20), 10 (weight=81), 4 (weight=76), 7 (weight=86), 1 (weight=93), 14 (weight=21), 8 (weight=25), 3 (weight=20), 12 (weight=85)\nVertex 10: 2 (weight=52), 15 (weight=53), 1 (weight=72), 7 (weight=91), 11 (weight=7), 8 (weight=78), 4 (weight=15), 9 (weight=81), 6 (weight=36), 5 (weight=28)\nVertex 11: 1 (weight=42), 7 (weight=48), 14 (weight=42), 3 (weight=32), 6 (weight=41), 10 (weight=7), 9 (weight=20), 12 (weight=13), 4 (weight=6), 15 (weight=9), 13 (weight=82), 8 (weight=37), 2 (weight=98)\nVertex 12: 2 (weight=74), 7 (weight=71), 1 (weight=68), 8 (weight=60), 11 (weight=13), 14 (weight=1), 13 (weight=83), 4 (weight=11), 6 (weight=35), 9 (weight=85)\nVertex 13: 15 (weight=4), 2 (weight=34), 9 (weight=22), 4 (weight=19), 8 (weight=29), 7 (weight=66), 14 (weight=27), 12 (weight=83), 1 (weight=41), 6 (weight=89), 11 (weight=82)\nVertex 14: 11 (weight=42), 1 (weight=44), 15 (weight=67), 5 (weight=36), 12 (weight=1), 3 (weight=97), 6 (weight=79), 7 (weight=29), 13 (weight=27), 2 (weight=44), 8 (weight=65), 9 (weight=21)\nVertex 15: 1 (weight=66), 13 (weight=4), 10 (weight=53), 14 (weight=67), 3 (weight=68), 4 (weight=1), 7 (weight=67), 6 (weight=14), 5 (weight=48), 11 (weight=9)\n",
    "graph_output": "15 87\n1 15 66\n15 13 4\n13 2 34\n1 11 42\n11 7 48\n7 3 15\n3 5 21\n5 6 41\n13 9 22\n2 12 74\n13 4 19\n11 14 42\n2 10 52\n2 8 36\n11 3 32\n15 10 53\n12 7 71\n2 9 47\n1 12 68\n11 6 41\n8 13 29\n1 10 72\n14 1 44\n7 10 91\n14 15 67\n4 6 84\n11 10 7\n3 2 91\n6 9 89\n15 3 68\n1 2 63\n8 10 78\n15 4 1\n1 3 71\n10 4 15\n7 15 67\n8 12 60\n9 11 20\n8 1 85\n14 5 36\n8 6 93\n7 2 88\n7 1 62\n5 2 38\n12 11 13\n6 7 60\n3 4 63\n15 6 14\n14 12 1\n15 5 48\n3 14 97\n14 6 79\n4 8 10\n7 14 29\n13 7 66\n6 2 37\n4 1 65\n10 9 81\n14 13 27\n4 2 51\n4 9 76\n4 11 6\n13 12 83\n14 2 44\n11 15 9\n13 1 41\n4 12 11\n7 5 9\n14 8 65\n6 13 89\n13 11 82\n10 6 36\n7 4 60\n9 7 86\n8 11 37\n9 1 93\n7 8 24\n11 2 98\n6 12 35\n4 5 55\n5 1 46\n6 1 41\n14 9 21\n8 9 25\n3 9 20\n12 9 85\n10 5 28\n",
    "vertices": [
      null,
      null
    ],
    "answer": 193,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 25 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   0   1   1   0   1   0   0   1   0   1   0   0 \n 2 |  1   0   0   0   0   1   0   0   0   1   0   0   0   1   0 \n 3 |  1   0   0   0   0   0   0   0   1   0   0   1   0   1   0 \n 4 |  0   0   0   0   0   0   1   0   1   0   0   0   0   1   0 \n 5 |  1   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 6 |  1   1   0   0   0   0   1   0   1   0   0   0   1   0   0 \n 7 |  0   0   0   1   0   1   0   0   0   0   1   0   0   0   1 \n 8 |  1   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   1   1   0   1   0   0   0   1   0   0   0   0   0 \n10 |  0   1   0   0   0   0   0   0   1   0   0   0   1   0   0 \n11 |  1   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n12 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  1   0   0   0   0   1   0   0   0   1   0   0   0   0   1 \n14 |  0   1   1   1   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   1   0   0   0   0   0   1   0   0 \n",
    "graph_output": "15 25\n1 5\n1 2\n1 8\n1 13\n2 10\n2 6\n13 15\n10 9\n6 7\n2 14\n14 3\n3 12\n14 4\n7 11\n13 6\n1 3\n13 10\n7 15\n5 8\n9 4\n6 9\n1 11\n6 1\n3 9\n4 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 13 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (8\u00d78):\n\n      1   2   3   4   5   6   7   8\n   --------------------------------\n 1 |  0   1   1   1   0   0   1   0 \n 2 |  1   0   0   1   0   0   0   1 \n 3 |  1   0   0   0   0   1   0   1 \n 4 |  1   1   0   0   0   1   1   0 \n 5 |  0   0   0   0   0   1   0   0 \n 6 |  0   0   1   1   1   0   0   1 \n 7 |  1   0   0   1   0   0   0   1 \n 8 |  0   1   1   0   0   1   1   0 \n",
    "graph_output": "8 13\n1 4\n4 6\n6 5\n1 3\n1 7\n4 2\n2 8\n3 8\n2 1\n6 8\n7 8\n4 7\n6 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 399,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 17 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   1   0   0   1   1   0   0   0   0   1   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0 \n 3 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1 \n 4 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 6 |  1   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0 \n 7 |  1   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 9 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n10 |  0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n12 |  1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1 \n14 |  0   1   0   0   0   1   0   0   0   0   0   0   1   0   0   0 \n15 |  0   0   1   0   0   0   0   1   0   0   1   0   0   0   0   0 \n16 |  0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0 \n",
    "graph_output": "16 17\n1 7\n7 9\n1 6\n1 12\n1 3\n3 16\n3 15\n6 14\n16 13\n15 11\n15 8\n6 4\n7 5\n12 10\n14 2\n10 2\n13 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 88 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 11, 8, 14, 6, 2, 13, 3, 12, 15, 10, 7, 4\nVertex 2: 8, 6, 14, 15, 9, 12, 1, 4, 10, 3, 7, 11, 13, 5\nVertex 3: 5, 13, 7, 11, 14, 4, 15, 1, 9, 2, 10\nVertex 4: 14, 13, 7, 6, 3, 11, 2, 8, 9, 10, 12, 15, 1\nVertex 5: 11, 15, 3, 6, 8, 7, 12, 2, 10\nVertex 6: 7, 2, 1, 9, 11, 5, 4, 13, 12, 8\nVertex 7: 8, 6, 11, 4, 3, 10, 14, 5, 12, 13, 15, 9, 2, 1\nVertex 8: 1, 7, 10, 2, 9, 5, 4, 12, 15, 14, 6\nVertex 9: 1, 6, 15, 13, 8, 2, 3, 7, 4, 14, 12, 10\nVertex 10: 8, 13, 7, 15, 2, 14, 12, 1, 4, 3, 5, 9\nVertex 11: 1, 5, 12, 7, 6, 3, 4, 13, 2, 14\nVertex 12: 11, 13, 2, 8, 1, 7, 10, 5, 6, 4, 9, 14\nVertex 13: 3, 10, 4, 9, 12, 6, 14, 1, 7, 15, 11, 2\nVertex 14: 1, 4, 2, 3, 7, 13, 10, 15, 8, 9, 11, 12\nVertex 15: 5, 9, 2, 3, 10, 14, 8, 1, 7, 13, 4\n",
    "graph_output": "15 88\n1 9\n1 11\n1 8\n11 5\n1 14\n5 15\n11 12\n8 7\n8 10\n8 2\n5 3\n3 13\n7 6\n14 4\n6 2\n10 13\n6 1\n14 2\n4 13\n9 6\n11 7\n7 4\n11 6\n7 3\n15 9\n5 6\n13 9\n15 2\n11 3\n6 4\n7 10\n14 3\n9 8\n12 13\n13 6\n9 2\n4 3\n4 11\n2 12\n14 7\n2 1\n5 8\n14 13\n15 3\n2 4\n10 15\n1 13\n4 8\n7 5\n3 1\n12 8\n2 10\n1 12\n7 12\n14 10\n7 13\n3 9\n15 14\n15 8\n15 1\n7 15\n13 15\n9 7\n12 10\n10 1\n8 14\n11 13\n4 9\n12 5\n2 3\n6 12\n6 8\n7 2\n11 2\n10 4\n1 7\n9 14\n10 3\n12 4\n13 2\n11 14\n15 4\n5 2\n1 4\n10 5\n12 9\n9 10\n12 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 18 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13 with a weight of 74.\nThere is an edge between vertex 13 and vertex 3 with a weight of 15.\nThere is an edge between vertex 13 and vertex 10 with a weight of 37.\nThere is an edge between vertex 13 and vertex 6 with a weight of 92.\nThere is an edge between vertex 6 and vertex 2 with a weight of 39.\nThere is an edge between vertex 3 and vertex 5 with a weight of 68.\nThere is an edge between vertex 10 and vertex 12 with a weight of 72.\nThere is an edge between vertex 12 and vertex 11 with a weight of 2.\nThere is an edge between vertex 12 and vertex 9 with a weight of 48.\nThere is an edge between vertex 2 and vertex 7 with a weight of 63.\nThere is an edge between vertex 5 and vertex 8 with a weight of 15.\nThere is an edge between vertex 10 and vertex 4 with a weight of 70.\nThere is an edge between vertex 11 and vertex 1 with a weight of 44.\nThere is an edge between vertex 3 and vertex 9 with a weight of 57.\nThere is an edge between vertex 11 and vertex 4 with a weight of 92.\nThere is an edge between vertex 4 and vertex 8 with a weight of 35.\nThere is an edge between vertex 13 and vertex 12 with a weight of 33.\nThere is an edge between vertex 8 and vertex 2 with a weight of 93.\n",
    "graph_output": "13 18\n1 13 74\n13 3 15\n13 10 37\n13 6 92\n6 2 39\n3 5 68\n10 12 72\n12 11 2\n12 9 48\n2 7 63\n5 8 15\n10 4 70\n11 1 44\n3 9 57\n11 4 92\n4 8 35\n13 12 33\n8 2 93\n",
    "vertices": [
      null,
      null
    ],
    "answer": 492,
    "description_type": "natural"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 22 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 7 (weight=72), 10 (weight=47), 5 (weight=84)\nVertex 2: 7 (weight=3), 8 (weight=36), 6 (weight=2), 5 (weight=89), 9 (weight=1)\nVertex 3: 9 (weight=75), 4 (weight=17)\nVertex 4: 5 (weight=68), 3 (weight=17)\nVertex 5: 1 (weight=84), 8 (weight=46), 11 (weight=66), 4 (weight=68), 10 (weight=35), 7 (weight=60), 2 (weight=89)\nVertex 6: 10 (weight=61), 12 (weight=73), 2 (weight=2)\nVertex 7: 1 (weight=72), 2 (weight=3), 9 (weight=72), 5 (weight=60), 11 (weight=15)\nVertex 8: 5 (weight=46), 2 (weight=36), 12 (weight=19), 11 (weight=35)\nVertex 9: 7 (weight=72), 3 (weight=75), 2 (weight=1)\nVertex 10: 1 (weight=47), 6 (weight=61), 5 (weight=35)\nVertex 11: 5 (weight=66), 7 (weight=15), 8 (weight=35), 12 (weight=87)\nVertex 12: 6 (weight=73), 8 (weight=19), 11 (weight=87)\n",
    "graph_output": "12 22\n1 7 72\n7 2 3\n1 10 47\n7 9 72\n9 3 75\n1 5 84\n5 8 46\n10 6 61\n5 11 66\n5 4 68\n6 12 73\n10 5 35\n2 8 36\n2 6 2\n5 7 60\n2 5 89\n7 11 15\n8 12 19\n9 2 1\n8 11 35\n12 11 87\n3 4 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": 289,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 12 vertices and 22 edges\n\nEdges (Format: Node Node Weight):\n1 7 72\n7 2 3\n1 10 47\n7 9 72\n9 3 75\n1 5 84\n5 8 46\n10 6 61\n5 11 66\n5 4 68\n6 12 73\n10 5 35\n2 8 36\n2 6 2\n5 7 60\n2 5 89\n7 11 15\n8 12 19\n9 2 1\n8 11 35\n12 11 87\n3 4 17\n",
    "graph_output": "12 22\n1 7 72\n7 2 3\n1 10 47\n7 9 72\n9 3 75\n1 5 84\n5 8 46\n10 6 61\n5 11 66\n5 4 68\n6 12 73\n10 5 35\n2 8 36\n2 6 2\n5 7 60\n2 5 89\n7 11 15\n8 12 19\n9 2 1\n8 11 35\n12 11 87\n3 4 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": 289,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 5 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 20 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 8 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 8 and vertex 11 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 6 with a capacity of 6.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 9 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 6 and vertex 5 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 12 with a capacity of 1.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 2 and vertex 3 with a capacity of 4.\nThere is an edge between vertex 7 and vertex 6 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 10 with a capacity of 6.\nThere is an edge between vertex 6 and vertex 2 with a capacity of 2.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 2 with a capacity of 4.\nThere is an edge between vertex 3 and vertex 1 with a capacity of 5.\nThere is an edge between vertex 4 and vertex 6 with a capacity of 4.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 7.\n",
    "graph_output": "12 20\n1 8 1\n8 7 3\n8 11 1\n11 6 6\n1 9 4\n9 10 4\n6 5 10\n9 2 10\n9 12 1\n1 4 6\n2 3 4\n7 6 2\n3 10 9\n7 10 6\n6 2 2\n6 3 9\n5 2 4\n3 1 5\n4 6 4\n2 10 7\n",
    "vertices": [
      5,
      2
    ],
    "answer": 14,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 8 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 14 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   0   1   0   1   0   0   1   1 \n 2 |  1   0   0   0   0   1   0   1   0   0   0 \n 3 |  1   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   1   1   0   0 \n 5 |  1   0   0   0   0   0   0   1   0   0   0 \n 6 |  0   1   0   0   0   0   0   0   1   0   0 \n 7 |  1   0   0   0   0   0   0   0   1   0   0 \n 8 |  0   1   0   1   1   0   0   0   0   0   0 \n 9 |  0   0   0   1   0   1   1   0   0   0   0 \n10 |  1   0   0   0   0   0   0   0   0   0   1 \n11 |  1   0   0   0   0   0   0   0   0   1   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   2   7   0   4   0   9   0   0   6   8 \n 2 |  2   0   0   0   0   7   0   8   0   0   0 \n 3 |  7   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   9   6   0   0 \n 5 |  4   0   0   0   0   0   0   2   0   0   0 \n 6 |  0   7   0   0   0   0   0   0   7   0   0 \n 7 |  9   0   0   0   0   0   0   0   9   0   0 \n 8 |  0   8   0   9   2   0   0   0   0   0   0 \n 9 |  0   0   0   6   0   7   9   0   0   0   0 \n10 |  6   0   0   0   0   0   0   0   0   0   2 \n11 |  8   0   0   0   0   0   0   0   0   2   0 \n",
    "graph_output": "11 14\n1 7 9\n1 2 2\n7 9 9\n2 8 8\n1 11 8\n2 6 7\n8 4 9\n1 10 6\n8 5 2\n1 3 7\n9 4 6\n6 9 7\n10 11 2\n5 1 4\n",
    "vertices": [
      8,
      4
    ],
    "answer": 15,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 130 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   0   1 \n 5 |  1   1   1   1   0   1   0   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   0   1   0   1   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   0 \n10 |  1   0   1   1   1   1   1   1   1   0   0   1   1   1   1   1   1 \n11 |  0   1   1   1   1   1   1   1   1   0   0   1   1   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n16 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   0   1 \n17 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   0 \n",
    "graph_output": "17 130\n1 2\n2 6\n2 7\n6 15\n7 14\n1 3\n7 8\n3 12\n6 16\n16 11\n14 10\n3 9\n3 17\n10 13\n1 4\n4 5\n8 2\n10 4\n6 14\n5 9\n7 10\n4 6\n7 13\n16 7\n15 7\n13 11\n13 9\n6 12\n3 7\n3 8\n1 12\n14 12\n5 13\n6 10\n7 4\n8 11\n16 15\n12 13\n2 16\n5 12\n11 14\n2 15\n13 2\n11 15\n17 5\n10 3\n14 3\n16 1\n17 10\n17 15\n8 15\n13 17\n10 12\n6 7\n9 12\n9 2\n4 17\n5 8\n16 9\n8 14\n4 15\n12 7\n4 13\n1 9\n6 13\n5 6\n8 6\n11 7\n10 15\n5 1\n7 17\n2 4\n1 15\n12 11\n1 14\n2 5\n2 14\n17 6\n14 13\n11 3\n10 16\n9 11\n8 1\n1 6\n4 12\n9 4\n11 2\n3 15\n15 13\n17 16\n16 3\n13 1\n17 1\n14 9\n15 12\n10 1\n4 3\n7 9\n3 2\n15 14\n17 14\n9 10\n16 5\n5 11\n8 13\n15 5\n13 16\n17 8\n8 4\n6 9\n8 9\n3 6\n8 16\n10 5\n15 9\n16 12\n11 17\n12 8\n8 10\n7 1\n14 5\n2 17\n4 11\n12 2\n13 3\n5 3\n12 17\n11 6\n14 16\n4 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 10 and 1 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (31\u00d731):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31\n   ----------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   1   0   0   0   0   1   0   0   1   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 3 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n11 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n15 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n17 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1 \n20 |  1   0   0   0   0   0   1   0   1   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n27 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n30 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n31 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "31 30\n1 11\n11 19\n19 31\n19 21\n1 25\n1 28\n1 20\n25 17\n20 22\n17 3\n11 23\n20 9\n1 15\n22 10\n9 2\n9 29\n22 5\n23 18\n31 13\n20 14\n13 8\n5 24\n3 4\n20 7\n2 27\n25 26\n13 30\n28 16\n26 12\n9 6\n",
    "vertices": [
      10,
      1
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 4 (source) to vertex 12 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 56 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   1   1   1   1   0   1   1   0   1   1   1   1 \n 2 |  1   0   1   1   0   1   1   1   1   1   0   1   1 \n 3 |  1   1   0   0   0   1   1   1   1   1   1   1   0 \n 4 |  1   1   0   0   1   0   0   1   1   1   0   1   0 \n 5 |  1   0   0   1   0   1   1   0   0   1   1   1   1 \n 6 |  0   1   1   0   1   0   1   0   0   1   1   0   1 \n 7 |  1   1   1   0   1   1   0   1   1   1   1   0   1 \n 8 |  1   1   1   1   0   0   1   0   0   1   0   0   1 \n 9 |  0   1   1   1   0   0   1   0   0   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   0   1   1 \n11 |  1   0   1   0   1   1   1   0   1   0   0   1   0 \n12 |  1   1   1   1   1   0   0   0   1   1   1   0   1 \n13 |  1   1   0   0   1   1   1   1   1   1   0   1   0 \n\nCapacity Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   9   1   9   9   0   7   8   0   4   2   1   6 \n 2 |  9   0   6   6   0   2   5   5   8   5   0   9   2 \n 3 |  1   6   0   0   0  10   3   1   8   3   3   3   0 \n 4 |  9   6   0   0   5   0   0   8   4  10   0  10   0 \n 5 |  9   0   0   5   0   1  10   0   0   3   3   3   4 \n 6 |  0   2  10   0   1   0   8   0   0   9   1   0   5 \n 7 |  7   5   3   0  10   8   0   6   9   4   6   0   4 \n 8 |  8   5   1   8   0   0   6   0   0   1   0   0   2 \n 9 |  0   8   8   4   0   0   9   0   0   5   6   4   4 \n10 |  4   5   3  10   3   9   4   1   5   0   0   8   4 \n11 |  2   0   3   0   3   1   6   0   6   0   0   8   0 \n12 |  1   9   3  10   3   0   0   0   4   8   8   0   3 \n13 |  6   2   0   0   4   5   4   2   4   4   0   3   0 \n",
    "graph_output": "13 56\n1 13 6\n1 8 8\n1 2 9\n13 9 4\n2 6 2\n2 10 5\n10 5 3\n10 12 8\n9 3 8\n3 11 3\n8 7 6\n5 4 5\n7 5 10\n10 8 1\n9 2 8\n12 5 3\n7 13 4\n4 1 9\n6 5 1\n9 12 4\n13 12 3\n13 8 2\n4 12 10\n10 9 5\n11 5 3\n9 4 4\n2 7 5\n3 6 10\n2 8 5\n9 11 6\n5 13 4\n11 7 6\n2 4 6\n4 8 8\n7 6 8\n3 12 3\n1 5 9\n8 3 1\n6 13 5\n1 12 1\n3 7 3\n12 2 9\n2 13 2\n10 6 9\n3 2 6\n1 7 7\n10 3 3\n1 3 1\n6 11 1\n10 7 4\n10 4 10\n9 7 9\n1 10 4\n11 1 2\n10 13 4\n12 11 8\n",
    "vertices": [
      4,
      12
    ],
    "answer": 49,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 37 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 9 (weight=49), 11 (weight=59), 8 (weight=3), 2 (weight=27), 3 (weight=40), 5 (weight=92), 6 (weight=24)\nVertex 2: 6 (weight=99), 5 (weight=24), 9 (weight=22), 1 (weight=27), 3 (weight=16), 7 (weight=15), 8 (weight=27), 11 (weight=76)\nVertex 3: 9 (weight=24), 7 (weight=34), 2 (weight=16), 4 (weight=62), 10 (weight=10), 1 (weight=40), 11 (weight=34)\nVertex 4: 9 (weight=81), 6 (weight=57), 5 (weight=26), 10 (weight=20), 8 (weight=37), 11 (weight=18), 3 (weight=62)\nVertex 5: 4 (weight=26), 9 (weight=40), 2 (weight=24), 6 (weight=18), 1 (weight=92)\nVertex 6: 4 (weight=57), 2 (weight=99), 5 (weight=18), 7 (weight=99), 1 (weight=24)\nVertex 7: 3 (weight=34), 11 (weight=5), 10 (weight=99), 8 (weight=23), 2 (weight=15), 6 (weight=99)\nVertex 8: 9 (weight=11), 1 (weight=3), 10 (weight=26), 4 (weight=37), 11 (weight=15), 7 (weight=23), 2 (weight=27)\nVertex 9: 1 (weight=49), 4 (weight=81), 8 (weight=11), 3 (weight=24), 5 (weight=40), 10 (weight=75), 2 (weight=22), 11 (weight=25)\nVertex 10: 11 (weight=62), 9 (weight=75), 8 (weight=26), 4 (weight=20), 7 (weight=99), 3 (weight=10)\nVertex 11: 1 (weight=59), 10 (weight=62), 7 (weight=5), 8 (weight=15), 4 (weight=18), 2 (weight=76), 3 (weight=34), 9 (weight=25)\n",
    "graph_output": "11 37\n1 9 49\n9 4 81\n4 6 57\n9 8 11\n1 11 59\n6 2 99\n11 10 62\n4 5 26\n9 3 24\n3 7 34\n9 5 40\n2 5 24\n7 11 5\n1 8 3\n10 9 75\n8 10 26\n2 9 22\n10 4 20\n4 8 37\n6 5 18\n7 10 99\n11 8 15\n1 2 27\n4 11 18\n7 8 23\n2 3 16\n7 2 15\n8 2 27\n4 3 62\n10 3 10\n3 1 40\n6 7 99\n11 2 76\n5 1 92\n3 11 34\n6 1 24\n9 11 25\n",
    "vertices": [
      null,
      null
    ],
    "answer": 137,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 101 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   0   0   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   0   1   0   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   0   1   1   1   1   0   1   1   1   1   1   1   1 \n 9 |  1   1   0   1   1   1   1   1   0   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n12 |  1   1   1   0   1   1   1   1   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   0   1   1   1   1   1   1   1   1   1   0   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 101\n1 11\n1 15\n11 7\n7 12\n11 10\n1 9\n7 14\n1 5\n15 13\n13 2\n2 6\n13 4\n4 3\n5 8\n10 13\n2 7\n8 1\n7 8\n2 12\n14 10\n14 3\n3 5\n10 8\n6 11\n6 13\n11 15\n13 1\n12 11\n3 15\n8 14\n7 13\n13 11\n11 14\n1 2\n11 2\n15 14\n6 14\n12 8\n10 1\n10 5\n10 12\n4 6\n7 3\n8 15\n4 5\n4 1\n3 13\n15 2\n10 15\n3 6\n6 1\n2 9\n2 10\n7 4\n9 10\n9 14\n15 9\n12 15\n6 8\n14 1\n8 13\n9 7\n12 9\n11 3\n10 7\n15 6\n4 2\n12 6\n5 7\n10 6\n12 5\n15 7\n2 14\n8 2\n15 5\n5 13\n15 4\n9 4\n14 5\n4 8\n13 9\n11 9\n5 2\n5 9\n4 10\n4 11\n12 13\n3 1\n5 11\n3 2\n5 6\n9 8\n3 10\n11 8\n7 6\n1 7\n6 9\n14 12\n13 14\n12 1\n3 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nUndirected Graph with 31 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 22\n22 12\n1 21\n21 7\n12 28\n22 3\n1 15\n1 11\n1 13\n21 29\n1 23\n29 18\n12 10\n29 5\n28 20\n15 25\n1 27\n7 26\n25 4\n12 30\n29 2\n26 19\n2 24\n11 6\n2 17\n3 8\n12 31\n22 16\n24 14\n19 9\n",
    "graph_output": "31 30\n1 22\n22 12\n1 21\n21 7\n12 28\n22 3\n1 15\n1 11\n1 13\n21 29\n1 23\n29 18\n12 10\n29 5\n28 20\n15 25\n1 27\n7 26\n25 4\n12 30\n29 2\n26 19\n2 24\n11 6\n2 17\n3 8\n12 31\n22 16\n24 14\n19 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 16 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 6 and vertex 11.\n",
    "graph_output": "16 16\n1 6\n6 5\n6 16\n5 3\n1 9\n5 4\n1 7\n16 2\n4 8\n8 13\n5 12\n7 10\n8 14\n2 15\n14 11\n6 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 99 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 7 and vertex 3.\n",
    "graph_output": "16 99\n3 1\n6 16\n11 3\n11 7\n9 8\n8 5\n14 11\n11 15\n9 12\n2 13\n1 5\n6 9\n4 5\n16 13\n13 3\n14 9\n9 2\n5 11\n7 9\n14 4\n1 12\n11 1\n15 4\n9 11\n13 5\n7 10\n11 10\n11 13\n9 5\n12 16\n12 7\n2 3\n13 15\n2 5\n7 6\n11 6\n2 15\n7 14\n5 12\n8 10\n6 1\n16 11\n2 14\n16 4\n14 1\n9 3\n4 7\n15 8\n10 12\n10 13\n8 6\n4 3\n8 2\n14 10\n14 13\n9 16\n4 9\n4 10\n15 7\n4 1\n6 14\n16 3\n14 8\n5 15\n16 2\n11 8\n3 12\n2 4\n7 5\n1 2\n7 16\n9 13\n12 2\n15 12\n6 10\n10 5\n13 8\n9 10\n15 3\n13 1\n3 10\n6 13\n13 12\n10 2\n16 14\n9 1\n14 12\n1 8\n14 3\n7 13\n12 6\n3 8\n13 4\n4 12\n8 12\n11 2\n6 2\n4 11\n7 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 49 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 9, 11, 4, 5, 7, 10, 8\nVertex 2: 11, 7, 8, 10, 3, 5, 9, 4, 6\nVertex 3: 9, 6, 7, 8, 2, 4, 5, 11, 10\nVertex 4: 8, 5, 10, 6, 7, 9, 1, 2, 3, 11\nVertex 5: 4, 6, 2, 1, 10, 7, 11, 8, 9, 3\nVertex 6: 10, 3, 5, 1, 4, 9, 8, 2, 11\nVertex 7: 9, 11, 10, 2, 4, 3, 5, 1\nVertex 8: 4, 2, 11, 3, 5, 9, 6, 1\nVertex 9: 10, 3, 7, 11, 1, 4, 2, 5, 6, 8\nVertex 10: 9, 6, 7, 2, 4, 5, 1, 3\nVertex 11: 7, 9, 2, 8, 1, 5, 3, 6, 4\n",
    "graph_output": "11 49\n10 9\n6 10\n9 3\n3 6\n9 7\n8 4\n4 5\n11 7\n5 6\n10 7\n9 11\n2 11\n7 2\n8 2\n2 10\n4 10\n11 8\n6 1\n6 4\n7 4\n9 1\n7 3\n3 8\n11 1\n2 3\n9 4\n2 5\n9 2\n1 4\n2 4\n5 1\n10 5\n5 7\n4 3\n11 5\n5 8\n5 9\n3 5\n6 9\n3 11\n9 8\n6 8\n7 1\n10 1\n3 10\n6 2\n11 6\n11 4\n8 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 16 and vertex 1 are connected.\n\nUndirected Graph with 16 vertices and 89 edges\n\nEdges (Format: Node Node):\n8 1\n16 10\n14 16\n3 7\n14 13\n4 8\n11 14\n10 9\n2 16\n5 6\n3 10\n13 1\n13 11\n8 16\n12 2\n11 2\n3 6\n9 16\n4 1\n4 10\n14 12\n5 7\n12 10\n1 10\n16 13\n13 12\n3 4\n8 5\n1 14\n1 15\n4 9\n10 2\n9 12\n6 8\n11 4\n5 16\n6 14\n14 4\n15 14\n12 15\n13 15\n16 3\n9 11\n1 5\n6 12\n7 14\n8 2\n2 1\n12 11\n13 9\n3 12\n7 8\n3 9\n2 15\n16 12\n7 13\n6 4\n2 9\n6 15\n4 2\n7 4\n5 9\n8 12\n9 6\n11 6\n11 7\n10 5\n8 11\n10 6\n15 10\n15 4\n7 1\n14 10\n7 9\n3 5\n13 5\n8 3\n5 2\n12 5\n16 6\n11 1\n11 5\n9 8\n16 15\n4 12\n3 2\n11 16\n2 14\n7 6\n",
    "graph_output": "16 89\n8 1\n16 10\n14 16\n3 7\n14 13\n4 8\n11 14\n10 9\n2 16\n5 6\n3 10\n13 1\n13 11\n8 16\n12 2\n11 2\n3 6\n9 16\n4 1\n4 10\n14 12\n5 7\n12 10\n1 10\n16 13\n13 12\n3 4\n8 5\n1 14\n1 15\n4 9\n10 2\n9 12\n6 8\n11 4\n5 16\n6 14\n14 4\n15 14\n12 15\n13 15\n16 3\n9 11\n1 5\n6 12\n7 14\n8 2\n2 1\n12 11\n13 9\n3 12\n7 8\n3 9\n2 15\n16 12\n7 13\n6 4\n2 9\n6 15\n4 2\n7 4\n5 9\n8 12\n9 6\n11 6\n11 7\n10 5\n8 11\n10 6\n15 10\n15 4\n7 1\n14 10\n7 9\n3 5\n13 5\n8 3\n5 2\n12 5\n16 6\n11 1\n11 5\n9 8\n16 15\n4 12\n3 2\n11 16\n2 14\n7 6\n",
    "vertices": [
      16,
      1
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 23 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0 \n 2 |  0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   1   1 \n 3 |  0   0   0   0   0   1   0   0   0   0   0   1   1   0   0   0   1 \n 4 |  0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0 \n 6 |  0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   1 \n 7 |  0   0   0   0   0   1   0   0   1   0   0   0   0   1   0   0   0 \n 8 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0 \n11 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  1   0   1   0   0   0   0   0   0   1   0   0   1   0   0   0   1 \n13 |  0   0   1   1   0   0   0   0   0   0   0   1   0   0   0   0   0 \n14 |  1   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n16 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1 \n17 |  0   1   1   0   0   1   0   0   0   0   0   1   0   0   0   1   0 \n",
    "graph_output": "17 23\n12 17\n4 10\n3 13\n12 1\n16 17\n5 11\n9 7\n3 6\n2 8\n3 12\n16 15\n13 4\n7 6\n2 17\n14 7\n9 5\n1 14\n17 6\n3 17\n10 12\n2 16\n12 13\n2 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 19 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 10\nVertex 2: 12\nVertex 3: 11, 6, 8\nVertex 4: 10, 13\nVertex 5: 11, 7, 15\nVertex 6: 3\nVertex 7: 14, 5, 12, 8\nVertex 8: 3, 7\nVertex 9: No connections\nVertex 10: 4, 1, 11, 13\nVertex 11: 13, 3, 1, 5, 15, 10\nVertex 12: 14, 2, 7\nVertex 13: 11, 4, 10\nVertex 14: 7, 12\nVertex 15: 11, 5\nVertex 16: No connections\n",
    "graph_output": "16 19\n11 13\n11 3\n1 11\n14 7\n4 10\n5 11\n6 3\n12 14\n5 7\n12 2\n7 12\n4 13\n1 10\n3 8\n8 7\n11 15\n11 10\n15 5\n10 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 11 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 64 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 2 and vertex 5 with a capacity of 3.\nThere is an edge between vertex 2 and vertex 12 with a capacity of 6.\nThere is an edge between vertex 2 and vertex 11 with a capacity of 6.\nThere is an edge between vertex 5 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 5 and vertex 4 with a capacity of 7.\nThere is an edge between vertex 8 and vertex 9 with a capacity of 1.\nThere is an edge between vertex 7 and vertex 6 with a capacity of 1.\nThere is an edge between vertex 7 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 11 with a capacity of 4.\nThere is an edge between vertex 11 and vertex 6 with a capacity of 6.\nThere is an edge between vertex 11 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 8 and vertex 1 with a capacity of 3.\nThere is an edge between vertex 5 and vertex 12 with a capacity of 9.\nThere is an edge between vertex 12 and vertex 10 with a capacity of 8.\nThere is an edge between vertex 7 and vertex 5 with a capacity of 7.\nThere is an edge between vertex 11 and vertex 3 with a capacity of 3.\nThere is an edge between vertex 8 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 12 and vertex 1 with a capacity of 8.\nThere is an edge between vertex 11 and vertex 12 with a capacity of 7.\nThere is an edge between vertex 6 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 11 with a capacity of 8.\nThere is an edge between vertex 11 and vertex 5 with a capacity of 8.\nThere is an edge between vertex 8 and vertex 3 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 2 with a capacity of 3.\nThere is an edge between vertex 12 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 3.\nThere is an edge between vertex 9 and vertex 2 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 12 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 8.\nThere is an edge between vertex 10 and vertex 6 with a capacity of 4.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 1 with a capacity of 8.\nThere is an edge between vertex 5 and vertex 1 with a capacity of 6.\nThere is an edge between vertex 3 and vertex 2 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 4 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 11 with a capacity of 8.\nThere is an edge between vertex 9 and vertex 4 with a capacity of 4.\nThere is an edge between vertex 7 and vertex 12 with a capacity of 9.\nThere is an edge between vertex 9 and vertex 3 with a capacity of 6.\nThere is an edge between vertex 9 and vertex 12 with a capacity of 3.\nThere is an edge between vertex 9 and vertex 6 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 1 with a capacity of 8.\nThere is an edge between vertex 6 and vertex 4 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 9 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 8.\nThere is an edge between vertex 3 and vertex 6 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 6 with a capacity of 1.\nThere is an edge between vertex 4 and vertex 12 with a capacity of 5.\nThere is an edge between vertex 8 and vertex 10 with a capacity of 7.\nThere is an edge between vertex 9 and vertex 1 with a capacity of 5.\nThere is an edge between vertex 4 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 12 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 10 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 10 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 8 and vertex 6 with a capacity of 8.\nThere is an edge between vertex 11 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 2.\n",
    "graph_output": "12 64\n1 2 10\n2 7 4\n2 5 3\n2 12 6\n2 11 6\n5 8 4\n5 4 7\n8 9 1\n7 6 1\n7 3 5\n7 10 5\n1 11 4\n11 6 6\n11 8 1\n8 1 3\n5 12 9\n12 10 8\n7 5 7\n11 3 3\n8 2 1\n12 1 8\n11 12 7\n6 5 9\n4 11 8\n11 5 8\n8 3 9\n4 2 3\n12 3 5\n2 10 3\n9 2 5\n10 4 1\n6 12 8\n1 10 8\n10 6 4\n1 4 6\n7 1 8\n5 1 6\n3 2 6\n7 4 10\n9 11 8\n9 4 4\n7 12 9\n9 3 6\n9 12 3\n9 6 5\n7 9 5\n3 1 8\n6 4 5\n10 9 3\n7 8 8\n3 6 5\n3 4 2\n2 6 1\n4 12 5\n8 10 7\n9 1 5\n4 8 1\n12 8 1\n3 10 2\n5 10 1\n11 10 9\n8 6 8\n11 7 3\n3 5 2\n",
    "vertices": [
      11,
      6
    ],
    "answer": 52,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 8 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 14 edges\n\nEdges (Format: Node Node Capacity):\n1 7 6\n7 3 4\n3 11 2\n1 10 4\n1 2 10\n11 4 9\n11 5 5\n7 8 10\n11 9 5\n1 6 1\n9 6 3\n2 10 6\n7 5 7\n2 3 2\n",
    "graph_output": "11 14\n1 7 6\n7 3 4\n3 11 2\n1 10 4\n1 2 10\n11 4 9\n11 5 5\n7 8 10\n11 9 5\n1 6 1\n9 6 3\n2 10 6\n7 5 7\n2 3 2\n",
    "vertices": [
      8,
      2
    ],
    "answer": 9,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 18 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 15 and vertex 11.\n",
    "graph_output": "17 18\n1 5\n1 13\n5 7\n1 17\n1 4\n5 11\n17 2\n2 10\n17 9\n7 15\n2 16\n13 14\n1 6\n11 12\n13 8\n11 3\n6 7\n15 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 9\nVertex 2: 15\nVertex 3: 5, 22\nVertex 4: 8\nVertex 5: 23, 19, 3\nVertex 6: 1, 15, 20, 18\nVertex 7: 29\nVertex 8: 9, 4\nVertex 9: 1, 23, 8, 12, 29\nVertex 10: 11\nVertex 11: 29, 10\nVertex 12: 9, 21, 16, 13\nVertex 13: 12, 24\nVertex 14: 23\nVertex 15: 6, 2, 25\nVertex 16: 12, 17\nVertex 17: 16\nVertex 18: 6\nVertex 19: 5\nVertex 20: 6, 28\nVertex 21: 12\nVertex 22: 3, 26\nVertex 23: 9, 14, 5\nVertex 24: 13\nVertex 25: 15\nVertex 26: 22\nVertex 27: 29\nVertex 28: 20\nVertex 29: 9, 7, 11, 27\n",
    "graph_output": "29 28\n1 6\n6 15\n1 9\n9 23\n6 20\n9 8\n15 2\n9 12\n6 18\n23 14\n23 5\n9 29\n29 7\n5 19\n8 4\n12 21\n12 16\n5 3\n20 28\n12 13\n15 25\n13 24\n29 11\n29 27\n3 22\n16 17\n11 10\n22 26\n",
    "vertices": [
      null,
      null
    ],
    "answer": 16,
    "description_type": "list"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nUndirected Graph with 30 vertices and 29 edges\n\nEdges (Format: Node Node):\n1 16\n1 7\n1 23\n23 18\n23 4\n4 17\n4 27\n27 11\n23 20\n1 21\n18 2\n4 12\n2 13\n12 5\n20 9\n11 15\n23 14\n4 26\n20 28\n20 25\n9 30\n12 10\n4 3\n20 8\n9 6\n28 29\n20 19\n27 22\n4 24\n",
    "graph_output": "30 29\n1 16\n1 7\n1 23\n23 18\n23 4\n4 17\n4 27\n27 11\n23 20\n1 21\n18 2\n4 12\n2 13\n12 5\n20 9\n11 15\n23 14\n4 26\n20 28\n20 25\n9 30\n12 10\n4 3\n20 8\n9 6\n28 29\n20 19\n27 22\n4 24\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 23 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 12, 14\nVertex 2: 8, 17, 16, 14\nVertex 3: 13, 6, 12, 17\nVertex 4: 10, 13\nVertex 5: 11, 9\nVertex 6: 3, 7, 17\nVertex 7: 9, 6, 14\nVertex 8: 2\nVertex 9: 7, 5\nVertex 10: 4, 12\nVertex 11: 5\nVertex 12: 17, 1, 3, 10, 13\nVertex 13: 3, 4, 12\nVertex 14: 7, 1, 2\nVertex 15: 16\nVertex 16: 17, 15, 2\nVertex 17: 12, 16, 2, 6, 3\n",
    "graph_output": "17 23\n12 17\n4 10\n3 13\n12 1\n16 17\n5 11\n9 7\n3 6\n2 8\n3 12\n16 15\n13 4\n7 6\n2 17\n14 7\n9 5\n1 14\n17 6\n3 17\n10 12\n2 16\n12 13\n2 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 108 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   0   0   1   0   1   1   1   0   1   1   1 \n 4 |  1   1   1   0   1   1   0   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   0   1   1   0   1   1   0   1   1   1   1   1   1   1 \n 7 |  0   0   0   0   1   1   0   1   1   1   1   1   1   0   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   0   1   1   1 \n 9 |  1   1   0   1   1   0   1   1   0   1   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   0   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   0 \n13 |  1   1   0   1   1   1   1   0   1   1   0   1   0   1   1   1 \n14 |  1   1   1   1   1   1   0   1   1   1   1   1   1   0   1   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n16 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   0 \n",
    "graph_output": "16 108\n1 16\n16 5\n5 8\n1 12\n8 14\n12 7\n1 6\n1 13\n14 11\n6 2\n16 15\n15 9\n14 4\n12 10\n8 3\n10 1\n9 1\n13 12\n16 10\n10 3\n10 4\n7 5\n7 16\n2 12\n16 13\n6 13\n2 1\n3 1\n9 4\n7 15\n11 6\n2 8\n4 5\n9 16\n2 15\n11 12\n2 3\n8 12\n2 4\n5 6\n16 4\n7 6\n1 11\n8 6\n2 11\n3 4\n1 8\n9 13\n8 9\n9 5\n13 15\n5 15\n8 7\n16 11\n14 10\n6 10\n13 10\n14 6\n11 10\n8 11\n15 10\n8 10\n15 6\n4 8\n2 14\n16 2\n15 3\n12 15\n4 6\n15 11\n16 6\n16 8\n1 5\n7 10\n2 5\n12 6\n14 13\n5 10\n5 13\n11 3\n15 14\n3 12\n5 11\n2 9\n10 9\n11 9\n15 8\n5 12\n14 16\n15 4\n9 14\n5 14\n10 2\n4 13\n3 5\n3 16\n12 4\n9 7\n15 1\n11 7\n12 9\n13 7\n1 14\n1 4\n12 14\n2 13\n14 3\n4 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 16 vertices and 19 edges\n\nEdges (Format: Node Node):\n16 11\n11 10\n14 8\n15 14\n8 1\n14 6\n3 15\n11 7\n4 15\n5 6\n12 3\n3 13\n11 14\n5 14\n3 6\n8 6\n9 15\n13 6\n1 7\n",
    "graph_output": "16 19\n16 11\n11 10\n14 8\n15 14\n8 1\n14 6\n3 15\n11 7\n4 15\n5 6\n12 3\n3 13\n11 14\n5 14\n3 6\n8 6\n9 15\n13 6\n1 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 26 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 15, 4, 5, 8\nVertex 2: 10, 13, 7\nVertex 3: 13, 8, 4, 10\nVertex 4: 1, 3\nVertex 5: 1, 9, 7, 13, 15, 14\nVertex 6: 14\nVertex 7: 12, 5, 2, 8\nVertex 8: 3, 11, 7, 1\nVertex 9: 5, 12\nVertex 10: 13, 2, 3\nVertex 11: 14, 8\nVertex 12: 15, 7, 9\nVertex 13: 1, 3, 10, 2, 5\nVertex 14: 15, 6, 11, 5\nVertex 15: 1, 12, 14, 5\n",
    "graph_output": "15 26\n1 13\n1 15\n1 4\n15 12\n1 5\n15 14\n13 3\n14 6\n5 9\n12 7\n14 11\n3 8\n13 10\n10 2\n7 5\n2 13\n2 7\n11 8\n8 7\n5 13\n1 8\n5 15\n5 14\n12 9\n4 3\n3 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 14 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 2, 5, 6\nVertex 2: 5, 3, 1, 4, 6\nVertex 3: 2, 6, 4, 5\nVertex 4: 5, 1, 2, 3, 6\nVertex 5: 2, 4, 1, 6, 3\nVertex 6: 3, 5, 4, 1, 2\n",
    "graph_output": "6 14\n5 2\n5 4\n1 4\n2 3\n2 1\n1 5\n4 2\n6 3\n3 4\n5 6\n6 4\n3 5\n1 6\n6 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 133,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 13 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 8 (weight=15), 3 (weight=88), 7 (weight=83), 12 (weight=30), 11 (weight=21), 10 (weight=67)\nVertex 2: 3 (weight=66)\nVertex 3: 1 (weight=88), 4 (weight=18), 2 (weight=66), 5 (weight=72)\nVertex 4: 3 (weight=18), 9 (weight=73), 6 (weight=81), 5 (weight=91), 7 (weight=3)\nVertex 5: 3 (weight=72), 4 (weight=91)\nVertex 6: 4 (weight=81)\nVertex 7: 1 (weight=83), 4 (weight=3)\nVertex 8: 1 (weight=15)\nVertex 9: 4 (weight=73)\nVertex 10: 1 (weight=67)\nVertex 11: 1 (weight=21)\nVertex 12: 1 (weight=30)\n",
    "graph_output": "12 13\n1 8 15\n1 3 88\n1 7 83\n3 4 18\n1 12 30\n1 11 21\n4 9 73\n3 2 66\n3 5 72\n1 10 67\n4 6 81\n4 5 91\n7 4 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 534,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 11 vertices and 12 edges\n\nEdges (Format: Node Node):\n2 10\n4 2\n10 4\n4 9\n8 11\n5 10\n5 11\n9 1\n11 7\n11 3\n8 3\n4 6\n",
    "graph_output": "11 12\n2 10\n4 2\n10 4\n4 9\n8 11\n5 10\n5 11\n9 1\n11 7\n11 3\n8 3\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nUndirected Graph with 31 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 18\n1 5\n1 21\n1 2\n2 31\n31 16\n16 27\n5 15\n16 14\n15 12\n15 7\n2 22\n5 4\n18 19\n5 30\n22 9\n2 11\n14 10\n5 3\n16 26\n2 20\n21 23\n11 13\n20 28\n30 29\n28 17\n28 25\n15 24\n26 6\n17 8\n",
    "graph_output": "31 30\n1 18\n1 5\n1 21\n1 2\n2 31\n31 16\n16 27\n5 15\n16 14\n15 12\n15 7\n2 22\n5 4\n18 19\n5 30\n22 9\n2 11\n14 10\n5 3\n16 26\n2 20\n21 23\n11 13\n20 28\n30 29\n28 17\n28 25\n15 24\n26 6\n17 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 6 vertices and 7 edges\n\nEdges (Format: Node Node):\n1 2\n1 5\n2 6\n5 4\n5 3\n5 6\n6 1\n",
    "graph_output": "6 7\n1 2\n1 5\n2 6\n5 4\n5 3\n5 6\n6 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 92 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 9 and vertex 6.\n",
    "graph_output": "15 92\n11 7\n4 14\n4 8\n8 15\n3 7\n10 9\n7 6\n4 11\n15 1\n4 13\n14 7\n10 12\n5 10\n3 10\n2 15\n9 2\n9 15\n15 3\n12 8\n11 8\n5 3\n11 6\n5 12\n5 15\n15 6\n1 4\n2 14\n2 8\n1 5\n14 13\n7 10\n2 11\n12 3\n1 6\n13 15\n4 2\n7 15\n11 5\n1 7\n13 7\n8 1\n1 12\n3 13\n2 7\n11 14\n13 9\n13 1\n5 2\n8 7\n15 14\n8 9\n11 3\n15 11\n10 15\n3 8\n5 7\n12 15\n12 13\n6 13\n14 8\n1 14\n9 3\n10 6\n9 7\n1 9\n10 8\n6 5\n2 1\n11 1\n12 6\n10 1\n12 9\n6 4\n13 11\n12 4\n2 6\n10 4\n2 10\n2 3\n8 5\n14 3\n13 5\n4 3\n8 13\n13 2\n9 5\n5 4\n9 14\n11 12\n6 8\n13 10\n9 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 4 and vertex 2 are connected.\n\nThis is an undirected graph with 16 vertices and 31 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 7, 5, 6, 11\nVertex 2: 15, 4, 10\nVertex 3: 5, 4, 12, 8, 7\nVertex 4: 5, 3, 2, 15\nVertex 5: 15, 4, 1, 10, 3, 16\nVertex 6: 16, 1, 10\nVertex 7: 13, 8, 1, 10, 15, 16, 3\nVertex 8: 7, 10, 12, 3\nVertex 9: 12, 16, 13\nVertex 10: 5, 7, 8, 6, 2\nVertex 11: 13, 1\nVertex 12: 9, 8, 3\nVertex 13: 7, 11, 9\nVertex 14: 1\nVertex 15: 5, 2, 7, 4\nVertex 16: 6, 9, 7, 5\n",
    "graph_output": "16 31\n5 15\n13 7\n5 4\n8 7\n1 14\n1 7\n5 1\n10 5\n7 10\n3 5\n10 8\n12 9\n16 6\n13 11\n9 16\n13 9\n3 4\n2 15\n15 7\n6 1\n8 12\n4 2\n3 12\n16 7\n15 4\n6 10\n10 2\n3 8\n16 5\n11 1\n7 3\n",
    "vertices": [
      4,
      2
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 22 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 14 and vertex 2.\n",
    "graph_output": "17 22\n12 5\n1 12\n8 3\n12 14\n5 16\n9 16\n13 8\n13 15\n16 6\n11 17\n11 1\n9 8\n6 5\n13 6\n10 2\n11 10\n5 11\n9 15\n3 15\n2 3\n4 12\n14 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 57 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   1   0   1   1   1   1   1   0   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1 \n 3 |  0   1   0   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   0   0   0   0   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   0   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1 \n 8 |  1   1   1   0   1   1   1   0   1   1   1   1 \n 9 |  0   1   1   0   1   1   1   1   0   1   0   1 \n10 |  1   1   1   0   1   1   1   1   1   0   1   0 \n11 |  1   1   1   0   0   1   1   1   0   1   0   1 \n12 |  1   1   1   1   1   1   1   1   1   0   1   0 \n",
    "graph_output": "12 57\n8 5\n2 4\n3 7\n6 11\n4 1\n8 11\n3 12\n12 4\n2 10\n1 10\n7 12\n9 3\n7 4\n2 8\n7 8\n3 5\n5 9\n12 1\n10 3\n6 12\n12 8\n6 5\n12 2\n9 10\n2 6\n7 10\n2 5\n12 9\n1 8\n11 3\n12 11\n7 5\n3 4\n1 2\n9 7\n5 1\n10 11\n11 2\n3 6\n2 9\n3 2\n6 8\n3 8\n7 2\n4 6\n1 7\n8 10\n1 11\n6 10\n6 7\n5 4\n7 11\n9 6\n10 5\n6 1\n12 5\n9 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 143,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 21 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 14 and vertex 11.\n",
    "graph_output": "15 21\n3 15\n5 1\n2 11\n5 7\n13 7\n5 9\n14 2\n6 5\n8 7\n9 4\n5 14\n13 5\n5 10\n14 7\n14 10\n2 5\n1 4\n15 14\n11 5\n13 11\n14 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 1 (source) to vertex 9 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 12 vertices and 15 edges\n\nEdges (Format: Node Node Capacity):\n1 2 8\n1 5 8\n1 8 5\n2 7 8\n8 9 9\n7 4 1\n7 3 1\n3 12 9\n5 6 1\n6 11 3\n8 10 5\n6 3 2\n5 4 5\n9 7 6\n2 9 3\n",
    "graph_output": "12 15\n1 2 8\n1 5 8\n1 8 5\n2 7 8\n8 9 9\n7 4 1\n7 3 1\n3 12 9\n5 6 1\n6 11 3\n8 10 5\n6 3 2\n5 4 5\n9 7 6\n2 9 3\n",
    "vertices": [
      1,
      9
    ],
    "answer": 14,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 15 vertices and 88 edges\n\nEdges (Format: Node Node Weight):\n1 12 46\n12 7 60\n7 15 6\n15 9 43\n12 4 59\n12 10 55\n7 11 7\n15 14 26\n9 3 93\n14 8 7\n12 13 48\n11 5 62\n13 6 85\n15 2 84\n14 3 57\n3 1 43\n7 4 41\n3 5 9\n5 4 90\n12 6 60\n14 10 48\n4 2 18\n13 4 66\n15 4 54\n5 13 59\n7 2 91\n11 14 60\n8 3 80\n11 8 90\n12 2 6\n5 10 88\n11 6 5\n2 5 65\n3 7 70\n14 9 39\n11 1 41\n8 5 42\n9 12 81\n7 8 43\n4 8 17\n9 5 85\n11 15 17\n8 6 28\n1 13 72\n11 10 30\n4 3 89\n14 6 100\n6 4 12\n3 12 14\n8 1 35\n6 5 90\n11 12 7\n14 7 39\n10 15 53\n13 15 25\n15 3 2\n11 9 66\n5 1 26\n5 7 45\n10 2 31\n7 9 61\n10 9 23\n7 10 57\n13 7 9\n13 11 93\n5 14 28\n15 12 49\n2 13 35\n1 4 54\n6 2 48\n12 5 65\n6 7 33\n15 5 78\n9 2 22\n9 4 90\n2 14 56\n11 3 42\n1 6 24\n8 15 72\n4 11 4\n6 9 20\n8 10 34\n2 8 94\n1 15 46\n1 2 12\n9 8 59\n14 4 24\n15 6 5\n",
    "graph_output": "15 88\n1 12 46\n12 7 60\n7 15 6\n15 9 43\n12 4 59\n12 10 55\n7 11 7\n15 14 26\n9 3 93\n14 8 7\n12 13 48\n11 5 62\n13 6 85\n15 2 84\n14 3 57\n3 1 43\n7 4 41\n3 5 9\n5 4 90\n12 6 60\n14 10 48\n4 2 18\n13 4 66\n15 4 54\n5 13 59\n7 2 91\n11 14 60\n8 3 80\n11 8 90\n12 2 6\n5 10 88\n11 6 5\n2 5 65\n3 7 70\n14 9 39\n11 1 41\n8 5 42\n9 12 81\n7 8 43\n4 8 17\n9 5 85\n11 15 17\n8 6 28\n1 13 72\n11 10 30\n4 3 89\n14 6 100\n6 4 12\n3 12 14\n8 1 35\n6 5 90\n11 12 7\n14 7 39\n10 15 53\n13 15 25\n15 3 2\n11 9 66\n5 1 26\n5 7 45\n10 2 31\n7 9 61\n10 9 23\n7 10 57\n13 7 9\n13 11 93\n5 14 28\n15 12 49\n2 13 35\n1 4 54\n6 2 48\n12 5 65\n6 7 33\n15 5 78\n9 2 22\n9 4 90\n2 14 56\n11 3 42\n1 6 24\n8 15 72\n4 11 4\n6 9 20\n8 10 34\n2 8 94\n1 15 46\n1 2 12\n9 8 59\n14 4 24\n15 6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 132,
    "description_type": "structured"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 16 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 2, 4, 6, 3\nVertex 2: 10, 1\nVertex 3: 10, 1, 9\nVertex 4: 1, 11, 5\nVertex 5: 11, 4\nVertex 6: 1, 9, 11\nVertex 7: 10\nVertex 8: No connections\nVertex 9: 11, 10, 6, 3\nVertex 10: 7, 3, 2, 9\nVertex 11: 9, 1, 5, 4, 6\n",
    "graph_output": "11 16\n7 10\n11 9\n1 11\n5 11\n10 3\n2 10\n1 2\n1 4\n1 6\n3 1\n10 9\n11 4\n9 6\n6 11\n5 4\n9 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 16 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 16\n1 5\n1 13\n1 10\n16 15\n16 6\n16 2\n2 14\n15 8\n15 4\n2 7\n16 11\n15 12\n16 3\n10 9\n4 9\n3 4\n5 7\n7 1\n1 3\n12 8\n11 6\n16 10\n10 14\n5 11\n6 2\n13 9\n4 11\n",
    "graph_output": "16 28\n1 16\n1 5\n1 13\n1 10\n16 15\n16 6\n16 2\n2 14\n15 8\n15 4\n2 7\n16 11\n15 12\n16 3\n10 9\n4 9\n3 4\n5 7\n7 1\n1 3\n12 8\n11 6\n16 10\n10 14\n5 11\n6 2\n13 9\n4 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 5 and vertex 14 are connected.\n\nThis is an undirected graph with 15 vertices and 25 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 1 and vertex 6.\n",
    "graph_output": "15 25\n2 7\n9 6\n1 7\n2 5\n4 1\n8 14\n14 4\n3 11\n2 4\n11 13\n14 3\n12 14\n6 10\n7 8\n10 15\n10 1\n5 8\n14 9\n3 2\n9 7\n4 9\n5 1\n15 1\n3 5\n1 6\n",
    "vertices": [
      5,
      14
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 22 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 7 and vertex 17.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 12 and vertex 3.\n",
    "graph_output": "17 22\n1 5\n5 14\n5 3\n14 15\n15 13\n3 16\n5 7\n7 17\n17 2\n13 12\n13 6\n16 10\n16 9\n15 8\n12 4\n9 11\n16 15\n8 12\n8 1\n8 10\n12 15\n12 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 13 vertices and 69 edges\n\nEdges (Format: Node Node Weight):\n1 7 60\n7 3 10\n3 11 59\n11 10 2\n3 6 71\n7 2 72\n11 5 89\n5 12 5\n6 4 76\n1 13 48\n2 8 21\n8 9 25\n11 8 75\n9 5 8\n13 6 73\n1 3 92\n12 10 54\n7 6 24\n10 9 86\n4 10 65\n4 5 56\n9 3 100\n4 7 99\n12 3 24\n3 5 64\n13 3 83\n8 13 18\n11 2 94\n9 13 88\n6 12 83\n6 8 53\n1 11 19\n7 8 23\n2 5 17\n12 2 23\n10 1 67\n1 12 25\n12 11 84\n5 10 68\n7 11 2\n2 1 10\n11 13 43\n12 8 25\n3 4 58\n8 1 27\n7 12 88\n2 3 23\n9 1 87\n2 9 32\n13 4 15\n1 5 32\n10 7 36\n4 1 77\n6 2 84\n7 13 55\n10 2 50\n10 8 81\n4 12 38\n8 4 73\n6 1 44\n8 5 35\n5 6 97\n13 12 82\n2 4 12\n4 9 78\n10 3 33\n13 5 72\n10 6 73\n9 7 30\n",
    "graph_output": "13 69\n1 7 60\n7 3 10\n3 11 59\n11 10 2\n3 6 71\n7 2 72\n11 5 89\n5 12 5\n6 4 76\n1 13 48\n2 8 21\n8 9 25\n11 8 75\n9 5 8\n13 6 73\n1 3 92\n12 10 54\n7 6 24\n10 9 86\n4 10 65\n4 5 56\n9 3 100\n4 7 99\n12 3 24\n3 5 64\n13 3 83\n8 13 18\n11 2 94\n9 13 88\n6 12 83\n6 8 53\n1 11 19\n7 8 23\n2 5 17\n12 2 23\n10 1 67\n1 12 25\n12 11 84\n5 10 68\n7 11 2\n2 1 10\n11 13 43\n12 8 25\n3 4 58\n8 1 27\n7 12 88\n2 3 23\n9 1 87\n2 9 32\n13 4 15\n1 5 32\n10 7 36\n4 1 77\n6 2 84\n7 13 55\n10 2 50\n10 8 81\n4 12 38\n8 4 73\n6 1 44\n8 5 35\n5 6 97\n13 12 82\n2 4 12\n4 9 78\n10 3 33\n13 5 72\n10 6 73\n9 7 30\n",
    "vertices": [
      null,
      null
    ],
    "answer": 145,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 5 (source) to vertex 3 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 16 edges\n\nEdges (Format: Node Node Capacity):\n1 3 5\n1 5 2\n5 7 9\n7 6 8\n3 2 1\n1 4 1\n2 11 8\n4 10 10\n4 8 5\n7 9 1\n11 4 6\n1 11 2\n1 10 7\n6 10 4\n11 7 8\n2 1 1\n",
    "graph_output": "11 16\n1 3 5\n1 5 2\n5 7 9\n7 6 8\n3 2 1\n1 4 1\n2 11 8\n4 10 10\n4 8 5\n7 9 1\n11 4 6\n1 11 2\n1 10 7\n6 10 4\n11 7 8\n2 1 1\n",
    "vertices": [
      5,
      3
    ],
    "answer": 6,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nUndirected Graph with 29 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 8\n1 3\n3 2\n2 14\n8 12\n12 5\n12 26\n26 20\n14 11\n2 9\n1 23\n5 24\n8 28\n8 13\n23 22\n26 17\n11 21\n9 19\n13 10\n5 6\n12 4\n14 15\n10 16\n28 27\n28 7\n13 18\n3 29\n16 25\n",
    "graph_output": "29 28\n1 8\n1 3\n3 2\n2 14\n8 12\n12 5\n12 26\n26 20\n14 11\n2 9\n1 23\n5 24\n8 28\n8 13\n23 22\n26 17\n11 21\n9 19\n13 10\n5 6\n12 4\n14 15\n10 16\n28 27\n28 7\n13 18\n3 29\n16 25\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 23 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   1   1   0   0   0   0   0   0   0   1   0   1 \n 2 |  0   0   0   0   0   1   0   0   0   1   0   0   1   0   0   1 \n 3 |  0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   1 \n 4 |  0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0 \n 5 |  1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 6 |  1   1   1   0   0   0   1   0   0   1   1   0   0   0   0   0 \n 7 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0 \n 9 |  0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0 \n10 |  0   1   1   1   0   1   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   1   0   0   0   0   0   1   0   0   1   0 \n12 |  0   0   0   1   0   0   0   1   0   0   1   0   1   0   0   0 \n13 |  0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n14 |  1   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n16 |  1   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "16 23\n1 6\n1 14\n14 9\n6 11\n1 16\n11 12\n16 2\n14 8\n12 4\n6 10\n6 7\n9 5\n12 13\n11 15\n16 3\n3 6\n10 2\n12 8\n4 10\n10 3\n2 6\n2 13\n5 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 91 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   0   0   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   0   1   1   1   0   1 \n 3 |  1   1   0   1   1   1   1   1   0   1   1   1   1   1   0 \n 4 |  0   1   1   0   0   1   1   1   1   1   0   1   1   1   1 \n 5 |  0   1   1   0   0   1   1   1   1   1   1   0   1   0   1 \n 6 |  1   1   1   1   1   0   1   1   1   0   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 9 |  1   1   0   1   1   1   1   1   0   1   1   1   1   0   1 \n10 |  1   0   1   1   1   0   1   1   1   0   1   1   1   1   1 \n11 |  1   1   1   0   1   1   1   1   1   1   0   1   1   0   1 \n12 |  1   1   1   1   0   1   1   1   1   1   1   0   1   0   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   0   1   1   0   1   1   1   0   1   0   0   1   0   1 \n15 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 91\n1 15\n1 7\n7 12\n7 8\n15 5\n12 11\n15 6\n6 3\n1 2\n8 14\n5 13\n6 4\n7 9\n12 10\n11 6\n9 15\n4 10\n3 4\n10 14\n7 14\n9 10\n10 11\n6 2\n3 1\n8 1\n5 8\n13 1\n4 13\n12 2\n8 15\n9 13\n9 4\n7 13\n4 8\n5 11\n10 7\n9 5\n14 13\n15 13\n8 11\n9 11\n3 7\n6 1\n10 3\n6 12\n11 1\n8 12\n12 9\n9 2\n3 8\n7 11\n10 5\n14 3\n3 12\n13 12\n10 1\n14 4\n5 2\n11 3\n5 6\n1 9\n15 2\n5 3\n6 8\n3 13\n12 4\n13 10\n5 7\n13 11\n9 8\n7 4\n15 4\n6 14\n15 14\n8 13\n6 13\n8 2\n2 3\n1 14\n15 10\n12 1\n11 2\n10 8\n12 15\n7 15\n2 7\n2 13\n15 11\n2 4\n6 7\n6 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 11 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (6\u00d76):\n\n      1   2   3   4   5   6\n   ------------------------\n 1 |  0   1   1   1   0   1 \n 2 |  1   0   0   1   1   1 \n 3 |  1   0   0   1   1   0 \n 4 |  1   1   1   0   1   1 \n 5 |  0   1   1   1   0   0 \n 6 |  1   1   0   1   0   0 \n",
    "graph_output": "6 11\n1 4\n4 2\n4 3\n4 6\n4 5\n2 6\n5 2\n1 6\n3 5\n1 3\n1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 209,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 93 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 6, 2, 9, 12, 15, 5, 13, 14, 10, 7\nVertex 2: 8, 9, 12, 10, 1, 5, 4, 3, 7, 6, 15, 11, 14\nVertex 3: 12, 1, 7, 15, 11, 4, 8, 9, 13, 2, 5, 14, 6\nVertex 4: 13, 12, 11, 5, 3, 2, 15, 7, 14, 10, 6, 8\nVertex 5: 12, 4, 15, 6, 2, 11, 7, 9, 3, 1, 14\nVertex 6: 7, 14, 12, 1, 10, 5, 11, 8, 13, 2, 9, 4, 3\nVertex 7: 8, 6, 3, 11, 14, 13, 5, 2, 9, 12, 4, 10, 1, 15\nVertex 8: 7, 2, 12, 3, 11, 15, 14, 13, 6, 10, 9, 4\nVertex 9: 2, 14, 13, 11, 1, 3, 15, 5, 8, 7, 6, 10\nVertex 10: 14, 2, 6, 11, 13, 8, 7, 12, 4, 9, 1, 15\nVertex 11: 4, 7, 3, 9, 15, 8, 12, 6, 13, 5, 10, 14, 2\nVertex 12: 3, 4, 2, 5, 6, 8, 11, 1, 14, 15, 7, 10\nVertex 13: 4, 9, 14, 7, 11, 8, 3, 15, 10, 6, 1\nVertex 14: 9, 10, 6, 15, 13, 7, 8, 5, 12, 11, 1, 4, 3, 2\nVertex 15: 3, 14, 11, 8, 5, 13, 9, 1, 4, 12, 2, 10, 7\n",
    "graph_output": "15 93\n7 8\n4 13\n8 2\n3 12\n2 9\n9 14\n4 12\n12 2\n5 12\n11 4\n6 7\n1 3\n10 14\n3 7\n2 10\n6 14\n3 15\n7 11\n6 12\n8 12\n6 1\n13 9\n10 6\n3 11\n4 5\n14 15\n9 11\n2 1\n9 1\n14 13\n3 4\n7 14\n11 15\n3 8\n8 11\n15 8\n15 5\n14 8\n7 13\n9 3\n11 12\n5 6\n5 2\n6 11\n11 13\n13 8\n3 13\n13 15\n5 11\n10 11\n10 13\n5 7\n9 15\n4 2\n3 2\n5 9\n8 6\n6 13\n12 1\n15 1\n7 2\n10 8\n3 5\n15 4\n5 1\n8 9\n5 14\n7 9\n6 2\n12 14\n12 15\n6 9\n11 14\n1 13\n14 1\n7 12\n7 4\n2 15\n7 10\n12 10\n14 4\n4 10\n10 9\n3 14\n6 4\n1 10\n15 10\n3 6\n8 4\n1 7\n2 11\n15 7\n2 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 20 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 10 and vertex 7.\n",
    "graph_output": "13 20\n3 9\n5 10\n3 10\n3 8\n8 5\n7 8\n3 5\n12 13\n9 10\n2 4\n2 9\n10 12\n10 2\n11 1\n11 8\n9 6\n4 9\n6 13\n2 5\n10 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 21 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 12, 4, 15\nVertex 2: 13, 3\nVertex 3: 2, 10\nVertex 4: 1, 6, 12, 15\nVertex 5: 13, 16, 11\nVertex 6: 4\nVertex 7: 14, 15\nVertex 8: 10, 12\nVertex 9: 13\nVertex 10: 13, 8, 11, 14, 3\nVertex 11: 10, 5\nVertex 12: 1, 4, 8\nVertex 13: 1, 10, 5, 2, 9\nVertex 14: 10, 7\nVertex 15: 1, 4, 7\nVertex 16: 5\n",
    "graph_output": "16 21\n1 13\n13 10\n1 12\n13 5\n1 4\n13 2\n13 9\n10 8\n10 11\n1 15\n10 14\n4 6\n14 7\n5 16\n2 3\n3 10\n4 12\n8 12\n15 4\n7 15\n5 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 7 vertices and 20 edges\n\nEdges (Format: Node Node):\n1 6\n5 1\n6 7\n5 7\n2 5\n4 6\n2 1\n3 2\n5 3\n7 3\n5 4\n6 2\n7 1\n3 6\n2 4\n7 4\n1 3\n4 3\n6 5\n1 4\n",
    "graph_output": "7 20\n1 6\n5 1\n6 7\n5 7\n2 5\n4 6\n2 1\n3 2\n5 3\n7 3\n5 4\n6 2\n7 1\n3 6\n2 4\n7 4\n1 3\n4 3\n6 5\n1 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 847,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 15 vertices and 103 edges\n\nEdges (Format: Node Node Weight):\n1 10 43\n10 5 90\n1 7 36\n1 6 38\n10 9 31\n10 13 30\n5 8 33\n9 4 84\n1 15 70\n10 11 46\n6 14 50\n14 2 92\n1 3 58\n8 12 43\n9 3 34\n6 3 64\n7 4 25\n10 6 26\n4 8 5\n9 1 57\n14 7 58\n9 2 9\n1 13 85\n15 2 50\n6 13 13\n9 7 89\n3 14 67\n14 12 8\n10 14 8\n12 4 44\n15 4 3\n10 12 99\n5 6 40\n9 6 93\n12 6 10\n3 13 28\n1 12 61\n2 1 9\n7 8 34\n8 9 16\n7 6 21\n3 4 80\n12 13 60\n13 11 18\n2 8 45\n9 15 90\n4 1 59\n14 1 28\n3 5 17\n8 3 85\n10 2 58\n15 13 21\n4 13 83\n8 1 100\n11 2 68\n5 4 66\n6 8 68\n4 14 85\n12 5 21\n7 3 41\n5 15 37\n7 11 64\n9 14 42\n8 11 53\n12 15 47\n11 12 18\n5 2 100\n7 2 2\n13 8 94\n11 9 9\n6 4 13\n13 9 21\n3 12 19\n1 11 87\n1 5 33\n2 3 2\n4 11 32\n10 3 19\n7 15 61\n11 6 74\n12 7 96\n11 14 52\n5 9 42\n14 13 93\n13 5 32\n11 5 26\n5 7 85\n5 14 92\n13 2 35\n15 6 58\n8 10 39\n10 7 53\n15 11 8\n12 2 29\n15 14 15\n2 4 37\n4 10 74\n15 10 15\n6 2 82\n12 9 67\n13 7 30\n3 11 49\n8 14 50\n",
    "graph_output": "15 103\n1 10 43\n10 5 90\n1 7 36\n1 6 38\n10 9 31\n10 13 30\n5 8 33\n9 4 84\n1 15 70\n10 11 46\n6 14 50\n14 2 92\n1 3 58\n8 12 43\n9 3 34\n6 3 64\n7 4 25\n10 6 26\n4 8 5\n9 1 57\n14 7 58\n9 2 9\n1 13 85\n15 2 50\n6 13 13\n9 7 89\n3 14 67\n14 12 8\n10 14 8\n12 4 44\n15 4 3\n10 12 99\n5 6 40\n9 6 93\n12 6 10\n3 13 28\n1 12 61\n2 1 9\n7 8 34\n8 9 16\n7 6 21\n3 4 80\n12 13 60\n13 11 18\n2 8 45\n9 15 90\n4 1 59\n14 1 28\n3 5 17\n8 3 85\n10 2 58\n15 13 21\n4 13 83\n8 1 100\n11 2 68\n5 4 66\n6 8 68\n4 14 85\n12 5 21\n7 3 41\n5 15 37\n7 11 64\n9 14 42\n8 11 53\n12 15 47\n11 12 18\n5 2 100\n7 2 2\n13 8 94\n11 9 9\n6 4 13\n13 9 21\n3 12 19\n1 11 87\n1 5 33\n2 3 2\n4 11 32\n10 3 19\n7 15 61\n11 6 74\n12 7 96\n11 14 52\n5 9 42\n14 13 93\n13 5 32\n11 5 26\n5 7 85\n5 14 92\n13 2 35\n15 6 58\n8 10 39\n10 7 53\n15 11 8\n12 2 29\n15 14 15\n2 4 37\n4 10 74\n15 10 15\n6 2 82\n12 9 67\n13 7 30\n3 11 49\n8 14 50\n",
    "vertices": [
      null,
      null
    ],
    "answer": 116,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 8 and vertex 2 are connected.\n\nThis is an undirected graph with 17 vertices and 105 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 17 and vertex 13.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 17 and vertex 14.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 17 and vertex 6.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 17 and vertex 15.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 17 and vertex 10.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 17 and vertex 16.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 3 and vertex 10.\n",
    "graph_output": "17 105\n8 10\n12 1\n9 10\n1 13\n5 4\n7 11\n6 3\n12 2\n14 6\n17 13\n15 3\n1 7\n2 10\n17 7\n16 9\n1 16\n4 3\n15 8\n9 14\n14 13\n1 10\n16 8\n15 6\n6 13\n14 5\n1 9\n14 15\n4 2\n14 12\n6 12\n10 14\n11 16\n16 13\n15 2\n5 2\n5 15\n5 8\n4 13\n5 10\n16 3\n11 17\n13 12\n17 8\n12 7\n8 4\n7 4\n7 16\n6 8\n3 14\n17 14\n13 11\n2 8\n12 8\n17 6\n4 17\n12 10\n8 14\n11 4\n17 15\n7 9\n12 15\n3 17\n8 3\n9 2\n6 1\n10 11\n6 10\n16 2\n8 7\n17 5\n17 2\n14 2\n7 6\n15 13\n10 16\n5 12\n15 4\n4 14\n14 7\n10 7\n15 7\n12 11\n6 2\n17 10\n12 16\n5 1\n6 9\n3 9\n16 14\n1 15\n10 15\n1 17\n6 4\n16 4\n8 9\n14 1\n1 11\n11 14\n11 6\n4 10\n12 3\n17 16\n3 1\n17 12\n3 10\n",
    "vertices": [
      8,
      2
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 16 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 4 and vertex 1.\n",
    "graph_output": "16 16\n11 6\n14 9\n2 9\n3 2\n8 9\n2 13\n13 10\n2 8\n8 11\n13 14\n12 14\n16 13\n8 7\n1 11\n12 8\n4 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 12 vertices and 66 edges\n\nEdges (Format: Node Node):\n2 7\n9 10\n12 7\n8 11\n6 11\n7 5\n2 8\n1 7\n2 10\n9 5\n12 2\n7 11\n10 6\n1 10\n8 10\n4 11\n10 3\n2 5\n7 8\n12 5\n2 3\n4 8\n3 7\n4 3\n3 12\n1 6\n3 8\n11 3\n2 4\n9 7\n1 2\n4 6\n6 7\n2 11\n8 1\n9 3\n6 3\n7 10\n9 12\n12 6\n4 12\n1 12\n5 1\n12 11\n4 5\n12 8\n4 10\n11 10\n11 5\n8 5\n6 9\n10 12\n6 8\n5 3\n1 9\n7 4\n2 6\n11 1\n10 5\n5 6\n9 11\n3 1\n8 9\n4 9\n2 9\n1 4\n",
    "graph_output": "12 66\n2 7\n9 10\n12 7\n8 11\n6 11\n7 5\n2 8\n1 7\n2 10\n9 5\n12 2\n7 11\n10 6\n1 10\n8 10\n4 11\n10 3\n2 5\n7 8\n12 5\n2 3\n4 8\n3 7\n4 3\n3 12\n1 6\n3 8\n11 3\n2 4\n9 7\n1 2\n4 6\n6 7\n2 11\n8 1\n9 3\n6 3\n7 10\n9 12\n12 6\n4 12\n1 12\n5 1\n12 11\n4 5\n12 8\n4 10\n11 10\n11 5\n8 5\n6 9\n10 12\n6 8\n5 3\n1 9\n7 4\n2 6\n11 1\n10 5\n5 6\n9 11\n3 1\n8 9\n4 9\n2 9\n1 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 18 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9 with a weight of 33.\nThere is an edge between vertex 1 and vertex 5 with a weight of 15.\nThere is an edge between vertex 9 and vertex 2 with a weight of 87.\nThere is an edge between vertex 1 and vertex 3 with a weight of 16.\nThere is an edge between vertex 5 and vertex 8 with a weight of 57.\nThere is an edge between vertex 2 and vertex 13 with a weight of 10.\nThere is an edge between vertex 8 and vertex 10 with a weight of 37.\nThere is an edge between vertex 9 and vertex 11 with a weight of 7.\nThere is an edge between vertex 11 and vertex 7 with a weight of 30.\nThere is an edge between vertex 5 and vertex 14 with a weight of 39.\nThere is an edge between vertex 7 and vertex 6 with a weight of 60.\nThere is an edge between vertex 11 and vertex 4 with a weight of 51.\nThere is an edge between vertex 8 and vertex 12 with a weight of 85.\nThere is an edge between vertex 14 and vertex 10 with a weight of 79.\nThere is an edge between vertex 1 and vertex 12 with a weight of 97.\nThere is an edge between vertex 12 and vertex 3 with a weight of 97.\nThere is an edge between vertex 7 and vertex 2 with a weight of 59.\nThere is an edge between vertex 7 and vertex 4 with a weight of 55.\n",
    "graph_output": "14 18\n1 9 33\n1 5 15\n9 2 87\n1 3 16\n5 8 57\n2 13 10\n8 10 37\n9 11 7\n11 7 30\n5 14 39\n7 6 60\n11 4 51\n8 12 85\n14 10 79\n1 12 97\n12 3 97\n7 2 59\n7 4 55\n",
    "vertices": [
      null,
      null
    ],
    "answer": 499,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 3 and vertex 10 are connected.\n\nThis is an undirected graph with 17 vertices and 25 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: No connections\nVertex 2: 13, 11, 5, 9, 10\nVertex 3: 6, 13, 11, 16\nVertex 4: 5, 9\nVertex 5: 10, 4, 7, 2\nVertex 6: 7, 13, 3, 9, 15\nVertex 7: 6, 14, 5, 12\nVertex 8: No connections\nVertex 9: 10, 6, 14, 4, 2\nVertex 10: 9, 5, 2\nVertex 11: 2, 3\nVertex 12: 17, 7\nVertex 13: 6, 2, 3, 14, 15\nVertex 14: 7, 9, 17, 13\nVertex 15: 6, 13\nVertex 16: 3\nVertex 17: 12, 14\n",
    "graph_output": "17 25\n7 6\n6 13\n7 14\n17 12\n2 13\n11 2\n3 6\n9 10\n9 6\n10 5\n3 13\n5 4\n14 9\n9 4\n14 17\n14 13\n7 5\n2 5\n2 9\n12 7\n10 2\n11 3\n6 15\n15 13\n3 16\n",
    "vertices": [
      3,
      10
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 16 vertices and 32 edges\n\nEdges (Format: Node Node):\n1 16\n16 2\n16 12\n12 15\n15 6\n16 8\n8 10\n6 7\n6 5\n6 3\n15 13\n6 4\n10 9\n4 14\n10 11\n10 5\n3 1\n7 16\n9 4\n2 9\n14 6\n6 8\n14 5\n5 2\n6 12\n5 15\n4 15\n12 4\n1 8\n13 9\n3 13\n11 4\n",
    "graph_output": "16 32\n1 16\n16 2\n16 12\n12 15\n15 6\n16 8\n8 10\n6 7\n6 5\n6 3\n15 13\n6 4\n10 9\n4 14\n10 11\n10 5\n3 1\n7 16\n9 4\n2 9\n14 6\n6 8\n14 5\n5 2\n6 12\n5 15\n4 15\n12 4\n1 8\n13 9\n3 13\n11 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (30\u00d730):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n   ------------------------------------------------------------------------------------------------------------------------\n 1 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 2 |  1   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 3 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   1   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1 \n 7 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n13 |  0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n16 |  0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n25 |  0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   1   1   1   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n30 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "30 29\n1 2\n2 25\n2 8\n8 13\n2 9\n25 19\n13 18\n9 7\n13 5\n5 4\n25 6\n19 23\n25 28\n25 26\n26 14\n4 16\n4 3\n6 30\n30 15\n30 17\n5 10\n25 27\n18 22\n22 24\n24 12\n25 29\n23 20\n13 21\n16 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 29 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 14 and vertex 19.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 1 and vertex 21.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 21 and vertex 26.\nThere is an edge between vertex 21 and vertex 27.\nThere is an edge between vertex 10 and vertex 24.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 2 and vertex 28.\nThere is an edge between vertex 26 and vertex 15.\nThere is an edge between vertex 19 and vertex 20.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 26 and vertex 29.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 21 and vertex 4.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 27 and vertex 25.\nThere is an edge between vertex 19 and vertex 13.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 4 and vertex 18.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 25 and vertex 23.\nThere is an edge between vertex 21 and vertex 22.\nThere is an edge between vertex 24 and vertex 17.\nThere is an edge between vertex 29 and vertex 16.\n",
    "graph_output": "29 28\n1 14\n14 19\n1 10\n1 21\n1 12\n14 2\n2 6\n21 26\n21 27\n10 24\n14 9\n2 28\n26 15\n19 20\n9 5\n26 29\n2 3\n21 4\n15 11\n27 25\n19 13\n5 7\n4 18\n10 8\n25 23\n21 22\n24 17\n29 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 12 (source) to vertex 13 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 71 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 13 (capacity=3), 8 (capacity=9), 7 (capacity=6), 6 (capacity=5), 2 (capacity=9), 3 (capacity=3), 11 (capacity=2), 10 (capacity=2), 12 (capacity=5), 9 (capacity=5), 5 (capacity=10)\nVertex 2: 12 (capacity=2), 3 (capacity=3), 4 (capacity=5), 6 (capacity=5), 1 (capacity=9), 9 (capacity=4), 10 (capacity=8), 7 (capacity=6), 8 (capacity=5), 5 (capacity=1), 13 (capacity=6), 11 (capacity=9)\nVertex 3: 13 (capacity=5), 9 (capacity=5), 2 (capacity=3), 10 (capacity=4), 5 (capacity=7), 12 (capacity=8), 7 (capacity=4), 1 (capacity=3), 4 (capacity=3), 11 (capacity=9), 6 (capacity=9)\nVertex 4: 8 (capacity=5), 2 (capacity=5), 6 (capacity=8), 5 (capacity=7), 12 (capacity=2), 10 (capacity=1), 11 (capacity=5), 3 (capacity=3), 13 (capacity=4), 7 (capacity=3)\nVertex 5: 7 (capacity=9), 3 (capacity=7), 4 (capacity=7), 6 (capacity=10), 10 (capacity=2), 9 (capacity=10), 13 (capacity=4), 1 (capacity=10), 2 (capacity=1), 8 (capacity=9)\nVertex 6: 11 (capacity=8), 7 (capacity=10), 8 (capacity=9), 1 (capacity=5), 2 (capacity=5), 4 (capacity=8), 5 (capacity=10), 12 (capacity=3), 13 (capacity=10), 9 (capacity=5), 10 (capacity=1), 3 (capacity=9)\nVertex 7: 1 (capacity=6), 10 (capacity=9), 5 (capacity=9), 12 (capacity=9), 6 (capacity=10), 9 (capacity=8), 3 (capacity=4), 8 (capacity=9), 2 (capacity=6), 11 (capacity=4), 4 (capacity=3), 13 (capacity=1)\nVertex 8: 1 (capacity=9), 4 (capacity=5), 6 (capacity=9), 10 (capacity=6), 7 (capacity=9), 9 (capacity=7), 11 (capacity=4), 2 (capacity=5), 13 (capacity=8), 5 (capacity=9)\nVertex 9: 3 (capacity=5), 7 (capacity=8), 12 (capacity=9), 13 (capacity=5), 2 (capacity=4), 8 (capacity=7), 5 (capacity=10), 6 (capacity=5), 11 (capacity=6), 10 (capacity=3), 1 (capacity=5)\nVertex 10: 7 (capacity=9), 3 (capacity=4), 8 (capacity=6), 4 (capacity=1), 13 (capacity=5), 2 (capacity=8), 12 (capacity=3), 11 (capacity=2), 5 (capacity=2), 1 (capacity=2), 6 (capacity=1), 9 (capacity=3)\nVertex 11: 13 (capacity=8), 6 (capacity=8), 1 (capacity=2), 4 (capacity=5), 10 (capacity=2), 7 (capacity=4), 9 (capacity=6), 8 (capacity=4), 3 (capacity=9), 2 (capacity=9)\nVertex 12: 7 (capacity=9), 2 (capacity=2), 3 (capacity=8), 9 (capacity=9), 4 (capacity=2), 6 (capacity=3), 10 (capacity=3), 13 (capacity=9), 1 (capacity=5)\nVertex 13: 1 (capacity=3), 11 (capacity=8), 3 (capacity=5), 9 (capacity=5), 10 (capacity=5), 6 (capacity=10), 12 (capacity=9), 4 (capacity=4), 5 (capacity=4), 7 (capacity=1), 8 (capacity=8), 2 (capacity=6)\n",
    "graph_output": "13 71\n1 13 3\n1 8 9\n1 7 6\n7 10 9\n13 11 8\n13 3 5\n7 5 9\n8 4 5\n7 12 9\n3 9 5\n11 6 8\n12 2 2\n7 6 10\n2 3 3\n6 8 9\n3 10 4\n4 2 5\n3 5 7\n7 9 8\n8 10 6\n1 6 5\n2 6 5\n3 12 8\n6 4 8\n1 2 9\n12 9 9\n5 4 7\n3 7 4\n4 12 2\n9 13 5\n2 9 4\n8 7 9\n3 1 3\n5 6 10\n1 11 2\n10 4 1\n13 10 5\n6 12 3\n4 11 5\n2 10 8\n9 8 7\n7 2 6\n12 10 3\n4 3 3\n13 6 10\n13 12 9\n11 10 2\n11 7 4\n10 5 2\n5 9 10\n6 9 5\n13 4 4\n1 10 2\n9 11 6\n10 6 1\n7 4 3\n1 12 5\n9 10 3\n5 13 4\n1 9 5\n8 11 4\n8 2 5\n7 13 1\n1 5 10\n2 5 1\n8 13 8\n3 11 9\n13 2 6\n8 5 9\n2 11 9\n6 3 9\n",
    "vertices": [
      12,
      13
    ],
    "answer": 50,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 21 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 3\nVertex 2: 11, 12, 5\nVertex 3: 11, 8, 4, 1, 9\nVertex 4: 10, 1, 7, 3\nVertex 5: 6, 7, 2\nVertex 6: 5, 10\nVertex 7: 11, 12, 10, 4, 5\nVertex 8: 12, 3, 10\nVertex 9: 3, 12\nVertex 10: 7, 4, 8, 6\nVertex 11: 7, 2, 3, 12\nVertex 12: 7, 8, 11, 2, 9\n",
    "graph_output": "12 21\n7 11\n6 5\n12 7\n8 12\n2 11\n11 3\n7 10\n12 11\n4 10\n8 3\n8 10\n12 2\n4 1\n4 7\n4 3\n5 7\n3 1\n2 5\n3 9\n9 12\n10 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 88 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 5 and vertex 3.\n",
    "graph_output": "15 88\n1 14\n1 11\n14 4\n1 15\n4 9\n9 3\n3 6\n9 7\n9 8\n1 12\n15 5\n7 10\n10 13\n10 2\n13 15\n4 3\n8 5\n2 12\n7 12\n5 13\n4 7\n4 13\n10 5\n2 13\n7 13\n15 8\n3 13\n6 4\n4 8\n13 6\n12 8\n8 1\n13 8\n15 7\n4 12\n12 14\n6 7\n3 7\n5 6\n11 7\n12 5\n2 1\n14 6\n3 11\n4 11\n12 10\n5 11\n11 2\n1 3\n2 15\n1 7\n14 5\n11 6\n1 13\n10 3\n10 11\n6 15\n2 6\n2 3\n8 10\n4 1\n7 5\n3 14\n7 2\n9 5\n9 12\n3 15\n14 11\n13 12\n11 12\n15 12\n4 15\n2 14\n14 15\n6 1\n10 9\n5 2\n8 11\n12 3\n12 6\n13 9\n8 6\n14 13\n9 1\n3 8\n2 9\n1 10\n5 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 4 and vertex 16 are connected.\n\nUndirected Graph with 16 vertices and 15 edges\n\nEdges (Format: Node Node):\n11 6\n3 14\n1 10\n6 4\n3 8\n13 14\n6 1\n5 8\n3 10\n7 2\n4 15\n14 10\n8 16\n12 14\n12 13\n",
    "graph_output": "16 15\n11 6\n3 14\n1 10\n6 4\n3 8\n13 14\n6 1\n5 8\n3 10\n7 2\n4 15\n14 10\n8 16\n12 14\n12 13\n",
    "vertices": [
      4,
      16
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 15 in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 30 edges\n\nEdges (Format: Node Node Weight):\n1 3 70\n1 14 28\n14 7 24\n7 10 25\n7 16 33\n3 13 42\n13 8 20\n16 4 60\n1 6 2\n14 15 36\n15 2 60\n16 11 93\n16 5 18\n13 9 95\n11 12 76\n1 15 31\n1 10 79\n14 11 75\n2 14 90\n8 4 47\n13 1 37\n9 5 18\n2 10 75\n7 13 73\n1 7 54\n2 6 52\n15 6 75\n7 6 58\n9 1 9\n12 6 73\n",
    "graph_output": "16 30\n1 3 70\n1 14 28\n14 7 24\n7 10 25\n7 16 33\n3 13 42\n13 8 20\n16 4 60\n1 6 2\n14 15 36\n15 2 60\n16 11 93\n16 5 18\n13 9 95\n11 12 76\n1 15 31\n1 10 79\n14 11 75\n2 14 90\n8 4 47\n13 1 37\n9 5 18\n2 10 75\n7 13 73\n1 7 54\n2 6 52\n15 6 75\n7 6 58\n9 1 9\n12 6 73\n",
    "vertices": [
      4,
      15
    ],
    "answer": 135,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 13 to vertex 9 in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 16 edges\n\nEdges (Format: Node Node Weight):\n1 16 40\n1 6 20\n6 8 11\n8 11 12\n11 3 82\n11 13 92\n16 2 62\n3 4 54\n8 10 18\n10 9 42\n2 7 90\n6 12 47\n13 5 5\n1 15 32\n4 14 100\n5 10 18\n",
    "graph_output": "16 16\n1 16 40\n1 6 20\n6 8 11\n8 11 12\n11 3 82\n11 13 92\n16 2 62\n3 4 54\n8 10 18\n10 9 42\n2 7 90\n6 12 47\n13 5 5\n1 15 32\n4 14 100\n5 10 18\n",
    "vertices": [
      13,
      9
    ],
    "answer": 65,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 9 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 2 and vertex 6.\n",
    "graph_output": "8 9\n8 5\n4 1\n2 4\n5 4\n3 4\n2 1\n2 5\n1 5\n2 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 11 vertices and 55 edges\n\nEdges (Format: Node Node):\n4 5\n2 3\n11 6\n7 9\n3 4\n3 7\n4 7\n10 4\n8 9\n8 11\n5 8\n2 7\n10 9\n4 1\n8 2\n3 10\n6 2\n11 7\n1 5\n1 3\n8 1\n3 9\n6 10\n6 8\n7 10\n7 6\n2 9\n11 10\n3 5\n11 5\n1 10\n1 6\n8 7\n9 6\n11 2\n5 7\n11 3\n1 7\n9 5\n6 3\n10 5\n4 6\n10 8\n4 11\n2 1\n5 2\n8 4\n9 4\n9 1\n2 10\n8 3\n1 11\n2 4\n11 9\n6 5\n",
    "graph_output": "11 55\n4 5\n2 3\n11 6\n7 9\n3 4\n3 7\n4 7\n10 4\n8 9\n8 11\n5 8\n2 7\n10 9\n4 1\n8 2\n3 10\n6 2\n11 7\n1 5\n1 3\n8 1\n3 9\n6 10\n6 8\n7 10\n7 6\n2 9\n11 10\n3 5\n11 5\n1 10\n1 6\n8 7\n9 6\n11 2\n5 7\n11 3\n1 7\n9 5\n6 3\n10 5\n4 6\n10 8\n4 11\n2 1\n5 2\n8 4\n9 4\n9 1\n2 10\n8 3\n1 11\n2 4\n11 9\n6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 11 (source) to vertex 7 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 16 edges\n\nEdges (Format: Node Node Capacity):\n1 2 8\n2 11 2\n1 6 9\n1 5 2\n6 7 7\n2 4 9\n6 9 2\n4 3 10\n7 10 9\n3 8 4\n7 3 8\n2 7 2\n2 10 1\n5 6 6\n7 8 9\n3 2 9\n",
    "graph_output": "11 16\n1 2 8\n2 11 2\n1 6 9\n1 5 2\n6 7 7\n2 4 9\n6 9 2\n4 3 10\n7 10 9\n3 8 4\n7 3 8\n2 7 2\n2 10 1\n5 6 6\n7 8 9\n3 2 9\n",
    "vertices": [
      11,
      7
    ],
    "answer": 2,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 98 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 2, 4, 11, 6, 12, 5, 7, 13, 3, 9, 8, 10\nVertex 2: 8, 11, 1, 14, 4, 5, 6, 3, 15, 10, 12, 13\nVertex 3: 14, 13, 10, 7, 11, 8, 2, 15, 1, 5, 9, 6, 4, 12\nVertex 4: 14, 10, 2, 12, 1, 11, 9, 6, 15, 7, 13, 8, 3\nVertex 5: 14, 8, 13, 11, 2, 7, 6, 1, 9, 3, 12, 15\nVertex 6: 9, 7, 8, 11, 1, 4, 10, 5, 2, 15, 13, 3, 12, 14\nVertex 7: 14, 10, 6, 3, 11, 12, 5, 4, 9, 1, 13, 8, 15\nVertex 8: 10, 2, 11, 5, 14, 12, 6, 3, 13, 9, 4, 1, 7, 15\nVertex 9: 10, 15, 6, 13, 14, 4, 5, 8, 12, 7, 3, 1\nVertex 10: 14, 9, 8, 12, 7, 3, 4, 6, 11, 13, 2, 15, 1\nVertex 11: 8, 15, 2, 3, 6, 1, 4, 14, 5, 13, 7, 12, 10\nVertex 12: 10, 8, 4, 13, 1, 14, 7, 9, 11, 5, 2, 6, 3\nVertex 13: 3, 15, 9, 12, 5, 11, 8, 14, 6, 7, 4, 1, 10, 2\nVertex 14: 1, 10, 5, 3, 4, 7, 8, 9, 2, 11, 12, 13, 15, 6\nVertex 15: 9, 11, 13, 4, 6, 14, 2, 3, 8, 10, 5, 7\n",
    "graph_output": "15 98\n1 14\n14 10\n10 9\n10 8\n10 12\n14 5\n14 3\n8 2\n9 15\n3 13\n14 4\n14 7\n8 11\n9 6\n7 10\n7 6\n3 10\n8 5\n15 11\n14 8\n13 15\n4 10\n2 11\n12 8\n2 1\n6 8\n3 7\n3 11\n3 8\n9 13\n6 11\n14 9\n2 14\n2 4\n12 4\n4 1\n11 1\n1 6\n4 11\n11 14\n12 13\n13 5\n5 11\n1 12\n9 4\n13 11\n2 5\n14 12\n11 7\n4 6\n10 6\n7 12\n5 7\n4 15\n6 5\n5 1\n5 9\n13 8\n6 2\n8 9\n4 7\n12 9\n9 7\n12 11\n13 14\n7 1\n11 10\n6 15\n13 6\n7 13\n3 2\n4 13\n14 15\n13 1\n2 15\n15 3\n1 3\n5 3\n9 3\n1 9\n4 8\n8 1\n8 7\n10 13\n15 8\n2 10\n12 5\n15 10\n15 5\n12 2\n10 1\n6 3\n12 6\n4 3\n3 12\n7 15\n2 13\n6 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 15 vertices and 81 edges\n\nEdges (Format: Node Node):\n1 7\n1 12\n12 6\n6 8\n1 15\n1 9\n7 10\n7 3\n15 2\n12 11\n3 14\n1 13\n15 5\n8 4\n6 10\n14 13\n2 13\n8 15\n11 15\n14 5\n8 5\n1 11\n7 6\n2 5\n15 14\n4 5\n4 13\n2 1\n9 5\n10 11\n4 2\n7 14\n13 3\n5 10\n4 11\n9 6\n10 14\n9 4\n11 3\n9 11\n15 7\n12 7\n15 6\n15 9\n6 1\n13 11\n12 10\n14 11\n10 8\n1 14\n12 13\n4 15\n7 4\n10 13\n12 9\n7 9\n13 9\n11 2\n6 13\n11 6\n2 12\n1 10\n10 9\n8 3\n8 11\n6 4\n10 4\n8 14\n14 4\n1 3\n8 7\n14 2\n12 8\n2 7\n3 2\n4 1\n3 12\n3 6\n6 14\n2 6\n15 13\n",
    "graph_output": "15 81\n1 7\n1 12\n12 6\n6 8\n1 15\n1 9\n7 10\n7 3\n15 2\n12 11\n3 14\n1 13\n15 5\n8 4\n6 10\n14 13\n2 13\n8 15\n11 15\n14 5\n8 5\n1 11\n7 6\n2 5\n15 14\n4 5\n4 13\n2 1\n9 5\n10 11\n4 2\n7 14\n13 3\n5 10\n4 11\n9 6\n10 14\n9 4\n11 3\n9 11\n15 7\n12 7\n15 6\n15 9\n6 1\n13 11\n12 10\n14 11\n10 8\n1 14\n12 13\n4 15\n7 4\n10 13\n12 9\n7 9\n13 9\n11 2\n6 13\n11 6\n2 12\n1 10\n10 9\n8 3\n8 11\n6 4\n10 4\n8 14\n14 4\n1 3\n8 7\n14 2\n12 8\n2 7\n3 2\n4 1\n3 12\n3 6\n6 14\n2 6\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 9 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 61 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 2 with a capacity of 8.\nThere is an edge between vertex 3 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 4 with a capacity of 7.\nThere is an edge between vertex 4 and vertex 12 with a capacity of 3.\nThere is an edge between vertex 4 and vertex 5 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 11 with a capacity of 9.\nThere is an edge between vertex 3 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 11 and vertex 7 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 3 with a capacity of 4.\nThere is an edge between vertex 12 and vertex 5 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 9 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 12 with a capacity of 1.\nThere is an edge between vertex 5 and vertex 2 with a capacity of 5.\nThere is an edge between vertex 2 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 11 with a capacity of 8.\nThere is an edge between vertex 3 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 11 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 2 and vertex 6 with a capacity of 2.\nThere is an edge between vertex 12 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 2 and vertex 12 with a capacity of 3.\nThere is an edge between vertex 10 and vertex 5 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 6 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 8 with a capacity of 7.\nThere is an edge between vertex 9 and vertex 5 with a capacity of 6.\nThere is an edge between vertex 8 and vertex 10 with a capacity of 3.\nThere is an edge between vertex 11 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 3.\nThere is an edge between vertex 4 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 5 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 6 and vertex 12 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 12 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 10 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 6 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 5 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 1.\nThere is an edge between vertex 8 and vertex 12 with a capacity of 7.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 2 with a capacity of 4.\nThere is an edge between vertex 7 and vertex 12 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 9 and vertex 8 with a capacity of 3.\nThere is an edge between vertex 4 and vertex 8 with a capacity of 3.\nThere is an edge between vertex 12 and vertex 11 with a capacity of 8.\nThere is an edge between vertex 9 and vertex 2 with a capacity of 6.\nThere is an edge between vertex 2 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 6 and vertex 5 with a capacity of 6.\nThere is an edge between vertex 6 and vertex 4 with a capacity of 4.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 3.\nThere is an edge between vertex 11 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 4 and vertex 10 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 1 with a capacity of 3.\nThere is an edge between vertex 10 and vertex 1 with a capacity of 8.\nThere is an edge between vertex 5 and vertex 11 with a capacity of 1.\n",
    "graph_output": "12 61\n1 3 8\n1 2 8\n3 10 5\n3 4 7\n4 12 3\n4 5 8\n1 9 2\n3 6 9\n4 11 9\n3 8 9\n11 7 8\n1 6 9\n7 3 4\n12 5 5\n10 9 10\n1 12 1\n5 2 5\n2 3 5\n1 11 8\n3 9 4\n11 6 9\n2 6 2\n12 9 4\n2 12 3\n10 5 3\n7 6 5\n1 8 7\n9 5 6\n8 10 3\n11 10 4\n6 8 3\n4 9 4\n5 7 3\n3 5 1\n2 10 9\n6 12 3\n7 8 4\n12 10 4\n10 6 9\n6 9 5\n5 8 5\n2 7 1\n8 12 7\n9 7 4\n4 2 4\n7 12 1\n11 8 9\n9 8 3\n4 8 3\n12 11 8\n9 2 6\n2 8 5\n7 10 5\n6 5 6\n6 4 4\n1 5 3\n11 9 5\n4 10 2\n4 1 3\n10 1 8\n5 11 1\n",
    "vertices": [
      9,
      6
    ],
    "answer": 53,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 99 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   0   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   0   0   1   1   1   1   0   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   0   1   1   0   1 \n 9 |  0   1   1   0   1   1   1   1   0   0   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   0   0   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   0   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   1   1   1   1   0   1   1   1   1   1   0   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 99\n1 4\n1 11\n1 6\n4 12\n6 13\n6 5\n6 7\n13 8\n13 2\n13 10\n1 3\n5 9\n1 15\n3 14\n15 9\n10 14\n3 15\n15 7\n2 14\n12 15\n14 9\n3 6\n12 1\n9 12\n2 5\n2 3\n5 1\n4 2\n11 4\n5 13\n6 9\n15 11\n5 14\n1 8\n3 9\n7 3\n11 9\n14 11\n11 3\n5 10\n14 15\n10 15\n7 13\n9 7\n13 11\n12 13\n1 2\n10 12\n5 3\n6 8\n10 1\n12 5\n3 8\n9 8\n14 4\n12 11\n8 12\n4 5\n4 10\n5 7\n6 10\n9 13\n2 8\n6 11\n15 5\n9 2\n10 7\n6 15\n7 14\n10 2\n14 12\n3 12\n7 4\n7 8\n5 8\n7 2\n7 1\n15 13\n8 15\n7 12\n4 15\n1 13\n10 11\n5 11\n13 14\n12 2\n2 6\n4 8\n10 8\n6 14\n11 7\n6 4\n1 14\n11 2\n15 2\n13 4\n3 13\n10 3\n6 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 88 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 9 and vertex 8.\n",
    "graph_output": "15 88\n1 11\n11 13\n1 2\n11 7\n11 6\n7 15\n6 9\n9 3\n13 5\n7 12\n6 14\n1 8\n8 10\n9 4\n9 11\n8 5\n5 10\n14 15\n15 10\n5 1\n12 13\n14 3\n5 7\n1 10\n8 14\n4 11\n4 1\n12 4\n9 14\n3 4\n6 15\n4 6\n9 2\n13 4\n7 10\n6 10\n11 10\n6 8\n3 10\n2 10\n6 13\n15 2\n9 1\n6 2\n7 4\n1 14\n1 15\n12 3\n7 13\n2 12\n3 11\n5 15\n10 14\n13 10\n1 3\n12 1\n3 2\n15 11\n6 5\n2 5\n14 12\n8 2\n8 11\n12 15\n14 7\n11 2\n9 13\n7 9\n8 4\n4 10\n13 14\n5 4\n12 6\n15 8\n13 8\n12 10\n5 14\n13 1\n5 12\n14 11\n3 8\n14 4\n3 15\n9 12\n2 7\n2 4\n5 3\n9 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 6 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 16 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 7 (capacity=3), 9 (capacity=6), 10 (capacity=2), 11 (capacity=4), 3 (capacity=1)\nVertex 2: 7 (capacity=7), 10 (capacity=8)\nVertex 3: 7 (capacity=1), 1 (capacity=1)\nVertex 4: 11 (capacity=7)\nVertex 5: 6 (capacity=7), 8 (capacity=9), 11 (capacity=1), 9 (capacity=10), 7 (capacity=2)\nVertex 6: 7 (capacity=3), 5 (capacity=7)\nVertex 7: 1 (capacity=3), 2 (capacity=7), 3 (capacity=1), 6 (capacity=3), 11 (capacity=2), 5 (capacity=2)\nVertex 8: 5 (capacity=9)\nVertex 9: 1 (capacity=6), 5 (capacity=10)\nVertex 10: 2 (capacity=8), 1 (capacity=2)\nVertex 11: 7 (capacity=2), 4 (capacity=7), 5 (capacity=1), 1 (capacity=4)\n",
    "graph_output": "11 16\n1 7 3\n7 2 7\n7 3 1\n2 10 8\n1 9 6\n7 6 3\n7 11 2\n6 5 7\n5 8 9\n11 4 7\n11 5 1\n5 9 10\n1 10 2\n11 1 4\n5 7 2\n1 3 1\n",
    "vertices": [
      6,
      4
    ],
    "answer": 7,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 24 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   1   0   0   1   0   0   1   0   0   0   0   1   0   1 \n 2 |  0   0   0   0   0   0   0   1   0   0   1   0   0   0   1   1 \n 3 |  1   0   0   0   0   1   0   0   0   0   0   1   0   1   0   1 \n 4 |  0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 6 |  1   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0 \n 8 |  0   1   0   1   0   0   0   0   0   0   0   1   0   0   1   0 \n 9 |  1   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n11 |  0   1   0   0   0   0   0   0   0   0   0   1   0   1   0   0 \n12 |  0   0   1   0   0   0   0   1   0   0   1   0   0   0   0   0 \n13 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1 \n14 |  1   0   1   0   0   0   0   0   0   1   1   0   0   0   0   0 \n15 |  0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n16 |  1   1   1   0   0   0   0   0   0   0   0   0   1   0   0   0 \n",
    "graph_output": "16 24\n1 9\n1 16\n1 6\n1 14\n14 10\n16 2\n14 3\n16 13\n13 4\n3 12\n2 11\n12 8\n8 15\n6 7\n9 5\n3 6\n3 1\n2 15\n14 11\n7 9\n2 8\n4 8\n11 12\n16 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 11 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9 with a weight of 38.\nThere is an edge between vertex 1 and vertex 2 with a weight of 20.\nThere is an edge between vertex 2 and vertex 10 with a weight of 51.\nThere is an edge between vertex 1 and vertex 11 with a weight of 30.\nThere is an edge between vertex 9 and vertex 3 with a weight of 61.\nThere is an edge between vertex 3 and vertex 6 with a weight of 43.\nThere is an edge between vertex 11 and vertex 7 with a weight of 77.\nThere is an edge between vertex 10 and vertex 5 with a weight of 10.\nThere is an edge between vertex 7 and vertex 4 with a weight of 15.\nThere is an edge between vertex 11 and vertex 8 with a weight of 82.\nThere is an edge between vertex 3 and vertex 8 with a weight of 11.\n",
    "graph_output": "11 11\n1 9 38\n1 2 20\n2 10 51\n1 11 30\n9 3 61\n3 6 43\n11 7 77\n10 5 10\n7 4 15\n11 8 82\n3 8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 377,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 31 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 17 and vertex 1.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 12 and vertex 10.\n",
    "graph_output": "17 31\n1 7\n1 14\n1 11\n11 4\n11 17\n17 12\n17 8\n14 6\n4 2\n2 15\n8 5\n6 13\n4 16\n11 10\n10 9\n14 3\n7 15\n10 14\n6 8\n6 12\n6 15\n8 13\n4 12\n16 2\n17 1\n4 6\n8 2\n3 6\n14 2\n13 10\n12 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 100 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 15, 12, 9, 7, 10, 3, 11, 6, 8, 14, 4, 5, 2\nVertex 2: 11, 4, 13, 9, 6, 8, 10, 5, 15, 3, 12, 7, 14, 1\nVertex 3: 7, 10, 4, 1, 8, 9, 14, 12, 13, 2, 11, 5\nVertex 4: 5, 2, 10, 14, 9, 6, 3, 13, 15, 8, 11, 1, 12, 7\nVertex 5: 11, 4, 9, 7, 8, 10, 2, 15, 12, 6, 14, 3, 1\nVertex 6: 10, 7, 14, 12, 4, 2, 13, 1, 11, 5, 9, 15, 8\nVertex 7: 6, 3, 15, 5, 1, 11, 8, 13, 12, 9, 4, 2\nVertex 8: 9, 11, 5, 2, 12, 7, 13, 3, 4, 1, 14, 10, 15, 6\nVertex 9: 8, 14, 5, 1, 2, 4, 3, 11, 10, 12, 13, 7, 15, 6\nVertex 10: 6, 4, 14, 12, 3, 13, 1, 2, 5, 9, 8, 11, 15\nVertex 11: 13, 2, 5, 12, 8, 14, 7, 1, 4, 9, 15, 10, 6, 3\nVertex 12: 11, 1, 10, 13, 6, 15, 8, 14, 7, 5, 3, 9, 4, 2\nVertex 13: 11, 1, 2, 12, 10, 15, 4, 14, 6, 7, 8, 3, 9\nVertex 14: 9, 10, 11, 4, 6, 13, 12, 3, 8, 1, 15, 5, 2\nVertex 15: 1, 7, 12, 13, 4, 5, 2, 11, 8, 10, 14, 9, 6\n",
    "graph_output": "15 100\n11 13\n11 2\n5 11\n5 4\n12 11\n4 2\n10 6\n7 6\n3 7\n1 13\n8 9\n2 13\n1 15\n10 4\n9 14\n11 8\n12 1\n14 10\n12 10\n10 3\n5 9\n14 11\n4 14\n6 14\n15 7\n1 9\n7 5\n9 2\n12 13\n6 12\n7 1\n4 9\n10 13\n1 10\n4 6\n6 2\n5 8\n2 8\n2 10\n15 12\n5 10\n4 3\n13 15\n7 11\n13 4\n14 13\n12 8\n1 3\n8 7\n6 13\n15 4\n5 2\n11 1\n12 14\n13 7\n13 8\n3 8\n5 15\n7 12\n9 3\n4 8\n15 2\n1 6\n12 5\n4 11\n3 14\n11 9\n3 12\n8 1\n8 14\n10 9\n12 9\n13 3\n1 14\n15 11\n13 9\n10 8\n8 15\n7 9\n3 2\n1 4\n10 11\n11 6\n15 10\n6 5\n3 11\n4 12\n14 15\n9 15\n5 14\n5 3\n12 2\n9 6\n4 7\n15 6\n7 2\n5 1\n6 8\n2 14\n1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 6 vertices and 8 edges\n\nEdges (Format: Node Node):\n6 1\n3 2\n3 4\n3 1\n1 4\n2 4\n4 5\n1 2\n",
    "graph_output": "6 8\n6 1\n3 2\n3 4\n3 1\n1 4\n2 4\n4 5\n1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 7 vertices and 11 edges\n\nEdges (Format: Node Node):\n1 4\n2 7\n5 4\n7 5\n6 2\n1 7\n6 5\n4 6\n3 2\n7 6\n1 6\n",
    "graph_output": "7 11\n1 4\n2 7\n5 4\n7 5\n6 2\n1 7\n6 5\n4 6\n3 2\n7 6\n1 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 20,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 21 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 6 and vertex 7.\n",
    "graph_output": "8 21\n1 2\n2 5\n5 8\n1 6\n2 4\n2 7\n7 3\n8 1\n4 6\n7 8\n7 4\n8 6\n3 6\n6 5\n3 2\n4 1\n5 3\n4 3\n1 7\n8 3\n6 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 28203,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nUndirected Graph with 30 vertices and 29 edges\n\nEdges (Format: Node Node):\n1 12\n1 28\n1 10\n1 7\n28 22\n22 21\n10 13\n22 15\n12 8\n12 29\n22 6\n13 19\n28 16\n16 4\n4 14\n16 26\n13 9\n4 30\n15 27\n10 11\n8 2\n15 18\n19 20\n18 23\n6 5\n10 3\n2 25\n14 24\n1 17\n",
    "graph_output": "30 29\n1 12\n1 28\n1 10\n1 7\n28 22\n22 21\n10 13\n22 15\n12 8\n12 29\n22 6\n13 19\n28 16\n16 4\n4 14\n16 26\n13 9\n4 30\n15 27\n10 11\n8 2\n15 18\n19 20\n18 23\n6 5\n10 3\n2 25\n14 24\n1 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 8\n1 6\n8 10\n1 13\n13 9\n13 4\n10 12\n4 2\n12 16\n4 5\n4 15\n6 11\n2 3\n12 14\n13 7\n16 10\n15 16\n3 4\n9 6\n3 1\n5 2\n5 7\n8 2\n3 6\n7 15\n14 13\n14 8\n13 11\n",
    "graph_output": "16 28\n1 8\n1 6\n8 10\n1 13\n13 9\n13 4\n10 12\n4 2\n12 16\n4 5\n4 15\n6 11\n2 3\n12 14\n13 7\n16 10\n15 16\n3 4\n9 6\n3 1\n5 2\n5 7\n8 2\n3 6\n7 15\n14 13\n14 8\n13 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 16 vertices and 106 edges\n\nEdges (Format: Node Node):\n11 3\n7 8\n2 12\n7 3\n3 12\n5 14\n14 9\n5 15\n2 6\n15 8\n15 9\n3 15\n4 10\n11 5\n9 10\n1 16\n12 14\n3 2\n13 8\n8 16\n6 14\n15 14\n10 8\n8 9\n16 6\n4 1\n14 11\n13 5\n6 5\n15 13\n4 15\n15 10\n6 8\n6 10\n7 6\n2 10\n13 1\n10 1\n12 4\n8 2\n9 5\n8 14\n4 9\n7 14\n13 6\n15 12\n7 12\n2 14\n16 9\n1 12\n7 4\n7 11\n16 2\n10 3\n7 16\n3 5\n11 1\n15 7\n11 2\n16 10\n14 10\n8 5\n1 6\n1 8\n16 5\n4 14\n2 15\n11 15\n4 8\n16 11\n7 10\n11 12\n9 6\n3 6\n9 13\n16 3\n15 16\n14 16\n2 1\n6 4\n11 9\n12 5\n10 11\n11 13\n5 4\n9 2\n16 13\n16 4\n3 9\n5 1\n12 13\n2 5\n11 8\n16 12\n12 9\n13 10\n14 13\n15 6\n11 4\n12 10\n1 9\n7 9\n8 12\n3 1\n13 2\n3 14\n",
    "graph_output": "16 106\n11 3\n7 8\n2 12\n7 3\n3 12\n5 14\n14 9\n5 15\n2 6\n15 8\n15 9\n3 15\n4 10\n11 5\n9 10\n1 16\n12 14\n3 2\n13 8\n8 16\n6 14\n15 14\n10 8\n8 9\n16 6\n4 1\n14 11\n13 5\n6 5\n15 13\n4 15\n15 10\n6 8\n6 10\n7 6\n2 10\n13 1\n10 1\n12 4\n8 2\n9 5\n8 14\n4 9\n7 14\n13 6\n15 12\n7 12\n2 14\n16 9\n1 12\n7 4\n7 11\n16 2\n10 3\n7 16\n3 5\n11 1\n15 7\n11 2\n16 10\n14 10\n8 5\n1 6\n1 8\n16 5\n4 14\n2 15\n11 15\n4 8\n16 11\n7 10\n11 12\n9 6\n3 6\n9 13\n16 3\n15 16\n14 16\n2 1\n6 4\n11 9\n12 5\n10 11\n11 13\n5 4\n9 2\n16 13\n16 4\n3 9\n5 1\n12 13\n2 5\n11 8\n16 12\n12 9\n13 10\n14 13\n15 6\n11 4\n12 10\n1 9\n7 9\n8 12\n3 1\n13 2\n3 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 20, 4, 3, 8, 15\nVertex 2: 21\nVertex 3: 1, 18\nVertex 4: 1, 30, 24, 6, 14, 10\nVertex 5: 24, 28, 16\nVertex 6: 4, 19\nVertex 7: 11, 9, 22\nVertex 8: 1, 25\nVertex 9: 7\nVertex 10: 4\nVertex 11: 30, 7\nVertex 12: 24\nVertex 13: 30\nVertex 14: 4\nVertex 15: 1\nVertex 16: 5\nVertex 17: 24\nVertex 18: 3\nVertex 19: 6\nVertex 20: 1, 23\nVertex 21: 30, 2\nVertex 22: 7\nVertex 23: 20\nVertex 24: 4, 5, 12, 17\nVertex 25: 8\nVertex 26: 30\nVertex 27: 30\nVertex 28: 5\nVertex 29: 30\nVertex 30: 4, 11, 21, 27, 13, 26, 29\n",
    "graph_output": "30 29\n1 20\n1 4\n4 30\n1 3\n30 11\n1 8\n30 21\n4 24\n21 2\n24 5\n30 27\n4 6\n30 13\n24 12\n5 28\n11 7\n1 15\n24 17\n4 14\n30 26\n7 9\n6 19\n5 16\n20 23\n3 18\n4 10\n30 29\n8 25\n7 22\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "list"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 30, 11, 20\nVertex 2: 20, 7\nVertex 3: 16, 23\nVertex 4: 21\nVertex 5: 7, 22\nVertex 6: 9\nVertex 7: 2, 5\nVertex 8: 30, 10\nVertex 9: 20, 6\nVertex 10: 8, 26\nVertex 11: 1, 12\nVertex 12: 11, 16, 17\nVertex 13: 20\nVertex 14: 1, 24\nVertex 15: 20, 18, 27\nVertex 16: 12, 3\nVertex 17: 12\nVertex 18: 15\nVertex 19: 28\nVertex 20: 1, 15, 2, 9, 13, 28\nVertex 21: 24, 4\nVertex 22: 5, 25\nVertex 23: 3\nVertex 24: 14, 21\nVertex 25: 22\nVertex 26: 10\nVertex 27: 15\nVertex 28: 20, 19\nVertex 29: 30\nVertex 30: 1, 8, 29\n",
    "graph_output": "30 29\n1 14\n1 30\n1 11\n1 20\n14 24\n20 15\n24 21\n15 18\n11 12\n20 2\n30 8\n20 9\n12 16\n2 7\n15 27\n8 10\n7 5\n20 13\n5 22\n12 17\n21 4\n10 26\n9 6\n22 25\n16 3\n30 29\n20 28\n28 19\n3 23\n",
    "vertices": [
      null,
      null
    ],
    "answer": 11,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 2 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 69 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   0 \n 2 |  1   0   1   1   1   0   1   1   1   0   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   0   0   0   1   1   1 \n 6 |  1   0   1   1   1   0   1   1   1   1   0   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1 \n 8 |  1   1   1   1   0   1   1   0   1   0   1   1   1 \n 9 |  1   1   1   1   0   1   1   1   0   1   1   1   1 \n10 |  1   0   1   1   0   1   1   0   1   0   1   1   1 \n11 |  1   1   1   1   1   0   1   1   1   1   0   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   0 \n13 |  0   1   1   1   1   1   1   1   1   1   1   0   0 \n\nCapacity Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0  10  10   3   1   6   7   7   8   9   4   3   0 \n 2 | 10   0   4   6   2   0   4  10   9   0   7   6   6 \n 3 | 10   4   0  10   7   1   4   5   9   1   1   2   9 \n 4 |  3   6  10   0   2   1   4   2   9   5   2   1   3 \n 5 |  1   2   7   2   0   4   3   0   0   0   2   5   8 \n 6 |  6   0   1   1   4   0   6   9   4   9   0   4  10 \n 7 |  7   4   4   4   3   6   0   1   6  10   1   3   5 \n 8 |  7  10   5   2   0   9   1   0   8   0   3  10   6 \n 9 |  8   9   9   9   0   4   6   8   0  10   8   4   5 \n10 |  9   0   1   5   0   9  10   0  10   0  10   2   1 \n11 |  4   7   1   2   2   0   1   3   8  10   0   2   5 \n12 |  3   6   2   1   5   4   3  10   4   2   2   0   0 \n13 |  0   6   9   3   8  10   5   6   5   1   5   0   0 \n",
    "graph_output": "13 69\n1 3 10\n3 13 9\n3 12 2\n3 2 4\n3 9 9\n9 4 9\n1 6 6\n4 11 2\n6 10 9\n2 7 4\n11 5 2\n4 8 2\n6 5 4\n9 6 4\n8 11 3\n4 6 1\n6 7 6\n11 13 5\n12 8 10\n5 13 8\n5 3 7\n2 1 10\n3 8 5\n10 3 1\n2 11 7\n11 10 10\n7 1 7\n3 6 1\n2 9 9\n12 7 3\n7 10 10\n10 13 1\n7 8 1\n10 12 2\n5 1 1\n1 10 9\n13 9 5\n12 11 2\n2 12 6\n3 11 1\n7 4 4\n8 2 10\n8 1 7\n5 12 5\n3 4 10\n12 1 3\n11 7 1\n3 7 4\n4 12 1\n2 4 6\n6 8 9\n1 11 4\n1 9 8\n13 4 3\n8 9 8\n9 7 6\n7 5 3\n7 13 5\n4 10 5\n1 4 3\n13 2 6\n9 10 10\n9 11 8\n13 8 6\n5 4 2\n2 5 2\n6 13 10\n9 12 4\n12 6 4\n",
    "vertices": [
      2,
      4
    ],
    "answer": 48,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 17 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 10 and vertex 17.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 15 and vertex 1.\n",
    "graph_output": "17 28\n1 10\n10 11\n10 5\n10 17\n11 8\n10 4\n8 13\n8 15\n15 12\n11 7\n4 16\n17 9\n7 3\n1 6\n11 2\n5 14\n16 12\n9 6\n2 15\n6 3\n8 14\n8 4\n9 15\n13 5\n15 7\n1 3\n7 1\n15 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 24 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   0   0   1   0   0   0   1   0   0   0   1   0   0 \n 2 |  1   0   0   0   0   0   1   0   0   1   0   0   1   0   0 \n 3 |  0   0   0   1   0   0   0   0   1   1   0   0   0   0   0 \n 4 |  0   0   1   0   0   1   0   0   0   1   0   0   0   0   1 \n 5 |  1   0   0   0   0   1   1   0   1   0   0   0   0   0   0 \n 6 |  0   0   0   1   1   0   1   1   0   0   0   0   1   0   0 \n 7 |  0   1   0   0   1   1   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   1   0   0   0   0   0   1   0   0   0 \n 9 |  1   0   1   0   1   0   0   0   0   0   0   0   1   0   0 \n10 |  0   1   1   1   0   0   0   0   0   0   0   0   1   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n12 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n13 |  1   1   0   0   0   1   0   0   1   1   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   1 \n15 |  0   0   0   1   0   0   0   0   0   0   0   0   0   1   0 \n",
    "graph_output": "15 24\n5 1\n3 9\n9 5\n9 1\n15 4\n1 13\n9 13\n12 8\n2 10\n6 5\n2 1\n6 8\n10 3\n4 3\n13 2\n6 4\n11 14\n13 10\n4 10\n7 5\n2 7\n15 14\n6 7\n6 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 15 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 4 and vertex 9.\n",
    "graph_output": "11 15\n2 5\n4 8\n10 7\n3 1\n4 11\n1 11\n1 8\n10 9\n2 3\n3 5\n2 6\n11 3\n3 4\n11 5\n4 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 55 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   1   0   1   1   0   0   1   1   1   1   1   1 \n 2 |  1   0   0   0   1   0   0   1   1   1   1   1   1 \n 3 |  0   0   0   1   1   1   1   0   0   1   0   1   1 \n 4 |  1   0   1   0   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   0   0   1   0   1   1   1   1 \n 6 |  0   0   1   1   0   0   0   0   1   0   1   0   1 \n 7 |  0   0   1   1   0   0   0   1   1   1   0   1   0 \n 8 |  1   1   0   1   1   0   1   0   1   1   1   1   1 \n 9 |  1   1   0   1   0   1   1   1   0   1   0   1   1 \n10 |  1   1   1   1   1   0   1   1   1   0   1   0   1 \n11 |  1   1   0   1   1   1   0   1   0   1   0   1   0 \n12 |  1   1   1   1   1   0   1   1   1   0   1   0   0 \n13 |  1   1   1   1   1   1   0   1   1   1   0   0   0 \n\nCapacity Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0  10   0   7   5   0   0   9   3  10   6   7   7 \n 2 | 10   0   0   0   4   0   0   5   8   9   4   3   4 \n 3 |  0   0   0   9   6   1   3   0   0   5   0   4   5 \n 4 |  7   0   9   0   5   3   5   8   1   2   3   4   2 \n 5 |  5   4   6   5   0   0   0   3   0   4  10   9   9 \n 6 |  0   0   1   3   0   0   0   0  10   0   3   0   2 \n 7 |  0   0   3   5   0   0   0   1   1   1   0   3   0 \n 8 |  9   5   0   8   3   0   1   0   9   5   4   7   9 \n 9 |  3   8   0   1   0  10   1   9   0   1   0   2   7 \n10 | 10   9   5   2   4   0   1   5   1   0  10   0   1 \n11 |  6   4   0   3  10   3   0   4   0  10   0   4   0 \n12 |  7   3   4   4   9   0   3   7   2   0   4   0   0 \n13 |  7   4   5   2   9   2   0   9   7   1   0   0   0 \n",
    "graph_output": "13 55\n1 11 6\n1 10 10\n11 4 3\n1 9 3\n11 12 4\n4 5 5\n9 6 10\n11 2 4\n6 13 2\n4 7 5\n13 3 5\n1 8 9\n4 12 4\n9 7 1\n1 12 7\n1 4 7\n12 5 9\n4 13 2\n8 2 5\n6 3 1\n11 8 4\n7 8 1\n9 10 1\n4 6 3\n8 10 5\n9 2 8\n13 8 9\n3 4 9\n9 4 1\n2 10 9\n4 10 2\n1 5 5\n3 5 6\n12 3 4\n8 5 3\n2 13 4\n4 8 8\n8 9 9\n5 10 4\n13 10 1\n3 7 3\n2 12 3\n12 8 7\n3 10 5\n1 2 10\n6 11 3\n11 10 10\n9 12 2\n1 13 7\n5 13 9\n5 2 4\n12 7 3\n13 9 7\n7 10 1\n11 5 10\n",
    "vertices": [
      3,
      10
    ],
    "answer": 33,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 24 edges\n\nEdges (Format: Node Node Weight):\n1 7 53\n1 11 78\n7 2 56\n11 9 71\n9 13 47\n7 3 39\n7 14 97\n9 10 47\n14 15 64\n11 5 3\n11 8 10\n1 6 14\n9 12 20\n13 4 85\n2 16 45\n6 13 7\n12 10 100\n7 15 76\n1 8 27\n10 1 42\n4 3 55\n8 3 91\n10 13 81\n8 4 43\n",
    "graph_output": "16 24\n1 7 53\n1 11 78\n7 2 56\n11 9 71\n9 13 47\n7 3 39\n7 14 97\n9 10 47\n14 15 64\n11 5 3\n11 8 10\n1 6 14\n9 12 20\n13 4 85\n2 16 45\n6 13 7\n12 10 100\n7 15 76\n1 8 27\n10 1 42\n4 3 55\n8 3 91\n10 13 81\n8 4 43\n",
    "vertices": [
      null,
      null
    ],
    "answer": 546,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 12 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (7\u00d77):\n\n      1   2   3   4   5   6   7\n   ----------------------------\n 1 |  0   1   1   0   0   1   1 \n 2 |  1   0   0   0   0   1   1 \n 3 |  1   0   0   0   1   1   1 \n 4 |  0   0   0   0   1   0   1 \n 5 |  0   0   1   1   0   0   1 \n 6 |  1   1   1   0   0   0   0 \n 7 |  1   1   1   1   1   0   0 \n",
    "graph_output": "7 12\n1 7\n7 3\n7 2\n1 6\n7 4\n7 5\n3 1\n6 2\n5 3\n6 3\n1 2\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 297,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 6 vertices and 6 edges\n\nEdges (Format: Node Node):\n1 5\n6 4\n2 1\n2 6\n5 4\n2 5\n",
    "graph_output": "6 6\n1 5\n6 4\n2 1\n2 6\n5 4\n2 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 14 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 11 and vertex 12.\n",
    "graph_output": "12 14\n5 10\n4 5\n11 1\n11 4\n9 6\n7 6\n7 10\n1 5\n4 2\n7 5\n5 3\n10 4\n9 11\n11 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 5,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 31 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 3, 16, 12, 13, 5, 2, 9\nVertex 2: 4, 6, 5, 1, 11\nVertex 3: 1, 8\nVertex 4: 11, 2, 5, 16\nVertex 5: 2, 4, 1, 10, 16\nVertex 6: 2, 13\nVertex 7: 11, 9\nVertex 8: 3, 9, 10\nVertex 9: 7, 14, 8, 1\nVertex 10: 16, 5, 15, 8\nVertex 11: 1, 7, 4, 15, 12, 2\nVertex 12: 1, 16, 14, 11\nVertex 13: 1, 6\nVertex 14: 15, 9, 12\nVertex 15: 11, 14, 10\nVertex 16: 1, 10, 12, 4, 5\n",
    "graph_output": "16 31\n1 11\n1 3\n11 7\n1 16\n1 12\n7 9\n11 4\n3 8\n1 13\n11 15\n4 2\n2 6\n15 14\n16 10\n2 5\n9 14\n6 13\n4 5\n8 9\n16 12\n16 4\n5 1\n5 10\n2 1\n10 15\n10 8\n9 1\n14 12\n11 12\n5 16\n2 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 10 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10\nVertex 2: 4, 7\nVertex 3: 8\nVertex 4: 2, 8\nVertex 5: 10\nVertex 6: No connections\nVertex 7: 2, 8, 11\nVertex 8: 10, 7, 3, 4\nVertex 9: 10\nVertex 10: 8, 9, 5, 1\nVertex 11: 7\n",
    "graph_output": "11 10\n2 4\n10 8\n7 2\n10 9\n7 8\n5 10\n11 7\n10 1\n3 8\n8 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 24 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 14 and vertex 16.\n",
    "graph_output": "16 24\n15 10\n7 13\n2 4\n16 12\n8 11\n9 14\n1 8\n5 2\n16 3\n10 16\n7 12\n16 9\n13 1\n16 11\n7 2\n9 7\n4 5\n13 15\n15 12\n10 14\n6 9\n7 4\n5 8\n14 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 5 (source) to vertex 4 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 23 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0  41  71  55   0   0  95   7  50 \n 2 | 41   0   0   0   0  77  33  43   3 \n 3 | 71   0   0   0  41  83   0  47   0 \n 4 | 55   0   0   0   0   0  65   0  88 \n 5 |  0   0  41   0   0   0  90  98  34 \n 6 |  0  77  83   0   0   0   0  27  17 \n 7 | 95  33   0  65  90   0   0  12   7 \n 8 |  7  43  47   0  98  27  12   0  86 \n 9 | 50   3   0  88  34  17   7  86   0 \n\nCapacity Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0   8   9   8   0   0   9   7   7 \n 2 |  8   0   0   0   0   1   5  10   7 \n 3 |  9   0   0   0   8   6   0   9   0 \n 4 |  8   0   0   0   0   0   8   0   2 \n 5 |  0   0   8   0   0   0   7   1   4 \n 6 |  0   1   6   0   0   0   0   6   5 \n 7 |  9   5   0   8   7   0   0   6   2 \n 8 |  7  10   9   0   1   6   6   0   3 \n 9 |  7   7   0   2   4   5   2   3   0 \n",
    "graph_output": "9 23\n1 2 41 8\n1 4 55 8\n1 3 71 9\n3 6 83 6\n3 8 47 9\n8 5 98 1\n6 9 17 5\n8 7 12 6\n7 2 33 5\n8 9 86 3\n8 2 43 10\n9 4 88 2\n7 4 65 8\n5 9 34 4\n1 9 50 7\n9 7 7 2\n5 3 41 8\n6 2 77 1\n7 5 90 7\n9 2 3 7\n1 8 7 7\n7 1 95 9\n8 6 27 6\n",
    "vertices": [
      5,
      4
    ],
    "answer": 2603,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 11 vertices and 15 edges\n\nEdges (Format: Node Node):\n2 5\n4 8\n10 7\n3 1\n4 11\n1 11\n1 8\n10 9\n2 3\n3 5\n2 6\n11 3\n3 4\n11 5\n4 9\n",
    "graph_output": "11 15\n2 5\n4 8\n10 7\n3 1\n4 11\n1 11\n1 8\n10 9\n2 3\n3 5\n2 6\n11 3\n3 4\n11 5\n4 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 20 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 3 and vertex 13.\n",
    "graph_output": "15 20\n3 15\n10 9\n14 9\n8 7\n1 14\n11 7\n15 8\n13 8\n1 7\n1 12\n9 7\n8 6\n2 9\n6 5\n13 5\n5 4\n14 6\n2 10\n7 5\n3 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 17 vertices and 105 edges\n\nEdges (Format: Node Node):\n16 2\n6 3\n3 4\n13 1\n16 6\n9 12\n14 8\n16 10\n13 9\n15 6\n16 3\n1 12\n8 5\n11 10\n10 5\n16 5\n16 1\n14 12\n2 3\n15 2\n15 3\n8 7\n1 10\n3 13\n15 7\n6 13\n13 17\n4 14\n5 3\n11 16\n8 1\n15 10\n4 8\n4 16\n11 4\n2 10\n12 4\n3 7\n6 5\n9 16\n11 6\n6 2\n7 12\n2 7\n2 8\n15 9\n6 9\n10 13\n2 5\n2 1\n11 1\n4 2\n8 6\n1 14\n10 17\n10 7\n5 7\n13 16\n11 8\n15 17\n15 16\n12 15\n14 9\n4 10\n13 5\n13 8\n15 4\n16 12\n2 9\n2 14\n12 8\n17 7\n7 9\n10 8\n7 6\n8 9\n17 6\n11 17\n17 14\n17 4\n12 5\n5 9\n5 1\n13 12\n11 2\n13 11\n14 5\n16 8\n9 1\n1 3\n15 1\n12 6\n14 11\n15 8\n6 14\n14 3\n9 10\n5 4\n12 3\n17 9\n11 5\n12 11\n14 10\n14 13\n7 13\n",
    "graph_output": "17 105\n16 2\n6 3\n3 4\n13 1\n16 6\n9 12\n14 8\n16 10\n13 9\n15 6\n16 3\n1 12\n8 5\n11 10\n10 5\n16 5\n16 1\n14 12\n2 3\n15 2\n15 3\n8 7\n1 10\n3 13\n15 7\n6 13\n13 17\n4 14\n5 3\n11 16\n8 1\n15 10\n4 8\n4 16\n11 4\n2 10\n12 4\n3 7\n6 5\n9 16\n11 6\n6 2\n7 12\n2 7\n2 8\n15 9\n6 9\n10 13\n2 5\n2 1\n11 1\n4 2\n8 6\n1 14\n10 17\n10 7\n5 7\n13 16\n11 8\n15 17\n15 16\n12 15\n14 9\n4 10\n13 5\n13 8\n15 4\n16 12\n2 9\n2 14\n12 8\n17 7\n7 9\n10 8\n7 6\n8 9\n17 6\n11 17\n17 14\n17 4\n12 5\n5 9\n5 1\n13 12\n11 2\n13 11\n14 5\n16 8\n9 1\n1 3\n15 1\n12 6\n14 11\n15 8\n6 14\n14 3\n9 10\n5 4\n12 3\n17 9\n11 5\n12 11\n14 10\n14 13\n7 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 20 and 18 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (29\u00d729):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n   --------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   1   0   1   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   1   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 4 |  0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0 \n 7 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n13 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n15 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0 \n18 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n20 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n25 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "29 28\n1 22\n22 16\n16 2\n1 10\n1 24\n2 20\n16 11\n10 18\n24 19\n10 4\n22 26\n11 14\n26 5\n20 27\n27 17\n1 15\n2 25\n5 12\n26 6\n6 28\n12 29\n2 9\n17 23\n2 8\n14 21\n29 3\n8 7\n4 13\n",
    "vertices": [
      20,
      18
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 16 vertices and 27 edges\n\nEdges (Format: Node Node):\n1 3\n1 8\n3 14\n14 2\n14 7\n3 10\n7 11\n2 15\n3 6\n6 5\n14 9\n10 12\n12 13\n10 16\n6 4\n16 11\n2 12\n15 12\n1 9\n11 6\n13 5\n1 16\n16 6\n16 3\n11 15\n1 2\n5 15\n",
    "graph_output": "16 27\n1 3\n1 8\n3 14\n14 2\n14 7\n3 10\n7 11\n2 15\n3 6\n6 5\n14 9\n10 12\n12 13\n10 16\n6 4\n16 11\n2 12\n15 12\n1 9\n11 6\n13 5\n1 16\n16 6\n16 3\n11 15\n1 2\n5 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 8 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 14 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   0   0   0   1   1   0   0   1   0 \n 2 |  1   0   1   0   0   0   0   0   0   1   0 \n 3 |  0   1   0   0   0   0   1   0   0   0   1 \n 4 |  0   0   0   0   0   0   0   0   0   0   1 \n 5 |  0   0   0   0   0   0   1   0   0   0   1 \n 6 |  1   0   0   0   0   0   0   0   1   0   0 \n 7 |  1   0   1   0   1   0   0   1   0   0   0 \n 8 |  0   0   0   0   0   0   1   0   0   0   0 \n 9 |  0   0   0   0   0   1   0   0   0   0   1 \n10 |  1   1   0   0   0   0   0   0   0   0   0 \n11 |  0   0   1   1   1   0   0   0   1   0   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0  10   0   0   0   1   6   0   0   4   0 \n 2 | 10   0   2   0   0   0   0   0   0   6   0 \n 3 |  0   2   0   0   0   0   4   0   0   0   2 \n 4 |  0   0   0   0   0   0   0   0   0   0   9 \n 5 |  0   0   0   0   0   0   7   0   0   0   5 \n 6 |  1   0   0   0   0   0   0   0   3   0   0 \n 7 |  6   0   4   0   7   0   0  10   0   0   0 \n 8 |  0   0   0   0   0   0  10   0   0   0   0 \n 9 |  0   0   0   0   0   3   0   0   0   0   5 \n10 |  4   6   0   0   0   0   0   0   0   0   0 \n11 |  0   0   2   9   5   0   0   0   5   0   0 \n",
    "graph_output": "11 14\n1 7 6\n7 3 4\n3 11 2\n1 10 4\n1 2 10\n11 4 9\n11 5 5\n7 8 10\n11 9 5\n1 6 1\n9 6 3\n2 10 6\n7 5 7\n2 3 2\n",
    "vertices": [
      8,
      2
    ],
    "answer": 9,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 10 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 11 edges\n\nEdges (Format: Node Node Capacity):\n1 3 9\n3 11 8\n11 2 2\n2 10 9\n11 4 8\n2 7 3\n7 8 5\n11 6 10\n8 9 6\n8 5 5\n10 6 9\n",
    "graph_output": "11 11\n1 3 9\n3 11 8\n11 2 2\n2 10 9\n11 4 8\n2 7 3\n7 8 5\n11 6 10\n8 9 6\n8 5 5\n10 6 9\n",
    "vertices": [
      10,
      2
    ],
    "answer": 11,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 22 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 1 and vertex 3.\n",
    "graph_output": "16 22\n1 11\n11 8\n1 10\n8 3\n11 7\n11 14\n10 2\n11 4\n2 9\n10 13\n2 16\n10 5\n1 15\n15 12\n8 6\n7 14\n3 7\n7 2\n12 16\n13 11\n3 14\n1 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 21 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   1   0   0   0   0   1   0   0   1   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1 \n 4 |  0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0 \n 5 |  1   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0 \n 6 |  0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0 \n 8 |  0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n10 |  1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n11 |  0   1   0   1   1   0   0   0   0   0   0   0   0   0   1   1 \n12 |  0   0   1   0   1   0   0   1   0   1   0   0   1   0   0   0 \n13 |  0   0   0   0   0   0   1   0   0   0   0   1   0   1   0   0 \n14 |  0   1   0   1   0   0   1   0   1   0   0   0   1   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n16 |  0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0 \n",
    "graph_output": "16 21\n1 5\n5 12\n5 11\n11 15\n12 13\n11 16\n13 14\n14 7\n11 2\n12 8\n2 6\n16 3\n11 4\n1 10\n14 9\n10 12\n14 4\n13 7\n12 3\n14 2\n6 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 16 vertices and 17 edges\n\nEdges (Format: Node Node):\n1 2\n2 12\n12 7\n12 5\n12 10\n7 8\n1 15\n5 13\n2 14\n15 4\n14 6\n12 16\n2 9\n9 3\n4 11\n13 2\n6 15\n",
    "graph_output": "16 17\n1 2\n2 12\n12 7\n12 5\n12 10\n7 8\n1 15\n5 13\n2 14\n15 4\n14 6\n12 16\n2 9\n9 3\n4 11\n13 2\n6 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 10 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 7 and vertex 8.\n",
    "graph_output": "11 10\n1 6\n8 2\n4 1\n4 7\n5 10\n2 3\n3 5\n1 8\n6 10\n7 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 14 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   1   0   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   1   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   1   0 \n 4 |  1   0   0   0   0   1   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   1   0   0   0   1   0   0 \n 6 |  0   0   0   1   0   0   1   0   0   0   0   0   0 \n 7 |  0   0   0   0   1   1   0   0   0   1   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   1 \n 9 |  0   0   0   0   0   0   0   0   0   1   1   1   1 \n10 |  0   0   0   0   0   0   1   0   1   0   1   0   0 \n11 |  0   0   0   0   1   0   0   0   1   1   0   0   0 \n12 |  0   1   1   0   0   0   0   0   1   0   0   0   0 \n13 |  0   0   0   0   0   0   0   1   1   0   0   0   0 \n",
    "graph_output": "13 14\n13 8\n9 12\n11 10\n10 7\n6 4\n9 11\n9 13\n5 11\n7 6\n1 4\n2 12\n12 3\n7 5\n9 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 31 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 8 and vertex 22.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 1 and vertex 20.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 20 and vertex 17.\nThere is an edge between vertex 20 and vertex 16.\nThere is an edge between vertex 5 and vertex 29.\nThere is an edge between vertex 7 and vertex 31.\nThere is an edge between vertex 29 and vertex 21.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 31 and vertex 19.\nThere is an edge between vertex 8 and vertex 28.\nThere is an edge between vertex 16 and vertex 24.\nThere is an edge between vertex 28 and vertex 10.\nThere is an edge between vertex 10 and vertex 25.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 21 and vertex 14.\nThere is an edge between vertex 21 and vertex 23.\nThere is an edge between vertex 10 and vertex 30.\nThere is an edge between vertex 15 and vertex 26.\nThere is an edge between vertex 31 and vertex 27.\nThere is an edge between vertex 23 and vertex 12.\nThere is an edge between vertex 19 and vertex 3.\nThere is an edge between vertex 21 and vertex 2.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 7 and vertex 18.\n",
    "graph_output": "31 30\n1 7\n1 8\n1 5\n8 22\n8 13\n1 20\n1 6\n20 17\n20 16\n5 29\n7 31\n29 21\n1 9\n31 19\n8 28\n16 24\n28 10\n10 25\n7 15\n21 14\n21 23\n10 30\n15 26\n31 27\n23 12\n19 3\n21 2\n1 4\n4 11\n7 18\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 130 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 9, 12, 6, 3, 15, 7, 16, 8, 13, 5, 14, 11, 10, 17, 2\nVertex 2: 7, 15, 9, 12, 16, 17, 8, 13, 5, 14, 6, 3, 4, 1, 10\nVertex 3: 9, 1, 5, 4, 6, 7, 12, 8, 14, 13, 2, 17, 16, 10\nVertex 4: 1, 7, 3, 11, 14, 15, 16, 9, 8, 12, 6, 13, 2, 10, 17\nVertex 5: 9, 13, 3, 8, 10, 6, 7, 12, 16, 2, 11, 17, 15, 14, 1\nVertex 6: 1, 10, 17, 3, 5, 8, 15, 12, 13, 2, 7, 9, 4, 11, 16, 14\nVertex 7: 4, 15, 14, 2, 8, 10, 1, 5, 17, 3, 6, 12, 11, 13, 16, 9\nVertex 8: 9, 11, 15, 16, 7, 10, 2, 5, 12, 6, 17, 13, 4, 3, 1, 14\nVertex 9: 1, 5, 8, 17, 3, 2, 12, 4, 15, 6, 13, 16, 14, 11, 7\nVertex 10: 17, 12, 11, 15, 6, 7, 8, 14, 5, 1, 4, 3, 16, 2\nVertex 11: 8, 16, 15, 10, 4, 17, 13, 5, 7, 14, 1, 6, 9, 12\nVertex 12: 1, 17, 2, 10, 15, 13, 8, 9, 16, 5, 6, 3, 4, 7, 11, 14\nVertex 13: 5, 2, 12, 8, 17, 11, 14, 6, 1, 9, 3, 16, 7, 4, 15\nVertex 14: 7, 4, 10, 15, 13, 17, 2, 5, 1, 3, 11, 8, 9, 6, 12, 16\nVertex 15: 7, 2, 11, 8, 10, 1, 4, 12, 16, 14, 9, 6, 5, 17, 13\nVertex 16: 11, 2, 8, 4, 15, 12, 1, 5, 13, 9, 7, 6, 3, 17, 10, 14\nVertex 17: 9, 10, 12, 6, 2, 11, 8, 13, 7, 14, 5, 15, 3, 1, 4, 16\n",
    "graph_output": "17 130\n1 4\n1 9\n9 5\n9 8\n9 17\n1 12\n8 11\n9 3\n4 7\n1 6\n7 15\n11 16\n7 14\n5 13\n7 2\n17 10\n17 12\n15 2\n3 1\n9 2\n15 11\n12 2\n2 16\n12 10\n11 10\n15 8\n15 10\n5 3\n16 8\n10 6\n8 7\n3 4\n7 10\n15 1\n4 11\n6 17\n17 2\n14 4\n4 15\n10 8\n2 8\n6 3\n5 8\n12 15\n14 10\n10 5\n2 13\n13 12\n11 17\n12 8\n5 6\n7 1\n4 16\n16 15\n9 12\n7 5\n12 16\n5 12\n8 6\n14 15\n1 16\n17 8\n8 13\n13 17\n5 16\n17 7\n4 9\n11 13\n15 9\n14 13\n14 17\n7 3\n15 6\n6 12\n6 13\n2 5\n3 12\n4 8\n11 5\n17 5\n14 2\n5 15\n6 2\n8 3\n14 5\n1 8\n7 6\n1 13\n6 9\n4 12\n5 1\n9 13\n14 1\n3 14\n7 12\n6 4\n3 13\n13 16\n11 7\n14 11\n14 8\n11 1\n9 16\n2 3\n13 7\n16 7\n11 6\n15 17\n3 17\n16 6\n4 13\n14 9\n10 1\n6 14\n4 2\n4 10\n16 3\n11 9\n3 10\n17 1\n13 15\n17 4\n12 11\n9 7\n14 12\n2 1\n16 17\n10 16\n2 10\n16 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 120 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9 with a weight of 3.\nThere is an edge between vertex 1 and vertex 2 with a weight of 11.\nThere is an edge between vertex 1 and vertex 5 with a weight of 21.\nThere is an edge between vertex 1 and vertex 12 with a weight of 43.\nThere is an edge between vertex 12 and vertex 7 with a weight of 57.\nThere is an edge between vertex 5 and vertex 16 with a weight of 93.\nThere is an edge between vertex 2 and vertex 13 with a weight of 13.\nThere is an edge between vertex 16 and vertex 8 with a weight of 36.\nThere is an edge between vertex 12 and vertex 14 with a weight of 99.\nThere is an edge between vertex 5 and vertex 4 with a weight of 3.\nThere is an edge between vertex 1 and vertex 3 with a weight of 26.\nThere is an edge between vertex 4 and vertex 15 with a weight of 71.\nThere is an edge between vertex 14 and vertex 10 with a weight of 74.\nThere is an edge between vertex 14 and vertex 6 with a weight of 52.\nThere is an edge between vertex 16 and vertex 11 with a weight of 94.\nThere is an edge between vertex 3 and vertex 6 with a weight of 17.\nThere is an edge between vertex 15 and vertex 7 with a weight of 19.\nThere is an edge between vertex 1 and vertex 14 with a weight of 96.\nThere is an edge between vertex 16 and vertex 4 with a weight of 53.\nThere is an edge between vertex 16 and vertex 12 with a weight of 6.\nThere is an edge between vertex 1 and vertex 13 with a weight of 5.\nThere is an edge between vertex 12 and vertex 2 with a weight of 14.\nThere is an edge between vertex 8 and vertex 11 with a weight of 48.\nThere is an edge between vertex 16 and vertex 1 with a weight of 75.\nThere is an edge between vertex 12 and vertex 11 with a weight of 54.\nThere is an edge between vertex 14 and vertex 2 with a weight of 88.\nThere is an edge between vertex 2 and vertex 11 with a weight of 57.\nThere is an edge between vertex 7 and vertex 8 with a weight of 51.\nThere is an edge between vertex 3 and vertex 12 with a weight of 73.\nThere is an edge between vertex 4 and vertex 1 with a weight of 22.\nThere is an edge between vertex 14 and vertex 15 with a weight of 22.\nThere is an edge between vertex 13 and vertex 12 with a weight of 22.\nThere is an edge between vertex 7 and vertex 4 with a weight of 9.\nThere is an edge between vertex 13 and vertex 10 with a weight of 63.\nThere is an edge between vertex 10 and vertex 15 with a weight of 9.\nThere is an edge between vertex 15 and vertex 12 with a weight of 94.\nThere is an edge between vertex 8 and vertex 13 with a weight of 85.\nThere is an edge between vertex 3 and vertex 9 with a weight of 66.\nThere is an edge between vertex 1 and vertex 7 with a weight of 7.\nThere is an edge between vertex 13 and vertex 7 with a weight of 65.\nThere is an edge between vertex 12 and vertex 5 with a weight of 67.\nThere is an edge between vertex 8 and vertex 14 with a weight of 2.\nThere is an edge between vertex 6 and vertex 15 with a weight of 79.\nThere is an edge between vertex 14 and vertex 5 with a weight of 59.\nThere is an edge between vertex 15 and vertex 13 with a weight of 60.\nThere is an edge between vertex 12 and vertex 4 with a weight of 9.\nThere is an edge between vertex 11 and vertex 6 with a weight of 8.\nThere is an edge between vertex 15 and vertex 8 with a weight of 76.\nThere is an edge between vertex 11 and vertex 7 with a weight of 38.\nThere is an edge between vertex 8 and vertex 9 with a weight of 70.\nThere is an edge between vertex 8 and vertex 5 with a weight of 48.\nThere is an edge between vertex 1 and vertex 8 with a weight of 49.\nThere is an edge between vertex 4 and vertex 2 with a weight of 88.\nThere is an edge between vertex 15 and vertex 9 with a weight of 36.\nThere is an edge between vertex 5 and vertex 3 with a weight of 59.\nThere is an edge between vertex 10 and vertex 7 with a weight of 34.\nThere is an edge between vertex 15 and vertex 16 with a weight of 67.\nThere is an edge between vertex 12 and vertex 8 with a weight of 77.\nThere is an edge between vertex 2 and vertex 15 with a weight of 5.\nThere is an edge between vertex 16 and vertex 13 with a weight of 35.\nThere is an edge between vertex 5 and vertex 7 with a weight of 87.\nThere is an edge between vertex 9 and vertex 5 with a weight of 10.\nThere is an edge between vertex 2 and vertex 16 with a weight of 13.\nThere is an edge between vertex 2 and vertex 6 with a weight of 9.\nThere is an edge between vertex 2 and vertex 10 with a weight of 75.\nThere is an edge between vertex 3 and vertex 14 with a weight of 67.\nThere is an edge between vertex 1 and vertex 6 with a weight of 25.\nThere is an edge between vertex 16 and vertex 10 with a weight of 34.\nThere is an edge between vertex 16 and vertex 14 with a weight of 95.\nThere is an edge between vertex 16 and vertex 3 with a weight of 70.\nThere is an edge between vertex 11 and vertex 14 with a weight of 94.\nThere is an edge between vertex 3 and vertex 7 with a weight of 5.\nThere is an edge between vertex 5 and vertex 6 with a weight of 16.\nThere is an edge between vertex 12 and vertex 6 with a weight of 55.\nThere is an edge between vertex 9 and vertex 7 with a weight of 74.\nThere is an edge between vertex 11 and vertex 1 with a weight of 23.\nThere is an edge between vertex 11 and vertex 4 with a weight of 85.\nThere is an edge between vertex 11 and vertex 13 with a weight of 25.\nThere is an edge between vertex 3 and vertex 2 with a weight of 60.\nThere is an edge between vertex 11 and vertex 10 with a weight of 13.\nThere is an edge between vertex 9 and vertex 12 with a weight of 22.\nThere is an edge between vertex 13 and vertex 14 with a weight of 89.\nThere is an edge between vertex 10 and vertex 1 with a weight of 96.\nThere is an edge between vertex 13 and vertex 5 with a weight of 40.\nThere is an edge between vertex 8 and vertex 6 with a weight of 83.\nThere is an edge between vertex 7 and vertex 14 with a weight of 84.\nThere is an edge between vertex 10 and vertex 6 with a weight of 65.\nThere is an edge between vertex 5 and vertex 11 with a weight of 17.\nThere is an edge between vertex 13 and vertex 6 with a weight of 30.\nThere is an edge between vertex 5 and vertex 10 with a weight of 96.\nThere is an edge between vertex 6 and vertex 16 with a weight of 50.\nThere is an edge between vertex 13 and vertex 4 with a weight of 48.\nThere is an edge between vertex 6 and vertex 7 with a weight of 9.\nThere is an edge between vertex 10 and vertex 3 with a weight of 17.\nThere is an edge between vertex 2 and vertex 7 with a weight of 23.\nThere is an edge between vertex 10 and vertex 9 with a weight of 61.\nThere is an edge between vertex 12 and vertex 10 with a weight of 60.\nThere is an edge between vertex 8 and vertex 10 with a weight of 88.\nThere is an edge between vertex 9 and vertex 2 with a weight of 40.\nThere is an edge between vertex 15 and vertex 5 with a weight of 31.\nThere is an edge between vertex 9 and vertex 4 with a weight of 60.\nThere is an edge between vertex 4 and vertex 14 with a weight of 47.\nThere is an edge between vertex 16 and vertex 7 with a weight of 38.\nThere is an edge between vertex 15 and vertex 11 with a weight of 91.\nThere is an edge between vertex 8 and vertex 4 with a weight of 60.\nThere is an edge between vertex 9 and vertex 16 with a weight of 25.\nThere is an edge between vertex 4 and vertex 10 with a weight of 67.\nThere is an edge between vertex 4 and vertex 6 with a weight of 67.\nThere is an edge between vertex 8 and vertex 2 with a weight of 59.\nThere is an edge between vertex 9 and vertex 6 with a weight of 55.\nThere is an edge between vertex 4 and vertex 3 with a weight of 97.\nThere is an edge between vertex 15 and vertex 3 with a weight of 6.\nThere is an edge between vertex 8 and vertex 3 with a weight of 39.\nThere is an edge between vertex 3 and vertex 13 with a weight of 72.\nThere is an edge between vertex 9 and vertex 11 with a weight of 44.\nThere is an edge between vertex 15 and vertex 1 with a weight of 65.\nThere is an edge between vertex 14 and vertex 9 with a weight of 44.\nThere is an edge between vertex 11 and vertex 3 with a weight of 6.\nThere is an edge between vertex 2 and vertex 5 with a weight of 27.\nThere is an edge between vertex 13 and vertex 9 with a weight of 44.\n",
    "graph_output": "16 120\n1 9 3\n1 2 11\n1 5 21\n1 12 43\n12 7 57\n5 16 93\n2 13 13\n16 8 36\n12 14 99\n5 4 3\n1 3 26\n4 15 71\n14 10 74\n14 6 52\n16 11 94\n3 6 17\n15 7 19\n1 14 96\n16 4 53\n16 12 6\n1 13 5\n12 2 14\n8 11 48\n16 1 75\n12 11 54\n14 2 88\n2 11 57\n7 8 51\n3 12 73\n4 1 22\n14 15 22\n13 12 22\n7 4 9\n13 10 63\n10 15 9\n15 12 94\n8 13 85\n3 9 66\n1 7 7\n13 7 65\n12 5 67\n8 14 2\n6 15 79\n14 5 59\n15 13 60\n12 4 9\n11 6 8\n15 8 76\n11 7 38\n8 9 70\n8 5 48\n1 8 49\n4 2 88\n15 9 36\n5 3 59\n10 7 34\n15 16 67\n12 8 77\n2 15 5\n16 13 35\n5 7 87\n9 5 10\n2 16 13\n2 6 9\n2 10 75\n3 14 67\n1 6 25\n16 10 34\n16 14 95\n16 3 70\n11 14 94\n3 7 5\n5 6 16\n12 6 55\n9 7 74\n11 1 23\n11 4 85\n11 13 25\n3 2 60\n11 10 13\n9 12 22\n13 14 89\n10 1 96\n13 5 40\n8 6 83\n7 14 84\n10 6 65\n5 11 17\n13 6 30\n5 10 96\n6 16 50\n13 4 48\n6 7 9\n10 3 17\n2 7 23\n10 9 61\n12 10 60\n8 10 88\n9 2 40\n15 5 31\n9 4 60\n4 14 47\n16 7 38\n15 11 91\n8 4 60\n9 16 25\n4 10 67\n4 6 67\n8 2 59\n9 6 55\n4 3 97\n15 3 6\n8 3 39\n3 13 72\n9 11 44\n15 1 65\n14 9 44\n11 3 6\n2 5 27\n13 9 44\n",
    "vertices": [
      null,
      null
    ],
    "answer": 105,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 130 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 17 and vertex 13.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 10 and vertex 17.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 17 and vertex 6.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 5 and vertex 17.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 8 and vertex 4.\n",
    "graph_output": "17 130\n15 8\n9 14\n17 13\n10 4\n2 3\n5 9\n12 9\n13 15\n2 7\n8 7\n3 1\n6 8\n14 12\n11 14\n1 5\n1 2\n4 13\n2 8\n14 4\n5 7\n2 13\n6 14\n12 4\n14 7\n10 17\n16 8\n7 6\n15 5\n11 1\n4 2\n16 1\n4 9\n5 3\n11 15\n10 6\n1 15\n10 1\n12 1\n7 13\n13 10\n15 3\n16 5\n17 7\n12 8\n12 17\n8 3\n1 14\n1 6\n17 8\n14 8\n11 5\n5 8\n3 9\n9 1\n15 2\n6 3\n15 16\n3 10\n15 7\n14 13\n3 12\n16 7\n16 9\n4 6\n10 12\n16 2\n12 13\n2 9\n10 11\n1 7\n15 12\n13 11\n10 5\n17 6\n3 17\n12 11\n11 17\n14 2\n14 16\n6 16\n7 4\n17 4\n5 4\n4 16\n14 17\n2 5\n9 10\n3 11\n9 6\n5 6\n6 2\n8 11\n11 4\n3 7\n10 8\n15 10\n7 9\n6 13\n13 9\n15 17\n9 11\n3 4\n1 13\n5 13\n10 16\n15 4\n9 8\n8 13\n1 17\n12 2\n15 14\n7 10\n2 11\n12 7\n5 14\n16 13\n5 17\n17 9\n11 6\n8 1\n12 16\n13 3\n12 5\n14 10\n12 6\n11 16\n1 4\n14 3\n16 3\n8 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 11 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 64 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   1   1   1   1   0   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   0   1   1   1 \n 6 |  0   1   1   1   1   0   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1 \n 9 |  1   1   1   1   0   1   1   1   0   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0 \n\nCapacity Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0  10   8   6   6   0   8   3   5   8   4   8 \n 2 | 10   0   6   3   3   1   4   1   5   3   6   6 \n 3 |  8   6   0   2   2   5   5   9   6   2   3   5 \n 4 |  6   3   2   0   7   5  10   1   4   1   8   5 \n 5 |  6   3   2   7   0   9   7   4   0   1   8   9 \n 6 |  0   1   5   5   9   0   1   8   5   4   6   8 \n 7 |  8   4   5  10   7   1   0   8   5   5   3   9 \n 8 |  3   1   9   1   4   8   8   0   1   7   1   1 \n 9 |  5   5   6   4   0   5   5   1   0   3   8   3 \n10 |  8   3   2   1   1   4   5   7   3   0   9   8 \n11 |  4   6   3   8   8   6   3   1   8   9   0   7 \n12 |  8   6   5   5   9   8   9   1   3   8   7   0 \n",
    "graph_output": "12 64\n1 2 10\n2 7 4\n2 5 3\n2 12 6\n2 11 6\n5 8 4\n5 4 7\n8 9 1\n7 6 1\n7 3 5\n7 10 5\n1 11 4\n11 6 6\n11 8 1\n8 1 3\n5 12 9\n12 10 8\n7 5 7\n11 3 3\n8 2 1\n12 1 8\n11 12 7\n6 5 9\n4 11 8\n11 5 8\n8 3 9\n4 2 3\n12 3 5\n2 10 3\n9 2 5\n10 4 1\n6 12 8\n1 10 8\n10 6 4\n1 4 6\n7 1 8\n5 1 6\n3 2 6\n7 4 10\n9 11 8\n9 4 4\n7 12 9\n9 3 6\n9 12 3\n9 6 5\n7 9 5\n3 1 8\n6 4 5\n10 9 3\n7 8 8\n3 6 5\n3 4 2\n2 6 1\n4 12 5\n8 10 7\n9 1 5\n4 8 1\n12 8 1\n3 10 2\n5 10 1\n11 10 9\n8 6 8\n11 7 3\n3 5 2\n",
    "vertices": [
      11,
      6
    ],
    "answer": 52,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 88 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   0   1   0   1   1   1   0   1   1   1 \n 4 |  1   1   1   0   0   1   1   1   1   1   1   1   1   1   1 \n 5 |  0   1   1   0   0   1   1   1   0   1   1   1   0   0   1 \n 6 |  1   1   0   1   1   0   1   1   1   0   1   1   1   0   0 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   0   1   1   1   1   0   1   1   0   1   0   1   1 \n 9 |  1   1   1   1   0   1   1   1   0   1   0   1   1   1   1 \n10 |  1   1   1   1   1   0   1   1   1   0   0   1   1   1   1 \n11 |  1   1   1   1   1   1   1   0   0   0   0   1   1   1   0 \n12 |  1   1   0   1   1   1   1   1   1   1   1   0   1   1   0 \n13 |  1   1   1   1   0   1   1   0   1   1   1   1   0   1   1 \n14 |  1   1   1   1   0   0   1   1   1   1   1   1   1   0   1 \n15 |  1   1   1   1   1   0   1   1   1   1   0   0   1   1   0 \n",
    "graph_output": "15 88\n1 9\n1 11\n1 8\n11 5\n1 14\n5 15\n11 12\n8 7\n8 10\n8 2\n5 3\n3 13\n7 6\n14 4\n6 2\n10 13\n6 1\n14 2\n4 13\n9 6\n11 7\n7 4\n11 6\n7 3\n15 9\n5 6\n13 9\n15 2\n11 3\n6 4\n7 10\n14 3\n9 8\n12 13\n13 6\n9 2\n4 3\n4 11\n2 12\n14 7\n2 1\n5 8\n14 13\n15 3\n2 4\n10 15\n1 13\n4 8\n7 5\n3 1\n12 8\n2 10\n1 12\n7 12\n14 10\n7 13\n3 9\n15 14\n15 8\n15 1\n7 15\n13 15\n9 7\n12 10\n10 1\n8 14\n11 13\n4 9\n12 5\n2 3\n6 12\n6 8\n7 2\n11 2\n10 4\n1 7\n9 14\n10 3\n12 4\n13 2\n11 14\n15 4\n5 2\n1 4\n10 5\n12 9\n9 10\n12 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 15 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 12\nVertex 2: 10, 12\nVertex 3: 6, 4\nVertex 4: 13, 3, 8\nVertex 5: 11\nVertex 6: 13, 3, 11\nVertex 7: 1, 13, 9, 12\nVertex 8: 4\nVertex 9: 7, 12\nVertex 10: 2\nVertex 11: 5, 6\nVertex 12: 7, 2, 1, 9\nVertex 13: 6, 7, 4\n",
    "graph_output": "13 15\n1 7\n13 6\n13 7\n6 3\n4 13\n4 3\n9 7\n7 12\n11 5\n10 2\n12 2\n1 12\n9 12\n6 11\n4 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 6 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 99 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 12 (weight=19), 11 (weight=99), 14 (weight=61), 2 (weight=63), 8 (weight=54), 3 (weight=22), 6 (weight=93), 5 (weight=17), 15 (weight=62), 10 (weight=8), 13 (weight=11), 4 (weight=23), 9 (weight=31), 7 (weight=46)\nVertex 2: 14 (weight=5), 8 (weight=74), 1 (weight=63), 11 (weight=100), 3 (weight=55), 15 (weight=64), 12 (weight=33), 9 (weight=41), 5 (weight=7), 4 (weight=20), 7 (weight=43), 13 (weight=84), 10 (weight=69), 6 (weight=29)\nVertex 3: 8 (weight=86), 4 (weight=40), 2 (weight=55), 1 (weight=22), 14 (weight=74), 7 (weight=77), 10 (weight=3), 15 (weight=28), 13 (weight=61), 12 (weight=35), 11 (weight=21)\nVertex 4: 6 (weight=23), 3 (weight=40), 9 (weight=72), 11 (weight=75), 7 (weight=92), 14 (weight=41), 2 (weight=20), 15 (weight=39), 10 (weight=88), 12 (weight=68), 1 (weight=23), 8 (weight=58), 13 (weight=30), 5 (weight=59)\nVertex 5: 9 (weight=51), 6 (weight=33), 7 (weight=33), 12 (weight=7), 11 (weight=79), 1 (weight=17), 2 (weight=7), 10 (weight=42), 14 (weight=28), 15 (weight=95), 8 (weight=48), 13 (weight=84), 4 (weight=59)\nVertex 6: 11 (weight=30), 4 (weight=23), 5 (weight=33), 8 (weight=73), 7 (weight=9), 15 (weight=5), 14 (weight=18), 1 (weight=93), 13 (weight=5), 9 (weight=6), 12 (weight=2), 2 (weight=29)\nVertex 7: 11 (weight=33), 9 (weight=6), 10 (weight=53), 15 (weight=15), 6 (weight=9), 12 (weight=54), 4 (weight=92), 5 (weight=33), 3 (weight=77), 2 (weight=43), 14 (weight=85), 1 (weight=46), 8 (weight=23)\nVertex 8: 11 (weight=90), 3 (weight=86), 2 (weight=74), 6 (weight=73), 9 (weight=30), 14 (weight=12), 13 (weight=41), 1 (weight=54), 12 (weight=45), 5 (weight=48), 4 (weight=58), 7 (weight=23), 15 (weight=47), 10 (weight=67)\nVertex 9: 12 (weight=19), 5 (weight=51), 7 (weight=6), 4 (weight=72), 8 (weight=30), 10 (weight=2), 15 (weight=44), 13 (weight=49), 2 (weight=41), 11 (weight=21), 6 (weight=6), 14 (weight=50), 1 (weight=31)\nVertex 10: 14 (weight=48), 7 (weight=53), 9 (weight=2), 12 (weight=80), 13 (weight=13), 3 (weight=3), 1 (weight=8), 5 (weight=42), 11 (weight=6), 4 (weight=88), 2 (weight=69), 8 (weight=67)\nVertex 11: 1 (weight=99), 7 (weight=33), 6 (weight=30), 8 (weight=90), 4 (weight=75), 15 (weight=83), 12 (weight=44), 2 (weight=100), 5 (weight=79), 14 (weight=73), 9 (weight=21), 10 (weight=6), 13 (weight=21), 3 (weight=21)\nVertex 12: 1 (weight=19), 9 (weight=19), 15 (weight=41), 11 (weight=44), 7 (weight=54), 5 (weight=7), 10 (weight=80), 8 (weight=45), 2 (weight=33), 14 (weight=83), 6 (weight=2), 4 (weight=68), 13 (weight=87), 3 (weight=35)\nVertex 13: 14 (weight=84), 8 (weight=41), 9 (weight=49), 10 (weight=13), 1 (weight=11), 6 (weight=5), 2 (weight=84), 12 (weight=87), 3 (weight=61), 5 (weight=84), 4 (weight=30), 11 (weight=21), 15 (weight=8)\nVertex 14: 1 (weight=61), 13 (weight=84), 2 (weight=5), 10 (weight=48), 15 (weight=12), 8 (weight=12), 6 (weight=18), 3 (weight=74), 4 (weight=41), 11 (weight=73), 5 (weight=28), 12 (weight=83), 7 (weight=85), 9 (weight=50)\nVertex 15: 12 (weight=41), 14 (weight=12), 7 (weight=15), 11 (weight=83), 6 (weight=5), 2 (weight=64), 9 (weight=44), 1 (weight=62), 5 (weight=95), 4 (weight=39), 3 (weight=28), 13 (weight=8), 8 (weight=47)\n",
    "graph_output": "15 99\n1 12 19\n12 9 19\n9 5 51\n1 11 99\n1 14 61\n11 7 33\n14 13 84\n11 6 30\n14 2 5\n6 4 23\n14 10 48\n11 8 90\n12 15 41\n8 3 86\n5 6 33\n14 15 12\n9 7 6\n2 8 74\n3 4 40\n7 10 53\n4 9 72\n1 2 63\n8 6 73\n4 11 75\n8 9 30\n7 15 15\n6 7 9\n15 11 83\n12 11 44\n15 6 5\n8 14 12\n2 11 100\n3 2 55\n6 14 18\n13 8 41\n7 12 54\n2 15 64\n7 4 92\n1 8 54\n10 9 2\n1 3 22\n6 1 93\n7 5 33\n9 15 44\n12 5 7\n14 3 74\n7 3 77\n12 10 80\n11 5 79\n13 9 49\n12 8 45\n4 14 41\n13 10 13\n3 10 3\n12 2 33\n9 2 41\n1 5 17\n1 15 62\n10 1 8\n2 5 7\n10 5 42\n11 14 73\n14 5 28\n4 2 20\n13 1 11\n12 14 83\n6 13 5\n11 9 21\n15 5 95\n7 2 43\n10 11 6\n2 13 84\n15 4 39\n6 9 6\n7 14 85\n10 4 88\n6 12 2\n5 8 48\n2 10 69\n4 12 68\n1 4 23\n8 4 58\n13 12 87\n15 3 28\n13 3 61\n14 9 50\n13 5 84\n13 4 30\n1 9 31\n7 1 46\n11 13 21\n3 12 35\n15 13 8\n5 4 59\n7 8 23\n2 6 29\n3 11 21\n15 8 47\n8 10 67\n",
    "vertices": [
      8,
      6
    ],
    "answer": 29,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 45 edges\n\nEdges (Format: Node Node Capacity):\n1 3 1\n3 2 10\n3 11 4\n2 4 2\n11 7 5\n11 8 8\n11 9 7\n7 6 3\n8 10 4\n8 5 2\n1 11 7\n11 2 1\n2 5 4\n8 2 5\n9 1 9\n6 1 4\n7 2 7\n9 7 10\n5 4 8\n8 9 2\n4 7 2\n5 1 1\n5 9 9\n10 3 2\n7 10 10\n6 3 4\n4 9 1\n6 8 1\n2 1 8\n10 4 7\n9 6 9\n4 3 10\n4 1 10\n1 8 2\n4 8 2\n3 5 2\n5 6 6\n8 3 1\n2 9 8\n9 10 9\n10 2 6\n7 5 3\n7 8 10\n2 6 10\n4 11 10\n",
    "graph_output": "11 45\n1 3 1\n3 2 10\n3 11 4\n2 4 2\n11 7 5\n11 8 8\n11 9 7\n7 6 3\n8 10 4\n8 5 2\n1 11 7\n11 2 1\n2 5 4\n8 2 5\n9 1 9\n6 1 4\n7 2 7\n9 7 10\n5 4 8\n8 9 2\n4 7 2\n5 1 1\n5 9 9\n10 3 2\n7 10 10\n6 3 4\n4 9 1\n6 8 1\n2 1 8\n10 4 7\n9 6 9\n4 3 10\n4 1 10\n1 8 2\n4 8 2\n3 5 2\n5 6 6\n8 3 1\n2 9 8\n9 10 9\n10 2 6\n7 5 3\n7 8 10\n2 6 10\n4 11 10\n",
    "vertices": [
      3,
      4
    ],
    "answer": 34,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (31\u00d731):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31\n   ----------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   1   0   1   0   1   0   0   0   0   0   1   1   1   0   0   0   1   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   1   0   0 \n 3 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0 \n 8 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   1   1 \n13 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n15 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n17 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n19 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n21 |  1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n22 |  1   0   1   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n23 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0 \n30 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n31 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "31 30\n1 22\n22 12\n1 21\n21 7\n12 28\n22 3\n1 15\n1 11\n1 13\n21 29\n1 23\n29 18\n12 10\n29 5\n28 20\n15 25\n1 27\n7 26\n25 4\n12 30\n29 2\n26 19\n2 24\n11 6\n2 17\n3 8\n12 31\n22 16\n24 14\n19 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 4 and vertex 16 are connected.\n\nThis is an undirected graph with 16 vertices and 15 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 12 and vertex 13.\n",
    "graph_output": "16 15\n11 6\n3 14\n1 10\n6 4\n3 8\n13 14\n6 1\n5 8\n3 10\n7 2\n4 15\n14 10\n8 16\n12 14\n12 13\n",
    "vertices": [
      4,
      16
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 113 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 11, 3, 16, 14, 13, 7, 6, 17, 10, 2, 15, 8, 12, 9\nVertex 2: 9, 16, 13, 4, 8, 10, 11, 12, 7, 15, 1, 3, 6, 17\nVertex 3: 7, 17, 9, 4, 1, 8, 6, 13, 11, 12, 14, 5, 2, 15\nVertex 4: 15, 1, 16, 3, 5, 9, 6, 17, 8, 13, 12, 2\nVertex 5: 6, 4, 8, 7, 15, 11, 16, 14, 13, 9, 3, 12, 10\nVertex 6: 11, 10, 5, 13, 4, 17, 16, 3, 14, 15, 7, 9, 8, 1, 2, 12\nVertex 7: 13, 9, 3, 5, 12, 14, 1, 11, 6, 2, 17, 16\nVertex 8: 9, 5, 10, 13, 16, 11, 4, 3, 17, 2, 12, 6, 14, 1, 15\nVertex 9: 8, 17, 7, 3, 4, 11, 2, 10, 14, 5, 6, 16, 13, 15, 1\nVertex 10: 15, 6, 8, 9, 13, 2, 11, 12, 14, 1, 5, 16\nVertex 11: 16, 6, 9, 1, 5, 8, 2, 7, 12, 10, 15, 3\nVertex 12: 4, 7, 15, 14, 8, 2, 11, 10, 3, 5, 6, 1\nVertex 13: 7, 6, 8, 17, 4, 5, 10, 1, 2, 3, 16, 9, 14\nVertex 14: 16, 9, 15, 5, 6, 1, 7, 12, 10, 8, 3, 13\nVertex 15: 4, 10, 5, 14, 12, 17, 16, 6, 11, 2, 1, 3, 9, 8\nVertex 16: 11, 4, 8, 14, 6, 5, 1, 2, 15, 17, 13, 9, 10, 7\nVertex 17: 9, 3, 6, 4, 13, 15, 8, 16, 1, 7, 2\n",
    "graph_output": "17 113\n7 13\n11 16\n8 9\n17 9\n4 15\n7 9\n15 10\n1 4\n7 3\n4 16\n3 17\n11 6\n9 3\n10 6\n3 4\n5 6\n4 5\n5 8\n5 7\n13 6\n4 9\n4 6\n8 10\n6 17\n8 13\n9 11\n16 8\n11 1\n17 4\n1 3\n2 9\n5 15\n14 16\n16 6\n9 10\n13 17\n11 5\n11 8\n4 8\n9 14\n4 13\n5 16\n14 15\n5 14\n5 13\n4 12\n7 12\n8 3\n12 15\n3 6\n16 1\n9 5\n2 16\n14 6\n17 15\n8 17\n1 14\n16 15\n14 7\n13 10\n13 1\n2 13\n4 2\n16 17\n2 8\n14 12\n8 12\n10 2\n2 11\n7 1\n11 7\n2 12\n6 15\n12 11\n3 13\n10 11\n6 7\n13 16\n12 10\n11 15\n9 6\n6 8\n2 7\n16 9\n10 14\n2 15\n11 3\n12 3\n6 1\n8 14\n17 1\n14 3\n13 9\n10 1\n1 2\n3 5\n15 1\n7 17\n2 3\n6 2\n12 5\n10 5\n1 8\n15 3\n10 16\n7 16\n6 12\n15 9\n8 15\n17 2\n12 1\n9 1\n13 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 7 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 7\nVertex 2: No connections\nVertex 3: No connections\nVertex 4: 5, 6\nVertex 5: 8, 4, 6\nVertex 6: 1, 5, 4\nVertex 7: 8, 1\nVertex 8: 5, 7\n",
    "graph_output": "8 7\n5 8\n4 5\n1 6\n8 7\n5 6\n1 7\n6 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 19 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 3 |  0   0   0   0   0   1   0   1   0   0   1   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0 \n 5 |  0   0   0   0   0   0   1   0   0   0   1   0   0   0   1   0 \n 6 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   1   0   0   1   0   0   0   1   0   1   0   0 \n 8 |  0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  1   0   0   1   0   0   0   0   0   0   1   0   1   0   0   0 \n11 |  1   0   1   0   1   0   0   0   0   1   0   0   1   0   1   0 \n12 |  0   1   0   0   0   0   1   0   0   0   0   0   0   1   0   0 \n13 |  0   0   0   1   0   0   0   0   0   1   1   0   0   0   0   0 \n14 |  0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0 \n15 |  0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "16 19\n11 13\n11 3\n1 11\n14 7\n4 10\n5 11\n6 3\n12 14\n5 7\n12 2\n7 12\n4 13\n1 10\n3 8\n8 7\n11 15\n11 10\n15 5\n10 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 2\nVertex 2: 3, 6, 4, 1, 12\nVertex 3: 2, 15, 5\nVertex 4: 6, 15, 9, 13, 12, 2, 16\nVertex 5: 12, 3, 14, 6, 11, 8\nVertex 6: 4, 2, 5, 15\nVertex 7: 16, 13, 14\nVertex 8: 13, 5\nVertex 9: 4\nVertex 10: 11, 13\nVertex 11: 10, 1, 15, 5, 12\nVertex 12: 5, 4, 2, 11\nVertex 13: 8, 4, 7, 10\nVertex 14: 5, 7\nVertex 15: 4, 3, 11, 6\nVertex 16: 7, 4\n",
    "graph_output": "16 28\n4 6\n11 10\n15 4\n12 5\n8 13\n4 9\n3 2\n13 4\n11 1\n2 6\n3 15\n7 16\n12 4\n13 7\n5 3\n5 14\n11 15\n6 5\n6 15\n11 5\n4 2\n1 2\n13 10\n5 8\n4 16\n14 7\n12 2\n12 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 28 edges\n\nEdges (Format: Node Node Weight):\n1 3 35\n3 15 5\n3 4 67\n4 9 76\n4 13 88\n9 5 48\n3 2 93\n9 6 75\n13 12 77\n9 8 65\n15 16 79\n13 14 3\n1 10 1\n6 7 28\n6 11 60\n10 8 70\n6 3 14\n15 1 87\n10 14 96\n5 7 47\n5 8 77\n7 9 91\n6 2 56\n15 13 88\n16 8 95\n1 9 99\n10 3 95\n14 7 20\n",
    "graph_output": "16 28\n1 3 35\n3 15 5\n3 4 67\n4 9 76\n4 13 88\n9 5 48\n3 2 93\n9 6 75\n13 12 77\n9 8 65\n15 16 79\n13 14 3\n1 10 1\n6 7 28\n6 11 60\n10 8 70\n6 3 14\n15 1 87\n10 14 96\n5 7 47\n5 8 77\n7 9 91\n6 2 56\n15 13 88\n16 8 95\n1 9 99\n10 3 95\n14 7 20\n",
    "vertices": [
      null,
      null
    ],
    "answer": 605,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 22 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 2, 7, 16\nVertex 2: 1, 12, 8, 4\nVertex 3: 4\nVertex 4: 1, 5, 16, 3, 12, 2\nVertex 5: 4, 15, 10, 11\nVertex 6: 8\nVertex 7: 1, 9\nVertex 8: 2, 6, 9, 13\nVertex 9: 7, 8, 11\nVertex 10: 5\nVertex 11: 5, 13, 9\nVertex 12: 2, 4\nVertex 13: 11, 8\nVertex 14: 16\nVertex 15: 5, 16\nVertex 16: 4, 14, 1, 15\n",
    "graph_output": "16 22\n1 4\n4 5\n4 16\n4 3\n5 15\n1 2\n1 7\n2 12\n2 8\n5 10\n7 9\n8 6\n5 11\n11 13\n16 14\n16 1\n9 8\n11 9\n15 16\n4 12\n8 13\n2 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 1 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 20 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (10\u00d710):\n\n      1   2   3   4   5   6   7   8   9  10\n   ----------------------------------------\n 1 |  0  48   0  35   0   0  85   9   0  10 \n 2 | 48   0   0   0   4  85  62  56  46   0 \n 3 |  0   0   0  55   0   0   0   0  46 100 \n 4 | 35   0  55   0   0   0   0  62   0  28 \n 5 |  0   4   0   0   0   0  94   0   0   0 \n 6 |  0  85   0   0   0   0  41   0   0   0 \n 7 | 85  62   0   0  94  41   0   0  65   0 \n 8 |  9  56   0  62   0   0   0   0  24   0 \n 9 |  0  46  46   0   0   0  65  24   0  11 \n10 | 10   0 100  28   0   0   0   0  11   0 \n\nCapacity Matrix (10\u00d710):\n\n      1   2   3   4   5   6   7   8   9  10\n   ----------------------------------------\n 1 |  0   9   0   4   0   0   8   5   0   4 \n 2 |  9   0   0   0   2   6   3   9   8   0 \n 3 |  0   0   0   3   0   0   0   0   8   1 \n 4 |  4   0   3   0   0   0   0   2   0  10 \n 5 |  0   2   0   0   0   0   2   0   0   0 \n 6 |  0   6   0   0   0   0   5   0   0   0 \n 7 |  8   3   0   0   2   5   0   0   3   0 \n 8 |  5   9   0   2   0   0   0   0   9   0 \n 9 |  0   8   8   0   0   0   3   9   0   2 \n10 |  4   0   1  10   0   0   0   0   2   0 \n",
    "graph_output": "10 20\n1 10 10 4\n1 7 85 8\n7 5 94 2\n5 2 4 2\n7 9 65 3\n10 3 100 1\n2 8 56 9\n2 6 85 6\n8 4 62 2\n2 9 46 8\n4 3 55 3\n9 8 24 9\n2 7 62 3\n1 8 9 5\n1 4 35 4\n4 10 28 10\n7 6 41 5\n9 3 46 8\n9 10 11 2\n1 2 48 9\n",
    "vertices": [
      4,
      1
    ],
    "answer": 1370,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 23 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   1   0   0   1   0   0   0   1   0   0   1   0   0   0 \n 2 |  0   0   1   0   0   0   0   0   0   0   1   1   0   0   0   0   0 \n 3 |  0   1   0   0   0   0   0   1   0   0   0   1   1   0   0   0   0 \n 4 |  1   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 7 |  1   0   0   0   0   0   0   0   0   0   0   1   0   0   1   1   0 \n 8 |  0   0   1   0   0   1   0   0   0   1   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   1   0   0   1   0   1   0   0 \n10 |  0   0   0   0   0   0   0   1   1   0   0   1   0   0   0   0   0 \n11 |  1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   1   1   0   0   0   1   0   0   1   0   0   0   0   0   0   1 \n13 |  0   0   1   1   0   0   0   0   1   0   0   0   0   1   0   0   0 \n14 |  1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n15 |  0   0   0   1   0   0   1   0   1   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n",
    "graph_output": "17 23\n11 1\n14 1\n17 12\n3 2\n3 12\n4 13\n7 15\n8 10\n4 15\n3 13\n7 12\n10 9\n13 9\n12 2\n15 9\n14 13\n7 16\n8 3\n10 12\n8 6\n11 2\n1 7\n1 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 21 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 8, 5, 6\nVertex 2: 4, 11, 6, 5\nVertex 3: 9, 8\nVertex 4: 2, 9, 10, 6, 7\nVertex 5: 6, 11, 1, 2\nVertex 6: 5, 4, 11, 2, 1, 7\nVertex 7: 11, 4, 6\nVertex 8: 1, 11, 3\nVertex 9: 10, 4, 3\nVertex 10: 9, 1, 4\nVertex 11: 5, 7, 2, 6, 8\n",
    "graph_output": "11 21\n5 6\n4 2\n11 5\n9 10\n11 7\n1 10\n9 4\n10 4\n8 1\n4 6\n2 11\n9 3\n4 7\n11 6\n6 2\n5 1\n8 11\n5 2\n6 1\n6 7\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 14 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 2 |  0   0   1   0   0   1   0   0   0   0   0   0   0   0   0 \n 3 |  0   1   0   0   0   1   0   1   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   1   1   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   1   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 8 |  0   0   1   0   0   0   0   0   1   1   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n10 |  1   0   0   1   0   0   0   1   0   0   0   0   0   0   1 \n11 |  0   0   0   1   0   0   1   0   0   0   0   0   0   1   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   1 \n13 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   1   0   1   0   0   0 \n",
    "graph_output": "15 14\n8 9\n14 11\n6 3\n2 3\n2 6\n4 10\n11 4\n8 10\n1 10\n15 10\n15 12\n3 8\n13 12\n11 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 12 vertices and 13 edges\n\nEdges (Format: Node Node Weight):\n1 8 15\n1 3 88\n1 7 83\n3 4 18\n1 12 30\n1 11 21\n4 9 73\n3 2 66\n3 5 72\n1 10 67\n4 6 81\n4 5 91\n7 4 3\n",
    "graph_output": "12 13\n1 8 15\n1 3 88\n1 7 83\n3 4 18\n1 12 30\n1 11 21\n4 9 73\n3 2 66\n3 5 72\n1 10 67\n4 6 81\n4 5 91\n7 4 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 534,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 25 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (8\u00d78):\n\n      1   2   3   4   5   6   7   8\n   --------------------------------\n 1 |  0   1   1   0   0   1   1   1 \n 2 |  1   0   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1 \n 4 |  0   1   1   0   1   1   1   1 \n 5 |  0   1   1   1   0   1   1   1 \n 6 |  1   1   1   1   1   0   1   0 \n 7 |  1   1   1   1   1   1   0   1 \n 8 |  1   1   1   1   1   0   1   0 \n",
    "graph_output": "8 25\n4 6\n4 7\n1 8\n6 3\n5 4\n2 8\n7 5\n7 6\n1 2\n5 6\n3 8\n1 6\n2 7\n3 7\n7 8\n5 2\n3 5\n2 6\n3 1\n3 2\n3 4\n1 7\n8 4\n4 2\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3422,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 30 vertices and 29 edges\n\nEdges (Format: Node Node):\n1 2\n2 25\n2 8\n8 13\n2 9\n25 19\n13 18\n9 7\n13 5\n5 4\n25 6\n19 23\n25 28\n25 26\n26 14\n4 16\n4 3\n6 30\n30 15\n30 17\n5 10\n25 27\n18 22\n22 24\n24 12\n25 29\n23 20\n13 21\n16 11\n",
    "graph_output": "30 29\n1 2\n2 25\n2 8\n8 13\n2 9\n25 19\n13 18\n9 7\n13 5\n5 4\n25 6\n19 23\n25 28\n25 26\n26 14\n4 16\n4 3\n6 30\n30 15\n30 17\n5 10\n25 27\n18 22\n22 24\n24 12\n25 29\n23 20\n13 21\n16 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 93 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 6, 12, 7, 11, 13, 10, 2, 3, 8, 16, 15, 9\nVertex 2: 16, 11, 9, 14, 8, 6, 1, 4, 12, 15, 10, 7\nVertex 3: 7, 4, 15, 8, 1, 9, 5, 12\nVertex 4: 1, 16, 7, 3, 10, 11, 13, 5, 2, 9, 15, 12\nVertex 5: 13, 6, 4, 9, 8, 3, 16, 11, 12, 15\nVertex 6: 1, 15, 14, 5, 2, 16, 8, 10, 7, 11\nVertex 7: 4, 3, 10, 16, 1, 13, 14, 11, 9, 6, 12, 2, 15\nVertex 8: 16, 2, 12, 3, 1, 5, 6, 11, 13, 14, 15\nVertex 9: 2, 11, 10, 14, 5, 3, 16, 13, 4, 15, 7, 1\nVertex 10: 7, 4, 12, 9, 1, 6, 2, 15, 16, 11, 13\nVertex 11: 2, 16, 12, 1, 14, 9, 4, 8, 5, 7, 10, 15, 6, 13\nVertex 12: 16, 1, 11, 13, 15, 10, 8, 2, 7, 5, 4, 3\nVertex 13: 14, 5, 12, 7, 16, 4, 1, 15, 9, 8, 10, 11\nVertex 14: 16, 13, 15, 2, 11, 6, 9, 7, 8\nVertex 15: 14, 6, 12, 3, 13, 9, 2, 4, 5, 10, 1, 11, 7, 8\nVertex 16: 4, 14, 2, 12, 8, 7, 11, 13, 6, 9, 5, 1, 10\n",
    "graph_output": "16 93\n1 4\n4 16\n16 14\n16 2\n4 7\n16 12\n1 6\n14 13\n13 5\n7 3\n16 8\n14 15\n7 10\n2 11\n2 9\n7 16\n1 12\n3 4\n16 11\n14 2\n12 11\n6 15\n12 13\n1 7\n15 12\n1 11\n13 7\n11 14\n16 13\n4 10\n8 2\n11 9\n6 14\n10 12\n10 9\n9 14\n11 4\n4 13\n6 5\n4 5\n13 1\n2 6\n1 10\n3 15\n2 1\n6 16\n12 8\n8 3\n13 15\n1 3\n14 7\n5 9\n3 9\n2 4\n2 12\n1 8\n5 8\n6 8\n10 6\n9 16\n5 3\n13 9\n8 11\n5 16\n9 4\n5 11\n9 15\n2 15\n11 7\n9 7\n2 10\n15 4\n6 7\n12 7\n5 12\n13 8\n15 5\n7 2\n15 10\n4 12\n16 1\n1 15\n10 16\n14 8\n12 3\n9 1\n10 11\n11 15\n10 13\n6 11\n15 7\n11 13\n15 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 115 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   0   1   1   1   0   1   1   1   1   1 \n 7 |  1   1   1   1   1   0   0   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   0   0   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n11 |  1   1   1   1   1   0   1   1   1   1   0   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   0   0   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n14 |  1   1   1   1   1   1   1   0   1   1   1   1   1   0   1   1 \n15 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   0   1 \n16 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "16 115\n1 13\n13 14\n13 5\n14 3\n13 7\n13 4\n1 15\n7 2\n2 16\n1 11\n2 12\n16 8\n3 10\n2 9\n12 6\n16 10\n16 4\n13 3\n3 5\n13 9\n15 5\n16 14\n15 4\n12 7\n14 2\n16 9\n15 16\n13 6\n14 10\n4 1\n13 12\n7 11\n2 11\n12 10\n10 6\n1 6\n16 7\n6 3\n2 3\n6 9\n4 9\n5 16\n10 2\n3 8\n5 11\n1 14\n10 11\n1 12\n15 6\n2 1\n2 4\n6 2\n3 7\n3 12\n16 11\n3 4\n9 8\n9 14\n9 7\n3 16\n12 14\n4 8\n5 7\n11 3\n10 8\n6 16\n1 5\n9 11\n15 9\n12 5\n12 8\n13 8\n1 10\n6 14\n4 11\n1 16\n7 14\n12 16\n7 4\n5 6\n13 10\n15 11\n16 13\n1 8\n8 7\n9 12\n12 4\n4 14\n9 10\n5 4\n15 13\n13 11\n5 14\n14 15\n10 7\n5 8\n5 2\n6 8\n1 7\n11 8\n13 2\n15 2\n15 3\n11 14\n4 6\n1 3\n7 15\n12 15\n9 3\n15 10\n8 2\n9 5\n4 10\n5 10\n1 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 121 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 17 and vertex 14.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 5 and vertex 17.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 17 and vertex 13.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 9 and vertex 17.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 7 and vertex 17.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 10 and vertex 17.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 11 and vertex 15.\n",
    "graph_output": "17 121\n17 14\n14 3\n16 11\n16 17\n13 12\n8 12\n10 8\n16 6\n3 1\n15 10\n6 11\n14 2\n14 8\n5 8\n2 6\n15 6\n14 4\n5 15\n16 15\n10 14\n8 3\n13 4\n11 7\n11 10\n11 4\n3 17\n6 5\n3 10\n7 12\n15 4\n8 16\n6 10\n13 16\n5 17\n9 4\n7 5\n7 13\n13 14\n8 6\n11 14\n3 11\n6 13\n5 16\n9 11\n7 2\n1 4\n5 14\n4 16\n8 2\n1 15\n8 11\n17 13\n14 16\n14 7\n12 3\n3 13\n5 10\n11 1\n12 5\n4 10\n8 13\n2 15\n6 7\n6 17\n16 3\n5 13\n14 1\n9 17\n15 12\n7 17\n6 3\n5 9\n6 4\n2 13\n16 2\n4 12\n2 4\n10 12\n2 9\n2 12\n14 6\n14 12\n1 8\n1 9\n7 9\n10 17\n15 13\n14 9\n11 17\n3 9\n9 10\n2 3\n7 16\n1 10\n15 9\n4 17\n1 6\n1 7\n12 1\n10 13\n2 11\n7 8\n11 5\n2 5\n3 4\n13 9\n9 16\n12 9\n1 2\n1 5\n4 7\n10 7\n15 7\n5 4\n3 15\n12 17\n16 1\n16 12\n11 13\n15 17\n11 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 2 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   1   0   1   0   0   0   0   0   0   0   0   0   1   0   0   1 \n 4 |  0   0   1   0   1   0   1   0   1   1   0   1   0   0   0   0   0 \n 5 |  0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   1 \n 6 |  0   0   0   0   0   0   0   0   0   1   0   0   1   1   0   0   1 \n 7 |  0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   1   0 \n 9 |  0   0   0   1   0   0   0   0   0   1   1   0   0   0   0   1   0 \n10 |  0   0   0   1   0   1   0   0   1   0   1   1   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   1   1   0   1   0   0   0   1   0 \n12 |  0   0   0   1   0   0   0   0   0   1   1   0   0   0   1   0   0 \n13 |  0   0   0   0   0   1   0   1   0   0   0   0   0   0   1   0   0 \n14 |  0   0   1   0   0   1   0   0   0   0   0   0   0   0   1   1   0 \n15 |  0   0   0   0   0   0   0   1   0   0   0   1   1   1   0   1   0 \n16 |  0   0   0   0   0   0   0   1   1   0   1   0   0   1   1   0   0 \n17 |  0   0   1   0   1   1   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "17 30\n10 12\n13 8\n4 10\n10 11\n14 3\n17 3\n7 4\n10 9\n4 12\n15 16\n12 15\n10 6\n11 16\n3 2\n6 17\n15 8\n9 4\n4 3\n14 16\n15 14\n4 5\n6 14\n13 6\n16 8\n11 9\n9 16\n11 12\n15 13\n7 5\n17 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 11 (source) to vertex 5 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 16 edges\n\nEdges (Format: Node Node Capacity):\n1 6 9\n1 7 1\n6 4 2\n1 5 3\n5 10 5\n1 8 1\n8 3 9\n10 9 4\n4 11 9\n4 2 2\n5 6 3\n5 8 3\n9 1 9\n3 6 6\n7 3 5\n11 6 6\n",
    "graph_output": "11 16\n1 6 9\n1 7 1\n6 4 2\n1 5 3\n5 10 5\n1 8 1\n8 3 9\n10 9 4\n4 11 9\n4 2 2\n5 6 3\n5 8 3\n9 1 9\n3 6 6\n7 3 5\n11 6 6\n",
    "vertices": [
      11,
      5
    ],
    "answer": 8,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 88 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 11, 15, 12, 8, 2, 3, 7, 13, 4, 6, 9, 10\nVertex 2: 10, 12, 13, 1, 11, 15, 6, 3, 7, 14, 5, 9\nVertex 3: 9, 6, 4, 13, 7, 11, 1, 10, 2, 14, 15, 12, 8, 5\nVertex 4: 14, 9, 3, 7, 13, 6, 8, 12, 11, 1, 15\nVertex 5: 15, 8, 13, 10, 6, 12, 11, 14, 7, 9, 2, 3\nVertex 6: 3, 4, 13, 7, 5, 14, 11, 15, 2, 1, 12, 8\nVertex 7: 9, 10, 12, 4, 13, 15, 6, 3, 11, 1, 5, 2\nVertex 8: 9, 5, 15, 4, 12, 1, 13, 10, 11, 6, 3\nVertex 9: 4, 3, 7, 8, 5, 12, 10, 13, 1, 2\nVertex 10: 7, 13, 2, 5, 12, 3, 11, 8, 9, 1\nVertex 11: 1, 7, 3, 4, 5, 2, 6, 10, 14, 12, 8\nVertex 12: 1, 2, 7, 8, 4, 14, 5, 10, 9, 13, 11, 15, 3, 6\nVertex 13: 10, 15, 5, 4, 2, 7, 3, 6, 8, 1, 12, 9, 14\nVertex 14: 1, 4, 12, 6, 5, 3, 11, 2, 15, 13\nVertex 15: 1, 5, 13, 8, 7, 2, 6, 3, 12, 4, 14\n",
    "graph_output": "15 88\n1 14\n1 11\n14 4\n1 15\n4 9\n9 3\n3 6\n9 7\n9 8\n1 12\n15 5\n7 10\n10 13\n10 2\n13 15\n4 3\n8 5\n2 12\n7 12\n5 13\n4 7\n4 13\n10 5\n2 13\n7 13\n15 8\n3 13\n6 4\n4 8\n13 6\n12 8\n8 1\n13 8\n15 7\n4 12\n12 14\n6 7\n3 7\n5 6\n11 7\n12 5\n2 1\n14 6\n3 11\n4 11\n12 10\n5 11\n11 2\n1 3\n2 15\n1 7\n14 5\n11 6\n1 13\n10 3\n10 11\n6 15\n2 6\n2 3\n8 10\n4 1\n7 5\n3 14\n7 2\n9 5\n9 12\n3 15\n14 11\n13 12\n11 12\n15 12\n4 15\n2 14\n14 15\n6 1\n10 9\n5 2\n8 11\n12 3\n12 6\n13 9\n8 6\n14 13\n9 1\n3 8\n2 9\n1 10\n5 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 3 and vertex 1 are connected.\n\nUndirected Graph with 15 vertices and 79 edges\n\nEdges (Format: Node Node):\n11 10\n5 3\n4 12\n7 3\n5 13\n13 12\n9 12\n12 14\n12 3\n13 7\n12 1\n13 1\n6 14\n2 9\n6 11\n15 1\n6 15\n13 4\n7 2\n10 12\n15 7\n3 9\n14 8\n5 15\n5 4\n2 15\n6 4\n13 3\n2 10\n11 15\n12 11\n4 9\n14 11\n13 9\n8 5\n10 9\n5 11\n8 1\n15 12\n9 11\n6 9\n4 2\n6 2\n9 1\n14 5\n10 4\n6 5\n14 1\n15 8\n3 15\n11 13\n15 13\n8 3\n10 1\n8 13\n12 2\n10 13\n4 8\n8 10\n7 9\n1 4\n3 11\n12 6\n1 6\n10 7\n8 7\n7 14\n1 7\n5 12\n6 10\n1 2\n5 10\n12 7\n2 14\n1 11\n6 13\n9 8\n2 13\n5 9\n",
    "graph_output": "15 79\n11 10\n5 3\n4 12\n7 3\n5 13\n13 12\n9 12\n12 14\n12 3\n13 7\n12 1\n13 1\n6 14\n2 9\n6 11\n15 1\n6 15\n13 4\n7 2\n10 12\n15 7\n3 9\n14 8\n5 15\n5 4\n2 15\n6 4\n13 3\n2 10\n11 15\n12 11\n4 9\n14 11\n13 9\n8 5\n10 9\n5 11\n8 1\n15 12\n9 11\n6 9\n4 2\n6 2\n9 1\n14 5\n10 4\n6 5\n14 1\n15 8\n3 15\n11 13\n15 13\n8 3\n10 1\n8 13\n12 2\n10 13\n4 8\n8 10\n7 9\n1 4\n3 11\n12 6\n1 6\n10 7\n8 7\n7 14\n1 7\n5 12\n6 10\n1 2\n5 10\n12 7\n2 14\n1 11\n6 13\n9 8\n2 13\n5 9\n",
    "vertices": [
      3,
      1
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 20 and 18 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 22.\nThere is an edge between vertex 22 and vertex 16.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 1 and vertex 24.\nThere is an edge between vertex 2 and vertex 20.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 10 and vertex 18.\nThere is an edge between vertex 24 and vertex 19.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 22 and vertex 26.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 26 and vertex 5.\nThere is an edge between vertex 20 and vertex 27.\nThere is an edge between vertex 27 and vertex 17.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 2 and vertex 25.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 26 and vertex 6.\nThere is an edge between vertex 6 and vertex 28.\nThere is an edge between vertex 12 and vertex 29.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 17 and vertex 23.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 14 and vertex 21.\nThere is an edge between vertex 29 and vertex 3.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 4 and vertex 13.\n",
    "graph_output": "29 28\n1 22\n22 16\n16 2\n1 10\n1 24\n2 20\n16 11\n10 18\n24 19\n10 4\n22 26\n11 14\n26 5\n20 27\n27 17\n1 15\n2 25\n5 12\n26 6\n6 28\n12 29\n2 9\n17 23\n2 8\n14 21\n29 3\n8 7\n4 13\n",
    "vertices": [
      20,
      18
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 17 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 3 and vertex 1.\n",
    "graph_output": "16 17\n1 14\n1 2\n14 8\n8 10\n8 12\n14 4\n4 5\n2 15\n5 11\n4 7\n10 13\n14 3\n10 16\n1 9\n8 6\n3 11\n3 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 19 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   1   0   1   1   0   0 \n 2 |  0   0   1   0   0   0   0   1   0   0   0   1   0   0   0 \n 3 |  0   1   0   0   1   0   1   0   0   0   1   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   1   0   0   0   0   1   1   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   1   0   0   0   0   0   0   0   1   0   0   0   1 \n 8 |  0   1   0   0   1   0   0   0   0   0   1   0   0   0   0 \n 9 |  0   0   0   0   1   0   0   0   0   0   0   1   0   1   0 \n10 |  1   0   0   0   0   0   0   0   0   0   0   1   0   0   1 \n11 |  0   0   1   0   0   0   1   1   0   0   0   1   0   0   0 \n12 |  1   1   0   0   0   0   0   0   1   1   1   0   0   0   0 \n13 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   1   0   0   1   0   0   0   0   0 \n",
    "graph_output": "15 19\n12 1\n3 5\n2 8\n11 3\n13 1\n10 12\n7 11\n3 7\n14 9\n15 10\n2 12\n11 12\n7 15\n3 2\n1 10\n9 12\n11 8\n8 5\n5 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 26 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 3, 10, 7, 13, 11, 5, 9\nVertex 2: 3\nVertex 3: 1, 2, 10, 5\nVertex 4: 14, 8, 9, 7\nVertex 5: 11, 14, 3, 1\nVertex 6: 14, 11\nVertex 7: 10, 1, 4\nVertex 8: 4, 9\nVertex 9: 8, 14, 4, 1\nVertex 10: 1, 7, 3\nVertex 11: 6, 5, 1\nVertex 12: 14\nVertex 13: 15, 1, 14\nVertex 14: 1, 12, 15, 6, 4, 5, 9, 13\nVertex 15: 14, 13\n",
    "graph_output": "15 26\n1 14\n14 12\n14 15\n14 6\n1 3\n15 13\n14 4\n6 11\n4 8\n1 10\n11 5\n10 7\n3 2\n8 9\n5 14\n7 1\n3 10\n13 1\n3 5\n9 14\n11 1\n4 9\n1 5\n13 14\n9 1\n7 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 15 vertices and 105 edges\n\nEdges (Format: Node Node):\n1 15\n15 8\n8 2\n15 11\n2 5\n2 3\n3 12\n12 9\n2 14\n11 6\n8 13\n8 7\n13 10\n13 4\n12 2\n6 7\n1 4\n4 3\n11 10\n2 1\n14 8\n9 3\n1 7\n5 4\n13 7\n7 5\n14 6\n12 15\n13 9\n7 12\n15 14\n3 6\n14 7\n10 5\n4 14\n14 9\n10 9\n12 13\n9 8\n3 10\n10 14\n7 15\n9 6\n9 11\n6 8\n14 11\n13 14\n13 2\n7 9\n11 3\n6 15\n1 5\n12 4\n15 3\n2 4\n14 1\n5 9\n3 8\n3 13\n4 7\n2 7\n8 4\n5 13\n11 12\n3 5\n6 13\n7 3\n13 11\n12 14\n4 15\n10 7\n10 6\n1 3\n11 2\n8 11\n10 8\n1 9\n15 13\n11 7\n10 4\n11 1\n10 15\n1 8\n2 10\n4 9\n5 15\n6 5\n10 12\n6 4\n6 12\n5 8\n9 15\n2 6\n1 12\n3 14\n13 1\n6 1\n5 14\n10 1\n9 2\n15 2\n5 11\n11 4\n12 8\n5 12\n",
    "graph_output": "15 105\n1 15\n15 8\n8 2\n15 11\n2 5\n2 3\n3 12\n12 9\n2 14\n11 6\n8 13\n8 7\n13 10\n13 4\n12 2\n6 7\n1 4\n4 3\n11 10\n2 1\n14 8\n9 3\n1 7\n5 4\n13 7\n7 5\n14 6\n12 15\n13 9\n7 12\n15 14\n3 6\n14 7\n10 5\n4 14\n14 9\n10 9\n12 13\n9 8\n3 10\n10 14\n7 15\n9 6\n9 11\n6 8\n14 11\n13 14\n13 2\n7 9\n11 3\n6 15\n1 5\n12 4\n15 3\n2 4\n14 1\n5 9\n3 8\n3 13\n4 7\n2 7\n8 4\n5 13\n11 12\n3 5\n6 13\n7 3\n13 11\n12 14\n4 15\n10 7\n10 6\n1 3\n11 2\n8 11\n10 8\n1 9\n15 13\n11 7\n10 4\n11 1\n10 15\n1 8\n2 10\n4 9\n5 15\n6 5\n10 12\n6 4\n6 12\n5 8\n9 15\n2 6\n1 12\n3 14\n13 1\n6 1\n5 14\n10 1\n9 2\n15 2\n5 11\n11 4\n12 8\n5 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 15,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 66 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   0   1   1   1   1   1   0 \n 3 |  1   1   0   1   1   1   0   1   0   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   0 \n 5 |  1   1   1   1   0   0   1   1   0   1   1   1   1 \n 6 |  1   1   1   1   0   0   1   1   1   1   1   1   1 \n 7 |  1   0   0   1   1   1   0   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   0   0   1   1   1 \n 9 |  1   1   0   1   0   1   1   0   0   1   1   1   0 \n10 |  1   1   1   1   1   1   1   0   1   0   0   1   1 \n11 |  1   1   1   1   1   1   1   1   1   0   0   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   0 \n13 |  1   0   1   0   1   1   1   1   0   1   1   0   0 \n",
    "graph_output": "13 66\n4 10\n9 11\n6 1\n1 7\n12 3\n8 3\n3 11\n12 10\n6 8\n4 1\n2 12\n1 13\n4 2\n6 10\n7 4\n2 9\n12 9\n1 11\n7 11\n6 7\n7 12\n10 3\n11 2\n6 11\n4 8\n5 13\n5 7\n13 11\n8 7\n13 7\n9 1\n5 8\n6 4\n1 5\n7 10\n7 9\n6 3\n9 6\n10 13\n1 10\n4 3\n5 12\n9 4\n8 12\n9 10\n12 6\n4 5\n1 12\n13 8\n4 12\n4 11\n6 13\n2 5\n10 2\n3 13\n12 11\n3 5\n8 2\n8 11\n3 2\n1 8\n3 1\n10 5\n2 1\n5 11\n6 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 69 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   1   0   1   1   0   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   0   1   1   1   1   1   1   1   1 \n 3 |  0   1   0   1   1   1   0   1   1   0   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1 \n 5 |  1   0   1   1   0   1   1   1   1   1   0   1   1 \n 6 |  0   1   1   1   1   0   1   1   1   1   1   1   1 \n 7 |  1   1   0   1   1   1   0   1   0   1   1   0   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   0   1   0   0   1   1   1 \n10 |  1   1   0   1   1   1   1   1   0   0   1   1   1 \n11 |  1   1   1   1   0   1   1   1   1   1   0   1   1 \n12 |  1   1   1   1   1   1   0   1   1   1   1   0   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "13 69\n6 8\n3 5\n6 10\n5 13\n2 11\n3 2\n5 12\n5 10\n3 9\n13 8\n11 9\n4 3\n6 7\n5 9\n3 11\n1 8\n1 2\n1 11\n5 6\n9 2\n4 6\n13 4\n2 4\n11 13\n7 5\n9 1\n1 5\n7 8\n9 6\n13 6\n9 4\n13 7\n11 12\n13 12\n8 9\n7 2\n12 1\n8 11\n9 13\n11 4\n4 10\n2 6\n8 12\n12 3\n6 3\n10 11\n8 3\n4 7\n10 2\n9 12\n4 1\n8 5\n10 8\n1 7\n13 10\n10 12\n11 6\n1 10\n8 2\n7 10\n1 13\n11 7\n4 8\n13 2\n2 12\n12 4\n13 3\n5 4\n6 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 116 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n 2 |  0   0   1   1   1   1   1   1   1   0   1   1   1   1   1   1   0 \n 3 |  1   1   0   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   0   1   1   1   1   1   1   0   1   1   1   1 \n 6 |  1   1   0   1   0   0   0   1   1   0   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   0   0   1   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   0 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   0   0   1   1   1   1 \n10 |  1   0   1   1   1   0   1   1   1   0   1   1   1   1   1   0   0 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   0   1 \n12 |  0   1   1   1   1   1   1   1   0   1   1   0   0   1   1   1   1 \n13 |  1   1   1   1   0   1   1   1   0   1   1   0   0   0   1   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   0   0   0   0   0 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   0   1   1 \n16 |  1   1   1   1   1   1   1   1   1   0   0   1   1   0   1   0   1 \n17 |  1   0   1   1   1   1   1   0   1   0   1   1   1   0   1   1   0 \n",
    "graph_output": "17 116\n1 9\n9 2\n2 7\n2 3\n3 12\n9 14\n2 4\n4 15\n2 6\n1 13\n14 10\n13 8\n10 5\n5 17\n13 11\n17 16\n17 13\n15 5\n11 5\n3 17\n7 11\n7 1\n5 2\n7 17\n5 12\n15 7\n4 7\n3 10\n14 4\n8 3\n11 1\n8 10\n3 4\n9 4\n1 5\n15 17\n12 7\n7 5\n8 5\n3 14\n9 17\n9 3\n12 17\n12 6\n8 12\n10 11\n3 1\n12 2\n4 5\n17 1\n16 7\n16 2\n6 17\n2 13\n16 15\n4 13\n11 6\n17 11\n8 14\n16 5\n3 16\n15 8\n6 13\n10 4\n11 9\n7 14\n9 10\n10 1\n4 11\n12 11\n17 4\n15 13\n7 3\n6 1\n14 11\n9 5\n4 8\n7 8\n11 15\n7 9\n16 4\n16 6\n1 16\n13 3\n15 10\n12 14\n9 15\n5 3\n4 1\n4 6\n15 6\n4 12\n13 16\n15 3\n12 16\n14 2\n7 13\n6 9\n12 10\n12 15\n1 8\n14 5\n14 6\n2 15\n2 11\n8 9\n2 8\n11 8\n15 1\n9 16\n8 6\n7 10\n1 14\n10 13\n16 8\n3 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 4 (source) to vertex 8 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 53 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   1   1   1   1   1   1   1   1   1 \n 2 |  0   0   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   0   1   1   1   1   1   1   1 \n 4 |  1   1   0   0   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   5   1   9   1   1  10   6   8   9 \n 2 |  0   0   5   1   8   9   1   1   8   1   3 \n 3 |  5   5   0   0   3   6   3   7   3   2   2 \n 4 |  1   1   0   0   2   1   2   8   5   6   4 \n 5 |  9   8   3   2   0   6   5   1   9   8   7 \n 6 |  1   9   6   1   6   0   9   5   4   9  10 \n 7 |  1   1   3   2   5   9   0  10   8   6   5 \n 8 | 10   1   7   8   1   5  10   0   3   2   4 \n 9 |  6   8   3   5   9   4   8   3   0  10   2 \n10 |  8   1   2   6   8   9   6   2  10   0   6 \n11 |  9   3   2   4   7  10   5   4   2   6   0 \n",
    "graph_output": "11 53\n1 8 10\n1 5 9\n1 10 8\n8 7 10\n8 3 7\n5 11 7\n11 6 10\n1 9 6\n8 4 8\n4 2 1\n9 7 8\n7 5 5\n3 7 3\n2 9 8\n5 2 8\n1 7 1\n10 4 6\n8 2 1\n6 3 6\n7 6 9\n6 8 5\n6 1 1\n3 2 5\n9 8 3\n4 1 1\n3 5 3\n10 7 6\n3 1 5\n11 4 4\n11 7 5\n5 6 6\n9 6 4\n3 11 2\n10 8 2\n5 9 9\n9 10 10\n5 8 1\n11 8 4\n11 2 3\n9 3 3\n11 10 6\n10 6 9\n10 2 1\n9 11 2\n11 1 9\n7 2 1\n9 4 5\n5 4 2\n5 10 8\n2 6 9\n4 6 1\n3 10 2\n4 7 2\n",
    "vertices": [
      4,
      8
    ],
    "answer": 30,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 9 to vertex 5 in the weighted graph.\n\nUndirected, Weighted Graph with 14 vertices and 22 edges\n\nEdges (Format: Node Node Weight):\n1 12 33\n1 14 20\n12 8 86\n14 9 6\n8 5 37\n14 7 24\n1 6 27\n9 2 27\n14 3 57\n14 4 77\n4 10 34\n14 11 42\n7 13 92\n6 10 1\n4 5 21\n5 7 56\n4 2 21\n6 4 46\n1 5 71\n7 1 54\n12 7 6\n3 11 6\n",
    "graph_output": "14 22\n1 12 33\n1 14 20\n12 8 86\n14 9 6\n8 5 37\n14 7 24\n1 6 27\n9 2 27\n14 3 57\n14 4 77\n4 10 34\n14 11 42\n7 13 92\n6 10 1\n4 5 21\n5 7 56\n4 2 21\n6 4 46\n1 5 71\n7 1 54\n12 7 6\n3 11 6\n",
    "vertices": [
      9,
      5
    ],
    "answer": 69,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 19 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 7, 2, 3, 5\nVertex 2: 1, 5, 6, 4, 7, 3\nVertex 3: 1, 4, 7, 2, 5, 6\nVertex 4: 3, 6, 2, 5\nVertex 5: 6, 2, 1, 7, 3, 4\nVertex 6: 1, 5, 2, 4, 7, 3\nVertex 7: 1, 3, 6, 2, 5\n",
    "graph_output": "7 19\n1 6\n1 7\n1 2\n6 5\n1 3\n3 4\n5 2\n2 6\n5 1\n6 4\n4 2\n3 7\n7 6\n7 2\n3 2\n5 7\n3 5\n6 3\n5 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8232,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 51 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   0   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   0   1   1   1   1   0   1   1 \n 4 |  1   1   0   0   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   0   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1 \n 9 |  1   1   0   1   1   0   1   1   0   1   1 \n10 |  0   1   1   1   1   1   1   1   1   0   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "11 51\n2 9\n2 11\n4 2\n8 2\n3 6\n2 7\n8 11\n6 8\n1 6\n6 4\n9 4\n1 2\n8 3\n9 1\n4 7\n10 2\n9 8\n10 11\n11 5\n7 10\n8 4\n5 3\n6 7\n6 10\n6 11\n9 5\n11 3\n7 5\n9 11\n4 5\n6 2\n1 11\n7 3\n3 1\n5 1\n2 3\n1 4\n8 1\n10 3\n6 5\n4 11\n5 10\n11 7\n5 2\n10 8\n7 1\n9 10\n7 8\n7 9\n10 4\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 131,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 7 in the weighted graph.\n\nUndirected, Weighted Graph with 15 vertices and 21 edges\n\nEdges (Format: Node Node Weight):\n1 7 65\n7 13 96\n1 2 14\n1 9 10\n7 3 71\n1 11 96\n13 5 39\n2 14 63\n11 10 38\n5 12 69\n11 8 46\n9 4 36\n1 15 55\n2 6 90\n5 8 38\n13 1 76\n15 6 39\n7 4 28\n10 13 50\n10 15 58\n6 7 58\n",
    "graph_output": "15 21\n1 7 65\n7 13 96\n1 2 14\n1 9 10\n7 3 71\n1 11 96\n13 5 39\n2 14 63\n11 10 38\n5 12 69\n11 8 46\n9 4 36\n1 15 55\n2 6 90\n5 8 38\n13 1 76\n15 6 39\n7 4 28\n10 13 50\n10 15 58\n6 7 58\n",
    "vertices": [
      4,
      7
    ],
    "answer": 28,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 113 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 13 and vertex 17.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 17 and vertex 15.\nThere is an edge between vertex 8 and vertex 17.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 17 and vertex 1.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 7 and vertex 17.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 13 and vertex 14.\n",
    "graph_output": "17 113\n7 13\n11 16\n8 9\n17 9\n4 15\n7 9\n15 10\n1 4\n7 3\n4 16\n3 17\n11 6\n9 3\n10 6\n3 4\n5 6\n4 5\n5 8\n5 7\n13 6\n4 9\n4 6\n8 10\n6 17\n8 13\n9 11\n16 8\n11 1\n17 4\n1 3\n2 9\n5 15\n14 16\n16 6\n9 10\n13 17\n11 5\n11 8\n4 8\n9 14\n4 13\n5 16\n14 15\n5 14\n5 13\n4 12\n7 12\n8 3\n12 15\n3 6\n16 1\n9 5\n2 16\n14 6\n17 15\n8 17\n1 14\n16 15\n14 7\n13 10\n13 1\n2 13\n4 2\n16 17\n2 8\n14 12\n8 12\n10 2\n2 11\n7 1\n11 7\n2 12\n6 15\n12 11\n3 13\n10 11\n6 7\n13 16\n12 10\n11 15\n9 6\n6 8\n2 7\n16 9\n10 14\n2 15\n11 3\n12 3\n6 1\n8 14\n17 1\n14 3\n13 9\n10 1\n1 2\n3 5\n15 1\n7 17\n2 3\n6 2\n12 5\n10 5\n1 8\n15 3\n10 16\n7 16\n6 12\n15 9\n8 15\n17 2\n12 1\n9 1\n13 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 50 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 1 and vertex 8.\n",
    "graph_output": "11 50\n11 2\n2 9\n3 7\n11 10\n3 10\n2 1\n1 5\n1 4\n9 5\n10 1\n8 6\n10 9\n2 4\n3 9\n7 9\n9 1\n11 5\n8 5\n10 4\n8 7\n8 3\n10 7\n8 10\n5 10\n6 9\n11 3\n7 1\n11 9\n9 8\n6 4\n11 1\n6 7\n6 2\n8 4\n11 6\n11 7\n5 3\n5 2\n5 7\n1 6\n4 11\n4 9\n11 8\n6 10\n4 7\n2 7\n3 6\n5 6\n4 5\n1 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 126,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 115 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 1 and vertex 9.\n",
    "graph_output": "16 115\n1 13\n13 14\n13 5\n14 3\n13 7\n13 4\n1 15\n7 2\n2 16\n1 11\n2 12\n16 8\n3 10\n2 9\n12 6\n16 10\n16 4\n13 3\n3 5\n13 9\n15 5\n16 14\n15 4\n12 7\n14 2\n16 9\n15 16\n13 6\n14 10\n4 1\n13 12\n7 11\n2 11\n12 10\n10 6\n1 6\n16 7\n6 3\n2 3\n6 9\n4 9\n5 16\n10 2\n3 8\n5 11\n1 14\n10 11\n1 12\n15 6\n2 1\n2 4\n6 2\n3 7\n3 12\n16 11\n3 4\n9 8\n9 14\n9 7\n3 16\n12 14\n4 8\n5 7\n11 3\n10 8\n6 16\n1 5\n9 11\n15 9\n12 5\n12 8\n13 8\n1 10\n6 14\n4 11\n1 16\n7 14\n12 16\n7 4\n5 6\n13 10\n15 11\n16 13\n1 8\n8 7\n9 12\n12 4\n4 14\n9 10\n5 4\n15 13\n13 11\n5 14\n14 15\n10 7\n5 8\n5 2\n6 8\n1 7\n11 8\n13 2\n15 2\n15 3\n11 14\n4 6\n1 3\n7 15\n12 15\n9 3\n15 10\n8 2\n9 5\n4 10\n5 10\n1 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 113 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   0   1   1   1   1   1   1   0   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   0   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   0   1   1   1   1   1   0 \n 5 |  1   1   1   1   0   1   1   0   1   0   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 8 |  0   1   1   1   0   1   1   0   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n10 |  1   1   0   0   0   1   1   1   1   0   1   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n15 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n16 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "16 113\n8 12\n6 7\n5 11\n10 2\n8 14\n14 2\n7 12\n2 7\n1 2\n16 6\n8 2\n15 11\n13 2\n8 4\n11 16\n10 9\n7 1\n15 10\n3 7\n5 2\n8 16\n13 7\n9 2\n5 16\n15 3\n15 9\n6 8\n3 13\n14 1\n14 12\n14 9\n11 2\n9 13\n3 14\n7 10\n15 16\n5 13\n16 12\n11 9\n13 10\n2 15\n16 7\n16 10\n12 4\n11 13\n3 11\n12 13\n5 6\n6 11\n7 4\n12 6\n6 1\n5 1\n11 8\n5 3\n12 11\n14 10\n8 10\n1 9\n4 14\n6 13\n4 15\n14 6\n4 9\n14 5\n16 9\n9 5\n3 8\n7 9\n3 4\n2 16\n11 7\n5 7\n15 14\n1 10\n4 11\n11 14\n12 1\n6 9\n3 1\n11 1\n12 2\n15 5\n10 6\n2 4\n12 5\n15 8\n9 8\n14 16\n2 3\n15 6\n4 5\n3 6\n6 2\n1 16\n10 11\n1 13\n14 7\n12 9\n12 15\n4 6\n16 13\n4 13\n12 3\n16 3\n3 9\n7 15\n13 14\n4 1\n10 12\n8 7\n13 8\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 121 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 4, 15, 11, 14, 8, 9, 10, 6, 7, 12, 2, 5, 16\nVertex 2: 14, 6, 7, 8, 15, 13, 16, 4, 9, 12, 3, 11, 5, 1\nVertex 3: 14, 1, 8, 17, 10, 11, 12, 13, 16, 6, 9, 2, 4, 15\nVertex 4: 14, 13, 11, 15, 9, 1, 16, 10, 6, 12, 2, 17, 3, 7, 5\nVertex 5: 8, 15, 6, 17, 7, 16, 14, 10, 12, 13, 9, 11, 2, 1, 4\nVertex 6: 16, 11, 2, 15, 5, 10, 8, 13, 7, 17, 3, 4, 14, 1\nVertex 7: 11, 12, 5, 13, 2, 14, 6, 17, 9, 16, 1, 8, 4, 10, 15\nVertex 8: 12, 10, 14, 5, 3, 16, 6, 2, 11, 13, 1, 7\nVertex 9: 4, 11, 17, 5, 2, 1, 7, 14, 3, 10, 15, 13, 16, 12\nVertex 10: 8, 15, 14, 11, 3, 6, 5, 4, 12, 17, 9, 1, 13, 7\nVertex 11: 16, 6, 7, 10, 4, 14, 3, 9, 8, 1, 17, 2, 5, 13, 15\nVertex 12: 13, 8, 7, 3, 5, 15, 4, 10, 2, 14, 1, 9, 17, 16\nVertex 13: 12, 4, 16, 7, 14, 6, 17, 3, 8, 5, 2, 15, 10, 9, 11\nVertex 14: 17, 3, 2, 8, 4, 10, 13, 11, 5, 16, 7, 1, 6, 12, 9\nVertex 15: 10, 6, 5, 16, 4, 1, 2, 12, 13, 9, 7, 3, 17, 11\nVertex 16: 11, 17, 6, 15, 8, 13, 5, 4, 14, 3, 2, 7, 9, 1, 12\nVertex 17: 14, 16, 3, 5, 13, 6, 9, 7, 10, 11, 4, 12, 15\n",
    "graph_output": "17 121\n17 14\n14 3\n16 11\n16 17\n13 12\n8 12\n10 8\n16 6\n3 1\n15 10\n6 11\n14 2\n14 8\n5 8\n2 6\n15 6\n14 4\n5 15\n16 15\n10 14\n8 3\n13 4\n11 7\n11 10\n11 4\n3 17\n6 5\n3 10\n7 12\n15 4\n8 16\n6 10\n13 16\n5 17\n9 4\n7 5\n7 13\n13 14\n8 6\n11 14\n3 11\n6 13\n5 16\n9 11\n7 2\n1 4\n5 14\n4 16\n8 2\n1 15\n8 11\n17 13\n14 16\n14 7\n12 3\n3 13\n5 10\n11 1\n12 5\n4 10\n8 13\n2 15\n6 7\n6 17\n16 3\n5 13\n14 1\n9 17\n15 12\n7 17\n6 3\n5 9\n6 4\n2 13\n16 2\n4 12\n2 4\n10 12\n2 9\n2 12\n14 6\n14 12\n1 8\n1 9\n7 9\n10 17\n15 13\n14 9\n11 17\n3 9\n9 10\n2 3\n7 16\n1 10\n15 9\n4 17\n1 6\n1 7\n12 1\n10 13\n2 11\n7 8\n11 5\n2 5\n3 4\n13 9\n9 16\n12 9\n1 2\n1 5\n4 7\n10 7\n15 7\n5 4\n3 15\n12 17\n16 1\n16 12\n11 13\n15 17\n11 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 92 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   0   1   0   0   1   1   1   1   0 \n 2 |  1   0   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   0   1   1   1   1   0   1   1 \n 4 |  1   1   1   0   1   1   0   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   0   1   1 \n 6 |  1   0   1   1   1   0   1   1   1   0   1   1   1   1   1 \n 7 |  0   1   1   0   1   1   0   1   1   0   1   1   1   1   1 \n 8 |  1   1   0   1   1   1   1   0   1   1   1   1   0   1   1 \n 9 |  0   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n10 |  0   1   1   1   1   0   0   1   1   0   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n13 |  1   1   0   1   0   1   1   0   1   1   1   1   0   1   0 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n15 |  0   1   1   1   1   1   1   1   1   1   1   1   0   1   0 \n",
    "graph_output": "15 92\n4 15\n15 7\n9 10\n15 6\n11 1\n14 3\n6 5\n15 2\n15 14\n14 4\n14 11\n1 3\n13 4\n2 12\n3 11\n2 8\n9 13\n11 15\n9 2\n2 14\n7 13\n9 6\n6 3\n8 6\n3 15\n7 8\n4 1\n10 14\n7 6\n11 2\n14 9\n10 11\n12 8\n12 15\n12 9\n4 3\n15 5\n14 8\n14 1\n15 8\n12 13\n4 2\n11 9\n14 13\n13 1\n2 1\n11 6\n12 5\n9 7\n10 2\n3 5\n1 12\n13 11\n9 5\n11 12\n3 10\n4 11\n15 10\n13 10\n1 6\n8 9\n8 5\n3 7\n2 5\n6 4\n10 5\n11 5\n14 5\n12 10\n4 8\n8 11\n2 3\n10 8\n1 8\n9 4\n3 12\n7 2\n5 4\n11 7\n7 5\n14 7\n12 14\n13 2\n9 3\n12 7\n6 12\n5 1\n13 6\n14 6\n9 15\n10 4\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 24 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 16 and vertex 3.\n",
    "graph_output": "16 24\n1 9\n1 16\n1 6\n1 14\n14 10\n16 2\n14 3\n16 13\n13 4\n3 12\n2 11\n12 8\n8 15\n6 7\n9 5\n3 6\n3 1\n2 15\n14 11\n7 9\n2 8\n4 8\n11 12\n16 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 25 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 2, 8, 13, 3, 11, 6\nVertex 2: 1, 10, 6, 14\nVertex 3: 14, 12, 1, 9\nVertex 4: 14, 9, 7\nVertex 5: 1, 8\nVertex 6: 2, 7, 13, 9, 1\nVertex 7: 6, 11, 15, 4\nVertex 8: 1, 5\nVertex 9: 10, 4, 6, 3\nVertex 10: 2, 9, 13\nVertex 11: 7, 1\nVertex 12: 3\nVertex 13: 1, 15, 6, 10\nVertex 14: 2, 3, 4\nVertex 15: 13, 7\n",
    "graph_output": "15 25\n1 5\n1 2\n1 8\n1 13\n2 10\n2 6\n13 15\n10 9\n6 7\n2 14\n14 3\n3 12\n14 4\n7 11\n13 6\n1 3\n13 10\n7 15\n5 8\n9 4\n6 9\n1 11\n6 1\n3 9\n4 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 9 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 17 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 12 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 10.\nThere is an edge between vertex 12 and vertex 10 with a capacity of 1.\nThere is an edge between vertex 9 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 10 and vertex 6 with a capacity of 8.\nThere is an edge between vertex 10 and vertex 4 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 3 with a capacity of 6.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 7.\nThere is an edge between vertex 1 and vertex 2 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 11 with a capacity of 7.\nThere is an edge between vertex 8 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 8.\nThere is an edge between vertex 12 and vertex 4 with a capacity of 3.\nThere is an edge between vertex 10 and vertex 8 with a capacity of 6.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 9.\n",
    "graph_output": "12 17\n1 12 2\n1 9 10\n12 10 1\n9 8 9\n10 6 8\n10 4 3\n1 3 6\n3 7 7\n1 2 2\n3 5 2\n2 11 2\n5 11 7\n8 7 4\n9 7 8\n12 4 3\n10 8 6\n1 4 9\n",
    "vertices": [
      3,
      9
    ],
    "answer": 15,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 106 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 15 and vertex 6.\n",
    "graph_output": "16 106\n1 4\n4 5\n1 6\n6 10\n10 14\n14 16\n4 15\n6 3\n4 9\n9 13\n4 8\n9 2\n4 12\n12 11\n1 7\n13 1\n14 1\n11 9\n12 9\n15 11\n3 12\n15 14\n11 14\n7 10\n2 7\n13 16\n12 10\n3 2\n3 8\n14 5\n5 15\n13 4\n3 1\n13 3\n1 10\n10 4\n2 15\n2 5\n11 6\n11 8\n8 6\n15 7\n10 3\n8 5\n11 13\n9 15\n16 9\n7 9\n12 14\n5 16\n1 16\n15 16\n12 16\n7 4\n1 12\n7 3\n12 15\n10 2\n4 14\n8 13\n6 9\n2 6\n5 3\n7 13\n7 12\n16 6\n3 15\n14 9\n3 11\n11 4\n11 7\n5 9\n12 2\n2 13\n14 2\n13 14\n6 4\n15 8\n14 8\n12 13\n6 5\n16 10\n16 11\n7 5\n11 5\n1 15\n2 4\n10 9\n4 3\n16 4\n6 13\n9 8\n2 16\n5 12\n15 13\n12 8\n6 12\n9 3\n13 5\n6 7\n8 10\n8 16\n9 1\n10 11\n8 7\n15 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 12 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 7 and vertex 2.\n",
    "graph_output": "7 12\n6 5\n7 6\n4 3\n2 4\n6 1\n6 2\n3 1\n7 5\n5 2\n1 5\n5 4\n7 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 35,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 9 (source) to vertex 6 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 12 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (10\u00d710):\n\n      1   2   3   4   5   6   7   8   9  10\n   ----------------------------------------\n 1 |  0   0   0  34   0  33   0  31   0   0 \n 2 |  0   0   0  34   0   0   0   0   0   0 \n 3 |  0   0   0  87   0   0   0   0   0   0 \n 4 | 34  34  87   0   0   0  48   0  24   0 \n 5 |  0   0   0   0   0   0   0   0   0  15 \n 6 | 33   0   0   0   0   0   0   0  90   0 \n 7 |  0   0   0  48   0   0   0  23  29   0 \n 8 | 31   0   0   0   0   0  23   0   0  25 \n 9 |  0   0   0  24   0  90  29   0   0   0 \n10 |  0   0   0   0  15   0   0  25   0   0 \n\nCapacity Matrix (10\u00d710):\n\n      1   2   3   4   5   6   7   8   9  10\n   ----------------------------------------\n 1 |  0   0   0   3   0   9   0   1   0   0 \n 2 |  0   0   0   7   0   0   0   0   0   0 \n 3 |  0   0   0   2   0   0   0   0   0   0 \n 4 |  3   7   2   0   0   0   8   0   3   0 \n 5 |  0   0   0   0   0   0   0   0   0   8 \n 6 |  9   0   0   0   0   0   0   0   6   0 \n 7 |  0   0   0   8   0   0   0   2   1   0 \n 8 |  1   0   0   0   0   0   2   0   0   6 \n 9 |  0   0   0   3   0   6   1   0   0   0 \n10 |  0   0   0   0   8   0   0   6   0   0 \n",
    "graph_output": "10 12\n1 4 34 3\n1 8 31 1\n1 6 33 9\n6 9 90 6\n4 2 34 7\n8 10 25 6\n10 5 15 8\n8 7 23 2\n4 3 87 2\n7 4 48 8\n4 9 24 3\n9 7 29 1\n",
    "vertices": [
      9,
      6
    ],
    "answer": 929,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 4 (source) to vertex 8 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 53 edges\n\nEdges (Format: Node Node Capacity):\n1 8 10\n1 5 9\n1 10 8\n8 7 10\n8 3 7\n5 11 7\n11 6 10\n1 9 6\n8 4 8\n4 2 1\n9 7 8\n7 5 5\n3 7 3\n2 9 8\n5 2 8\n1 7 1\n10 4 6\n8 2 1\n6 3 6\n7 6 9\n6 8 5\n6 1 1\n3 2 5\n9 8 3\n4 1 1\n3 5 3\n10 7 6\n3 1 5\n11 4 4\n11 7 5\n5 6 6\n9 6 4\n3 11 2\n10 8 2\n5 9 9\n9 10 10\n5 8 1\n11 8 4\n11 2 3\n9 3 3\n11 10 6\n10 6 9\n10 2 1\n9 11 2\n11 1 9\n7 2 1\n9 4 5\n5 4 2\n5 10 8\n2 6 9\n4 6 1\n3 10 2\n4 7 2\n",
    "graph_output": "11 53\n1 8 10\n1 5 9\n1 10 8\n8 7 10\n8 3 7\n5 11 7\n11 6 10\n1 9 6\n8 4 8\n4 2 1\n9 7 8\n7 5 5\n3 7 3\n2 9 8\n5 2 8\n1 7 1\n10 4 6\n8 2 1\n6 3 6\n7 6 9\n6 8 5\n6 1 1\n3 2 5\n9 8 3\n4 1 1\n3 5 3\n10 7 6\n3 1 5\n11 4 4\n11 7 5\n5 6 6\n9 6 4\n3 11 2\n10 8 2\n5 9 9\n9 10 10\n5 8 1\n11 8 4\n11 2 3\n9 3 3\n11 10 6\n10 6 9\n10 2 1\n9 11 2\n11 1 9\n7 2 1\n9 4 5\n5 4 2\n5 10 8\n2 6 9\n4 6 1\n3 10 2\n4 7 2\n",
    "vertices": [
      4,
      8
    ],
    "answer": 30,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 19 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 6 and vertex 5.\n",
    "graph_output": "8 19\n2 4\n6 7\n8 1\n7 2\n1 5\n3 6\n7 1\n7 3\n5 3\n3 4\n4 1\n5 7\n8 2\n6 1\n4 8\n5 2\n7 8\n6 2\n6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 522,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 7 (source) to vertex 9 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 11 vertices and 42 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 6 30 2\n1 8 56 10\n1 4 12 1\n4 9 56 3\n1 2 1 8\n1 10 25 1\n2 5 60 9\n8 11 55 6\n4 7 77 7\n5 3 3 8\n11 4 43 10\n10 7 44 6\n9 6 59 2\n7 6 69 6\n7 11 73 8\n6 4 79 9\n11 1 10 7\n3 1 38 8\n2 3 8 3\n10 3 30 2\n7 8 22 10\n7 3 76 2\n5 9 5 8\n5 8 76 7\n5 6 44 6\n1 9 78 4\n9 8 48 1\n7 1 42 1\n8 6 39 1\n10 4 98 7\n2 8 42 3\n6 10 59 4\n9 2 47 8\n3 4 56 4\n5 4 90 10\n7 5 10 7\n3 11 71 6\n7 2 60 7\n9 7 52 2\n8 4 41 2\n11 2 59 2\n10 5 16 6\n",
    "graph_output": "11 42\n1 6 30 2\n1 8 56 10\n1 4 12 1\n4 9 56 3\n1 2 1 8\n1 10 25 1\n2 5 60 9\n8 11 55 6\n4 7 77 7\n5 3 3 8\n11 4 43 10\n10 7 44 6\n9 6 59 2\n7 6 69 6\n7 11 73 8\n6 4 79 9\n11 1 10 7\n3 1 38 8\n2 3 8 3\n10 3 30 2\n7 8 22 10\n7 3 76 2\n5 9 5 8\n5 8 76 7\n5 6 44 6\n1 9 78 4\n9 8 48 1\n7 1 42 1\n8 6 39 1\n10 4 98 7\n2 8 42 3\n6 10 59 4\n9 2 47 8\n3 4 56 4\n5 4 90 10\n7 5 10 7\n3 11 71 6\n7 2 60 7\n9 7 52 2\n8 4 41 2\n11 2 59 2\n10 5 16 6\n",
    "vertices": [
      7,
      9
    ],
    "answer": 2376,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 17 vertices and 130 edges\n\nEdges (Format: Node Node):\n12 10\n1 5\n8 2\n17 3\n8 5\n14 17\n3 15\n11 14\n4 9\n17 7\n4 11\n13 14\n13 15\n3 2\n14 3\n16 2\n9 11\n13 11\n14 4\n3 7\n16 13\n4 10\n12 15\n5 3\n17 6\n2 6\n6 4\n15 5\n16 7\n2 9\n15 9\n17 8\n16 3\n15 8\n2 15\n13 8\n2 11\n6 13\n8 11\n8 16\n12 7\n4 2\n3 6\n16 12\n17 15\n17 9\n6 8\n2 1\n14 12\n16 9\n17 16\n13 3\n17 1\n5 10\n7 8\n8 4\n12 1\n5 12\n2 17\n9 1\n5 17\n13 4\n15 1\n2 12\n10 6\n16 1\n13 5\n6 5\n7 5\n14 8\n5 11\n6 7\n10 11\n2 13\n9 6\n17 13\n1 14\n15 4\n1 6\n16 4\n12 3\n14 6\n3 9\n17 12\n1 11\n16 5\n14 10\n12 13\n7 11\n17 11\n7 1\n10 3\n4 3\n16 6\n7 14\n17 10\n8 10\n4 17\n8 1\n5 9\n10 7\n15 11\n15 6\n13 10\n4 1\n8 9\n5 2\n14 16\n12 8\n1 3\n15 7\n12 6\n3 8\n11 6\n12 9\n15 14\n5 14\n2 7\n16 15\n11 12\n13 9\n9 10\n16 10\n13 1\n13 7\n7 9\n7 4\n11 16\n10 1\n15 10\n",
    "graph_output": "17 130\n12 10\n1 5\n8 2\n17 3\n8 5\n14 17\n3 15\n11 14\n4 9\n17 7\n4 11\n13 14\n13 15\n3 2\n14 3\n16 2\n9 11\n13 11\n14 4\n3 7\n16 13\n4 10\n12 15\n5 3\n17 6\n2 6\n6 4\n15 5\n16 7\n2 9\n15 9\n17 8\n16 3\n15 8\n2 15\n13 8\n2 11\n6 13\n8 11\n8 16\n12 7\n4 2\n3 6\n16 12\n17 15\n17 9\n6 8\n2 1\n14 12\n16 9\n17 16\n13 3\n17 1\n5 10\n7 8\n8 4\n12 1\n5 12\n2 17\n9 1\n5 17\n13 4\n15 1\n2 12\n10 6\n16 1\n13 5\n6 5\n7 5\n14 8\n5 11\n6 7\n10 11\n2 13\n9 6\n17 13\n1 14\n15 4\n1 6\n16 4\n12 3\n14 6\n3 9\n17 12\n1 11\n16 5\n14 10\n12 13\n7 11\n17 11\n7 1\n10 3\n4 3\n16 6\n7 14\n17 10\n8 10\n4 17\n8 1\n5 9\n10 7\n15 11\n15 6\n13 10\n4 1\n8 9\n5 2\n14 16\n12 8\n1 3\n15 7\n12 6\n3 8\n11 6\n12 9\n15 14\n5 14\n2 7\n16 15\n11 12\n13 9\n9 10\n16 10\n13 1\n13 7\n7 9\n7 4\n11 16\n10 1\n15 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 84 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4 with a weight of 56.\nThere is an edge between vertex 4 and vertex 7 with a weight of 7.\nThere is an edge between vertex 1 and vertex 8 with a weight of 97.\nThere is an edge between vertex 4 and vertex 6 with a weight of 19.\nThere is an edge between vertex 6 and vertex 14 with a weight of 28.\nThere is an edge between vertex 4 and vertex 12 with a weight of 88.\nThere is an edge between vertex 1 and vertex 5 with a weight of 5.\nThere is an edge between vertex 1 and vertex 13 with a weight of 85.\nThere is an edge between vertex 7 and vertex 10 with a weight of 60.\nThere is an edge between vertex 5 and vertex 9 with a weight of 60.\nThere is an edge between vertex 1 and vertex 2 with a weight of 13.\nThere is an edge between vertex 8 and vertex 3 with a weight of 29.\nThere is an edge between vertex 13 and vertex 11 with a weight of 82.\nThere is an edge between vertex 6 and vertex 13 with a weight of 18.\nThere is an edge between vertex 14 and vertex 3 with a weight of 35.\nThere is an edge between vertex 9 and vertex 13 with a weight of 11.\nThere is an edge between vertex 5 and vertex 11 with a weight of 72.\nThere is an edge between vertex 11 and vertex 14 with a weight of 83.\nThere is an edge between vertex 12 and vertex 6 with a weight of 92.\nThere is an edge between vertex 14 and vertex 1 with a weight of 20.\nThere is an edge between vertex 4 and vertex 2 with a weight of 14.\nThere is an edge between vertex 11 and vertex 3 with a weight of 83.\nThere is an edge between vertex 3 and vertex 6 with a weight of 29.\nThere is an edge between vertex 7 and vertex 11 with a weight of 55.\nThere is an edge between vertex 8 and vertex 4 with a weight of 88.\nThere is an edge between vertex 13 and vertex 5 with a weight of 72.\nThere is an edge between vertex 14 and vertex 5 with a weight of 26.\nThere is an edge between vertex 11 and vertex 2 with a weight of 31.\nThere is an edge between vertex 1 and vertex 10 with a weight of 64.\nThere is an edge between vertex 13 and vertex 10 with a weight of 41.\nThere is an edge between vertex 8 and vertex 14 with a weight of 44.\nThere is an edge between vertex 2 and vertex 5 with a weight of 45.\nThere is an edge between vertex 4 and vertex 5 with a weight of 13.\nThere is an edge between vertex 6 and vertex 9 with a weight of 88.\nThere is an edge between vertex 9 and vertex 4 with a weight of 53.\nThere is an edge between vertex 12 and vertex 2 with a weight of 26.\nThere is an edge between vertex 11 and vertex 10 with a weight of 76.\nThere is an edge between vertex 10 and vertex 3 with a weight of 62.\nThere is an edge between vertex 2 and vertex 9 with a weight of 78.\nThere is an edge between vertex 14 and vertex 12 with a weight of 61.\nThere is an edge between vertex 6 and vertex 10 with a weight of 15.\nThere is an edge between vertex 4 and vertex 13 with a weight of 14.\nThere is an edge between vertex 1 and vertex 12 with a weight of 32.\nThere is an edge between vertex 3 and vertex 13 with a weight of 2.\nThere is an edge between vertex 7 and vertex 8 with a weight of 47.\nThere is an edge between vertex 12 and vertex 10 with a weight of 50.\nThere is an edge between vertex 2 and vertex 6 with a weight of 92.\nThere is an edge between vertex 9 and vertex 1 with a weight of 22.\nThere is an edge between vertex 3 and vertex 9 with a weight of 17.\nThere is an edge between vertex 7 and vertex 6 with a weight of 59.\nThere is an edge between vertex 3 and vertex 2 with a weight of 19.\nThere is an edge between vertex 8 and vertex 6 with a weight of 12.\nThere is an edge between vertex 3 and vertex 4 with a weight of 85.\nThere is an edge between vertex 7 and vertex 9 with a weight of 94.\nThere is an edge between vertex 12 and vertex 5 with a weight of 72.\nThere is an edge between vertex 2 and vertex 10 with a weight of 45.\nThere is an edge between vertex 2 and vertex 7 with a weight of 35.\nThere is an edge between vertex 12 and vertex 7 with a weight of 84.\nThere is an edge between vertex 10 and vertex 4 with a weight of 66.\nThere is an edge between vertex 11 and vertex 8 with a weight of 4.\nThere is an edge between vertex 7 and vertex 5 with a weight of 11.\nThere is an edge between vertex 10 and vertex 5 with a weight of 91.\nThere is an edge between vertex 13 and vertex 8 with a weight of 63.\nThere is an edge between vertex 9 and vertex 12 with a weight of 8.\nThere is an edge between vertex 9 and vertex 8 with a weight of 71.\nThere is an edge between vertex 13 and vertex 12 with a weight of 49.\nThere is an edge between vertex 10 and vertex 9 with a weight of 53.\nThere is an edge between vertex 2 and vertex 8 with a weight of 56.\nThere is an edge between vertex 9 and vertex 14 with a weight of 86.\nThere is an edge between vertex 1 and vertex 6 with a weight of 88.\nThere is an edge between vertex 4 and vertex 14 with a weight of 30.\nThere is an edge between vertex 3 and vertex 12 with a weight of 92.\nThere is an edge between vertex 13 and vertex 7 with a weight of 44.\nThere is an edge between vertex 5 and vertex 6 with a weight of 79.\nThere is an edge between vertex 13 and vertex 2 with a weight of 93.\nThere is an edge between vertex 11 and vertex 4 with a weight of 85.\nThere is an edge between vertex 14 and vertex 13 with a weight of 47.\nThere is an edge between vertex 12 and vertex 8 with a weight of 1.\nThere is an edge between vertex 7 and vertex 14 with a weight of 73.\nThere is an edge between vertex 12 and vertex 11 with a weight of 61.\nThere is an edge between vertex 9 and vertex 11 with a weight of 98.\nThere is an edge between vertex 11 and vertex 1 with a weight of 59.\nThere is an edge between vertex 14 and vertex 10 with a weight of 66.\nThere is an edge between vertex 3 and vertex 1 with a weight of 2.\n",
    "graph_output": "14 84\n1 4 56\n4 7 7\n1 8 97\n4 6 19\n6 14 28\n4 12 88\n1 5 5\n1 13 85\n7 10 60\n5 9 60\n1 2 13\n8 3 29\n13 11 82\n6 13 18\n14 3 35\n9 13 11\n5 11 72\n11 14 83\n12 6 92\n14 1 20\n4 2 14\n11 3 83\n3 6 29\n7 11 55\n8 4 88\n13 5 72\n14 5 26\n11 2 31\n1 10 64\n13 10 41\n8 14 44\n2 5 45\n4 5 13\n6 9 88\n9 4 53\n12 2 26\n11 10 76\n10 3 62\n2 9 78\n14 12 61\n6 10 15\n4 13 14\n1 12 32\n3 13 2\n7 8 47\n12 10 50\n2 6 92\n9 1 22\n3 9 17\n7 6 59\n3 2 19\n8 6 12\n3 4 85\n7 9 94\n12 5 72\n2 10 45\n2 7 35\n12 7 84\n10 4 66\n11 8 4\n7 5 11\n10 5 91\n13 8 63\n9 12 8\n9 8 71\n13 12 49\n10 9 53\n2 8 56\n9 14 86\n1 6 88\n4 14 30\n3 12 92\n13 7 44\n5 6 79\n13 2 93\n11 4 85\n14 13 47\n12 8 1\n7 14 73\n12 11 61\n9 11 98\n11 1 59\n14 10 66\n3 1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 111,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 81 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 15 and vertex 13.\n",
    "graph_output": "15 81\n1 7\n1 12\n12 6\n6 8\n1 15\n1 9\n7 10\n7 3\n15 2\n12 11\n3 14\n1 13\n15 5\n8 4\n6 10\n14 13\n2 13\n8 15\n11 15\n14 5\n8 5\n1 11\n7 6\n2 5\n15 14\n4 5\n4 13\n2 1\n9 5\n10 11\n4 2\n7 14\n13 3\n5 10\n4 11\n9 6\n10 14\n9 4\n11 3\n9 11\n15 7\n12 7\n15 6\n15 9\n6 1\n13 11\n12 10\n14 11\n10 8\n1 14\n12 13\n4 15\n7 4\n10 13\n12 9\n7 9\n13 9\n11 2\n6 13\n11 6\n2 12\n1 10\n10 9\n8 3\n8 11\n6 4\n10 4\n8 14\n14 4\n1 3\n8 7\n14 2\n12 8\n2 7\n3 2\n4 1\n3 12\n3 6\n6 14\n2 6\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 12 (source) to vertex 13 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 71 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 13 and vertex 11 with a capacity of 8.\nThere is an edge between vertex 13 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 8 and vertex 4 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 12 with a capacity of 9.\nThere is an edge between vertex 3 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 11 and vertex 6 with a capacity of 8.\nThere is an edge between vertex 12 and vertex 2 with a capacity of 2.\nThere is an edge between vertex 7 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 2 and vertex 3 with a capacity of 3.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 3 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 2 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 7.\nThere is an edge between vertex 7 and vertex 9 with a capacity of 8.\nThere is an edge between vertex 8 and vertex 10 with a capacity of 6.\nThere is an edge between vertex 1 and vertex 6 with a capacity of 5.\nThere is an edge between vertex 2 and vertex 6 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 12 with a capacity of 8.\nThere is an edge between vertex 6 and vertex 4 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 2 with a capacity of 9.\nThere is an edge between vertex 12 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 4 with a capacity of 7.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 12 with a capacity of 2.\nThere is an edge between vertex 9 and vertex 13 with a capacity of 5.\nThere is an edge between vertex 2 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 8 and vertex 7 with a capacity of 9.\nThere is an edge between vertex 3 and vertex 1 with a capacity of 3.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 10 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 13 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 6 and vertex 12 with a capacity of 3.\nThere is an edge between vertex 4 and vertex 11 with a capacity of 5.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 8.\nThere is an edge between vertex 9 and vertex 8 with a capacity of 7.\nThere is an edge between vertex 7 and vertex 2 with a capacity of 6.\nThere is an edge between vertex 12 and vertex 10 with a capacity of 3.\nThere is an edge between vertex 4 and vertex 3 with a capacity of 3.\nThere is an edge between vertex 13 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 13 and vertex 12 with a capacity of 9.\nThere is an edge between vertex 11 and vertex 10 with a capacity of 2.\nThere is an edge between vertex 11 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 10 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 9 with a capacity of 10.\nThere is an edge between vertex 6 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 13 and vertex 4 with a capacity of 4.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 2.\nThere is an edge between vertex 9 and vertex 11 with a capacity of 6.\nThere is an edge between vertex 10 and vertex 6 with a capacity of 1.\nThere is an edge between vertex 7 and vertex 4 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 12 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 10 with a capacity of 3.\nThere is an edge between vertex 5 and vertex 13 with a capacity of 4.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 8 and vertex 11 with a capacity of 4.\nThere is an edge between vertex 8 and vertex 2 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 13 with a capacity of 1.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 10.\nThere is an edge between vertex 2 and vertex 5 with a capacity of 1.\nThere is an edge between vertex 8 and vertex 13 with a capacity of 8.\nThere is an edge between vertex 3 and vertex 11 with a capacity of 9.\nThere is an edge between vertex 13 and vertex 2 with a capacity of 6.\nThere is an edge between vertex 8 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 2 and vertex 11 with a capacity of 9.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 9.\n",
    "graph_output": "13 71\n1 13 3\n1 8 9\n1 7 6\n7 10 9\n13 11 8\n13 3 5\n7 5 9\n8 4 5\n7 12 9\n3 9 5\n11 6 8\n12 2 2\n7 6 10\n2 3 3\n6 8 9\n3 10 4\n4 2 5\n3 5 7\n7 9 8\n8 10 6\n1 6 5\n2 6 5\n3 12 8\n6 4 8\n1 2 9\n12 9 9\n5 4 7\n3 7 4\n4 12 2\n9 13 5\n2 9 4\n8 7 9\n3 1 3\n5 6 10\n1 11 2\n10 4 1\n13 10 5\n6 12 3\n4 11 5\n2 10 8\n9 8 7\n7 2 6\n12 10 3\n4 3 3\n13 6 10\n13 12 9\n11 10 2\n11 7 4\n10 5 2\n5 9 10\n6 9 5\n13 4 4\n1 10 2\n9 11 6\n10 6 1\n7 4 3\n1 12 5\n9 10 3\n5 13 4\n1 9 5\n8 11 4\n8 2 5\n7 13 1\n1 5 10\n2 5 1\n8 13 8\n3 11 9\n13 2 6\n8 5 9\n2 11 9\n6 3 9\n",
    "vertices": [
      12,
      13
    ],
    "answer": 50,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 9 (source) to vertex 11 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 13 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   0   0   1   1   0   1   0   0 \n 2 |  0   0   0   0   0   0   0   0   1   0   1 \n 3 |  0   0   0   0   0   0   0   0   0   0   1 \n 4 |  0   0   0   0   0   1   0   0   0   0   0 \n 5 |  0   0   0   0   0   1   0   1   0   1   0 \n 6 |  1   0   0   1   1   0   0   0   0   1   1 \n 7 |  1   0   0   0   0   0   0   0   1   0   0 \n 8 |  0   0   0   0   1   0   0   0   0   0   0 \n 9 |  1   1   0   0   0   0   1   0   0   0   0 \n10 |  0   0   0   0   1   1   0   0   0   0   0 \n11 |  0   1   1   0   0   1   0   0   0   0   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   0   0   5  10   0   6   0   0 \n 2 |  0   0   0   0   0   0   0   0   3   0   9 \n 3 |  0   0   0   0   0   0   0   0   0   0   6 \n 4 |  0   0   0   0   0   1   0   0   0   0   0 \n 5 |  0   0   0   0   0   3   0   7   0   8   0 \n 6 |  5   0   0   1   3   0   0   0   0   2  10 \n 7 | 10   0   0   0   0   0   0   0   7   0   0 \n 8 |  0   0   0   0   7   0   0   0   0   0   0 \n 9 |  6   3   0   0   0   0   7   0   0   0   0 \n10 |  0   0   0   0   8   2   0   0   0   0   0 \n11 |  0   9   6   0   0  10   0   0   0   0   0 \n",
    "graph_output": "11 13\n1 6 5\n6 10 2\n6 11 10\n6 4 1\n11 2 9\n1 7 10\n1 9 6\n10 5 8\n5 8 7\n11 3 6\n7 9 7\n5 6 3\n9 2 3\n",
    "vertices": [
      9,
      11
    ],
    "answer": 8,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 44 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5 with a weight of 68.\nThere is an edge between vertex 1 and vertex 4 with a weight of 84.\nThere is an edge between vertex 1 and vertex 8 with a weight of 49.\nThere is an edge between vertex 8 and vertex 7 with a weight of 94.\nThere is an edge between vertex 8 and vertex 9 with a weight of 3.\nThere is an edge between vertex 4 and vertex 2 with a weight of 68.\nThere is an edge between vertex 4 and vertex 6 with a weight of 6.\nThere is an edge between vertex 4 and vertex 10 with a weight of 98.\nThere is an edge between vertex 10 and vertex 11 with a weight of 25.\nThere is an edge between vertex 9 and vertex 3 with a weight of 59.\nThere is an edge between vertex 3 and vertex 10 with a weight of 31.\nThere is an edge between vertex 1 and vertex 3 with a weight of 94.\nThere is an edge between vertex 4 and vertex 7 with a weight of 21.\nThere is an edge between vertex 11 and vertex 4 with a weight of 96.\nThere is an edge between vertex 1 and vertex 2 with a weight of 45.\nThere is an edge between vertex 2 and vertex 10 with a weight of 56.\nThere is an edge between vertex 6 and vertex 8 with a weight of 43.\nThere is an edge between vertex 11 and vertex 3 with a weight of 5.\nThere is an edge between vertex 1 and vertex 6 with a weight of 95.\nThere is an edge between vertex 11 and vertex 1 with a weight of 4.\nThere is an edge between vertex 3 and vertex 4 with a weight of 99.\nThere is an edge between vertex 2 and vertex 11 with a weight of 99.\nThere is an edge between vertex 11 and vertex 7 with a weight of 54.\nThere is an edge between vertex 6 and vertex 7 with a weight of 63.\nThere is an edge between vertex 10 and vertex 5 with a weight of 85.\nThere is an edge between vertex 11 and vertex 8 with a weight of 33.\nThere is an edge between vertex 8 and vertex 4 with a weight of 17.\nThere is an edge between vertex 10 and vertex 9 with a weight of 20.\nThere is an edge between vertex 8 and vertex 2 with a weight of 80.\nThere is an edge between vertex 5 and vertex 7 with a weight of 98.\nThere is an edge between vertex 9 and vertex 5 with a weight of 58.\nThere is an edge between vertex 11 and vertex 5 with a weight of 100.\nThere is an edge between vertex 2 and vertex 6 with a weight of 54.\nThere is an edge between vertex 7 and vertex 3 with a weight of 62.\nThere is an edge between vertex 7 and vertex 1 with a weight of 71.\nThere is an edge between vertex 7 and vertex 2 with a weight of 20.\nThere is an edge between vertex 4 and vertex 5 with a weight of 97.\nThere is an edge between vertex 1 and vertex 9 with a weight of 20.\nThere is an edge between vertex 11 and vertex 9 with a weight of 97.\nThere is an edge between vertex 8 and vertex 5 with a weight of 48.\nThere is an edge between vertex 5 and vertex 6 with a weight of 71.\nThere is an edge between vertex 10 and vertex 1 with a weight of 52.\nThere is an edge between vertex 2 and vertex 3 with a weight of 50.\nThere is an edge between vertex 5 and vertex 3 with a weight of 3.\n",
    "graph_output": "11 44\n1 5 68\n1 4 84\n1 8 49\n8 7 94\n8 9 3\n4 2 68\n4 6 6\n4 10 98\n10 11 25\n9 3 59\n3 10 31\n1 3 94\n4 7 21\n11 4 96\n1 2 45\n2 10 56\n6 8 43\n11 3 5\n1 6 95\n11 1 4\n3 4 99\n2 11 99\n11 7 54\n6 7 63\n10 5 85\n11 8 33\n8 4 17\n10 9 20\n8 2 80\n5 7 98\n9 5 58\n11 5 100\n2 6 54\n7 3 62\n7 1 71\n7 2 20\n4 5 97\n1 9 20\n11 9 97\n8 5 48\n5 6 71\n10 1 52\n2 3 50\n5 3 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 124,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 13 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 56 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 13 (capacity=9), 9 (capacity=3), 3 (capacity=4), 12 (capacity=4), 4 (capacity=6), 5 (capacity=9), 8 (capacity=2), 10 (capacity=7), 6 (capacity=5)\nVertex 2: 9 (capacity=8), 4 (capacity=2), 3 (capacity=5), 10 (capacity=1), 7 (capacity=6), 8 (capacity=2), 6 (capacity=4), 11 (capacity=7), 13 (capacity=8), 5 (capacity=8), 12 (capacity=1)\nVertex 3: 1 (capacity=4), 11 (capacity=7), 5 (capacity=8), 8 (capacity=5), 2 (capacity=5), 10 (capacity=3), 6 (capacity=2), 4 (capacity=2)\nVertex 4: 9 (capacity=1), 2 (capacity=2), 1 (capacity=6), 8 (capacity=3), 10 (capacity=10), 7 (capacity=1), 11 (capacity=2), 3 (capacity=2)\nVertex 5: 3 (capacity=8), 10 (capacity=6), 1 (capacity=9), 13 (capacity=4), 2 (capacity=8), 7 (capacity=1), 9 (capacity=10)\nVertex 6: 9 (capacity=10), 8 (capacity=5), 10 (capacity=10), 11 (capacity=2), 12 (capacity=5), 13 (capacity=4), 2 (capacity=4), 3 (capacity=2), 1 (capacity=5)\nVertex 7: 9 (capacity=10), 12 (capacity=5), 2 (capacity=6), 4 (capacity=1), 5 (capacity=1), 13 (capacity=5)\nVertex 8: 13 (capacity=3), 10 (capacity=2), 9 (capacity=5), 3 (capacity=5), 6 (capacity=5), 4 (capacity=3), 1 (capacity=2), 2 (capacity=2), 12 (capacity=8)\nVertex 9: 1 (capacity=3), 6 (capacity=10), 2 (capacity=8), 7 (capacity=10), 4 (capacity=1), 8 (capacity=5), 11 (capacity=5), 12 (capacity=2), 5 (capacity=10), 13 (capacity=9)\nVertex 10: 8 (capacity=2), 5 (capacity=6), 6 (capacity=10), 2 (capacity=1), 13 (capacity=2), 12 (capacity=7), 1 (capacity=7), 4 (capacity=10), 3 (capacity=3), 11 (capacity=4)\nVertex 11: 3 (capacity=7), 6 (capacity=2), 9 (capacity=5), 10 (capacity=4), 2 (capacity=7), 13 (capacity=3), 4 (capacity=2)\nVertex 12: 1 (capacity=4), 13 (capacity=1), 7 (capacity=5), 6 (capacity=5), 10 (capacity=7), 8 (capacity=8), 9 (capacity=2), 2 (capacity=1)\nVertex 13: 1 (capacity=9), 8 (capacity=3), 12 (capacity=1), 10 (capacity=2), 6 (capacity=4), 5 (capacity=4), 11 (capacity=3), 2 (capacity=8), 7 (capacity=5), 9 (capacity=9)\n",
    "graph_output": "13 56\n1 13 9\n1 9 3\n1 3 4\n9 6 10\n9 2 8\n13 8 3\n9 7 10\n9 4 1\n3 11 7\n8 10 2\n3 5 8\n1 12 4\n2 4 2\n5 10 6\n4 1 6\n9 8 5\n12 13 1\n1 5 9\n8 3 5\n6 8 5\n4 8 3\n10 6 10\n11 6 2\n3 2 5\n10 2 1\n8 1 2\n12 7 5\n11 9 5\n6 12 5\n10 13 2\n10 12 7\n2 7 6\n8 2 2\n10 1 7\n10 4 10\n10 3 3\n7 4 1\n10 11 4\n13 6 4\n5 13 4\n6 2 4\n2 11 7\n3 6 2\n13 11 3\n11 4 2\n12 8 8\n12 9 2\n3 4 2\n2 13 8\n5 2 8\n7 5 1\n6 1 5\n7 13 5\n5 9 10\n2 12 1\n13 9 9\n",
    "vertices": [
      13,
      4
    ],
    "answer": 27,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 125 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   0   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n 3 |  0   1   0   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   0   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   0   0   1   1   1   1   1   1 \n 8 |  0   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   0   1   1   1   1 \n10 |  1   1   1   1   1   1   0   1   1   0   1   1   0   1   1   1   1 \n11 |  1   1   1   0   1   1   0   1   1   1   0   1   0   1   1   1   1 \n12 |  1   0   0   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   0   0   0   1   0   1   1   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   0 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n16 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n17 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   0 \n",
    "graph_output": "17 125\n1 12\n1 13\n13 3\n12 5\n5 8\n13 2\n1 9\n12 14\n8 6\n12 17\n9 10\n5 15\n1 16\n5 11\n17 4\n5 7\n3 10\n7 4\n11 1\n17 1\n6 12\n8 11\n9 14\n12 11\n3 14\n10 16\n9 3\n5 9\n10 2\n9 12\n11 10\n4 6\n16 5\n5 1\n2 17\n6 3\n16 11\n6 17\n14 1\n8 13\n15 3\n15 4\n2 16\n17 16\n2 5\n2 8\n3 5\n9 16\n15 17\n10 4\n16 6\n1 4\n5 13\n8 7\n15 13\n15 8\n1 6\n15 9\n17 7\n15 16\n17 3\n12 4\n9 7\n11 17\n7 15\n12 10\n1 10\n2 14\n6 2\n12 16\n8 12\n7 16\n9 4\n11 3\n6 14\n3 8\n6 9\n4 5\n5 10\n8 4\n6 5\n13 6\n10 15\n9 2\n15 11\n14 16\n17 10\n14 5\n17 8\n7 13\n3 16\n14 8\n2 1\n10 8\n4 16\n3 4\n7 3\n6 10\n2 15\n12 7\n10 14\n13 16\n11 14\n1 7\n7 14\n11 2\n13 12\n14 13\n4 14\n5 17\n4 2\n13 4\n1 15\n16 8\n17 13\n3 2\n6 7\n9 17\n2 7\n15 14\n6 15\n8 9\n11 6\n15 12\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 7 vertices and 19 edges\n\nEdges (Format: Node Node):\n1 6\n1 7\n1 2\n6 5\n1 3\n3 4\n5 2\n2 6\n5 1\n6 4\n4 2\n3 7\n7 6\n7 2\n3 2\n5 7\n3 5\n6 3\n5 4\n",
    "graph_output": "7 19\n1 6\n1 7\n1 2\n6 5\n1 3\n3 4\n5 2\n2 6\n5 1\n6 4\n4 2\n3 7\n7 6\n7 2\n3 2\n5 7\n3 5\n6 3\n5 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8232,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 30 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 12 with a weight of 31.\nThere is an edge between vertex 1 and vertex 3 with a weight of 86.\nThere is an edge between vertex 3 and vertex 14 with a weight of 94.\nThere is an edge between vertex 14 and vertex 11 with a weight of 77.\nThere is an edge between vertex 1 and vertex 2 with a weight of 51.\nThere is an edge between vertex 14 and vertex 9 with a weight of 64.\nThere is an edge between vertex 9 and vertex 4 with a weight of 67.\nThere is an edge between vertex 1 and vertex 15 with a weight of 72.\nThere is an edge between vertex 12 and vertex 13 with a weight of 96.\nThere is an edge between vertex 14 and vertex 8 with a weight of 44.\nThere is an edge between vertex 11 and vertex 6 with a weight of 67.\nThere is an edge between vertex 8 and vertex 10 with a weight of 35.\nThere is an edge between vertex 2 and vertex 16 with a weight of 57.\nThere is an edge between vertex 4 and vertex 7 with a weight of 91.\nThere is an edge between vertex 11 and vertex 5 with a weight of 6.\nThere is an edge between vertex 5 and vertex 7 with a weight of 26.\nThere is an edge between vertex 2 and vertex 8 with a weight of 80.\nThere is an edge between vertex 12 and vertex 10 with a weight of 2.\nThere is an edge between vertex 4 and vertex 2 with a weight of 64.\nThere is an edge between vertex 13 and vertex 14 with a weight of 5.\nThere is an edge between vertex 14 and vertex 5 with a weight of 39.\nThere is an edge between vertex 15 and vertex 5 with a weight of 29.\nThere is an edge between vertex 11 and vertex 15 with a weight of 73.\nThere is an edge between vertex 2 and vertex 9 with a weight of 72.\nThere is an edge between vertex 13 and vertex 9 with a weight of 25.\nThere is an edge between vertex 15 and vertex 9 with a weight of 34.\nThere is an edge between vertex 6 and vertex 2 with a weight of 92.\nThere is an edge between vertex 1 and vertex 14 with a weight of 19.\nThere is an edge between vertex 13 and vertex 16 with a weight of 46.\nThere is an edge between vertex 14 and vertex 12 with a weight of 77.\n",
    "graph_output": "16 30\n1 12 31\n1 3 86\n3 14 94\n14 11 77\n1 2 51\n14 9 64\n9 4 67\n1 15 72\n12 13 96\n14 8 44\n11 6 67\n8 10 35\n2 16 57\n4 7 91\n11 5 6\n5 7 26\n2 8 80\n12 10 2\n4 2 64\n13 14 5\n14 5 39\n15 5 29\n11 15 73\n2 9 72\n13 9 25\n15 9 34\n6 2 92\n1 14 19\n13 16 46\n14 12 77\n",
    "vertices": [
      null,
      null
    ],
    "answer": 526,
    "description_type": "natural"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 16 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   0   0  32   0   0  84   0  51   1   0 \n 2 |  0   0   0   0   0  99  28   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0  12   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0  20   0   0   0   0   0   0 \n 5 |  0   0   0   0   0  59   0   0   0  42   0   0   0 \n 6 | 32  99   0   0  59   0   0   0   0   0   0   0   0 \n 7 |  0  28  12  20   0   0   0   0  82   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0  39   0   0 \n 9 | 84   0   0   0   0   0  82   0   0   0   0  29   0 \n10 |  0   0   0   0  42   0   0   0   0   0   0   0  94 \n11 | 51   0   0   0   0   0   0  39   0   0   0  59  20 \n12 |  1   0   0   0   0   0   0   0  29   0  59   0   0 \n13 |  0   0   0   0   0   0   0   0   0  94  20   0   0 \n",
    "graph_output": "13 16\n1 9 84\n9 7 82\n7 3 12\n1 6 32\n6 5 59\n7 2 28\n5 10 42\n7 4 20\n10 13 94\n1 11 51\n11 8 39\n9 12 29\n11 13 20\n11 12 59\n6 2 99\n1 12 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 423,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 25 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 4 and vertex 7.\n",
    "graph_output": "15 25\n1 5\n1 2\n1 8\n1 13\n2 10\n2 6\n13 15\n10 9\n6 7\n2 14\n14 3\n3 12\n14 4\n7 11\n13 6\n1 3\n13 10\n7 15\n5 8\n9 4\n6 9\n1 11\n6 1\n3 9\n4 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 7 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 21 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0  14   0   0   0   0  65   0  10   0  96   0  76   0  55 \n 2 | 14   0   0   0   0  90   0   0   0   0   0   0   0  63   0 \n 3 |  0   0   0   0   0   0  71   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0  28   0  36   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0  38   0   0   0  69  39   0   0 \n 6 |  0  90   0   0   0   0  58   0   0   0   0   0   0   0  39 \n 7 | 65   0  71  28   0  58   0   0   0   0   0   0  96   0   0 \n 8 |  0   0   0   0  38   0   0   0   0   0  46   0   0   0   0 \n 9 | 10   0   0  36   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0  38   0  50   0  58 \n11 | 96   0   0   0   0   0   0  46   0  38   0   0   0   0   0 \n12 |  0   0   0   0  69   0   0   0   0   0   0   0   0   0   0 \n13 | 76   0   0   0  39   0  96   0   0  50   0   0   0   0   0 \n14 |  0  63   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 | 55   0   0   0   0  39   0   0   0  58   0   0   0   0   0 \n",
    "graph_output": "15 21\n1 7 65\n7 13 96\n1 2 14\n1 9 10\n7 3 71\n1 11 96\n13 5 39\n2 14 63\n11 10 38\n5 12 69\n11 8 46\n9 4 36\n1 15 55\n2 6 90\n5 8 38\n13 1 76\n15 6 39\n7 4 28\n10 13 50\n10 15 58\n6 7 58\n",
    "vertices": [
      4,
      7
    ],
    "answer": 28,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 18 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9 with a weight of 20.\nThere is an edge between vertex 9 and vertex 6 with a weight of 27.\nThere is an edge between vertex 6 and vertex 8 with a weight of 65.\nThere is an edge between vertex 6 and vertex 3 with a weight of 62.\nThere is an edge between vertex 8 and vertex 5 with a weight of 89.\nThere is an edge between vertex 8 and vertex 10 with a weight of 61.\nThere is an edge between vertex 1 and vertex 7 with a weight of 4.\nThere is an edge between vertex 1 and vertex 15 with a weight of 49.\nThere is an edge between vertex 9 and vertex 2 with a weight of 26.\nThere is an edge between vertex 1 and vertex 4 with a weight of 63.\nThere is an edge between vertex 3 and vertex 13 with a weight of 12.\nThere is an edge between vertex 10 and vertex 11 with a weight of 25.\nThere is an edge between vertex 5 and vertex 12 with a weight of 21.\nThere is an edge between vertex 9 and vertex 14 with a weight of 23.\nThere is an edge between vertex 11 and vertex 14 with a weight of 44.\nThere is an edge between vertex 8 and vertex 12 with a weight of 93.\nThere is an edge between vertex 15 and vertex 12 with a weight of 94.\nThere is an edge between vertex 3 and vertex 8 with a weight of 57.\n",
    "graph_output": "15 18\n1 9 20\n9 6 27\n6 8 65\n6 3 62\n8 5 89\n8 10 61\n1 7 4\n1 15 49\n9 2 26\n1 4 63\n3 13 12\n10 11 25\n5 12 21\n9 14 23\n11 14 44\n8 12 93\n15 12 94\n3 8 57\n",
    "vertices": [
      null,
      null
    ],
    "answer": 521,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 21 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 11, 15, 3, 6, 2, 4\nVertex 2: 11, 1, 9\nVertex 3: 1, 14, 4, 10, 9, 6\nVertex 4: 3, 1\nVertex 5: 11\nVertex 6: 1, 16, 3\nVertex 7: 11\nVertex 8: 11, 9, 10\nVertex 9: 8, 3, 2\nVertex 10: 3, 8\nVertex 11: 1, 5, 2, 7, 8\nVertex 12: 13\nVertex 13: 1, 12\nVertex 14: 3\nVertex 15: 1\nVertex 16: 6\n",
    "graph_output": "16 21\n1 13\n1 11\n1 15\n11 5\n1 3\n1 6\n11 2\n6 16\n13 12\n3 14\n11 7\n3 4\n11 8\n3 10\n8 9\n3 9\n10 8\n1 2\n4 1\n9 2\n3 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 12 vertices and 18 edges\n\nEdges (Format: Node Node Weight):\n1 5 4\n1 7 59\n7 8 18\n1 10 55\n5 3 78\n7 9 89\n5 11 55\n10 6 87\n9 4 85\n7 2 4\n8 12 27\n6 2 57\n12 4 43\n6 12 16\n8 3 93\n6 1 72\n5 7 32\n10 2 22\n",
    "graph_output": "12 18\n1 5 4\n1 7 59\n7 8 18\n1 10 55\n5 3 78\n7 9 89\n5 11 55\n10 6 87\n9 4 85\n7 2 4\n8 12 27\n6 2 57\n12 4 43\n6 12 16\n8 3 93\n6 1 72\n5 7 32\n10 2 22\n",
    "vertices": [
      null,
      null
    ],
    "answer": 388,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 40 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 4 and vertex 5.\n",
    "graph_output": "11 40\n2 6\n3 7\n6 4\n5 1\n8 6\n10 2\n10 1\n5 10\n10 6\n8 1\n9 5\n3 2\n2 5\n11 4\n1 9\n2 1\n2 4\n10 9\n1 6\n11 5\n1 7\n8 7\n5 6\n3 5\n8 5\n8 4\n7 10\n11 2\n11 9\n3 10\n9 8\n6 11\n1 11\n7 9\n1 4\n4 10\n11 8\n8 3\n3 11\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 62,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 6 (source) to vertex 8 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 17 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 7 (weight=58, capacity=4), 5 (weight=87, capacity=4), 2 (weight=14, capacity=1), 3 (weight=12, capacity=5)\nVertex 2: 3 (weight=49, capacity=2), 7 (weight=47, capacity=5), 9 (weight=54, capacity=6), 1 (weight=14, capacity=1)\nVertex 3: 4 (weight=64, capacity=3), 2 (weight=49, capacity=2), 7 (weight=66, capacity=9), 5 (weight=30, capacity=6), 1 (weight=12, capacity=5)\nVertex 4: 5 (weight=26, capacity=7), 3 (weight=64, capacity=3), 6 (weight=82, capacity=6)\nVertex 5: 1 (weight=87, capacity=4), 4 (weight=26, capacity=7), 8 (weight=53, capacity=10), 3 (weight=30, capacity=6)\nVertex 6: 7 (weight=50, capacity=4), 4 (weight=82, capacity=6)\nVertex 7: 1 (weight=58, capacity=4), 8 (weight=67, capacity=6), 6 (weight=50, capacity=4), 3 (weight=66, capacity=9), 2 (weight=47, capacity=5), 9 (weight=77, capacity=1)\nVertex 8: 7 (weight=67, capacity=6), 9 (weight=44, capacity=5), 5 (weight=53, capacity=10)\nVertex 9: 8 (weight=44, capacity=5), 2 (weight=54, capacity=6), 7 (weight=77, capacity=1)\n",
    "graph_output": "9 17\n1 7 58 4\n7 8 67 6\n8 9 44 5\n1 5 87 4\n5 4 26 7\n4 3 64 3\n3 2 49 2\n7 6 50 4\n5 8 53 10\n3 7 66 9\n2 7 47 5\n9 2 54 6\n6 4 82 6\n2 1 14 1\n3 5 30 6\n9 7 77 1\n1 3 12 5\n",
    "vertices": [
      6,
      8
    ],
    "answer": 1434,
    "description_type": "list"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 7 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 8 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8 with a weight of 80 and a capacity of 4.\nThere is an edge between vertex 8 and vertex 6 with a weight of 97 and a capacity of 5.\nThere is an edge between vertex 1 and vertex 3 with a weight of 7 and a capacity of 2.\nThere is an edge between vertex 6 and vertex 5 with a weight of 36 and a capacity of 6.\nThere is an edge between vertex 5 and vertex 7 with a weight of 42 and a capacity of 3.\nThere is an edge between vertex 7 and vertex 9 with a weight of 36 and a capacity of 1.\nThere is an edge between vertex 3 and vertex 4 with a weight of 98 and a capacity of 1.\nThere is an edge between vertex 3 and vertex 2 with a weight of 32 and a capacity of 6.\n",
    "graph_output": "9 8\n1 8 80 4\n8 6 97 5\n1 3 7 2\n6 5 36 6\n5 7 42 3\n7 9 36 1\n3 4 98 1\n3 2 32 6\n",
    "vertices": [
      4,
      7
    ],
    "answer": 360,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2\nVertex 2: 1, 25, 8, 9\nVertex 3: 4\nVertex 4: 5, 16, 3\nVertex 5: 13, 4, 10\nVertex 6: 25, 30\nVertex 7: 9\nVertex 8: 2, 13\nVertex 9: 2, 7\nVertex 10: 5\nVertex 11: 16\nVertex 12: 24\nVertex 13: 8, 18, 5, 21\nVertex 14: 26\nVertex 15: 30\nVertex 16: 4, 11\nVertex 17: 30\nVertex 18: 13, 22\nVertex 19: 25, 23\nVertex 20: 23\nVertex 21: 13\nVertex 22: 18, 24\nVertex 23: 19, 20\nVertex 24: 22, 12\nVertex 25: 2, 19, 6, 28, 26, 27, 29\nVertex 26: 25, 14\nVertex 27: 25\nVertex 28: 25\nVertex 29: 25\nVertex 30: 6, 15, 17\n",
    "graph_output": "30 29\n1 2\n2 25\n2 8\n8 13\n2 9\n25 19\n13 18\n9 7\n13 5\n5 4\n25 6\n19 23\n25 28\n25 26\n26 14\n4 16\n4 3\n6 30\n30 15\n30 17\n5 10\n25 27\n18 22\n22 24\n24 12\n25 29\n23 20\n13 21\n16 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 23 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 14, 16, 5\nVertex 2: 16, 10, 6, 13\nVertex 3: 16, 6, 10\nVertex 4: 12, 10\nVertex 5: 9, 1\nVertex 6: 1, 11, 10, 7, 3, 2\nVertex 7: 6\nVertex 8: 14, 12\nVertex 9: 14, 5\nVertex 10: 6, 2, 4, 3\nVertex 11: 6, 12, 15\nVertex 12: 11, 4, 13, 8\nVertex 13: 12, 2\nVertex 14: 1, 9, 8\nVertex 15: 11\nVertex 16: 1, 2, 3\n",
    "graph_output": "16 23\n1 6\n1 14\n14 9\n6 11\n1 16\n11 12\n16 2\n14 8\n12 4\n6 10\n6 7\n9 5\n12 13\n11 15\n16 3\n3 6\n10 2\n12 8\n4 10\n10 3\n2 6\n2 13\n5 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 13 vertices and 69 edges\n\nEdges (Format: Node Node):\n6 8\n3 5\n6 10\n5 13\n2 11\n3 2\n5 12\n5 10\n3 9\n13 8\n11 9\n4 3\n6 7\n5 9\n3 11\n1 8\n1 2\n1 11\n5 6\n9 2\n4 6\n13 4\n2 4\n11 13\n7 5\n9 1\n1 5\n7 8\n9 6\n13 6\n9 4\n13 7\n11 12\n13 12\n8 9\n7 2\n12 1\n8 11\n9 13\n11 4\n4 10\n2 6\n8 12\n12 3\n6 3\n10 11\n8 3\n4 7\n10 2\n9 12\n4 1\n8 5\n10 8\n1 7\n13 10\n10 12\n11 6\n1 10\n8 2\n7 10\n1 13\n11 7\n4 8\n13 2\n2 12\n12 4\n13 3\n5 4\n6 12\n",
    "graph_output": "13 69\n6 8\n3 5\n6 10\n5 13\n2 11\n3 2\n5 12\n5 10\n3 9\n13 8\n11 9\n4 3\n6 7\n5 9\n3 11\n1 8\n1 2\n1 11\n5 6\n9 2\n4 6\n13 4\n2 4\n11 13\n7 5\n9 1\n1 5\n7 8\n9 6\n13 6\n9 4\n13 7\n11 12\n13 12\n8 9\n7 2\n12 1\n8 11\n9 13\n11 4\n4 10\n2 6\n8 12\n12 3\n6 3\n10 11\n8 3\n4 7\n10 2\n9 12\n4 1\n8 5\n10 8\n1 7\n13 10\n10 12\n11 6\n1 10\n8 2\n7 10\n1 13\n11 7\n4 8\n13 2\n2 12\n12 4\n13 3\n5 4\n6 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 40 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0  59   0  87  44  12  36  89  67   0   0 \n 2 | 59   0  35  13  90  76   0   0  46  95  29 \n 3 |  0  35   0  41   0  93  78  76   6  73   0 \n 4 | 87  13  41   0  64   0  88   8   0  88  81 \n 5 | 44  90   0  64   0 100  55   0  74  23  71 \n 6 | 12  76  93   0 100   0   0   0   0  97  44 \n 7 | 36   0  78  88  55   0   0   0  74  86  92 \n 8 | 89   0  76   8   0   0   0   0   0  64   7 \n 9 | 67  46   6   0  74   0  74   0   0  45  33 \n10 |  0  95  73  88  23  97  86  64  45   0  41 \n11 |  0  29   0  81  71  44  92   7  33  41   0 \n",
    "graph_output": "11 40\n1 4 87\n1 9 67\n1 5 44\n1 8 89\n9 11 33\n5 10 23\n11 2 29\n11 6 44\n4 7 88\n8 3 76\n10 11 41\n7 1 36\n6 2 76\n5 7 55\n2 10 95\n4 5 64\n2 9 46\n10 9 45\n1 2 59\n11 7 92\n10 3 73\n8 4 8\n10 7 86\n11 4 81\n9 7 74\n5 9 74\n8 10 64\n11 5 71\n5 6 100\n9 3 6\n3 7 78\n2 4 13\n6 3 93\n3 4 41\n10 4 88\n6 10 97\n5 2 90\n3 2 35\n8 11 7\n6 1 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 225,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 6 vertices and 11 edges\n\nEdges (Format: Node Node):\n1 4\n4 2\n4 3\n4 6\n4 5\n2 6\n5 2\n1 6\n3 5\n1 3\n1 2\n",
    "graph_output": "6 11\n1 4\n4 2\n4 3\n4 6\n4 5\n2 6\n5 2\n1 6\n3 5\n1 3\n1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 209,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nUndirected Graph with 31 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 19\n1 25\n25 28\n25 27\n19 23\n23 17\n28 14\n1 16\n16 8\n27 7\n7 2\n25 26\n16 15\n7 29\n27 5\n2 4\n23 12\n8 21\n21 30\n12 13\n19 24\n19 22\n25 11\n16 3\n19 20\n29 6\n28 31\n13 10\n16 9\n19 18\n",
    "graph_output": "31 30\n1 19\n1 25\n25 28\n25 27\n19 23\n23 17\n28 14\n1 16\n16 8\n27 7\n7 2\n25 26\n16 15\n7 29\n27 5\n2 4\n23 12\n8 21\n21 30\n12 13\n19 24\n19 22\n25 11\n16 3\n19 20\n29 6\n28 31\n13 10\n16 9\n19 18\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 49 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   1   1   1   1   1   1   1   1 \n 2 |  0   0   1   1   1   1   1   1   1   1   1 \n 3 |  0   1   0   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   0   1   1   1   1 \n 7 |  1   1   1   1   1   0   0   0   1   1   1 \n 8 |  1   1   1   1   1   1   0   0   1   0   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1 \n10 |  1   1   1   1   1   1   1   0   1   0   0 \n11 |  1   1   1   1   1   1   1   1   1   0   0 \n",
    "graph_output": "11 49\n10 9\n6 10\n9 3\n3 6\n9 7\n8 4\n4 5\n11 7\n5 6\n10 7\n9 11\n2 11\n7 2\n8 2\n2 10\n4 10\n11 8\n6 1\n6 4\n7 4\n9 1\n7 3\n3 8\n11 1\n2 3\n9 4\n2 5\n9 2\n1 4\n2 4\n5 1\n10 5\n5 7\n4 3\n11 5\n5 8\n5 9\n3 5\n6 9\n3 11\n9 8\n6 8\n7 1\n10 1\n3 10\n6 2\n11 6\n11 4\n8 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 29 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 29.\nThere is an edge between vertex 1 and vertex 24.\nThere is an edge between vertex 29 and vertex 8.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 24 and vertex 17.\nThere is an edge between vertex 29 and vertex 15.\nThere is an edge between vertex 8 and vertex 18.\nThere is an edge between vertex 29 and vertex 6.\nThere is an edge between vertex 1 and vertex 21.\nThere is an edge between vertex 24 and vertex 7.\nThere is an edge between vertex 10 and vertex 23.\nThere is an edge between vertex 8 and vertex 28.\nThere is an edge between vertex 8 and vertex 27.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 24 and vertex 16.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 12 and vertex 26.\nThere is an edge between vertex 15 and vertex 20.\nThere is an edge between vertex 27 and vertex 4.\nThere is an edge between vertex 21 and vertex 5.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 28 and vertex 9.\nThere is an edge between vertex 28 and vertex 11.\nThere is an edge between vertex 9 and vertex 22.\nThere is an edge between vertex 5 and vertex 25.\nThere is an edge between vertex 17 and vertex 14.\nThere is an edge between vertex 21 and vertex 19.\n",
    "graph_output": "29 28\n1 29\n1 24\n29 8\n1 10\n24 17\n29 15\n8 18\n29 6\n1 21\n24 7\n10 23\n8 28\n8 27\n8 3\n24 16\n6 13\n7 12\n12 26\n15 20\n27 4\n21 5\n17 2\n28 9\n28 11\n9 22\n5 25\n17 14\n21 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 16 vertices and 20 edges\n\nEdges (Format: Node Node):\n1 11\n1 16\n16 7\n16 5\n16 2\n7 13\n13 3\n3 6\n7 8\n6 15\n2 12\n15 4\n3 9\n8 10\n7 14\n5 9\n2 11\n6 12\n3 14\n16 13\n",
    "graph_output": "16 20\n1 11\n1 16\n16 7\n16 5\n16 2\n7 13\n13 3\n3 6\n7 8\n6 15\n2 12\n15 4\n3 9\n8 10\n7 14\n5 9\n2 11\n6 12\n3 14\n16 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 15 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 12\n1 14\n1 13\n1 10\n14 3\n3 9\n14 15\n9 7\n15 6\n7 8\n9 5\n14 11\n9 2\n8 4\n11 6\n12 7\n6 4\n9 13\n3 15\n15 9\n5 7\n9 6\n4 1\n10 12\n14 5\n8 12\n15 2\n11 4\n6 1\n11 13\n",
    "graph_output": "15 30\n1 12\n1 14\n1 13\n1 10\n14 3\n3 9\n14 15\n9 7\n15 6\n7 8\n9 5\n14 11\n9 2\n8 4\n11 6\n12 7\n6 4\n9 13\n3 15\n15 9\n5 7\n9 6\n4 1\n10 12\n14 5\n8 12\n15 2\n11 4\n6 1\n11 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 23 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 11 and vertex 3.\n",
    "graph_output": "15 23\n14 12\n9 1\n5 11\n11 10\n11 12\n8 9\n2 3\n3 7\n1 10\n13 5\n11 14\n6 7\n14 7\n2 4\n3 12\n10 4\n14 3\n4 7\n3 9\n11 6\n14 6\n12 4\n11 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 112 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13 with a weight of 54.\nThere is an edge between vertex 13 and vertex 15 with a weight of 91.\nThere is an edge between vertex 15 and vertex 10 with a weight of 6.\nThere is an edge between vertex 1 and vertex 16 with a weight of 56.\nThere is an edge between vertex 10 and vertex 4 with a weight of 15.\nThere is an edge between vertex 10 and vertex 7 with a weight of 11.\nThere is an edge between vertex 10 and vertex 2 with a weight of 53.\nThere is an edge between vertex 4 and vertex 9 with a weight of 14.\nThere is an edge between vertex 1 and vertex 12 with a weight of 22.\nThere is an edge between vertex 7 and vertex 5 with a weight of 22.\nThere is an edge between vertex 10 and vertex 6 with a weight of 1.\nThere is an edge between vertex 16 and vertex 8 with a weight of 15.\nThere is an edge between vertex 4 and vertex 3 with a weight of 22.\nThere is an edge between vertex 10 and vertex 11 with a weight of 77.\nThere is an edge between vertex 4 and vertex 14 with a weight of 35.\nThere is an edge between vertex 1 and vertex 11 with a weight of 52.\nThere is an edge between vertex 5 and vertex 8 with a weight of 41.\nThere is an edge between vertex 3 and vertex 6 with a weight of 14.\nThere is an edge between vertex 9 and vertex 16 with a weight of 56.\nThere is an edge between vertex 2 and vertex 1 with a weight of 61.\nThere is an edge between vertex 7 and vertex 2 with a weight of 40.\nThere is an edge between vertex 11 and vertex 6 with a weight of 66.\nThere is an edge between vertex 6 and vertex 14 with a weight of 40.\nThere is an edge between vertex 11 and vertex 15 with a weight of 80.\nThere is an edge between vertex 1 and vertex 5 with a weight of 10.\nThere is an edge between vertex 7 and vertex 3 with a weight of 10.\nThere is an edge between vertex 5 and vertex 3 with a weight of 53.\nThere is an edge between vertex 3 and vertex 15 with a weight of 90.\nThere is an edge between vertex 11 and vertex 12 with a weight of 8.\nThere is an edge between vertex 9 and vertex 2 with a weight of 79.\nThere is an edge between vertex 10 and vertex 13 with a weight of 58.\nThere is an edge between vertex 16 and vertex 11 with a weight of 64.\nThere is an edge between vertex 3 and vertex 2 with a weight of 29.\nThere is an edge between vertex 15 and vertex 16 with a weight of 76.\nThere is an edge between vertex 3 and vertex 11 with a weight of 57.\nThere is an edge between vertex 16 and vertex 13 with a weight of 40.\nThere is an edge between vertex 13 and vertex 9 with a weight of 9.\nThere is an edge between vertex 5 and vertex 11 with a weight of 58.\nThere is an edge between vertex 1 and vertex 8 with a weight of 90.\nThere is an edge between vertex 2 and vertex 16 with a weight of 76.\nThere is an edge between vertex 11 and vertex 9 with a weight of 66.\nThere is an edge between vertex 2 and vertex 12 with a weight of 40.\nThere is an edge between vertex 7 and vertex 6 with a weight of 66.\nThere is an edge between vertex 13 and vertex 12 with a weight of 19.\nThere is an edge between vertex 6 and vertex 4 with a weight of 99.\nThere is an edge between vertex 6 and vertex 2 with a weight of 62.\nThere is an edge between vertex 10 and vertex 1 with a weight of 6.\nThere is an edge between vertex 2 and vertex 13 with a weight of 67.\nThere is an edge between vertex 4 and vertex 2 with a weight of 92.\nThere is an edge between vertex 11 and vertex 13 with a weight of 27.\nThere is an edge between vertex 16 and vertex 14 with a weight of 23.\nThere is an edge between vertex 8 and vertex 12 with a weight of 15.\nThere is an edge between vertex 4 and vertex 1 with a weight of 80.\nThere is an edge between vertex 6 and vertex 8 with a weight of 34.\nThere is an edge between vertex 3 and vertex 10 with a weight of 88.\nThere is an edge between vertex 4 and vertex 11 with a weight of 10.\nThere is an edge between vertex 6 and vertex 15 with a weight of 9.\nThere is an edge between vertex 15 and vertex 12 with a weight of 90.\nThere is an edge between vertex 16 and vertex 7 with a weight of 2.\nThere is an edge between vertex 15 and vertex 1 with a weight of 26.\nThere is an edge between vertex 12 and vertex 6 with a weight of 21.\nThere is an edge between vertex 7 and vertex 15 with a weight of 16.\nThere is an edge between vertex 3 and vertex 12 with a weight of 64.\nThere is an edge between vertex 2 and vertex 8 with a weight of 46.\nThere is an edge between vertex 2 and vertex 5 with a weight of 24.\nThere is an edge between vertex 11 and vertex 8 with a weight of 36.\nThere is an edge between vertex 16 and vertex 3 with a weight of 10.\nThere is an edge between vertex 3 and vertex 8 with a weight of 38.\nThere is an edge between vertex 14 and vertex 2 with a weight of 22.\nThere is an edge between vertex 13 and vertex 4 with a weight of 65.\nThere is an edge between vertex 3 and vertex 13 with a weight of 80.\nThere is an edge between vertex 13 and vertex 14 with a weight of 31.\nThere is an edge between vertex 9 and vertex 15 with a weight of 80.\nThere is an edge between vertex 5 and vertex 14 with a weight of 8.\nThere is an edge between vertex 7 and vertex 11 with a weight of 67.\nThere is an edge between vertex 8 and vertex 15 with a weight of 93.\nThere is an edge between vertex 6 and vertex 13 with a weight of 51.\nThere is an edge between vertex 13 and vertex 5 with a weight of 41.\nThere is an edge between vertex 16 and vertex 6 with a weight of 23.\nThere is an edge between vertex 7 and vertex 1 with a weight of 67.\nThere is an edge between vertex 4 and vertex 8 with a weight of 54.\nThere is an edge between vertex 9 and vertex 14 with a weight of 71.\nThere is an edge between vertex 5 and vertex 4 with a weight of 71.\nThere is an edge between vertex 3 and vertex 9 with a weight of 20.\nThere is an edge between vertex 7 and vertex 14 with a weight of 58.\nThere is an edge between vertex 12 and vertex 4 with a weight of 29.\nThere is an edge between vertex 9 and vertex 8 with a weight of 6.\nThere is an edge between vertex 7 and vertex 8 with a weight of 14.\nThere is an edge between vertex 12 and vertex 5 with a weight of 17.\nThere is an edge between vertex 9 and vertex 12 with a weight of 23.\nThere is an edge between vertex 8 and vertex 13 with a weight of 34.\nThere is an edge between vertex 1 and vertex 14 with a weight of 36.\nThere is an edge between vertex 9 and vertex 5 with a weight of 90.\nThere is an edge between vertex 10 and vertex 8 with a weight of 16.\nThere is an edge between vertex 16 and vertex 4 with a weight of 31.\nThere is an edge between vertex 7 and vertex 9 with a weight of 23.\nThere is an edge between vertex 15 and vertex 5 with a weight of 19.\nThere is an edge between vertex 10 and vertex 5 with a weight of 94.\nThere is an edge between vertex 6 and vertex 9 with a weight of 47.\nThere is an edge between vertex 12 and vertex 14 with a weight of 74.\nThere is an edge between vertex 15 and vertex 2 with a weight of 39.\nThere is an edge between vertex 5 and vertex 16 with a weight of 50.\nThere is an edge between vertex 10 and vertex 9 with a weight of 52.\nThere is an edge between vertex 7 and vertex 13 with a weight of 42.\nThere is an edge between vertex 9 and vertex 1 with a weight of 13.\nThere is an edge between vertex 12 and vertex 16 with a weight of 26.\nThere is an edge between vertex 10 and vertex 12 with a weight of 2.\nThere is an edge between vertex 6 and vertex 1 with a weight of 75.\nThere is an edge between vertex 7 and vertex 12 with a weight of 82.\nThere is an edge between vertex 5 and vertex 6 with a weight of 37.\nThere is an edge between vertex 1 and vertex 3 with a weight of 92.\nThere is an edge between vertex 2 and vertex 11 with a weight of 48.\n",
    "graph_output": "16 112\n1 13 54\n13 15 91\n15 10 6\n1 16 56\n10 4 15\n10 7 11\n10 2 53\n4 9 14\n1 12 22\n7 5 22\n10 6 1\n16 8 15\n4 3 22\n10 11 77\n4 14 35\n1 11 52\n5 8 41\n3 6 14\n9 16 56\n2 1 61\n7 2 40\n11 6 66\n6 14 40\n11 15 80\n1 5 10\n7 3 10\n5 3 53\n3 15 90\n11 12 8\n9 2 79\n10 13 58\n16 11 64\n3 2 29\n15 16 76\n3 11 57\n16 13 40\n13 9 9\n5 11 58\n1 8 90\n2 16 76\n11 9 66\n2 12 40\n7 6 66\n13 12 19\n6 4 99\n6 2 62\n10 1 6\n2 13 67\n4 2 92\n11 13 27\n16 14 23\n8 12 15\n4 1 80\n6 8 34\n3 10 88\n4 11 10\n6 15 9\n15 12 90\n16 7 2\n15 1 26\n12 6 21\n7 15 16\n3 12 64\n2 8 46\n2 5 24\n11 8 36\n16 3 10\n3 8 38\n14 2 22\n13 4 65\n3 13 80\n13 14 31\n9 15 80\n5 14 8\n7 11 67\n8 15 93\n6 13 51\n13 5 41\n16 6 23\n7 1 67\n4 8 54\n9 14 71\n5 4 71\n3 9 20\n7 14 58\n12 4 29\n9 8 6\n7 8 14\n12 5 17\n9 12 23\n8 13 34\n1 14 36\n9 5 90\n10 8 16\n16 4 31\n7 9 23\n15 5 19\n10 5 94\n6 9 47\n12 14 74\n15 2 39\n5 16 50\n10 9 52\n7 13 42\n9 1 13\n12 16 26\n10 12 2\n6 1 75\n7 12 82\n5 6 37\n1 3 92\n2 11 48\n",
    "vertices": [
      null,
      null
    ],
    "answer": 124,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 1 to vertex 8 in the weighted graph.\n\nUndirected, Weighted Graph with 15 vertices and 100 edges\n\nEdges (Format: Node Node Weight):\n1 14 90\n14 10 47\n1 11 57\n14 2 61\n11 15 59\n10 12 4\n12 4 75\n4 6 36\n6 9 34\n15 8 98\n11 13 17\n6 5 35\n11 3 3\n10 7 35\n14 6 27\n7 12 17\n13 1 100\n5 15 81\n14 3 75\n9 3 15\n6 1 50\n11 7 55\n15 7 35\n14 12 66\n4 5 1\n13 6 99\n13 2 52\n4 3 74\n1 7 20\n14 4 31\n2 9 10\n4 1 18\n2 4 70\n5 14 99\n15 6 76\n7 14 48\n10 5 56\n9 4 47\n5 8 61\n12 6 85\n10 3 11\n1 15 93\n10 15 57\n15 3 13\n11 6 48\n14 11 13\n5 13 23\n12 2 33\n8 4 79\n7 9 48\n3 2 32\n4 11 29\n12 3 30\n9 12 93\n9 8 36\n3 13 2\n3 6 85\n11 2 25\n13 8 19\n15 12 50\n1 8 12\n9 1 30\n7 4 81\n1 12 48\n2 6 87\n13 12 53\n11 5 32\n2 15 32\n7 8 43\n10 2 88\n13 4 11\n10 13 3\n11 10 51\n2 1 94\n2 7 87\n7 13 94\n8 10 58\n3 1 98\n8 12 3\n10 4 71\n7 3 38\n7 6 77\n9 11 44\n5 1 18\n11 12 7\n9 10 58\n5 9 90\n7 5 50\n13 15 36\n15 14 68\n5 3 42\n10 6 52\n9 14 54\n13 9 80\n12 5 7\n15 4 39\n2 8 72\n14 8 82\n5 2 24\n11 8 88\n",
    "graph_output": "15 100\n1 14 90\n14 10 47\n1 11 57\n14 2 61\n11 15 59\n10 12 4\n12 4 75\n4 6 36\n6 9 34\n15 8 98\n11 13 17\n6 5 35\n11 3 3\n10 7 35\n14 6 27\n7 12 17\n13 1 100\n5 15 81\n14 3 75\n9 3 15\n6 1 50\n11 7 55\n15 7 35\n14 12 66\n4 5 1\n13 6 99\n13 2 52\n4 3 74\n1 7 20\n14 4 31\n2 9 10\n4 1 18\n2 4 70\n5 14 99\n15 6 76\n7 14 48\n10 5 56\n9 4 47\n5 8 61\n12 6 85\n10 3 11\n1 15 93\n10 15 57\n15 3 13\n11 6 48\n14 11 13\n5 13 23\n12 2 33\n8 4 79\n7 9 48\n3 2 32\n4 11 29\n12 3 30\n9 12 93\n9 8 36\n3 13 2\n3 6 85\n11 2 25\n13 8 19\n15 12 50\n1 8 12\n9 1 30\n7 4 81\n1 12 48\n2 6 87\n13 12 53\n11 5 32\n2 15 32\n7 8 43\n10 2 88\n13 4 11\n10 13 3\n11 10 51\n2 1 94\n2 7 87\n7 13 94\n8 10 58\n3 1 98\n8 12 3\n10 4 71\n7 3 38\n7 6 77\n9 11 44\n5 1 18\n11 12 7\n9 10 58\n5 9 90\n7 5 50\n13 15 36\n15 14 68\n5 3 42\n10 6 52\n9 14 54\n13 9 80\n12 5 7\n15 4 39\n2 8 72\n14 8 82\n5 2 24\n11 8 88\n",
    "vertices": [
      1,
      8
    ],
    "answer": 12,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 6 vertices and 11 edges\n\nEdges (Format: Node Node):\n3 5\n1 4\n4 6\n5 4\n2 5\n6 2\n1 2\n2 4\n6 5\n4 3\n3 1\n",
    "graph_output": "6 11\n3 5\n1 4\n4 6\n5 4\n2 5\n6 2\n1 2\n2 4\n6 5\n4 3\n3 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 35,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 9 (source) to vertex 6 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 12 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 4 (weight=34, capacity=3), 8 (weight=31, capacity=1), 6 (weight=33, capacity=9)\nVertex 2: 4 (weight=34, capacity=7)\nVertex 3: 4 (weight=87, capacity=2)\nVertex 4: 1 (weight=34, capacity=3), 2 (weight=34, capacity=7), 3 (weight=87, capacity=2), 7 (weight=48, capacity=8), 9 (weight=24, capacity=3)\nVertex 5: 10 (weight=15, capacity=8)\nVertex 6: 1 (weight=33, capacity=9), 9 (weight=90, capacity=6)\nVertex 7: 8 (weight=23, capacity=2), 4 (weight=48, capacity=8), 9 (weight=29, capacity=1)\nVertex 8: 1 (weight=31, capacity=1), 10 (weight=25, capacity=6), 7 (weight=23, capacity=2)\nVertex 9: 6 (weight=90, capacity=6), 4 (weight=24, capacity=3), 7 (weight=29, capacity=1)\nVertex 10: 8 (weight=25, capacity=6), 5 (weight=15, capacity=8)\n",
    "graph_output": "10 12\n1 4 34 3\n1 8 31 1\n1 6 33 9\n6 9 90 6\n4 2 34 7\n8 10 25 6\n10 5 15 8\n8 7 23 2\n4 3 87 2\n7 4 48 8\n4 9 24 3\n9 7 29 1\n",
    "vertices": [
      9,
      6
    ],
    "answer": 929,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 17 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 6, 3, 7, 15\nVertex 2: 11, 15\nVertex 3: 7, 6, 1\nVertex 4: 10, 16, 8\nVertex 5: 10, 14, 13\nVertex 6: 1, 9, 3\nVertex 7: 11, 3, 15, 1\nVertex 8: 11, 13, 15, 14, 4\nVertex 9: 17, 6, 15\nVertex 10: 1, 11, 5, 17, 4\nVertex 11: 10, 8, 7, 2\nVertex 12: 15, 16\nVertex 13: 8, 5\nVertex 14: 5, 8\nVertex 15: 8, 12, 2, 9, 7, 1\nVertex 16: 4, 12\nVertex 17: 10, 9\n",
    "graph_output": "17 28\n1 10\n10 11\n10 5\n10 17\n11 8\n10 4\n8 13\n8 15\n15 12\n11 7\n4 16\n17 9\n7 3\n1 6\n11 2\n5 14\n16 12\n9 6\n2 15\n6 3\n8 14\n8 4\n9 15\n13 5\n15 7\n1 3\n7 1\n15 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 100 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n 2 |  1   0   1   1   0   1   1   1   0   0   1   1   1   1   1   0 \n 3 |  1   1   0   1   1   1   1   1   0   1   1   1   1   0   0   1 \n 4 |  1   1   1   0   1   1   0   1   0   1   0   1   0   1   1   1 \n 5 |  1   0   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   0   1   1   1   1 \n 7 |  1   1   1   0   1   1   0   1   1   1   0   1   1   0   0   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   0 \n 9 |  1   0   0   0   1   1   1   1   0   1   1   1   1   1   1   1 \n10 |  1   0   1   1   1   1   1   1   1   0   1   1   0   0   1   1 \n11 |  1   1   1   0   1   1   0   1   1   1   0   1   1   1   1   1 \n12 |  1   1   1   1   1   0   1   1   1   1   1   0   1   1   1   1 \n13 |  1   1   1   0   1   1   1   1   1   0   1   1   0   0   1   1 \n14 |  1   1   0   1   1   1   0   1   1   0   1   1   0   0   1   1 \n15 |  1   1   0   1   1   1   0   1   1   1   1   1   1   1   0   1 \n16 |  0   0   1   1   1   1   1   0   1   1   1   1   1   1   1   0 \n",
    "graph_output": "16 100\n1 14\n1 3\n1 13\n3 8\n14 6\n13 16\n6 5\n8 7\n1 11\n3 12\n16 4\n16 15\n4 2\n8 9\n12 10\n8 1\n9 16\n14 9\n5 16\n10 1\n15 10\n13 11\n12 14\n2 13\n11 15\n5 15\n12 15\n8 2\n10 7\n4 12\n11 2\n6 3\n5 7\n10 11\n8 13\n9 12\n9 11\n4 5\n14 11\n6 8\n1 4\n5 8\n15 1\n3 16\n11 3\n7 12\n6 1\n6 2\n1 2\n12 16\n14 8\n15 6\n3 5\n5 13\n4 10\n7 3\n1 5\n2 14\n4 15\n3 13\n14 4\n12 5\n15 14\n6 7\n9 13\n10 9\n9 7\n9 1\n6 10\n6 4\n10 16\n9 5\n2 7\n2 15\n8 11\n16 14\n2 3\n4 3\n12 1\n4 8\n12 8\n8 10\n5 10\n14 5\n12 11\n9 6\n11 16\n13 12\n10 3\n15 13\n6 11\n13 6\n13 7\n6 16\n15 9\n12 2\n7 1\n11 5\n16 7\n8 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 5 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 38 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (10\u00d710):\n\n      1   2   3   4   5   6   7   8   9  10\n   ----------------------------------------\n 1 |  0  27  45  86  90  51   1  14  40   2 \n 2 | 27   0   0  46   0  64  94  16  13   0 \n 3 | 45   0   0   0  60  66  80  90  45  98 \n 4 | 86  46   0   0  55  16  23  70  75  76 \n 5 | 90   0  60  55   0  30   5   0  22   0 \n 6 | 51  64  66  16  30   0  95  69   0  69 \n 7 |  1  94  80  23   5  95   0  22  52  28 \n 8 | 14  16  90  70   0  69  22   0  67  27 \n 9 | 40  13  45  75  22   0  52  67   0  27 \n10 |  2   0  98  76   0  69  28  27  27   0 \n\nCapacity Matrix (10\u00d710):\n\n      1   2   3   4   5   6   7   8   9  10\n   ----------------------------------------\n 1 |  0   3   2   7   8   4   7   8   6   1 \n 2 |  3   0   0   3   0   1  10   1   9   0 \n 3 |  2   0   0   0   4   7   9  10   9   1 \n 4 |  7   3   0   0   7   1   9   7  10   2 \n 5 |  8   0   4   7   0   8   2   0   9   0 \n 6 |  4   1   7   1   8   0   4   8   0   3 \n 7 |  7  10   9   9   2   4   0   6   6   1 \n 8 |  8   1  10   7   0   8   6   0   1   1 \n 9 |  6   9   9  10   9   0   6   1   0   2 \n10 |  1   0   1   2   0   3   1   1   2   0 \n",
    "graph_output": "10 38\n1 8 14 8\n8 4 70 7\n1 6 51 4\n4 10 76 2\n10 3 98 1\n3 5 60 4\n4 2 46 3\n1 9 40 6\n2 7 94 10\n2 8 16 1\n9 7 52 6\n7 3 80 9\n6 8 69 8\n8 10 27 1\n2 9 13 9\n3 9 45 9\n7 5 5 2\n10 6 69 3\n4 5 55 7\n8 9 67 1\n1 2 27 3\n6 2 64 1\n10 7 28 1\n7 4 23 9\n1 10 2 1\n4 9 75 10\n1 5 90 8\n9 10 27 2\n1 7 1 7\n6 4 16 1\n9 5 22 9\n3 8 90 10\n3 6 66 7\n1 3 45 2\n6 7 95 4\n6 5 30 8\n1 4 86 7\n8 7 22 6\n",
    "vertices": [
      4,
      5
    ],
    "answer": 4161,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 15 vertices and 99 edges\n\nEdges (Format: Node Node):\n1 4\n1 11\n1 6\n4 12\n6 13\n6 5\n6 7\n13 8\n13 2\n13 10\n1 3\n5 9\n1 15\n3 14\n15 9\n10 14\n3 15\n15 7\n2 14\n12 15\n14 9\n3 6\n12 1\n9 12\n2 5\n2 3\n5 1\n4 2\n11 4\n5 13\n6 9\n15 11\n5 14\n1 8\n3 9\n7 3\n11 9\n14 11\n11 3\n5 10\n14 15\n10 15\n7 13\n9 7\n13 11\n12 13\n1 2\n10 12\n5 3\n6 8\n10 1\n12 5\n3 8\n9 8\n14 4\n12 11\n8 12\n4 5\n4 10\n5 7\n6 10\n9 13\n2 8\n6 11\n15 5\n9 2\n10 7\n6 15\n7 14\n10 2\n14 12\n3 12\n7 4\n7 8\n5 8\n7 2\n7 1\n15 13\n8 15\n7 12\n4 15\n1 13\n10 11\n5 11\n13 14\n12 2\n2 6\n4 8\n10 8\n6 14\n11 7\n6 4\n1 14\n11 2\n15 2\n13 4\n3 13\n10 3\n6 12\n",
    "graph_output": "15 99\n1 4\n1 11\n1 6\n4 12\n6 13\n6 5\n6 7\n13 8\n13 2\n13 10\n1 3\n5 9\n1 15\n3 14\n15 9\n10 14\n3 15\n15 7\n2 14\n12 15\n14 9\n3 6\n12 1\n9 12\n2 5\n2 3\n5 1\n4 2\n11 4\n5 13\n6 9\n15 11\n5 14\n1 8\n3 9\n7 3\n11 9\n14 11\n11 3\n5 10\n14 15\n10 15\n7 13\n9 7\n13 11\n12 13\n1 2\n10 12\n5 3\n6 8\n10 1\n12 5\n3 8\n9 8\n14 4\n12 11\n8 12\n4 5\n4 10\n5 7\n6 10\n9 13\n2 8\n6 11\n15 5\n9 2\n10 7\n6 15\n7 14\n10 2\n14 12\n3 12\n7 4\n7 8\n5 8\n7 2\n7 1\n15 13\n8 15\n7 12\n4 15\n1 13\n10 11\n5 11\n13 14\n12 2\n2 6\n4 8\n10 8\n6 14\n11 7\n6 4\n1 14\n11 2\n15 2\n13 4\n3 13\n10 3\n6 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 77 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 9 and vertex 8.\n",
    "graph_output": "15 77\n1 4\n11 12\n6 1\n7 10\n5 12\n14 2\n7 3\n6 7\n10 11\n11 14\n4 14\n6 8\n6 14\n15 2\n1 3\n7 9\n8 12\n1 12\n15 7\n11 6\n8 7\n15 12\n13 11\n14 7\n5 15\n2 9\n13 8\n15 4\n2 7\n8 5\n5 3\n4 12\n1 5\n6 13\n14 1\n2 12\n6 10\n13 15\n7 4\n2 5\n5 11\n2 11\n3 6\n10 5\n1 13\n13 10\n9 13\n5 14\n10 1\n4 5\n6 5\n8 2\n15 1\n7 13\n12 13\n9 10\n9 12\n14 9\n3 15\n8 15\n3 4\n10 4\n10 15\n6 12\n11 4\n4 8\n4 6\n14 10\n4 2\n11 9\n12 10\n13 3\n15 11\n1 11\n3 12\n11 8\n9 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 3 to vertex 15 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 113 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 2 (weight=33), 15 (weight=37), 7 (weight=56), 10 (weight=97), 13 (weight=82), 9 (weight=35), 3 (weight=82), 4 (weight=83), 14 (weight=25), 12 (weight=14), 16 (weight=60), 11 (weight=8), 8 (weight=17), 5 (weight=66), 6 (weight=95)\nVertex 2: 1 (weight=33), 4 (weight=30), 14 (weight=56), 11 (weight=22), 10 (weight=47), 8 (weight=71), 6 (weight=78), 12 (weight=93), 9 (weight=26), 15 (weight=58), 7 (weight=88), 3 (weight=66), 13 (weight=27), 5 (weight=94)\nVertex 3: 13 (weight=87), 16 (weight=46), 8 (weight=15), 6 (weight=71), 12 (weight=30), 1 (weight=82), 5 (weight=17), 9 (weight=74), 14 (weight=26), 7 (weight=47), 11 (weight=17), 4 (weight=27), 15 (weight=85), 2 (weight=66), 10 (weight=24)\nVertex 4: 2 (weight=30), 9 (weight=30), 14 (weight=50), 1 (weight=83), 15 (weight=84), 13 (weight=75), 12 (weight=79), 6 (weight=48), 3 (weight=27), 8 (weight=44), 5 (weight=61), 16 (weight=66), 10 (weight=1)\nVertex 5: 15 (weight=60), 16 (weight=80), 3 (weight=17), 9 (weight=88), 10 (weight=21), 11 (weight=83), 14 (weight=29), 7 (weight=4), 13 (weight=44), 4 (weight=61), 6 (weight=61), 8 (weight=4), 1 (weight=66), 2 (weight=94), 12 (weight=95)\nVertex 6: 11 (weight=53), 8 (weight=79), 3 (weight=71), 2 (weight=78), 14 (weight=43), 4 (weight=48), 10 (weight=82), 12 (weight=5), 15 (weight=68), 5 (weight=61), 7 (weight=3), 16 (weight=36), 1 (weight=95)\nVertex 7: 1 (weight=56), 13 (weight=42), 16 (weight=83), 11 (weight=65), 3 (weight=47), 14 (weight=58), 8 (weight=36), 2 (weight=88), 15 (weight=84), 5 (weight=4), 9 (weight=29), 12 (weight=99), 6 (weight=3), 10 (weight=80)\nVertex 8: 2 (weight=71), 6 (weight=79), 3 (weight=15), 7 (weight=36), 11 (weight=13), 15 (weight=72), 4 (weight=44), 9 (weight=54), 14 (weight=39), 12 (weight=94), 5 (weight=4), 10 (weight=45), 16 (weight=28), 1 (weight=17)\nVertex 9: 4 (weight=30), 16 (weight=81), 13 (weight=5), 11 (weight=44), 1 (weight=35), 12 (weight=80), 3 (weight=74), 5 (weight=88), 2 (weight=26), 7 (weight=29), 10 (weight=10), 15 (weight=47), 8 (weight=54), 14 (weight=96)\nVertex 10: 2 (weight=47), 1 (weight=97), 11 (weight=39), 5 (weight=21), 12 (weight=39), 16 (weight=2), 9 (weight=10), 6 (weight=82), 3 (weight=24), 8 (weight=45), 13 (weight=25), 15 (weight=86), 14 (weight=47), 4 (weight=1), 7 (weight=80)\nVertex 11: 2 (weight=22), 6 (weight=53), 9 (weight=44), 15 (weight=3), 10 (weight=39), 7 (weight=65), 14 (weight=38), 3 (weight=17), 8 (weight=13), 1 (weight=8), 5 (weight=83), 16 (weight=26), 12 (weight=97), 13 (weight=9)\nVertex 12: 14 (weight=26), 3 (weight=30), 2 (weight=93), 9 (weight=80), 4 (weight=79), 1 (weight=14), 10 (weight=39), 7 (weight=99), 13 (weight=99), 16 (weight=24), 11 (weight=97), 6 (weight=5), 15 (weight=84), 8 (weight=94), 5 (weight=95)\nVertex 13: 9 (weight=5), 3 (weight=87), 7 (weight=42), 1 (weight=82), 4 (weight=75), 16 (weight=1), 15 (weight=22), 12 (weight=99), 5 (weight=44), 10 (weight=25), 2 (weight=27), 11 (weight=9)\nVertex 14: 2 (weight=56), 12 (weight=26), 4 (weight=50), 3 (weight=26), 7 (weight=58), 1 (weight=25), 11 (weight=38), 6 (weight=43), 5 (weight=29), 15 (weight=13), 8 (weight=39), 9 (weight=96), 16 (weight=24), 10 (weight=47)\nVertex 15: 1 (weight=37), 5 (weight=60), 11 (weight=3), 4 (weight=84), 2 (weight=58), 3 (weight=85), 8 (weight=72), 7 (weight=84), 14 (weight=13), 13 (weight=22), 9 (weight=47), 16 (weight=78), 12 (weight=84), 6 (weight=68), 10 (weight=86)\nVertex 16: 9 (weight=81), 3 (weight=46), 5 (weight=80), 7 (weight=83), 10 (weight=2), 13 (weight=1), 1 (weight=60), 11 (weight=26), 12 (weight=24), 15 (weight=78), 14 (weight=24), 6 (weight=36), 8 (weight=28), 4 (weight=66)\n",
    "graph_output": "16 113\n1 2 33\n2 4 30\n2 14 56\n1 15 37\n14 12 26\n2 11 22\n11 6 53\n15 5 60\n4 9 30\n9 16 81\n9 13 5\n1 7 56\n2 10 47\n13 3 87\n2 8 71\n16 3 46\n9 11 44\n1 10 97\n4 14 50\n8 6 79\n3 8 15\n3 6 71\n3 12 30\n5 16 80\n7 13 42\n1 13 82\n9 1 35\n15 11 3\n2 6 78\n10 11 39\n3 1 82\n7 16 83\n5 3 17\n2 12 93\n9 12 80\n1 4 83\n7 11 65\n9 3 74\n14 3 26\n4 15 84\n4 13 75\n3 7 47\n7 14 58\n9 5 88\n12 4 79\n14 1 25\n12 1 14\n10 5 21\n11 14 38\n10 12 39\n10 16 2\n6 14 43\n2 9 26\n4 6 48\n8 7 36\n13 16 1\n11 3 17\n4 3 27\n11 8 13\n2 15 58\n1 16 60\n1 11 8\n15 3 85\n5 11 83\n14 5 29\n2 7 88\n8 15 72\n7 15 84\n7 5 4\n9 7 29\n15 14 13\n13 15 22\n4 8 44\n7 12 99\n16 11 26\n9 10 10\n13 12 99\n12 16 24\n13 5 44\n15 9 47\n9 8 54\n3 2 66\n11 12 97\n8 14 39\n6 10 82\n16 15 78\n12 6 5\n4 5 61\n3 10 24\n12 15 84\n6 15 68\n8 12 94\n6 5 61\n8 5 4\n10 8 45\n10 13 25\n9 14 96\n2 13 27\n16 14 24\n15 10 86\n6 7 3\n14 10 47\n16 6 36\n8 16 28\n8 1 17\n13 11 9\n5 1 66\n2 5 94\n1 6 95\n12 5 95\n4 16 66\n4 10 1\n10 7 80\n",
    "vertices": [
      3,
      15
    ],
    "answer": 20,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 6 (source) to vertex 5 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 55 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a capacity of 10.\nThere is an edge between vertex 3 and vertex 9 with a capacity of 8.\nThere is an edge between vertex 9 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 11 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 5 with a capacity of 7.\nThere is an edge between vertex 3 and vertex 4 with a capacity of 4.\nThere is an edge between vertex 3 and vertex 6 with a capacity of 8.\nThere is an edge between vertex 11 and vertex 8 with a capacity of 10.\nThere is an edge between vertex 11 and vertex 4 with a capacity of 3.\nThere is an edge between vertex 10 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 9 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 9 and vertex 1 with a capacity of 4.\nThere is an edge between vertex 6 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 8 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 9 with a capacity of 10.\nThere is an edge between vertex 10 and vertex 7 with a capacity of 9.\nThere is an edge between vertex 9 and vertex 11 with a capacity of 9.\nThere is an edge between vertex 9 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 7 and vertex 4 with a capacity of 3.\nThere is an edge between vertex 6 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 9 and vertex 4 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 5 with a capacity of 4.\nThere is an edge between vertex 11 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 11 with a capacity of 3.\nThere is an edge between vertex 2 and vertex 1 with a capacity of 2.\nThere is an edge between vertex 10 and vertex 1 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 6 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 10.\nThere is an edge between vertex 5 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 4 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 2 with a capacity of 8.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 11 with a capacity of 4.\nThere is an edge between vertex 6 and vertex 10 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 9 with a capacity of 8.\nThere is an edge between vertex 6 and vertex 7 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 9 with a capacity of 7.\nThere is an edge between vertex 8 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 3 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 8 and vertex 10 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 5 and vertex 8 with a capacity of 6.\nThere is an edge between vertex 10 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 5 and vertex 1 with a capacity of 8.\nThere is an edge between vertex 3 and vertex 11 with a capacity of 3.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 7.\nThere is an edge between vertex 7 and vertex 1 with a capacity of 6.\nThere is an edge between vertex 11 and vertex 2 with a capacity of 5.\n",
    "graph_output": "11 55\n1 3 10\n3 9 8\n9 2 1\n2 7 6\n2 10 6\n7 11 1\n2 5 7\n3 4 4\n3 6 8\n11 8 10\n11 4 3\n10 4 2\n9 10 4\n9 1 4\n6 11 2\n1 4 2\n8 4 6\n7 9 10\n10 7 9\n9 11 9\n9 8 4\n7 4 3\n6 2 1\n9 4 5\n7 5 4\n11 10 10\n1 11 3\n2 1 2\n10 1 2\n3 5 9\n4 5 9\n6 4 1\n3 7 10\n5 10 10\n4 2 10\n1 8 2\n3 2 8\n5 6 2\n5 11 4\n6 10 1\n2 8 9\n5 9 8\n6 7 1\n6 9 7\n8 7 3\n3 8 2\n8 10 2\n1 6 10\n5 8 6\n10 3 8\n5 1 8\n3 11 3\n6 8 7\n7 1 6\n11 2 5\n",
    "vertices": [
      6,
      5
    ],
    "answer": 40,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 19 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 3, 13, 7\nVertex 2: 16\nVertex 3: 1, 4, 5, 14\nVertex 4: 3, 7, 11\nVertex 5: 3\nVertex 6: 10\nVertex 7: 4, 1\nVertex 8: 10, 12\nVertex 9: 1, 15\nVertex 10: 15, 12, 6, 8\nVertex 11: 4\nVertex 12: 10, 14, 8\nVertex 13: 1, 15\nVertex 14: 12, 16, 3\nVertex 15: 9, 10, 13\nVertex 16: 14, 2\n",
    "graph_output": "16 19\n1 9\n1 3\n9 15\n15 10\n10 12\n10 6\n3 4\n1 13\n12 14\n10 8\n4 7\n14 16\n4 11\n16 2\n3 5\n7 1\n12 8\n14 3\n13 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 24 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0  72  88   0   0  38   0  49   0   0   0   0   0   0   4 \n 2 | 72   0  53   0  53   0   0   0   0   0   0   0   0   0   0 \n 3 | 88  53   0   0   0   0   0   0   0   1   0  41   0   0   0 \n 4 |  0   0   0   0  87   0   0   0   0   0   0  92   0   0  99 \n 5 |  0  53   0  87   0   0   0   0   0   0   0   0  67   0   0 \n 6 | 38   0   0   0   0   0   0  75  17  84   0   0   0   0  19 \n 7 |  0   0   0   0   0   0   0   0   0   0  18   0   0   0   0 \n 8 | 49   0   0   0   0  75   0   0   0   0  82   0   0   0   0 \n 9 |  0   0   0   0   0  17   0   0   0  74   0   0   0   0   0 \n10 |  0   0   1   0   0  84   0   0  74   0   0   0  53   0   0 \n11 |  0   0   0   0   0   0  18  82   0   0   0  30   0   0   0 \n12 |  0   0  41  92   0   0   0   0   0   0  30   0   0  26  79 \n13 |  0   0   0   0  67   0   0   0   0  53   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0  26   0   0   0 \n15 |  4   0   0  99   0  19   0   0   0   0   0  79   0   0   0 \n",
    "graph_output": "15 24\n1 3 88\n1 6 38\n1 2 72\n6 15 19\n6 10 84\n1 8 49\n10 13 53\n8 11 82\n13 5 67\n6 9 17\n3 12 41\n12 14 26\n11 7 18\n5 4 87\n8 6 75\n4 12 92\n15 4 99\n12 11 30\n1 15 4\n10 3 1\n2 5 53\n9 10 74\n15 12 79\n2 3 53\n",
    "vertices": [
      null,
      null
    ],
    "answer": 523,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 20 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 16 and vertex 13.\n",
    "graph_output": "16 20\n1 11\n1 16\n16 7\n16 5\n16 2\n7 13\n13 3\n3 6\n7 8\n6 15\n2 12\n15 4\n3 9\n8 10\n7 14\n5 9\n2 11\n6 12\n3 14\n16 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 27 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 2 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0 \n 3 |  0   0   0   1   0   1   0   0   0   1   1   0   0   0   0   1 \n 4 |  0   0   1   0   0   1   0   0   0   0   0   0   1   0   1   1 \n 5 |  0   0   0   0   0   0   0   0   0   0   1   0   0   1   1   1 \n 6 |  0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   1   0   0   0   0   0   0   0   0   1   0   0   0   1   0 \n10 |  0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0 \n11 |  0   0   1   0   1   0   0   0   1   0   0   0   1   1   0   0 \n12 |  0   0   0   0   0   0   0   0   0   1   0   0   0   1   1   0 \n13 |  0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   1 \n14 |  1   0   0   0   1   0   1   0   0   0   1   1   0   0   0   1 \n15 |  0   1   0   1   1   0   1   0   1   0   0   1   0   0   0   0 \n16 |  0   0   1   1   1   0   0   0   0   0   0   0   1   1   0   0 \n",
    "graph_output": "16 27\n16 3\n9 11\n16 4\n15 4\n16 5\n14 1\n15 5\n7 14\n2 15\n4 13\n4 6\n11 3\n10 12\n16 14\n14 12\n15 9\n11 13\n6 3\n14 11\n11 5\n15 12\n9 2\n16 13\n3 4\n7 15\n3 10\n5 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 112 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   0   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   0   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   0   1   0   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   0   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   0   0   1   1 \n12 |  1   1   1   1   1   1   1   1   0   1   1   0   1   1   1   1 \n13 |  1   1   0   1   1   1   1   1   1   0   0   1   0   1   1   1 \n14 |  1   1   1   1   1   1   0   1   0   1   0   1   1   0   1   0 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n16 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   0 \n",
    "graph_output": "16 112\n1 11\n1 13\n1 6\n1 5\n5 7\n11 4\n7 10\n10 14\n6 3\n5 2\n4 16\n4 9\n2 8\n10 15\n10 12\n6 4\n9 3\n15 14\n4 8\n9 8\n10 5\n3 15\n4 10\n13 4\n11 6\n12 1\n13 16\n12 13\n2 14\n12 8\n1 8\n9 7\n2 10\n16 5\n10 11\n13 9\n4 12\n16 1\n12 5\n6 12\n16 11\n8 7\n5 4\n2 13\n3 8\n8 5\n12 3\n11 7\n9 16\n11 12\n8 16\n7 3\n6 14\n4 1\n5 9\n2 7\n7 4\n15 8\n14 4\n5 14\n4 3\n15 2\n8 11\n14 12\n15 13\n2 11\n11 9\n3 14\n3 2\n14 13\n7 12\n13 7\n2 1\n3 1\n7 6\n5 3\n16 3\n16 2\n15 1\n6 15\n1 14\n13 8\n10 1\n6 8\n6 10\n11 15\n10 9\n15 4\n7 1\n2 6\n16 10\n16 15\n10 3\n8 10\n7 15\n16 7\n2 9\n5 13\n15 12\n15 5\n6 16\n9 15\n6 9\n5 6\n16 12\n5 11\n4 2\n1 9\n14 8\n12 2\n11 3\n13 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 12 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (8\u00d78):\n\n      1   2   3   4   5   6   7   8\n   --------------------------------\n 1 |  0   0   0   1   1   0   1   0 \n 2 |  0   0   0   0   1   0   0   1 \n 3 |  0   0   0   1   0   0   1   1 \n 4 |  1   0   1   0   1   0   0   0 \n 5 |  1   1   0   1   0   0   0   1 \n 6 |  0   0   0   0   0   0   0   1 \n 7 |  1   0   1   0   0   0   0   1 \n 8 |  0   1   1   0   1   1   1   0 \n",
    "graph_output": "8 12\n1 7\n7 8\n7 3\n8 5\n8 6\n5 2\n1 4\n3 8\n3 4\n5 1\n5 4\n8 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 195,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 40 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 11, 3, 10, 2\nVertex 2: 7, 5, 6, 10, 9, 4, 3, 1\nVertex 3: 7, 9, 8, 11, 5, 10, 1, 2, 6\nVertex 4: 7, 8, 9, 11, 6, 2, 5\nVertex 5: 7, 2, 11, 3, 9, 4\nVertex 6: 10, 2, 4, 8, 3, 9\nVertex 7: 2, 5, 4, 10, 3, 9, 11\nVertex 8: 4, 3, 10, 9, 11, 6\nVertex 9: 4, 3, 7, 1, 10, 8, 2, 5, 6, 11\nVertex 10: 6, 7, 11, 2, 9, 8, 3, 1\nVertex 11: 5, 10, 7, 3, 1, 8, 4, 9\n",
    "graph_output": "11 40\n10 6\n7 2\n7 5\n4 7\n5 2\n4 8\n11 5\n10 7\n4 9\n3 7\n10 11\n3 9\n2 6\n7 9\n10 2\n1 9\n10 9\n7 11\n3 8\n11 3\n10 8\n11 1\n8 9\n2 9\n5 3\n11 8\n9 5\n3 10\n3 1\n11 4\n4 6\n2 4\n8 6\n4 5\n2 3\n6 3\n1 10\n9 6\n2 1\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 5 (source) to vertex 4 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 23 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 2 (weight=41, capacity=8), 4 (weight=55, capacity=8), 3 (weight=71, capacity=9), 9 (weight=50, capacity=7), 8 (weight=7, capacity=7), 7 (weight=95, capacity=9)\nVertex 2: 1 (weight=41, capacity=8), 7 (weight=33, capacity=5), 8 (weight=43, capacity=10), 6 (weight=77, capacity=1), 9 (weight=3, capacity=7)\nVertex 3: 1 (weight=71, capacity=9), 6 (weight=83, capacity=6), 8 (weight=47, capacity=9), 5 (weight=41, capacity=8)\nVertex 4: 1 (weight=55, capacity=8), 9 (weight=88, capacity=2), 7 (weight=65, capacity=8)\nVertex 5: 8 (weight=98, capacity=1), 9 (weight=34, capacity=4), 3 (weight=41, capacity=8), 7 (weight=90, capacity=7)\nVertex 6: 3 (weight=83, capacity=6), 9 (weight=17, capacity=5), 2 (weight=77, capacity=1), 8 (weight=27, capacity=6)\nVertex 7: 8 (weight=12, capacity=6), 2 (weight=33, capacity=5), 4 (weight=65, capacity=8), 9 (weight=7, capacity=2), 5 (weight=90, capacity=7), 1 (weight=95, capacity=9)\nVertex 8: 3 (weight=47, capacity=9), 5 (weight=98, capacity=1), 7 (weight=12, capacity=6), 9 (weight=86, capacity=3), 2 (weight=43, capacity=10), 1 (weight=7, capacity=7), 6 (weight=27, capacity=6)\nVertex 9: 6 (weight=17, capacity=5), 8 (weight=86, capacity=3), 4 (weight=88, capacity=2), 5 (weight=34, capacity=4), 1 (weight=50, capacity=7), 7 (weight=7, capacity=2), 2 (weight=3, capacity=7)\n",
    "graph_output": "9 23\n1 2 41 8\n1 4 55 8\n1 3 71 9\n3 6 83 6\n3 8 47 9\n8 5 98 1\n6 9 17 5\n8 7 12 6\n7 2 33 5\n8 9 86 3\n8 2 43 10\n9 4 88 2\n7 4 65 8\n5 9 34 4\n1 9 50 7\n9 7 7 2\n5 3 41 8\n6 2 77 1\n7 5 90 7\n9 2 3 7\n1 8 7 7\n7 1 95 9\n8 6 27 6\n",
    "vertices": [
      5,
      4
    ],
    "answer": 2603,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 6 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 3\nVertex 2: 4\nVertex 3: 4, 5, 1\nVertex 4: 3, 6, 2\nVertex 5: 3, 1\nVertex 6: 4\n",
    "graph_output": "6 6\n4 3\n5 3\n4 6\n5 1\n3 1\n4 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 99 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   0   1   1   0   1   1   1   1   0   0 \n 2 |  1   0   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   0   0   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   0   1   0   1   1   1   1   1   1   1   1 \n 5 |  1   1   0   1   0   0   1   1   1   1   1   1   1   0   1   0 \n 6 |  1   1   0   0   0   0   1   1   1   1   1   1   1   1   0   1 \n 7 |  0   0   1   1   1   1   0   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   0   1   1   0   0   1   1   1   1   1   1   1   0 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   0   1 \n10 |  0   1   1   1   1   1   1   1   1   0   1   1   1   1   0   0 \n11 |  1   1   1   1   1   1   1   1   1   1   0   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   0   0   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n14 |  1   1   1   1   0   1   1   1   1   1   1   1   1   0   0   1 \n15 |  0   1   1   1   1   0   1   1   0   0   1   1   1   0   0   0 \n16 |  0   1   1   1   0   1   1   0   1   0   1   1   1   1   0   0 \n",
    "graph_output": "16 99\n3 1\n6 16\n11 3\n11 7\n9 8\n8 5\n14 11\n11 15\n9 12\n2 13\n1 5\n6 9\n4 5\n16 13\n13 3\n14 9\n9 2\n5 11\n7 9\n14 4\n1 12\n11 1\n15 4\n9 11\n13 5\n7 10\n11 10\n11 13\n9 5\n12 16\n12 7\n2 3\n13 15\n2 5\n7 6\n11 6\n2 15\n7 14\n5 12\n8 10\n6 1\n16 11\n2 14\n16 4\n14 1\n9 3\n4 7\n15 8\n10 12\n10 13\n8 6\n4 3\n8 2\n14 10\n14 13\n9 16\n4 9\n4 10\n15 7\n4 1\n6 14\n16 3\n14 8\n5 15\n16 2\n11 8\n3 12\n2 4\n7 5\n1 2\n7 16\n9 13\n12 2\n15 12\n6 10\n10 5\n13 8\n9 10\n15 3\n13 1\n3 10\n6 13\n13 12\n10 2\n16 14\n9 1\n14 12\n1 8\n14 3\n7 13\n12 6\n3 8\n13 4\n4 12\n8 12\n11 2\n6 2\n4 11\n7 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 18 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   0   0   4  72  59   0   0  55   0   0 \n 2 |  0   0   0   0   0  57   4   0   0  22   0   0 \n 3 |  0   0   0   0  78   0   0  93   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0  85   0   0  43 \n 5 |  4   0  78   0   0   0  32   0   0   0  55   0 \n 6 | 72  57   0   0   0   0   0   0   0  87   0  16 \n 7 | 59   4   0   0  32   0   0  18  89   0   0   0 \n 8 |  0   0  93   0   0   0  18   0   0   0   0  27 \n 9 |  0   0   0  85   0   0  89   0   0   0   0   0 \n10 | 55  22   0   0   0  87   0   0   0   0   0   0 \n11 |  0   0   0   0  55   0   0   0   0   0   0   0 \n12 |  0   0   0  43   0  16   0  27   0   0   0   0 \n",
    "graph_output": "12 18\n1 5 4\n1 7 59\n7 8 18\n1 10 55\n5 3 78\n7 9 89\n5 11 55\n10 6 87\n9 4 85\n7 2 4\n8 12 27\n6 2 57\n12 4 43\n6 12 16\n8 3 93\n6 1 72\n5 7 32\n10 2 22\n",
    "vertices": [
      null,
      null
    ],
    "answer": 388,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 4 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 21 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 9 (capacity=9), 3 (capacity=5), 7 (capacity=1), 11 (capacity=2), 12 (capacity=5)\nVertex 2: 9 (capacity=10), 12 (capacity=7), 5 (capacity=10), 4 (capacity=2), 6 (capacity=1)\nVertex 3: 1 (capacity=5), 8 (capacity=6), 6 (capacity=1), 5 (capacity=5)\nVertex 4: 9 (capacity=5), 2 (capacity=2), 13 (capacity=7)\nVertex 5: 2 (capacity=10), 3 (capacity=5)\nVertex 6: 9 (capacity=10), 12 (capacity=8), 8 (capacity=4), 3 (capacity=1), 2 (capacity=1)\nVertex 7: 1 (capacity=1)\nVertex 8: 3 (capacity=6), 13 (capacity=2), 6 (capacity=4), 10 (capacity=1)\nVertex 9: 1 (capacity=9), 4 (capacity=5), 2 (capacity=10), 6 (capacity=10)\nVertex 10: 11 (capacity=6), 8 (capacity=1)\nVertex 11: 1 (capacity=2), 10 (capacity=6)\nVertex 12: 2 (capacity=7), 6 (capacity=8), 1 (capacity=5)\nVertex 13: 8 (capacity=2), 4 (capacity=7)\n",
    "graph_output": "13 21\n1 9 9\n9 4 5\n1 3 5\n1 7 1\n9 2 10\n9 6 10\n2 12 7\n3 8 6\n2 5 10\n1 11 2\n11 10 6\n8 13 2\n4 2 2\n12 6 8\n13 4 7\n1 12 5\n6 8 4\n3 6 1\n6 2 1\n10 8 1\n3 5 5\n",
    "vertices": [
      4,
      10
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 105 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 7, 3, 13, 11, 4, 5, 10, 6, 2, 12, 8, 16\nVertex 2: 13, 16, 10, 12, 7, 8, 1, 6, 9, 15, 3, 11, 14\nVertex 3: 9, 1, 11, 15, 4, 10, 16, 6, 7, 14, 8, 2, 12, 5, 13\nVertex 4: 8, 10, 12, 16, 6, 7, 1, 15, 3, 14, 11, 5, 13\nVertex 5: 15, 12, 1, 16, 13, 10, 7, 6, 4, 11, 14, 3\nVertex 6: 13, 4, 14, 7, 9, 1, 3, 2, 11, 16, 5, 12\nVertex 7: 1, 13, 4, 6, 8, 14, 2, 3, 12, 5, 15, 11, 10\nVertex 8: 14, 4, 11, 7, 13, 15, 2, 3, 1, 10, 12\nVertex 9: 11, 16, 3, 15, 10, 6, 2, 12, 13, 14\nVertex 10: 4, 12, 2, 9, 1, 16, 3, 5, 15, 14, 13, 8, 7, 11\nVertex 11: 8, 9, 1, 13, 3, 16, 15, 4, 6, 2, 7, 5, 12, 10\nVertex 12: 4, 10, 15, 5, 2, 1, 16, 7, 9, 6, 3, 13, 8, 14, 11\nVertex 13: 7, 6, 14, 2, 1, 11, 5, 8, 15, 10, 16, 9, 12, 4, 3\nVertex 14: 13, 8, 6, 7, 4, 10, 15, 3, 16, 5, 2, 9, 12\nVertex 15: 1, 5, 9, 16, 12, 4, 3, 8, 11, 10, 14, 2, 7, 13\nVertex 16: 9, 4, 15, 2, 5, 11, 10, 3, 12, 6, 1, 14, 13\n",
    "graph_output": "16 105\n1 15\n1 7\n7 13\n13 6\n15 5\n13 14\n13 2\n14 8\n8 4\n8 11\n4 10\n11 9\n9 16\n4 12\n9 3\n1 3\n4 16\n9 15\n13 1\n4 6\n15 16\n4 7\n11 1\n10 12\n15 12\n14 6\n16 2\n4 1\n7 6\n12 5\n1 5\n8 7\n5 16\n15 4\n2 10\n9 10\n10 1\n6 9\n1 6\n7 14\n11 13\n11 3\n13 5\n12 2\n11 16\n3 15\n13 8\n10 16\n15 8\n4 3\n4 14\n7 2\n2 8\n11 15\n10 3\n10 5\n3 16\n2 1\n3 6\n11 4\n10 15\n14 10\n7 3\n6 2\n12 1\n16 12\n14 15\n2 9\n15 2\n7 12\n14 3\n7 5\n15 7\n8 3\n1 8\n2 3\n11 6\n9 12\n15 13\n2 11\n16 6\n5 6\n1 16\n12 6\n10 13\n11 7\n3 12\n16 14\n13 16\n4 5\n13 9\n11 5\n8 10\n12 13\n14 5\n2 14\n8 12\n14 9\n12 14\n10 7\n11 12\n11 10\n13 4\n5 3\n3 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 103 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 12, 16, 13, 7, 5, 10, 4, 14, 2, 3, 11, 8, 17\nVertex 2: 15, 11, 7, 5, 14, 17, 13, 16, 10, 12, 1, 6, 8, 4\nVertex 3: 7, 6, 4, 17, 13, 14, 1, 9, 16, 5, 12, 10\nVertex 4: 17, 15, 3, 13, 1, 16, 12, 5, 10, 2, 14\nVertex 5: 2, 6, 1, 4, 17, 11, 9, 7, 3, 14, 13, 10, 12\nVertex 6: 5, 16, 13, 3, 11, 7, 2, 8, 14, 12, 15, 10\nVertex 7: 2, 9, 17, 3, 1, 11, 6, 13, 8, 5, 10\nVertex 8: 11, 9, 17, 7, 10, 13, 6, 2, 1, 12\nVertex 9: 7, 8, 13, 10, 5, 12, 3, 14, 17, 11\nVertex 10: 11, 17, 12, 1, 9, 16, 2, 8, 4, 5, 13, 6, 7, 14, 3\nVertex 11: 2, 10, 8, 13, 7, 6, 5, 1, 15, 14, 9\nVertex 12: 1, 13, 14, 10, 17, 15, 4, 2, 9, 3, 6, 5, 16, 8\nVertex 13: 12, 1, 15, 6, 9, 11, 2, 4, 7, 16, 3, 8, 5, 14, 10\nVertex 14: 12, 2, 17, 1, 3, 5, 6, 9, 13, 16, 10, 4, 11\nVertex 15: 1, 2, 13, 12, 4, 17, 6, 11\nVertex 16: 1, 6, 17, 4, 10, 2, 13, 3, 14, 12\nVertex 17: 7, 4, 14, 10, 16, 12, 2, 8, 3, 15, 5, 9, 1\n",
    "graph_output": "17 103\n1 15\n15 2\n1 12\n2 11\n12 13\n2 7\n1 16\n11 10\n12 14\n2 5\n7 9\n11 8\n7 17\n5 6\n17 4\n7 3\n13 1\n13 15\n6 16\n6 13\n14 2\n17 14\n10 17\n17 16\n8 9\n12 10\n17 12\n12 15\n1 7\n1 5\n13 9\n17 2\n1 10\n15 4\n9 10\n6 3\n4 3\n11 13\n13 2\n4 13\n11 7\n6 11\n7 6\n1 4\n4 16\n1 14\n16 10\n16 2\n17 8\n10 2\n7 13\n8 7\n4 12\n5 4\n8 10\n3 17\n12 2\n15 17\n13 16\n3 13\n1 2\n5 17\n14 3\n5 11\n2 6\n9 5\n3 1\n5 7\n12 9\n3 9\n1 11\n16 3\n10 4\n8 13\n6 8\n5 3\n12 3\n5 14\n6 14\n12 6\n5 13\n15 6\n14 9\n5 10\n13 14\n17 9\n10 13\n8 2\n6 10\n16 14\n7 10\n14 10\n12 5\n16 12\n8 1\n2 4\n11 15\n12 8\n14 4\n3 10\n14 11\n1 17\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 17 vertices and 22 edges\n\nEdges (Format: Node Node):\n12 5\n1 12\n8 3\n12 14\n5 16\n9 16\n13 8\n13 15\n16 6\n11 17\n11 1\n9 8\n6 5\n13 6\n10 2\n11 10\n5 11\n9 15\n3 15\n2 3\n4 12\n14 2\n",
    "graph_output": "17 22\n12 5\n1 12\n8 3\n12 14\n5 16\n9 16\n13 8\n13 15\n16 6\n11 17\n11 1\n9 8\n6 5\n13 6\n10 2\n11 10\n5 11\n9 15\n3 15\n2 3\n4 12\n14 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 24 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 9, 13, 2\nVertex 2: 10, 1, 13, 7\nVertex 3: 9, 10, 4\nVertex 4: 15, 3, 6, 10\nVertex 5: 1, 9, 6, 7\nVertex 6: 5, 8, 4, 7, 13\nVertex 7: 5, 2, 6\nVertex 8: 12, 6\nVertex 9: 3, 5, 1, 13\nVertex 10: 2, 3, 13, 4\nVertex 11: 14\nVertex 12: 8\nVertex 13: 1, 9, 2, 10, 6\nVertex 14: 11, 15\nVertex 15: 4, 14\n",
    "graph_output": "15 24\n5 1\n3 9\n9 5\n9 1\n15 4\n1 13\n9 13\n12 8\n2 10\n6 5\n2 1\n6 8\n10 3\n4 3\n13 2\n6 4\n11 14\n13 10\n4 10\n7 5\n2 7\n15 14\n6 7\n6 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 22 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   0   1   0   0   0   0   1   1 \n 2 |  1   0   0   0   0   1   0   0   0   0   1 \n 3 |  1   0   0   0   0   1   0   0   0   1   0 \n 4 |  0   0   0   0   0   0   1   0   1   1   1 \n 5 |  1   0   0   0   0   1   1   0   1   1   1 \n 6 |  0   1   1   0   1   0   1   0   0   0   0 \n 7 |  0   0   0   1   1   1   0   0   1   1   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   1   1   0   1   0   0   1   0 \n10 |  1   0   1   1   1   0   1   0   1   0   0 \n11 |  1   1   0   1   1   0   0   0   0   0   0 \n",
    "graph_output": "11 22\n1 2\n5 10\n10 4\n5 1\n10 7\n3 1\n6 5\n6 2\n5 7\n11 1\n6 3\n3 10\n2 11\n5 9\n9 4\n6 7\n10 9\n11 4\n7 4\n7 9\n11 5\n1 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (31\u00d731):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31\n   ----------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 3 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 5 |  0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   1   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  1   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0 \n13 |  0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0 \n18 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n20 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n24 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n30 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   1   0   1   0   0   0   1   0   0   0   0   0   0   0   0 \n31 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "31 30\n1 10\n10 7\n10 14\n14 17\n7 5\n7 13\n1 27\n17 21\n13 20\n17 30\n10 29\n30 12\n12 28\n13 11\n28 18\n28 15\n15 31\n11 25\n30 16\n5 24\n24 22\n18 9\n15 6\n7 26\n29 2\n30 23\n15 8\n30 19\n25 4\n5 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 12,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 31 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 9 and vertex 22.\nThere is an edge between vertex 1 and vertex 26.\nThere is an edge between vertex 22 and vertex 6.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 15 and vertex 29.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 26 and vertex 4.\nThere is an edge between vertex 29 and vertex 20.\nThere is an edge between vertex 9 and vertex 19.\nThere is an edge between vertex 22 and vertex 21.\nThere is an edge between vertex 19 and vertex 12.\nThere is an edge between vertex 4 and vertex 30.\nThere is an edge between vertex 30 and vertex 31.\nThere is an edge between vertex 22 and vertex 5.\nThere is an edge between vertex 1 and vertex 27.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 6 and vertex 18.\nThere is an edge between vertex 21 and vertex 28.\nThere is an edge between vertex 7 and vertex 24.\nThere is an edge between vertex 3 and vertex 25.\nThere is an edge between vertex 19 and vertex 23.\nThere is an edge between vertex 27 and vertex 11.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 26 and vertex 8.\nThere is an edge between vertex 27 and vertex 14.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 14 and vertex 10.\n",
    "graph_output": "31 30\n1 9\n9 22\n1 26\n22 6\n1 15\n15 29\n6 17\n6 7\n26 4\n29 20\n9 19\n22 21\n19 12\n4 30\n30 31\n22 5\n1 27\n4 3\n6 18\n21 28\n7 24\n3 25\n19 23\n27 11\n1 16\n26 8\n27 14\n15 13\n13 2\n14 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 104 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   0   0   0   1   1   1   1   1   1   1   0 \n 2 |  1   0   1   1   1   0   1   1   1   0   1   1   0   1   1   0 \n 3 |  1   1   0   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   0   1   1   1   1   1   1   0   1   0   1 \n 5 |  1   1   1   1   0   1   1   1   1   0   1   1   1   1   1   1 \n 6 |  0   0   1   0   1   0   1   1   1   1   1   1   1   1   1   1 \n 7 |  0   1   1   1   1   1   0   1   1   1   1   0   1   1   1   1 \n 8 |  0   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 9 |  1   1   0   1   1   1   1   1   0   1   1   1   1   1   1   1 \n10 |  1   0   1   1   0   1   1   1   1   0   1   1   1   0   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   0   1   1   1 \n12 |  1   1   1   1   1   1   0   1   1   1   1   0   1   1   1   1 \n13 |  1   0   1   0   1   1   1   1   1   1   0   1   0   1   1   1 \n14 |  1   1   1   1   1   1   1   1   1   0   1   1   1   0   1   1 \n15 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   0   1 \n16 |  0   0   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "16 104\n1 14\n14 2\n1 9\n2 8\n2 3\n9 12\n9 13\n1 4\n3 10\n2 15\n13 6\n1 5\n14 11\n12 16\n13 7\n8 9\n7 15\n1 2\n6 12\n4 10\n6 3\n2 7\n9 16\n6 15\n4 11\n11 10\n13 10\n15 10\n9 14\n5 16\n7 5\n8 4\n1 10\n12 5\n6 7\n6 9\n11 2\n6 8\n8 15\n9 5\n6 14\n15 9\n8 14\n15 3\n13 14\n16 14\n5 3\n14 5\n3 12\n9 10\n16 11\n1 15\n4 16\n15 12\n6 16\n10 16\n12 8\n3 4\n8 11\n15 11\n5 15\n1 11\n15 13\n11 7\n1 12\n3 16\n5 8\n1 3\n5 11\n14 15\n12 13\n14 4\n5 6\n16 13\n3 13\n8 16\n16 15\n2 5\n13 1\n2 4\n9 4\n12 11\n14 12\n5 13\n7 9\n6 11\n11 9\n8 13\n7 10\n8 3\n7 8\n4 5\n3 11\n7 4\n9 2\n10 8\n7 3\n12 4\n7 16\n14 3\n7 14\n12 2\n10 6\n12 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 17 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 10, 11\nVertex 2: 3, 11, 6\nVertex 3: 2, 5, 13, 4, 11\nVertex 4: 6, 13, 3, 10\nVertex 5: 3, 7\nVertex 6: 4, 13, 2\nVertex 7: 12, 5\nVertex 8: 1\nVertex 9: No connections\nVertex 10: 1, 13, 4\nVertex 11: 3, 2, 1\nVertex 12: 7\nVertex 13: 4, 3, 6, 10\n",
    "graph_output": "13 17\n6 4\n4 13\n3 2\n5 3\n1 8\n13 3\n6 13\n10 1\n3 4\n3 11\n12 7\n13 10\n10 4\n11 2\n6 2\n7 5\n1 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 26 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 10, 4, 7, 3, 9\nVertex 2: 6, 14, 8\nVertex 3: 1\nVertex 4: 1, 13, 9, 12\nVertex 5: 1, 12, 6, 11\nVertex 6: 5, 2, 13\nVertex 7: 1, 15\nVertex 8: 10, 13, 2\nVertex 9: 4, 16, 1, 14\nVertex 10: 1, 15, 8, 12\nVertex 11: 12, 16, 5\nVertex 12: 5, 11, 10, 4, 14\nVertex 13: 4, 8, 6\nVertex 14: 2, 9, 12\nVertex 15: 10, 7\nVertex 16: 11, 9\n",
    "graph_output": "16 26\n1 5\n1 10\n5 12\n10 15\n1 4\n12 11\n10 8\n11 16\n5 6\n4 13\n1 7\n6 2\n2 14\n1 3\n4 9\n10 12\n16 9\n5 11\n15 7\n9 1\n12 4\n13 8\n9 14\n13 6\n2 8\n12 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 105 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 7, 11, 4, 13, 14, 2, 10, 5, 15, 6, 3, 9, 12\nVertex 2: 15, 1, 14, 7, 4, 13, 12, 6, 10, 9, 5, 11, 3, 8\nVertex 3: 13, 8, 15, 5, 7, 6, 12, 10, 4, 2, 1, 11, 9, 14\nVertex 4: 1, 9, 2, 12, 7, 10, 15, 6, 3, 14, 11, 5, 8, 13\nVertex 5: 13, 9, 14, 3, 12, 11, 1, 2, 6, 15, 7, 8, 4, 10\nVertex 6: 7, 14, 2, 12, 10, 8, 15, 13, 4, 5, 1, 3, 9, 11\nVertex 7: 1, 6, 13, 12, 15, 11, 10, 2, 14, 4, 9, 3, 8, 5\nVertex 8: 1, 3, 14, 15, 12, 6, 13, 9, 11, 2, 7, 5, 10, 4\nVertex 9: 5, 13, 4, 11, 7, 2, 14, 8, 10, 3, 1, 15, 12, 6\nVertex 10: 13, 7, 11, 4, 1, 15, 2, 6, 9, 3, 14, 12, 8, 5\nVertex 11: 1, 7, 9, 10, 5, 14, 15, 12, 2, 8, 3, 4, 13, 6\nVertex 12: 7, 15, 14, 4, 2, 8, 5, 6, 11, 3, 13, 10, 1, 9\nVertex 13: 7, 3, 5, 10, 1, 9, 2, 8, 6, 15, 12, 11, 14, 4\nVertex 14: 5, 1, 8, 2, 12, 7, 6, 11, 9, 4, 10, 3, 13, 15\nVertex 15: 7, 2, 12, 3, 8, 10, 4, 6, 11, 1, 13, 5, 9, 14\n",
    "graph_output": "15 105\n1 8\n1 7\n7 6\n1 11\n7 13\n13 3\n13 5\n7 12\n7 15\n5 9\n5 14\n15 2\n1 4\n13 10\n8 3\n15 12\n1 13\n14 1\n3 15\n9 13\n2 1\n14 8\n2 14\n7 11\n12 14\n5 3\n4 9\n10 7\n7 2\n2 4\n11 9\n14 7\n14 6\n12 4\n7 4\n8 15\n11 10\n4 10\n2 13\n2 12\n8 12\n12 5\n2 6\n1 10\n12 6\n10 15\n7 9\n5 11\n15 4\n2 10\n10 6\n6 8\n9 2\n1 5\n13 8\n11 14\n6 15\n11 15\n6 13\n6 4\n7 3\n9 14\n15 1\n8 9\n13 15\n2 5\n10 9\n6 5\n6 1\n11 12\n2 11\n3 6\n12 3\n11 8\n3 10\n5 15\n13 12\n3 4\n3 2\n1 3\n8 2\n3 11\n9 3\n14 4\n10 14\n11 4\n12 10\n7 8\n5 7\n1 9\n14 3\n1 12\n15 9\n12 9\n5 8\n4 5\n13 11\n13 14\n8 10\n4 8\n15 14\n9 6\n6 11\n10 5\n13 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 15,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 32 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 16 with a weight of 97.\nThere is an edge between vertex 1 and vertex 13 with a weight of 4.\nThere is an edge between vertex 13 and vertex 2 with a weight of 18.\nThere is an edge between vertex 2 and vertex 6 with a weight of 31.\nThere is an edge between vertex 2 and vertex 3 with a weight of 20.\nThere is an edge between vertex 16 and vertex 11 with a weight of 62.\nThere is an edge between vertex 6 and vertex 4 with a weight of 38.\nThere is an edge between vertex 2 and vertex 15 with a weight of 48.\nThere is an edge between vertex 11 and vertex 5 with a weight of 30.\nThere is an edge between vertex 16 and vertex 14 with a weight of 18.\nThere is an edge between vertex 3 and vertex 10 with a weight of 61.\nThere is an edge between vertex 5 and vertex 8 with a weight of 44.\nThere is an edge between vertex 5 and vertex 7 with a weight of 85.\nThere is an edge between vertex 4 and vertex 9 with a weight of 28.\nThere is an edge between vertex 13 and vertex 12 with a weight of 4.\nThere is an edge between vertex 1 and vertex 7 with a weight of 29.\nThere is an edge between vertex 2 and vertex 4 with a weight of 88.\nThere is an edge between vertex 5 and vertex 6 with a weight of 65.\nThere is an edge between vertex 2 and vertex 16 with a weight of 78.\nThere is an edge between vertex 16 and vertex 10 with a weight of 23.\nThere is an edge between vertex 14 and vertex 12 with a weight of 25.\nThere is an edge between vertex 8 and vertex 2 with a weight of 99.\nThere is an edge between vertex 9 and vertex 6 with a weight of 34.\nThere is an edge between vertex 7 and vertex 2 with a weight of 57.\nThere is an edge between vertex 8 and vertex 15 with a weight of 38.\nThere is an edge between vertex 13 and vertex 10 with a weight of 51.\nThere is an edge between vertex 9 and vertex 3 with a weight of 43.\nThere is an edge between vertex 14 and vertex 4 with a weight of 75.\nThere is an edge between vertex 5 and vertex 16 with a weight of 82.\nThere is an edge between vertex 10 and vertex 11 with a weight of 75.\nThere is an edge between vertex 14 and vertex 7 with a weight of 33.\nThere is an edge between vertex 7 and vertex 3 with a weight of 94.\n",
    "graph_output": "16 32\n1 16 97\n1 13 4\n13 2 18\n2 6 31\n2 3 20\n16 11 62\n6 4 38\n2 15 48\n11 5 30\n16 14 18\n3 10 61\n5 8 44\n5 7 85\n4 9 28\n13 12 4\n1 7 29\n2 4 88\n5 6 65\n2 16 78\n16 10 23\n14 12 25\n8 2 99\n9 6 34\n7 2 57\n8 15 38\n13 10 51\n9 3 43\n14 4 75\n5 16 82\n10 11 75\n14 7 33\n7 3 94\n",
    "vertices": [
      null,
      null
    ],
    "answer": 394,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 31 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 9\n9 22\n1 26\n22 6\n1 15\n15 29\n6 17\n6 7\n26 4\n29 20\n9 19\n22 21\n19 12\n4 30\n30 31\n22 5\n1 27\n4 3\n6 18\n21 28\n7 24\n3 25\n19 23\n27 11\n1 16\n26 8\n27 14\n15 13\n13 2\n14 10\n",
    "graph_output": "31 30\n1 9\n9 22\n1 26\n22 6\n1 15\n15 29\n6 17\n6 7\n26 4\n29 20\n9 19\n22 21\n19 12\n4 30\n30 31\n22 5\n1 27\n4 3\n6 18\n21 28\n7 24\n3 25\n19 23\n27 11\n1 16\n26 8\n27 14\n15 13\n13 2\n14 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 5 (source) to vertex 9 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 8 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9 with a weight of 78 and a capacity of 8.\nThere is an edge between vertex 1 and vertex 5 with a weight of 48 and a capacity of 6.\nThere is an edge between vertex 9 and vertex 2 with a weight of 54 and a capacity of 10.\nThere is an edge between vertex 1 and vertex 3 with a weight of 45 and a capacity of 5.\nThere is an edge between vertex 5 and vertex 8 with a weight of 71 and a capacity of 1.\nThere is an edge between vertex 2 and vertex 6 with a weight of 26 and a capacity of 10.\nThere is an edge between vertex 1 and vertex 7 with a weight of 13 and a capacity of 4.\nThere is an edge between vertex 9 and vertex 4 with a weight of 86 and a capacity of 4.\n",
    "graph_output": "9 8\n1 9 78 8\n1 5 48 6\n9 2 54 10\n1 3 45 5\n5 8 71 1\n2 6 26 10\n1 7 13 4\n9 4 86 4\n",
    "vertices": [
      5,
      9
    ],
    "answer": 756,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 77 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 6, 3, 12, 5, 14, 13, 10, 15, 11\nVertex 2: 14, 15, 9, 7, 12, 5, 11, 8, 4\nVertex 3: 7, 1, 5, 6, 15, 4, 13, 12\nVertex 4: 1, 14, 15, 12, 7, 5, 3, 10, 11, 8, 6, 2\nVertex 5: 12, 15, 8, 3, 1, 2, 11, 10, 14, 4, 6\nVertex 6: 1, 7, 8, 14, 11, 13, 10, 3, 5, 12, 4\nVertex 7: 10, 3, 6, 9, 15, 8, 14, 2, 4, 13\nVertex 8: 6, 12, 7, 13, 5, 2, 15, 4, 11, 9\nVertex 9: 7, 2, 13, 10, 12, 14, 11, 8\nVertex 10: 7, 11, 6, 5, 13, 1, 9, 4, 15, 14, 12\nVertex 11: 12, 10, 14, 6, 13, 5, 2, 4, 9, 15, 1, 8\nVertex 12: 11, 5, 8, 1, 15, 4, 2, 13, 9, 6, 10, 3\nVertex 13: 11, 8, 6, 15, 1, 10, 9, 7, 12, 3\nVertex 14: 2, 11, 4, 6, 7, 1, 5, 9, 10\nVertex 15: 2, 7, 12, 5, 4, 13, 1, 3, 8, 10, 11\n",
    "graph_output": "15 77\n1 4\n11 12\n6 1\n7 10\n5 12\n14 2\n7 3\n6 7\n10 11\n11 14\n4 14\n6 8\n6 14\n15 2\n1 3\n7 9\n8 12\n1 12\n15 7\n11 6\n8 7\n15 12\n13 11\n14 7\n5 15\n2 9\n13 8\n15 4\n2 7\n8 5\n5 3\n4 12\n1 5\n6 13\n14 1\n2 12\n6 10\n13 15\n7 4\n2 5\n5 11\n2 11\n3 6\n10 5\n1 13\n13 10\n9 13\n5 14\n10 1\n4 5\n6 5\n8 2\n15 1\n7 13\n12 13\n9 10\n9 12\n14 9\n3 15\n8 15\n3 4\n10 4\n10 15\n6 12\n11 4\n4 8\n4 6\n14 10\n4 2\n11 9\n12 10\n13 3\n15 11\n1 11\n3 12\n11 8\n9 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 87 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15 with a weight of 66.\nThere is an edge between vertex 15 and vertex 13 with a weight of 4.\nThere is an edge between vertex 13 and vertex 2 with a weight of 34.\nThere is an edge between vertex 1 and vertex 11 with a weight of 42.\nThere is an edge between vertex 11 and vertex 7 with a weight of 48.\nThere is an edge between vertex 7 and vertex 3 with a weight of 15.\nThere is an edge between vertex 3 and vertex 5 with a weight of 21.\nThere is an edge between vertex 5 and vertex 6 with a weight of 41.\nThere is an edge between vertex 13 and vertex 9 with a weight of 22.\nThere is an edge between vertex 2 and vertex 12 with a weight of 74.\nThere is an edge between vertex 13 and vertex 4 with a weight of 19.\nThere is an edge between vertex 11 and vertex 14 with a weight of 42.\nThere is an edge between vertex 2 and vertex 10 with a weight of 52.\nThere is an edge between vertex 2 and vertex 8 with a weight of 36.\nThere is an edge between vertex 11 and vertex 3 with a weight of 32.\nThere is an edge between vertex 15 and vertex 10 with a weight of 53.\nThere is an edge between vertex 12 and vertex 7 with a weight of 71.\nThere is an edge between vertex 2 and vertex 9 with a weight of 47.\nThere is an edge between vertex 1 and vertex 12 with a weight of 68.\nThere is an edge between vertex 11 and vertex 6 with a weight of 41.\nThere is an edge between vertex 8 and vertex 13 with a weight of 29.\nThere is an edge between vertex 1 and vertex 10 with a weight of 72.\nThere is an edge between vertex 14 and vertex 1 with a weight of 44.\nThere is an edge between vertex 7 and vertex 10 with a weight of 91.\nThere is an edge between vertex 14 and vertex 15 with a weight of 67.\nThere is an edge between vertex 4 and vertex 6 with a weight of 84.\nThere is an edge between vertex 11 and vertex 10 with a weight of 7.\nThere is an edge between vertex 3 and vertex 2 with a weight of 91.\nThere is an edge between vertex 6 and vertex 9 with a weight of 89.\nThere is an edge between vertex 15 and vertex 3 with a weight of 68.\nThere is an edge between vertex 1 and vertex 2 with a weight of 63.\nThere is an edge between vertex 8 and vertex 10 with a weight of 78.\nThere is an edge between vertex 15 and vertex 4 with a weight of 1.\nThere is an edge between vertex 1 and vertex 3 with a weight of 71.\nThere is an edge between vertex 10 and vertex 4 with a weight of 15.\nThere is an edge between vertex 7 and vertex 15 with a weight of 67.\nThere is an edge between vertex 8 and vertex 12 with a weight of 60.\nThere is an edge between vertex 9 and vertex 11 with a weight of 20.\nThere is an edge between vertex 8 and vertex 1 with a weight of 85.\nThere is an edge between vertex 14 and vertex 5 with a weight of 36.\nThere is an edge between vertex 8 and vertex 6 with a weight of 93.\nThere is an edge between vertex 7 and vertex 2 with a weight of 88.\nThere is an edge between vertex 7 and vertex 1 with a weight of 62.\nThere is an edge between vertex 5 and vertex 2 with a weight of 38.\nThere is an edge between vertex 12 and vertex 11 with a weight of 13.\nThere is an edge between vertex 6 and vertex 7 with a weight of 60.\nThere is an edge between vertex 3 and vertex 4 with a weight of 63.\nThere is an edge between vertex 15 and vertex 6 with a weight of 14.\nThere is an edge between vertex 14 and vertex 12 with a weight of 1.\nThere is an edge between vertex 15 and vertex 5 with a weight of 48.\nThere is an edge between vertex 3 and vertex 14 with a weight of 97.\nThere is an edge between vertex 14 and vertex 6 with a weight of 79.\nThere is an edge between vertex 4 and vertex 8 with a weight of 10.\nThere is an edge between vertex 7 and vertex 14 with a weight of 29.\nThere is an edge between vertex 13 and vertex 7 with a weight of 66.\nThere is an edge between vertex 6 and vertex 2 with a weight of 37.\nThere is an edge between vertex 4 and vertex 1 with a weight of 65.\nThere is an edge between vertex 10 and vertex 9 with a weight of 81.\nThere is an edge between vertex 14 and vertex 13 with a weight of 27.\nThere is an edge between vertex 4 and vertex 2 with a weight of 51.\nThere is an edge between vertex 4 and vertex 9 with a weight of 76.\nThere is an edge between vertex 4 and vertex 11 with a weight of 6.\nThere is an edge between vertex 13 and vertex 12 with a weight of 83.\nThere is an edge between vertex 14 and vertex 2 with a weight of 44.\nThere is an edge between vertex 11 and vertex 15 with a weight of 9.\nThere is an edge between vertex 13 and vertex 1 with a weight of 41.\nThere is an edge between vertex 4 and vertex 12 with a weight of 11.\nThere is an edge between vertex 7 and vertex 5 with a weight of 9.\nThere is an edge between vertex 14 and vertex 8 with a weight of 65.\nThere is an edge between vertex 6 and vertex 13 with a weight of 89.\nThere is an edge between vertex 13 and vertex 11 with a weight of 82.\nThere is an edge between vertex 10 and vertex 6 with a weight of 36.\nThere is an edge between vertex 7 and vertex 4 with a weight of 60.\nThere is an edge between vertex 9 and vertex 7 with a weight of 86.\nThere is an edge between vertex 8 and vertex 11 with a weight of 37.\nThere is an edge between vertex 9 and vertex 1 with a weight of 93.\nThere is an edge between vertex 7 and vertex 8 with a weight of 24.\nThere is an edge between vertex 11 and vertex 2 with a weight of 98.\nThere is an edge between vertex 6 and vertex 12 with a weight of 35.\nThere is an edge between vertex 4 and vertex 5 with a weight of 55.\nThere is an edge between vertex 5 and vertex 1 with a weight of 46.\nThere is an edge between vertex 6 and vertex 1 with a weight of 41.\nThere is an edge between vertex 14 and vertex 9 with a weight of 21.\nThere is an edge between vertex 8 and vertex 9 with a weight of 25.\nThere is an edge between vertex 3 and vertex 9 with a weight of 20.\nThere is an edge between vertex 12 and vertex 9 with a weight of 85.\nThere is an edge between vertex 10 and vertex 5 with a weight of 28.\n",
    "graph_output": "15 87\n1 15 66\n15 13 4\n13 2 34\n1 11 42\n11 7 48\n7 3 15\n3 5 21\n5 6 41\n13 9 22\n2 12 74\n13 4 19\n11 14 42\n2 10 52\n2 8 36\n11 3 32\n15 10 53\n12 7 71\n2 9 47\n1 12 68\n11 6 41\n8 13 29\n1 10 72\n14 1 44\n7 10 91\n14 15 67\n4 6 84\n11 10 7\n3 2 91\n6 9 89\n15 3 68\n1 2 63\n8 10 78\n15 4 1\n1 3 71\n10 4 15\n7 15 67\n8 12 60\n9 11 20\n8 1 85\n14 5 36\n8 6 93\n7 2 88\n7 1 62\n5 2 38\n12 11 13\n6 7 60\n3 4 63\n15 6 14\n14 12 1\n15 5 48\n3 14 97\n14 6 79\n4 8 10\n7 14 29\n13 7 66\n6 2 37\n4 1 65\n10 9 81\n14 13 27\n4 2 51\n4 9 76\n4 11 6\n13 12 83\n14 2 44\n11 15 9\n13 1 41\n4 12 11\n7 5 9\n14 8 65\n6 13 89\n13 11 82\n10 6 36\n7 4 60\n9 7 86\n8 11 37\n9 1 93\n7 8 24\n11 2 98\n6 12 35\n4 5 55\n5 1 46\n6 1 41\n14 9 21\n8 9 25\n3 9 20\n12 9 85\n10 5 28\n",
    "vertices": [
      null,
      null
    ],
    "answer": 193,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 106 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 6, 7, 13, 14, 3, 10, 16, 12, 15, 9\nVertex 2: 9, 7, 3, 15, 5, 10, 6, 12, 13, 14, 4, 16\nVertex 3: 6, 12, 2, 8, 1, 13, 10, 7, 5, 15, 11, 4, 9\nVertex 4: 1, 5, 15, 9, 8, 12, 13, 10, 7, 14, 11, 6, 2, 3, 16\nVertex 5: 4, 14, 15, 2, 8, 16, 3, 9, 6, 7, 11, 12, 13\nVertex 6: 1, 10, 3, 11, 8, 9, 2, 16, 4, 5, 13, 12, 7, 15\nVertex 7: 1, 10, 2, 15, 9, 4, 3, 13, 12, 11, 5, 6, 8\nVertex 8: 4, 3, 11, 6, 5, 13, 15, 14, 9, 12, 10, 16, 7\nVertex 9: 4, 13, 2, 11, 12, 15, 16, 7, 6, 14, 5, 10, 8, 3, 1\nVertex 10: 6, 14, 7, 12, 1, 4, 3, 2, 16, 9, 8, 11\nVertex 11: 12, 9, 15, 14, 6, 8, 13, 3, 4, 7, 16, 5, 10\nVertex 12: 4, 11, 9, 3, 10, 14, 16, 1, 15, 7, 2, 13, 5, 8, 6\nVertex 13: 9, 1, 16, 4, 3, 11, 8, 7, 2, 14, 12, 6, 15, 5\nVertex 14: 10, 16, 1, 15, 11, 5, 12, 4, 9, 2, 13, 8\nVertex 15: 4, 11, 14, 5, 2, 7, 9, 16, 12, 3, 8, 1, 13, 6\nVertex 16: 14, 13, 9, 5, 1, 15, 12, 6, 10, 11, 4, 2, 8\n",
    "graph_output": "16 106\n1 4\n4 5\n1 6\n6 10\n10 14\n14 16\n4 15\n6 3\n4 9\n9 13\n4 8\n9 2\n4 12\n12 11\n1 7\n13 1\n14 1\n11 9\n12 9\n15 11\n3 12\n15 14\n11 14\n7 10\n2 7\n13 16\n12 10\n3 2\n3 8\n14 5\n5 15\n13 4\n3 1\n13 3\n1 10\n10 4\n2 15\n2 5\n11 6\n11 8\n8 6\n15 7\n10 3\n8 5\n11 13\n9 15\n16 9\n7 9\n12 14\n5 16\n1 16\n15 16\n12 16\n7 4\n1 12\n7 3\n12 15\n10 2\n4 14\n8 13\n6 9\n2 6\n5 3\n7 13\n7 12\n16 6\n3 15\n14 9\n3 11\n11 4\n11 7\n5 9\n12 2\n2 13\n14 2\n13 14\n6 4\n15 8\n14 8\n12 13\n6 5\n16 10\n16 11\n7 5\n11 5\n1 15\n2 4\n10 9\n4 3\n16 4\n6 13\n9 8\n2 16\n5 12\n15 13\n12 8\n6 12\n9 3\n13 5\n6 7\n8 10\n8 16\n9 1\n10 11\n8 7\n15 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 51 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 5 and vertex 8.\n",
    "graph_output": "11 51\n2 9\n2 11\n4 2\n8 2\n3 6\n2 7\n8 11\n6 8\n1 6\n6 4\n9 4\n1 2\n8 3\n9 1\n4 7\n10 2\n9 8\n10 11\n11 5\n7 10\n8 4\n5 3\n6 7\n6 10\n6 11\n9 5\n11 3\n7 5\n9 11\n4 5\n6 2\n1 11\n7 3\n3 1\n5 1\n2 3\n1 4\n8 1\n10 3\n6 5\n4 11\n5 10\n11 7\n5 2\n10 8\n7 1\n9 10\n7 8\n7 9\n10 4\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 131,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 32 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 11 and vertex 4.\n",
    "graph_output": "16 32\n1 16\n16 2\n16 12\n12 15\n15 6\n16 8\n8 10\n6 7\n6 5\n6 3\n15 13\n6 4\n10 9\n4 14\n10 11\n10 5\n3 1\n7 16\n9 4\n2 9\n14 6\n6 8\n14 5\n5 2\n6 12\n5 15\n4 15\n12 4\n1 8\n13 9\n3 13\n11 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 90 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 10, 12, 9, 3, 14, 13, 6, 4, 15, 8, 7, 2\nVertex 2: 14, 5, 12, 8, 3, 10, 15, 13, 6, 4, 11, 1\nVertex 3: 15, 6, 5, 9, 1, 12, 14, 4, 2, 13, 11, 7, 8\nVertex 4: 15, 14, 5, 7, 6, 3, 1, 10, 11, 2, 12\nVertex 5: 11, 8, 3, 13, 7, 2, 4, 6, 10, 9, 14, 12, 15\nVertex 6: 3, 13, 10, 5, 4, 8, 12, 1, 14, 15, 9, 2, 11\nVertex 7: 11, 5, 14, 4, 12, 1, 3, 9, 15, 13\nVertex 8: 15, 5, 12, 10, 14, 13, 6, 2, 1, 3, 11\nVertex 9: 15, 3, 1, 14, 5, 13, 6, 12, 7, 10\nVertex 10: 1, 6, 8, 5, 13, 4, 2, 15, 9\nVertex 11: 1, 7, 5, 12, 14, 15, 3, 13, 4, 2, 6, 8\nVertex 12: 1, 15, 11, 8, 14, 2, 3, 6, 5, 7, 9, 13, 4\nVertex 13: 6, 5, 8, 1, 15, 14, 9, 10, 3, 11, 2, 12, 7\nVertex 14: 15, 2, 4, 12, 1, 11, 9, 7, 8, 3, 6, 5, 13\nVertex 15: 12, 9, 3, 14, 4, 8, 11, 13, 6, 1, 2, 5, 7, 10\n",
    "graph_output": "15 90\n1 11\n1 10\n1 12\n12 15\n15 9\n15 3\n15 14\n3 6\n6 13\n11 7\n15 4\n14 2\n15 8\n11 5\n4 14\n5 8\n12 11\n12 8\n5 3\n5 13\n5 7\n3 9\n1 9\n14 12\n1 3\n14 1\n11 14\n9 14\n10 6\n2 5\n7 14\n8 10\n4 5\n14 8\n13 8\n2 12\n12 3\n7 4\n5 6\n3 14\n6 4\n13 1\n6 8\n12 6\n5 10\n15 11\n4 3\n2 8\n9 5\n6 1\n6 14\n4 1\n15 13\n6 15\n5 14\n14 13\n3 2\n13 9\n10 13\n12 5\n15 1\n13 3\n7 12\n1 8\n11 3\n4 10\n6 9\n2 10\n2 15\n1 7\n13 11\n12 9\n2 13\n3 7\n13 12\n15 5\n6 2\n4 11\n2 4\n2 11\n7 9\n4 12\n7 15\n7 13\n6 11\n15 10\n9 10\n1 2\n8 3\n11 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 19 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (7\u00d77):\n\n      1   2   3   4   5   6   7\n   ----------------------------\n 1 |  0   1   0   0   1   1   1 \n 2 |  1   0   1   1   1   1   1 \n 3 |  0   1   0   1   1   1   1 \n 4 |  0   1   1   0   1   1   1 \n 5 |  1   1   1   1   0   1   1 \n 6 |  1   1   1   1   1   0   1 \n 7 |  1   1   1   1   1   1   0 \n",
    "graph_output": "7 19\n1 2\n1 7\n2 6\n6 4\n4 3\n2 5\n3 5\n5 1\n7 3\n2 7\n4 2\n5 4\n7 6\n7 5\n6 5\n3 2\n3 6\n4 7\n1 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8232,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 8 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (6\u00d76):\n\n      1   2   3   4   5   6\n   ------------------------\n 1 |  0   1   1   1   1   0 \n 2 |  1   0   0   1   0   1 \n 3 |  1   0   0   0   1   0 \n 4 |  1   1   0   0   1   0 \n 5 |  1   0   1   1   0   0 \n 6 |  0   1   0   0   0   0 \n",
    "graph_output": "6 8\n1 2\n1 3\n2 4\n2 6\n1 5\n4 1\n4 5\n3 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 21,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 13 vertices and 17 edges\n\nEdges (Format: Node Node):\n9 5\n4 5\n9 7\n10 8\n8 2\n3 10\n7 11\n1 2\n8 1\n10 9\n7 1\n10 4\n11 8\n5 1\n13 9\n10 13\n7 13\n",
    "graph_output": "13 17\n9 5\n4 5\n9 7\n10 8\n8 2\n3 10\n7 11\n1 2\n8 1\n10 9\n7 1\n10 4\n11 8\n5 1\n13 9\n10 13\n7 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 15 vertices and 24 edges\n\nEdges (Format: Node Node):\n5 1\n3 9\n9 5\n9 1\n15 4\n1 13\n9 13\n12 8\n2 10\n6 5\n2 1\n6 8\n10 3\n4 3\n13 2\n6 4\n11 14\n13 10\n4 10\n7 5\n2 7\n15 14\n6 7\n6 13\n",
    "graph_output": "15 24\n5 1\n3 9\n9 5\n9 1\n15 4\n1 13\n9 13\n12 8\n2 10\n6 5\n2 1\n6 8\n10 3\n4 3\n13 2\n6 4\n11 14\n13 10\n4 10\n7 5\n2 7\n15 14\n6 7\n6 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 28 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a weight of 35.\nThere is an edge between vertex 3 and vertex 15 with a weight of 5.\nThere is an edge between vertex 3 and vertex 4 with a weight of 67.\nThere is an edge between vertex 4 and vertex 9 with a weight of 76.\nThere is an edge between vertex 4 and vertex 13 with a weight of 88.\nThere is an edge between vertex 9 and vertex 5 with a weight of 48.\nThere is an edge between vertex 3 and vertex 2 with a weight of 93.\nThere is an edge between vertex 9 and vertex 6 with a weight of 75.\nThere is an edge between vertex 13 and vertex 12 with a weight of 77.\nThere is an edge between vertex 9 and vertex 8 with a weight of 65.\nThere is an edge between vertex 15 and vertex 16 with a weight of 79.\nThere is an edge between vertex 13 and vertex 14 with a weight of 3.\nThere is an edge between vertex 1 and vertex 10 with a weight of 1.\nThere is an edge between vertex 6 and vertex 7 with a weight of 28.\nThere is an edge between vertex 6 and vertex 11 with a weight of 60.\nThere is an edge between vertex 10 and vertex 8 with a weight of 70.\nThere is an edge between vertex 6 and vertex 3 with a weight of 14.\nThere is an edge between vertex 15 and vertex 1 with a weight of 87.\nThere is an edge between vertex 10 and vertex 14 with a weight of 96.\nThere is an edge between vertex 5 and vertex 7 with a weight of 47.\nThere is an edge between vertex 5 and vertex 8 with a weight of 77.\nThere is an edge between vertex 7 and vertex 9 with a weight of 91.\nThere is an edge between vertex 6 and vertex 2 with a weight of 56.\nThere is an edge between vertex 15 and vertex 13 with a weight of 88.\nThere is an edge between vertex 16 and vertex 8 with a weight of 95.\nThere is an edge between vertex 1 and vertex 9 with a weight of 99.\nThere is an edge between vertex 10 and vertex 3 with a weight of 95.\nThere is an edge between vertex 14 and vertex 7 with a weight of 20.\n",
    "graph_output": "16 28\n1 3 35\n3 15 5\n3 4 67\n4 9 76\n4 13 88\n9 5 48\n3 2 93\n9 6 75\n13 12 77\n9 8 65\n15 16 79\n13 14 3\n1 10 1\n6 7 28\n6 11 60\n10 8 70\n6 3 14\n15 1 87\n10 14 96\n5 7 47\n5 8 77\n7 9 91\n6 2 56\n15 13 88\n16 8 95\n1 9 99\n10 3 95\n14 7 20\n",
    "vertices": [
      null,
      null
    ],
    "answer": 605,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 5 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 86 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (14\u00d714):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14\n   --------------------------------------------------------\n 1 |  0  21  73  72  96  25   7  33  70  91  85  19  70  90 \n 2 | 21   0  87  81  71  16  71  35  83  60  98  85  12  32 \n 3 | 73  87   0  45   3  25  60  30  44   0  33   0  19  98 \n 4 | 72  81  45   0  83   4  38  18  25  26   0  44  73  13 \n 5 | 96  71   3  83   0  94   7  94  17  71   3  27  28  73 \n 6 | 25  16  25   4  94   0  31  24  63  66  25  98  80   2 \n 7 |  7  71  60  38   7  31   0   9  89   4  13  12  85  97 \n 8 | 33  35  30  18  94  24   9   0   7  57  39  84  35   0 \n 9 | 70  83  44  25  17  63  89   7   0  86  28  41  45   1 \n10 | 91  60   0  26  71  66   4  57  86   0  28   0  12  74 \n11 | 85  98  33   0   3  25  13  39  28  28   0  38  10  37 \n12 | 19  85   0  44  27  98  12  84  41   0  38   0  50  80 \n13 | 70  12  19  73  28  80  85  35  45  12  10  50   0  92 \n14 | 90  32  98  13  73   2  97   0   1  74  37  80  92   0 \n",
    "graph_output": "14 86\n1 11 85\n11 7 13\n11 14 37\n14 4 13\n1 12 19\n12 6 98\n1 3 73\n14 10 74\n7 9 89\n6 13 80\n7 5 7\n1 8 33\n8 2 35\n1 9 70\n10 11 28\n2 12 85\n8 3 30\n11 12 38\n2 3 87\n2 11 98\n3 13 19\n11 5 3\n2 5 71\n2 4 81\n6 1 25\n7 14 97\n2 9 83\n3 14 98\n5 12 27\n8 6 24\n5 10 71\n5 6 94\n8 10 57\n14 5 73\n10 4 26\n8 11 39\n7 13 85\n7 8 9\n9 14 1\n12 14 80\n12 4 44\n13 12 50\n1 4 72\n9 12 41\n13 2 12\n13 10 12\n7 4 38\n12 7 12\n9 13 45\n4 6 4\n13 8 35\n1 13 70\n10 6 66\n2 6 16\n10 7 4\n5 8 94\n5 9 17\n6 3 25\n9 6 63\n9 3 44\n3 11 33\n14 2 32\n9 4 25\n11 13 10\n5 3 3\n3 4 45\n3 7 60\n12 8 84\n2 10 60\n8 9 7\n1 14 90\n5 13 28\n11 9 28\n7 2 71\n1 10 91\n6 7 31\n2 1 21\n14 6 2\n10 9 86\n6 11 25\n14 13 92\n4 5 83\n7 1 7\n5 1 96\n4 13 73\n4 8 18\n",
    "vertices": [
      8,
      5
    ],
    "answer": 16,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 130 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   0   1   1   1   1   1   1   0 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   0   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   0   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   0   1   1 \n10 |  1   0   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n11 |  1   1   1   1   1   1   0   1   1   1   0   1   1   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n15 |  1   1   1   1   1   0   1   1   0   1   1   1   1   1   0   1   1 \n16 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   0 \n17 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   0   0 \n",
    "graph_output": "17 130\n15 8\n9 14\n17 13\n10 4\n2 3\n5 9\n12 9\n13 15\n2 7\n8 7\n3 1\n6 8\n14 12\n11 14\n1 5\n1 2\n4 13\n2 8\n14 4\n5 7\n2 13\n6 14\n12 4\n14 7\n10 17\n16 8\n7 6\n15 5\n11 1\n4 2\n16 1\n4 9\n5 3\n11 15\n10 6\n1 15\n10 1\n12 1\n7 13\n13 10\n15 3\n16 5\n17 7\n12 8\n12 17\n8 3\n1 14\n1 6\n17 8\n14 8\n11 5\n5 8\n3 9\n9 1\n15 2\n6 3\n15 16\n3 10\n15 7\n14 13\n3 12\n16 7\n16 9\n4 6\n10 12\n16 2\n12 13\n2 9\n10 11\n1 7\n15 12\n13 11\n10 5\n17 6\n3 17\n12 11\n11 17\n14 2\n14 16\n6 16\n7 4\n17 4\n5 4\n4 16\n14 17\n2 5\n9 10\n3 11\n9 6\n5 6\n6 2\n8 11\n11 4\n3 7\n10 8\n15 10\n7 9\n6 13\n13 9\n15 17\n9 11\n3 4\n1 13\n5 13\n10 16\n15 4\n9 8\n8 13\n1 17\n12 2\n15 14\n7 10\n2 11\n12 7\n5 14\n16 13\n5 17\n17 9\n11 6\n8 1\n12 16\n13 3\n12 5\n14 10\n12 6\n11 16\n1 4\n14 3\n16 3\n8 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 17 vertices and 125 edges\n\nEdges (Format: Node Node):\n1 12\n1 13\n13 3\n12 5\n5 8\n13 2\n1 9\n12 14\n8 6\n12 17\n9 10\n5 15\n1 16\n5 11\n17 4\n5 7\n3 10\n7 4\n11 1\n17 1\n6 12\n8 11\n9 14\n12 11\n3 14\n10 16\n9 3\n5 9\n10 2\n9 12\n11 10\n4 6\n16 5\n5 1\n2 17\n6 3\n16 11\n6 17\n14 1\n8 13\n15 3\n15 4\n2 16\n17 16\n2 5\n2 8\n3 5\n9 16\n15 17\n10 4\n16 6\n1 4\n5 13\n8 7\n15 13\n15 8\n1 6\n15 9\n17 7\n15 16\n17 3\n12 4\n9 7\n11 17\n7 15\n12 10\n1 10\n2 14\n6 2\n12 16\n8 12\n7 16\n9 4\n11 3\n6 14\n3 8\n6 9\n4 5\n5 10\n8 4\n6 5\n13 6\n10 15\n9 2\n15 11\n14 16\n17 10\n14 5\n17 8\n7 13\n3 16\n14 8\n2 1\n10 8\n4 16\n3 4\n7 3\n6 10\n2 15\n12 7\n10 14\n13 16\n11 14\n1 7\n7 14\n11 2\n13 12\n14 13\n4 14\n5 17\n4 2\n13 4\n1 15\n16 8\n17 13\n3 2\n6 7\n9 17\n2 7\n15 14\n6 15\n8 9\n11 6\n15 12\n11 9\n",
    "graph_output": "17 125\n1 12\n1 13\n13 3\n12 5\n5 8\n13 2\n1 9\n12 14\n8 6\n12 17\n9 10\n5 15\n1 16\n5 11\n17 4\n5 7\n3 10\n7 4\n11 1\n17 1\n6 12\n8 11\n9 14\n12 11\n3 14\n10 16\n9 3\n5 9\n10 2\n9 12\n11 10\n4 6\n16 5\n5 1\n2 17\n6 3\n16 11\n6 17\n14 1\n8 13\n15 3\n15 4\n2 16\n17 16\n2 5\n2 8\n3 5\n9 16\n15 17\n10 4\n16 6\n1 4\n5 13\n8 7\n15 13\n15 8\n1 6\n15 9\n17 7\n15 16\n17 3\n12 4\n9 7\n11 17\n7 15\n12 10\n1 10\n2 14\n6 2\n12 16\n8 12\n7 16\n9 4\n11 3\n6 14\n3 8\n6 9\n4 5\n5 10\n8 4\n6 5\n13 6\n10 15\n9 2\n15 11\n14 16\n17 10\n14 5\n17 8\n7 13\n3 16\n14 8\n2 1\n10 8\n4 16\n3 4\n7 3\n6 10\n2 15\n12 7\n10 14\n13 16\n11 14\n1 7\n7 14\n11 2\n13 12\n14 13\n4 14\n5 17\n4 2\n13 4\n1 15\n16 8\n17 13\n3 2\n6 7\n9 17\n2 7\n15 14\n6 15\n8 9\n11 6\n15 12\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 44 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 10 and vertex 7.\n",
    "graph_output": "11 44\n3 11\n6 7\n4 2\n5 3\n8 9\n11 5\n3 2\n11 1\n1 10\n6 8\n6 3\n7 8\n1 3\n2 6\n7 3\n5 1\n3 10\n4 8\n7 9\n11 8\n1 7\n5 4\n2 10\n6 9\n10 6\n6 11\n8 2\n4 7\n11 10\n9 2\n10 5\n2 1\n11 7\n6 4\n4 9\n10 4\n6 1\n7 2\n7 5\n5 9\n8 3\n1 9\n11 2\n10 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 23 and 3 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (30\u00d730):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n   ------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n11 |  1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n16 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   1   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   1   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   1   0   0 \n26 |  0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1 \n29 |  1   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n30 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n",
    "graph_output": "30 29\n1 22\n1 11\n22 17\n22 18\n17 26\n1 29\n18 25\n26 4\n25 28\n22 23\n23 14\n29 3\n14 2\n14 5\n18 19\n19 10\n11 6\n25 16\n16 7\n29 8\n16 21\n8 12\n3 27\n14 20\n1 13\n28 30\n5 24\n27 15\n26 9\n",
    "vertices": [
      23,
      3
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 17 vertices and 17 edges\n\nEdges (Format: Node Node):\n1 6\n1 10\n6 3\n6 7\n7 5\n7 15\n3 9\n15 16\n5 8\n3 14\n6 2\n3 12\n6 11\n14 4\n6 17\n1 13\n11 5\n",
    "graph_output": "17 17\n1 6\n1 10\n6 3\n6 7\n7 5\n7 15\n3 9\n15 16\n5 8\n3 14\n6 2\n3 12\n6 11\n14 4\n6 17\n1 13\n11 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 10 and 1 in the given tree, with node 1 as the root.\n\nUndirected Graph with 31 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 11\n11 19\n19 31\n19 21\n1 25\n1 28\n1 20\n25 17\n20 22\n17 3\n11 23\n20 9\n1 15\n22 10\n9 2\n9 29\n22 5\n23 18\n31 13\n20 14\n13 8\n5 24\n3 4\n20 7\n2 27\n25 26\n13 30\n28 16\n26 12\n9 6\n",
    "graph_output": "31 30\n1 11\n11 19\n19 31\n19 21\n1 25\n1 28\n1 20\n25 17\n20 22\n17 3\n11 23\n20 9\n1 15\n22 10\n9 2\n9 29\n22 5\n23 18\n31 13\n20 14\n13 8\n5 24\n3 4\n20 7\n2 27\n25 26\n13 30\n28 16\n26 12\n9 6\n",
    "vertices": [
      10,
      1
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 11 and vertex 13.\n",
    "graph_output": "15 30\n1 12\n1 14\n1 13\n1 10\n14 3\n3 9\n14 15\n9 7\n15 6\n7 8\n9 5\n14 11\n9 2\n8 4\n11 6\n12 7\n6 4\n9 13\n3 15\n15 9\n5 7\n9 6\n4 1\n10 12\n14 5\n8 12\n15 2\n11 4\n6 1\n11 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 19 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 4, 10\nVertex 2: 13, 5, 11\nVertex 3: 11, 13\nVertex 4: 1, 6\nVertex 5: 2, 6, 7, 11\nVertex 6: 7, 5, 4\nVertex 7: 1, 6, 8, 11, 5, 10\nVertex 8: 7, 13\nVertex 9: 10\nVertex 10: 9, 1, 7\nVertex 11: 7, 3, 5, 2, 12\nVertex 12: 11\nVertex 13: 2, 8, 3\n",
    "graph_output": "13 19\n2 13\n7 1\n7 6\n7 8\n9 10\n2 5\n5 6\n1 4\n11 7\n5 7\n3 11\n10 1\n5 11\n2 11\n7 10\n13 8\n13 3\n11 12\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 1 (source) to vertex 9 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 15 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 8.\nThere is an edge between vertex 8 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 7 and vertex 3 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 12 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 11 with a capacity of 3.\nThere is an edge between vertex 8 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 4 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 2 and vertex 9 with a capacity of 3.\n",
    "graph_output": "12 15\n1 2 8\n1 5 8\n1 8 5\n2 7 8\n8 9 9\n7 4 1\n7 3 1\n3 12 9\n5 6 1\n6 11 3\n8 10 5\n6 3 2\n5 4 5\n9 7 6\n2 9 3\n",
    "vertices": [
      1,
      9
    ],
    "answer": 14,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 21 edges\n\nEdges (Format: Node Node):\n1 13\n1 11\n1 15\n11 5\n1 3\n1 6\n11 2\n6 16\n13 12\n3 14\n11 7\n3 4\n11 8\n3 10\n8 9\n3 9\n10 8\n1 2\n4 1\n9 2\n3 6\n",
    "graph_output": "16 21\n1 13\n1 11\n1 15\n11 5\n1 3\n1 6\n11 2\n6 16\n13 12\n3 14\n11 7\n3 4\n11 8\n3 10\n8 9\n3 9\n10 8\n1 2\n4 1\n9 2\n3 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 1 (source) to vertex 10 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 10 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2 with a weight of 97 and a capacity of 10.\nThere is an edge between vertex 1 and vertex 5 with a weight of 34 and a capacity of 9.\nThere is an edge between vertex 2 and vertex 4 with a weight of 25 and a capacity of 1.\nThere is an edge between vertex 4 and vertex 10 with a weight of 36 and a capacity of 5.\nThere is an edge between vertex 5 and vertex 9 with a weight of 6 and a capacity of 10.\nThere is an edge between vertex 4 and vertex 3 with a weight of 46 and a capacity of 4.\nThere is an edge between vertex 4 and vertex 7 with a weight of 20 and a capacity of 2.\nThere is an edge between vertex 5 and vertex 6 with a weight of 6 and a capacity of 10.\nThere is an edge between vertex 3 and vertex 8 with a weight of 71 and a capacity of 1.\nThere is an edge between vertex 4 and vertex 11 with a weight of 57 and a capacity of 5.\n",
    "graph_output": "11 10\n1 2 97 10\n1 5 34 9\n2 4 25 1\n4 10 36 5\n5 9 6 10\n4 3 46 4\n4 7 20 2\n5 6 6 10\n3 8 71 1\n4 11 57 5\n",
    "vertices": [
      1,
      10
    ],
    "answer": 158,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 21 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 4\nVertex 2: 11, 14, 5\nVertex 3: 15\nVertex 4: 9, 1\nVertex 5: 1, 7, 9, 6, 14, 13, 10, 2, 11\nVertex 6: 5\nVertex 7: 5, 13, 8, 14\nVertex 8: 7\nVertex 9: 5, 4\nVertex 10: 5, 14\nVertex 11: 2, 5, 13, 14\nVertex 12: No connections\nVertex 13: 7, 5, 11\nVertex 14: 2, 5, 7, 10, 15, 11\nVertex 15: 3, 14\n",
    "graph_output": "15 21\n3 15\n5 1\n2 11\n5 7\n13 7\n5 9\n14 2\n6 5\n8 7\n9 4\n5 14\n13 5\n5 10\n14 7\n14 10\n2 5\n1 4\n15 14\n11 5\n13 11\n14 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 86 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 14 (weight=81), 13 (weight=19), 9 (weight=2), 15 (weight=17), 4 (weight=83), 6 (weight=73), 3 (weight=71), 5 (weight=81), 12 (weight=30), 2 (weight=68), 11 (weight=17)\nVertex 2: 13 (weight=85), 10 (weight=59), 15 (weight=70), 14 (weight=53), 9 (weight=7), 7 (weight=62), 11 (weight=57), 6 (weight=89), 4 (weight=41), 5 (weight=9), 1 (weight=68), 3 (weight=27)\nVertex 3: 14 (weight=10), 15 (weight=79), 5 (weight=82), 1 (weight=71), 4 (weight=90), 7 (weight=84), 11 (weight=67), 12 (weight=41), 13 (weight=17), 2 (weight=27)\nVertex 4: 13 (weight=75), 7 (weight=83), 6 (weight=1), 1 (weight=83), 11 (weight=41), 15 (weight=39), 14 (weight=53), 3 (weight=90), 9 (weight=79), 12 (weight=76), 10 (weight=92), 2 (weight=41)\nVertex 5: 14 (weight=24), 15 (weight=83), 13 (weight=57), 12 (weight=8), 9 (weight=100), 3 (weight=82), 8 (weight=81), 7 (weight=66), 1 (weight=81), 11 (weight=19), 2 (weight=9), 10 (weight=30)\nVertex 6: 13 (weight=99), 9 (weight=18), 10 (weight=65), 7 (weight=51), 15 (weight=55), 4 (weight=1), 1 (weight=73), 8 (weight=76), 2 (weight=89), 14 (weight=43)\nVertex 7: 4 (weight=83), 6 (weight=51), 8 (weight=23), 5 (weight=66), 13 (weight=45), 2 (weight=62), 3 (weight=84), 14 (weight=59), 15 (weight=46), 11 (weight=87), 10 (weight=20)\nVertex 8: 13 (weight=46), 14 (weight=45), 7 (weight=23), 15 (weight=29), 5 (weight=81), 6 (weight=76), 11 (weight=90), 12 (weight=41), 10 (weight=96), 9 (weight=69)\nVertex 9: 6 (weight=18), 15 (weight=14), 1 (weight=2), 5 (weight=100), 10 (weight=80), 14 (weight=82), 11 (weight=40), 2 (weight=7), 4 (weight=79), 8 (weight=69), 12 (weight=16)\nVertex 10: 6 (weight=65), 12 (weight=55), 2 (weight=59), 9 (weight=80), 14 (weight=4), 15 (weight=98), 8 (weight=96), 4 (weight=92), 5 (weight=30), 7 (weight=20)\nVertex 11: 13 (weight=84), 4 (weight=41), 14 (weight=55), 9 (weight=40), 15 (weight=56), 8 (weight=90), 12 (weight=28), 2 (weight=57), 5 (weight=19), 3 (weight=67), 7 (weight=87), 1 (weight=17)\nVertex 12: 10 (weight=55), 5 (weight=8), 8 (weight=41), 11 (weight=28), 4 (weight=76), 15 (weight=20), 14 (weight=62), 1 (weight=30), 3 (weight=41), 13 (weight=68), 9 (weight=16)\nVertex 13: 1 (weight=19), 6 (weight=99), 4 (weight=75), 8 (weight=46), 2 (weight=85), 11 (weight=84), 5 (weight=57), 14 (weight=56), 15 (weight=6), 7 (weight=45), 3 (weight=17), 12 (weight=68)\nVertex 14: 1 (weight=81), 3 (weight=10), 5 (weight=24), 8 (weight=45), 13 (weight=56), 15 (weight=69), 10 (weight=4), 9 (weight=82), 11 (weight=55), 4 (weight=53), 2 (weight=53), 7 (weight=59), 12 (weight=62), 6 (weight=43)\nVertex 15: 9 (weight=14), 5 (weight=83), 3 (weight=79), 6 (weight=55), 1 (weight=17), 14 (weight=69), 4 (weight=39), 2 (weight=70), 8 (weight=29), 13 (weight=6), 10 (weight=98), 11 (weight=56), 12 (weight=20), 7 (weight=46)\n",
    "graph_output": "15 86\n1 14 81\n1 13 19\n13 6 99\n6 9 18\n14 3 10\n13 4 75\n14 5 24\n9 15 14\n4 7 83\n13 8 46\n13 2 85\n13 11 84\n6 10 65\n10 12 55\n5 15 83\n15 3 79\n8 14 45\n13 5 57\n6 7 51\n1 9 2\n15 6 55\n15 1 17\n5 12 8\n9 5 100\n6 4 1\n10 2 59\n5 3 82\n14 13 56\n8 7 23\n9 10 80\n14 15 69\n10 14 4\n4 1 83\n4 11 41\n15 4 39\n15 2 70\n15 8 29\n8 5 81\n9 14 82\n5 7 66\n14 11 55\n14 4 53\n13 15 6\n6 1 73\n15 10 98\n2 14 53\n9 11 40\n3 1 71\n8 6 76\n13 7 45\n3 4 90\n2 9 7\n15 11 56\n8 11 90\n9 4 79\n2 7 62\n7 3 84\n12 8 41\n10 8 96\n5 1 81\n11 12 28\n4 12 76\n10 4 92\n2 11 57\n7 14 59\n15 12 20\n2 6 89\n12 14 62\n12 1 30\n5 11 19\n4 2 41\n11 3 67\n5 2 9\n9 8 69\n15 7 46\n7 11 87\n3 12 41\n10 5 30\n3 13 17\n2 1 68\n7 10 20\n11 1 17\n14 6 43\n2 3 27\n13 12 68\n9 12 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 156,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 13 to vertex 9 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 16 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 16 with a weight of 40.\nThere is an edge between vertex 1 and vertex 6 with a weight of 20.\nThere is an edge between vertex 6 and vertex 8 with a weight of 11.\nThere is an edge between vertex 8 and vertex 11 with a weight of 12.\nThere is an edge between vertex 11 and vertex 3 with a weight of 82.\nThere is an edge between vertex 11 and vertex 13 with a weight of 92.\nThere is an edge between vertex 16 and vertex 2 with a weight of 62.\nThere is an edge between vertex 3 and vertex 4 with a weight of 54.\nThere is an edge between vertex 8 and vertex 10 with a weight of 18.\nThere is an edge between vertex 10 and vertex 9 with a weight of 42.\nThere is an edge between vertex 2 and vertex 7 with a weight of 90.\nThere is an edge between vertex 6 and vertex 12 with a weight of 47.\nThere is an edge between vertex 13 and vertex 5 with a weight of 5.\nThere is an edge between vertex 1 and vertex 15 with a weight of 32.\nThere is an edge between vertex 4 and vertex 14 with a weight of 100.\nThere is an edge between vertex 5 and vertex 10 with a weight of 18.\n",
    "graph_output": "16 16\n1 16 40\n1 6 20\n6 8 11\n8 11 12\n11 3 82\n11 13 92\n16 2 62\n3 4 54\n8 10 18\n10 9 42\n2 7 90\n6 12 47\n13 5 5\n1 15 32\n4 14 100\n5 10 18\n",
    "vertices": [
      13,
      9
    ],
    "answer": 65,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 6 to vertex 8 in the weighted graph.\n\nUndirected, Weighted Graph with 14 vertices and 14 edges\n\nEdges (Format: Node Node Weight):\n1 13 9\n13 12 60\n1 5 8\n5 11 69\n11 8 39\n11 6 2\n8 14 28\n11 4 22\n14 10 87\n13 9 75\n12 2 72\n12 7 57\n14 3 11\n12 10 43\n",
    "graph_output": "14 14\n1 13 9\n13 12 60\n1 5 8\n5 11 69\n11 8 39\n11 6 2\n8 14 28\n11 4 22\n14 10 87\n13 9 75\n12 2 72\n12 7 57\n14 3 11\n12 10 43\n",
    "vertices": [
      6,
      8
    ],
    "answer": 41,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 12 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 16 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   1   1   0   1   0   0   0   0   0   1 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   1 \n 3 |  0   0   0   0   0   0   0   1   0   0   0   0   0 \n 4 |  1   0   0   0   0   0   0   0   0   0   0   1   0 \n 5 |  1   0   0   0   0   0   0   1   0   0   0   1   0 \n 6 |  0   0   0   0   0   0   0   1   0   0   0   0   0 \n 7 |  1   0   0   0   0   0   0   0   0   1   0   1   0 \n 8 |  0   0   1   0   1   1   0   0   0   0   0   0   1 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   1   0 \n10 |  0   0   0   0   0   0   1   0   0   0   0   0   1 \n11 |  0   0   0   0   0   0   0   0   0   0   0   1   0 \n12 |  0   0   0   1   1   0   1   0   1   0   1   0   0 \n13 |  1   1   0   0   0   0   0   1   0   1   0   0   0 \n\nCapacity Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   8   9   0   4   0   0   0   0   0   5 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0  10 \n 3 |  0   0   0   0   0   0   0  10   0   0   0   0   0 \n 4 |  8   0   0   0   0   0   0   0   0   0   0   5   0 \n 5 |  9   0   0   0   0   0   0   9   0   0   0   8   0 \n 6 |  0   0   0   0   0   0   0  10   0   0   0   0   0 \n 7 |  4   0   0   0   0   0   0   0   0   3   0   6   0 \n 8 |  0   0  10   0   9  10   0   0   0   0   0   0   9 \n 9 |  0   0   0   0   0   0   0   0   0   0   0  10   0 \n10 |  0   0   0   0   0   0   3   0   0   0   0   0   9 \n11 |  0   0   0   0   0   0   0   0   0   0   0   9   0 \n12 |  0   0   0   5   8   0   6   0  10   0   9   0   0 \n13 |  5  10   0   0   0   0   0   9   0   9   0   0   0 \n",
    "graph_output": "13 16\n1 13 5\n1 4 8\n1 5 9\n4 12 5\n13 8 9\n8 3 10\n8 6 10\n12 11 9\n12 7 6\n13 2 10\n12 9 10\n7 10 3\n13 10 9\n5 12 8\n8 5 9\n7 1 4\n",
    "vertices": [
      3,
      12
    ],
    "answer": 10,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 16 vertices and 107 edges\n\nEdges (Format: Node Node):\n9 14\n16 1\n12 2\n9 1\n8 14\n10 13\n13 4\n6 11\n5 1\n9 7\n5 2\n1 4\n3 1\n4 15\n7 14\n4 2\n10 9\n6 16\n6 14\n6 2\n12 9\n16 5\n3 12\n16 3\n1 14\n15 6\n6 7\n11 10\n7 5\n4 16\n1 13\n12 11\n12 1\n8 13\n7 2\n8 6\n4 12\n13 2\n1 7\n14 3\n11 2\n5 11\n12 10\n16 7\n10 15\n2 10\n8 7\n4 6\n15 9\n1 15\n13 3\n4 7\n5 9\n6 9\n16 15\n13 5\n3 7\n15 2\n5 10\n14 4\n16 12\n12 7\n9 2\n13 15\n4 5\n10 1\n16 10\n3 9\n11 15\n3 2\n9 16\n7 13\n5 6\n15 5\n11 7\n8 11\n10 4\n7 10\n3 8\n16 13\n16 14\n9 4\n13 6\n14 5\n13 9\n1 2\n13 12\n5 8\n3 5\n2 8\n13 11\n6 12\n14 2\n11 3\n12 14\n8 15\n3 4\n11 1\n8 4\n15 7\n14 13\n6 3\n3 15\n14 10\n11 14\n8 10\n11 9\n",
    "graph_output": "16 107\n9 14\n16 1\n12 2\n9 1\n8 14\n10 13\n13 4\n6 11\n5 1\n9 7\n5 2\n1 4\n3 1\n4 15\n7 14\n4 2\n10 9\n6 16\n6 14\n6 2\n12 9\n16 5\n3 12\n16 3\n1 14\n15 6\n6 7\n11 10\n7 5\n4 16\n1 13\n12 11\n12 1\n8 13\n7 2\n8 6\n4 12\n13 2\n1 7\n14 3\n11 2\n5 11\n12 10\n16 7\n10 15\n2 10\n8 7\n4 6\n15 9\n1 15\n13 3\n4 7\n5 9\n6 9\n16 15\n13 5\n3 7\n15 2\n5 10\n14 4\n16 12\n12 7\n9 2\n13 15\n4 5\n10 1\n16 10\n3 9\n11 15\n3 2\n9 16\n7 13\n5 6\n15 5\n11 7\n8 11\n10 4\n7 10\n3 8\n16 13\n16 14\n9 4\n13 6\n14 5\n13 9\n1 2\n13 12\n5 8\n3 5\n2 8\n13 11\n6 12\n14 2\n11 3\n12 14\n8 15\n3 4\n11 1\n8 4\n15 7\n14 13\n6 3\n3 15\n14 10\n11 14\n8 10\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 18, 5, 21, 2\nVertex 2: 1, 31, 22, 11, 20\nVertex 3: 5\nVertex 4: 5\nVertex 5: 1, 15, 4, 30, 3\nVertex 6: 26\nVertex 7: 15\nVertex 8: 17\nVertex 9: 22\nVertex 10: 14\nVertex 11: 2, 13\nVertex 12: 15\nVertex 13: 11\nVertex 14: 16, 10\nVertex 15: 5, 12, 7, 24\nVertex 16: 31, 27, 14, 26\nVertex 17: 28, 8\nVertex 18: 1, 19\nVertex 19: 18\nVertex 20: 2, 28\nVertex 21: 1, 23\nVertex 22: 2, 9\nVertex 23: 21\nVertex 24: 15\nVertex 25: 28\nVertex 26: 16, 6\nVertex 27: 16\nVertex 28: 20, 17, 25\nVertex 29: 30\nVertex 30: 5, 29\nVertex 31: 2, 16\n",
    "graph_output": "31 30\n1 18\n1 5\n1 21\n1 2\n2 31\n31 16\n16 27\n5 15\n16 14\n15 12\n15 7\n2 22\n5 4\n18 19\n5 30\n22 9\n2 11\n14 10\n5 3\n16 26\n2 20\n21 23\n11 13\n20 28\n30 29\n28 17\n28 25\n15 24\n26 6\n17 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 18 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0  63   0   0   4   0  20   0   0   0   0   0  49 \n 2 |  0   0   0   0   0   0   0   0  26   0   0   0   0   0   0 \n 3 |  0   0   0   0   0  62   0  57   0   0   0   0  12   0   0 \n 4 | 63   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0  89   0   0   0  21   0   0   0 \n 6 |  0   0  62   0   0   0   0  65  27   0   0   0   0   0   0 \n 7 |  4   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0  57   0  89  65   0   0   0  61   0  93   0   0   0 \n 9 | 20  26   0   0   0  27   0   0   0   0   0   0   0  23   0 \n10 |  0   0   0   0   0   0   0  61   0   0  25   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0  25   0   0   0  44   0 \n12 |  0   0   0   0  21   0   0  93   0   0   0   0   0   0  94 \n13 |  0   0  12   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0  23   0  44   0   0   0   0 \n15 | 49   0   0   0   0   0   0   0   0   0   0  94   0   0   0 \n",
    "graph_output": "15 18\n1 9 20\n9 6 27\n6 8 65\n6 3 62\n8 5 89\n8 10 61\n1 7 4\n1 15 49\n9 2 26\n1 4 63\n3 13 12\n10 11 25\n5 12 21\n9 14 23\n11 14 44\n8 12 93\n15 12 94\n3 8 57\n",
    "vertices": [
      null,
      null
    ],
    "answer": 521,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 6 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (6\u00d76):\n\n      1   2   3   4   5   6\n   ------------------------\n 1 |  0   1   0   0   1   0 \n 2 |  1   0   0   0   1   1 \n 3 |  0   0   0   0   0   0 \n 4 |  0   0   0   0   1   1 \n 5 |  1   1   0   1   0   0 \n 6 |  0   1   0   1   0   0 \n",
    "graph_output": "6 6\n1 5\n6 4\n2 1\n2 6\n5 4\n2 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 22 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 8\nVertex 2: 17\nVertex 3: 5, 16, 12\nVertex 4: 12\nVertex 5: 1, 14, 3, 7\nVertex 6: 13\nVertex 7: 5, 17\nVertex 8: 15, 12, 1, 10\nVertex 9: 16, 11\nVertex 10: 16, 8\nVertex 11: 9\nVertex 12: 13, 4, 8, 15, 3\nVertex 13: 15, 12, 6\nVertex 14: 5, 15\nVertex 15: 14, 13, 8, 16, 12\nVertex 16: 3, 10, 9, 15\nVertex 17: 7, 2\n",
    "graph_output": "17 22\n1 5\n5 14\n5 3\n14 15\n15 13\n3 16\n5 7\n7 17\n17 2\n13 12\n13 6\n16 10\n16 9\n15 8\n12 4\n9 11\n16 15\n8 12\n8 1\n8 10\n12 15\n12 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 9 to vertex 5 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 22 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (14\u00d714):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14\n   --------------------------------------------------------\n 1 |  0   0   0   0  71  27  54   0   0   0   0  33   0  20 \n 2 |  0   0   0  21   0   0   0   0  27   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   6   0   0  57 \n 4 |  0  21   0   0  21  46   0   0   0  34   0   0   0  77 \n 5 | 71   0   0  21   0   0  56  37   0   0   0   0   0   0 \n 6 | 27   0   0  46   0   0   0   0   0   1   0   0   0   0 \n 7 | 54   0   0   0  56   0   0   0   0   0   0   6  92  24 \n 8 |  0   0   0   0  37   0   0   0   0   0   0  86   0   0 \n 9 |  0  27   0   0   0   0   0   0   0   0   0   0   0   6 \n10 |  0   0   0  34   0   1   0   0   0   0   0   0   0   0 \n11 |  0   0   6   0   0   0   0   0   0   0   0   0   0  42 \n12 | 33   0   0   0   0   0   6  86   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0  92   0   0   0   0   0   0   0 \n14 | 20   0  57  77   0   0  24   0   6   0  42   0   0   0 \n",
    "graph_output": "14 22\n1 12 33\n1 14 20\n12 8 86\n14 9 6\n8 5 37\n14 7 24\n1 6 27\n9 2 27\n14 3 57\n14 4 77\n4 10 34\n14 11 42\n7 13 92\n6 10 1\n4 5 21\n5 7 56\n4 2 21\n6 4 46\n1 5 71\n7 1 54\n12 7 6\n3 11 6\n",
    "vertices": [
      9,
      5
    ],
    "answer": 69,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 110 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 9, 3, 2, 16, 15, 11, 10, 4, 14, 7, 12, 5\nVertex 2: 1, 6, 5, 13, 10, 8, 7, 11, 15, 3, 14, 4, 9, 12\nVertex 3: 1, 10, 14, 6, 11, 8, 4, 16, 13, 2, 5, 12, 9\nVertex 4: 13, 16, 11, 7, 14, 6, 9, 10, 5, 1, 8, 3, 12, 2\nVertex 5: 11, 6, 2, 13, 16, 12, 4, 8, 10, 7, 3, 1, 9, 14\nVertex 6: 5, 2, 16, 12, 13, 15, 4, 14, 8, 3, 11, 10, 7, 9\nVertex 7: 4, 13, 12, 10, 9, 8, 14, 2, 15, 16, 11, 5, 1, 6\nVertex 8: 15, 10, 14, 2, 7, 13, 9, 16, 6, 5, 4, 3\nVertex 9: 1, 15, 7, 4, 13, 8, 12, 10, 16, 14, 11, 6, 2, 3, 5\nVertex 10: 3, 8, 13, 7, 2, 1, 14, 4, 9, 5, 12, 16, 6, 15\nVertex 11: 4, 5, 14, 1, 13, 16, 2, 7, 12, 6, 3, 9, 15\nVertex 12: 13, 7, 6, 16, 5, 11, 9, 15, 14, 10, 4, 1, 3, 2\nVertex 13: 1, 4, 12, 15, 7, 5, 10, 2, 11, 6, 14, 9, 8, 3, 16\nVertex 14: 11, 3, 4, 15, 8, 10, 7, 13, 16, 6, 12, 1, 9, 2, 5\nVertex 15: 13, 8, 9, 1, 14, 6, 7, 16, 12, 2, 10, 11\nVertex 16: 4, 1, 6, 14, 11, 5, 12, 15, 7, 8, 10, 9, 3, 13\n",
    "graph_output": "16 110\n1 13\n13 4\n1 9\n4 16\n1 3\n4 11\n13 12\n4 7\n3 10\n11 5\n11 14\n1 2\n5 6\n13 15\n15 8\n15 9\n3 14\n7 13\n6 2\n14 4\n1 16\n1 15\n5 2\n11 1\n8 10\n5 13\n10 13\n2 13\n7 12\n15 14\n16 6\n7 10\n2 10\n12 6\n7 9\n8 14\n2 8\n10 1\n10 14\n8 7\n13 11\n7 14\n6 13\n15 6\n14 13\n14 16\n6 4\n4 9\n11 16\n2 7\n10 4\n7 15\n11 2\n9 13\n8 13\n5 16\n14 6\n16 12\n15 16\n8 9\n12 5\n5 4\n7 16\n8 16\n7 11\n11 12\n9 12\n9 10\n12 15\n4 1\n8 6\n8 5\n3 6\n10 5\n5 7\n15 2\n8 4\n14 12\n6 11\n3 11\n12 10\n8 3\n4 3\n10 16\n9 16\n10 6\n3 16\n13 3\n1 14\n1 7\n14 9\n12 4\n12 1\n2 3\n14 2\n13 16\n11 9\n10 15\n2 4\n5 3\n6 7\n1 5\n11 15\n9 6\n12 3\n9 2\n3 9\n5 9\n2 12\n14 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 116 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 16, 2, 5, 17, 11, 15, 3, 4, 9, 14, 7, 8, 6, 12, 13\nVertex 2: 9, 1, 13, 15, 6, 10, 11, 5, 4, 14, 7, 3, 16, 17, 12, 8\nVertex 3: 4, 16, 8, 12, 17, 13, 6, 1, 5, 2, 11, 10\nVertex 4: 17, 3, 14, 9, 16, 11, 6, 1, 5, 8, 2, 12, 15\nVertex 5: 10, 17, 13, 11, 1, 14, 6, 8, 16, 4, 15, 2, 9, 3, 7\nVertex 6: 8, 17, 14, 2, 5, 3, 4, 15, 16, 1, 10, 13, 11, 12\nVertex 7: 17, 9, 16, 10, 1, 13, 2, 14, 5, 15\nVertex 8: 6, 10, 11, 3, 9, 12, 5, 4, 1, 13, 14, 16, 17, 2\nVertex 9: 2, 7, 4, 8, 11, 15, 12, 13, 5, 14, 1, 16, 10, 17\nVertex 10: 5, 8, 17, 16, 2, 7, 14, 11, 13, 6, 3, 9, 15\nVertex 11: 8, 5, 4, 1, 9, 2, 10, 16, 12, 3, 13, 17, 6\nVertex 12: 8, 17, 3, 13, 14, 9, 16, 11, 1, 4, 2, 6\nVertex 13: 16, 2, 5, 3, 14, 12, 9, 17, 15, 7, 8, 10, 11, 6, 1\nVertex 14: 4, 6, 13, 5, 12, 10, 9, 1, 2, 15, 17, 8, 7\nVertex 15: 2, 1, 9, 5, 6, 13, 14, 16, 10, 7, 17, 4\nVertex 16: 1, 3, 13, 7, 4, 17, 10, 5, 12, 9, 11, 6, 2, 15, 8\nVertex 17: 4, 7, 6, 5, 12, 3, 1, 10, 16, 13, 14, 2, 11, 9, 15, 8\n",
    "graph_output": "17 116\n6 8\n10 5\n4 17\n17 7\n6 17\n2 9\n17 5\n3 4\n1 16\n3 16\n16 13\n14 4\n1 2\n13 2\n10 8\n11 8\n5 13\n9 7\n3 8\n6 14\n7 16\n9 4\n9 8\n12 8\n17 12\n5 11\n12 3\n5 1\n3 17\n3 13\n14 13\n15 2\n14 5\n6 2\n1 17\n16 4\n10 17\n4 11\n11 1\n16 17\n12 13\n6 5\n12 14\n15 1\n16 10\n11 9\n5 8\n6 3\n10 2\n7 10\n2 11\n15 9\n1 3\n4 6\n1 4\n16 5\n5 4\n14 10\n15 5\n2 5\n10 11\n12 9\n13 9\n6 15\n16 12\n5 9\n13 17\n13 15\n8 4\n14 9\n5 3\n1 9\n1 14\n4 2\n1 7\n7 13\n2 14\n7 2\n14 15\n8 1\n8 13\n16 9\n11 16\n14 17\n6 16\n2 3\n12 11\n6 1\n14 8\n11 3\n1 12\n14 7\n4 12\n2 16\n13 10\n6 10\n17 2\n13 11\n10 3\n9 10\n15 16\n13 6\n10 15\n11 17\n5 7\n2 12\n11 6\n17 9\n6 12\n8 16\n7 15\n1 13\n17 15\n17 8\n8 2\n15 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 107 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   0   1   0   0   1   1   0   1   0   1   1   0   1   0 \n 3 |  1   1   0   1   1   1   1   1   0   1   0   1   1   1   1   0   1 \n 4 |  1   0   1   0   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   0   1   0   1   1   1   1   1   1   1 \n 6 |  1   0   1   1   1   0   1   1   0   1   1   1   0   0   1   1   1 \n 7 |  1   0   1   1   1   1   0   1   0   1   1   1   0   1   1   1   1 \n 8 |  1   1   1   1   0   1   1   0   1   1   0   0   1   1   1   1   1 \n 9 |  1   1   0   1   1   0   0   1   0   1   1   0   0   0   1   0   1 \n10 |  1   0   1   0   0   1   1   1   1   0   0   0   1   1   1   1   0 \n11 |  1   1   0   1   1   1   1   0   1   0   0   1   1   1   1   1   1 \n12 |  1   0   1   1   1   1   1   0   0   0   1   0   1   1   1   0   1 \n13 |  1   1   1   1   1   0   0   1   0   1   1   1   0   1   1   1   1 \n14 |  1   1   1   1   1   0   1   1   0   1   1   1   1   0   1   0   1 \n15 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n16 |  1   1   0   1   1   1   1   1   0   1   1   0   1   0   1   0   1 \n17 |  1   0   1   1   1   1   1   1   1   0   1   1   1   1   1   1   0 \n",
    "graph_output": "17 107\n1 4\n1 8\n8 13\n4 3\n3 14\n4 12\n1 2\n4 17\n13 16\n8 6\n8 9\n2 11\n3 10\n16 5\n10 7\n8 15\n13 1\n1 17\n11 7\n11 9\n8 7\n17 6\n4 16\n16 8\n17 3\n3 12\n4 7\n11 13\n5 13\n14 2\n10 9\n17 16\n13 2\n13 14\n3 5\n11 14\n15 13\n15 5\n17 12\n10 15\n7 12\n2 5\n17 9\n12 14\n2 16\n14 15\n1 6\n4 14\n10 6\n12 5\n14 5\n17 13\n7 1\n7 15\n8 2\n10 16\n8 10\n1 14\n1 5\n12 13\n6 4\n14 17\n6 15\n8 14\n4 11\n16 1\n15 3\n3 13\n17 7\n8 17\n11 17\n4 8\n4 13\n12 15\n9 15\n11 12\n15 11\n16 11\n16 6\n6 11\n3 6\n1 11\n17 5\n1 10\n15 17\n16 15\n2 9\n5 7\n9 1\n4 15\n5 4\n12 6\n6 7\n4 9\n7 3\n7 14\n16 7\n1 3\n1 15\n5 6\n11 5\n9 5\n3 8\n1 12\n2 3\n13 10\n10 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 9 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 61 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   1   1   1   1   1   0   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   0   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   0   0 \n 4 |  1   1   1   0   1   1   0   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1 \n 7 |  0   1   1   0   1   1   0   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1 \n11 |  1   0   0   1   1   1   1   1   1   1   0   1 \n12 |  1   1   0   1   1   1   1   1   1   1   1   0 \n\nCapacity Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   8   8   3   3   9   0   7   2   8   8   1 \n 2 |  8   0   5   4   5   2   1   5   6   9   0   3 \n 3 |  8   5   0   7   1   9   4   9   4   5   0   0 \n 4 |  3   4   7   0   8   4   0   3   4   2   9   3 \n 5 |  3   5   1   8   0   6   3   5   6   3   1   5 \n 6 |  9   2   9   4   6   0   5   3   5   9   9   3 \n 7 |  0   1   4   0   3   5   0   4   4   5   8   1 \n 8 |  7   5   9   3   5   3   4   0   3   3   9   7 \n 9 |  2   6   4   4   6   5   4   3   0  10   5   4 \n10 |  8   9   5   2   3   9   5   3  10   0   4   4 \n11 |  8   0   0   9   1   9   8   9   5   4   0   8 \n12 |  1   3   0   3   5   3   1   7   4   4   8   0 \n",
    "graph_output": "12 61\n1 3 8\n1 2 8\n3 10 5\n3 4 7\n4 12 3\n4 5 8\n1 9 2\n3 6 9\n4 11 9\n3 8 9\n11 7 8\n1 6 9\n7 3 4\n12 5 5\n10 9 10\n1 12 1\n5 2 5\n2 3 5\n1 11 8\n3 9 4\n11 6 9\n2 6 2\n12 9 4\n2 12 3\n10 5 3\n7 6 5\n1 8 7\n9 5 6\n8 10 3\n11 10 4\n6 8 3\n4 9 4\n5 7 3\n3 5 1\n2 10 9\n6 12 3\n7 8 4\n12 10 4\n10 6 9\n6 9 5\n5 8 5\n2 7 1\n8 12 7\n9 7 4\n4 2 4\n7 12 1\n11 8 9\n9 8 3\n4 8 3\n12 11 8\n9 2 6\n2 8 5\n7 10 5\n6 5 6\n6 4 4\n1 5 3\n11 9 5\n4 10 2\n4 1 3\n10 1 8\n5 11 1\n",
    "vertices": [
      9,
      6
    ],
    "answer": 53,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 30 vertices and 29 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 20.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 15 and vertex 26.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 15 and vertex 25.\nThere is an edge between vertex 26 and vertex 8.\nThere is an edge between vertex 26 and vertex 21.\nThere is an edge between vertex 26 and vertex 4.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 25 and vertex 27.\nThere is an edge between vertex 20 and vertex 6.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 21 and vertex 11.\nThere is an edge between vertex 2 and vertex 23.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 15 and vertex 22.\nThere is an edge between vertex 27 and vertex 12.\nThere is an edge between vertex 21 and vertex 24.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 4 and vertex 29.\nThere is an edge between vertex 21 and vertex 7.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 8 and vertex 28.\nThere is an edge between vertex 5 and vertex 30.\nThere is an edge between vertex 22 and vertex 18.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 17 and vertex 19.\n",
    "graph_output": "30 29\n1 2\n2 20\n2 15\n15 26\n15 13\n15 25\n26 8\n26 21\n26 4\n8 9\n25 27\n20 6\n6 3\n6 5\n21 11\n2 23\n1 10\n15 22\n27 12\n21 24\n3 16\n4 29\n21 7\n15 14\n8 28\n5 30\n22 18\n12 17\n17 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 15,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 8 and vertex 1 are connected.\n\nThis is an undirected graph with 16 vertices and 18 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 14 and vertex 11.\n",
    "graph_output": "16 18\n5 12\n7 16\n5 4\n11 3\n11 9\n16 3\n1 12\n5 1\n7 8\n5 13\n10 4\n15 16\n14 7\n14 3\n8 1\n2 8\n3 7\n14 11\n",
    "vertices": [
      8,
      1
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 5 and vertex 14 are connected.\n\nThis is an undirected graph with 15 vertices and 25 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   1   1   1   1   0   0   1   0   0   0   0   1 \n 2 |  0   0   1   1   1   0   1   0   0   0   0   0   0   0   0 \n 3 |  0   1   0   0   1   0   0   0   0   0   1   0   0   1   0 \n 4 |  1   1   0   0   0   0   0   0   1   0   0   0   0   1   0 \n 5 |  1   1   1   0   0   0   0   1   0   0   0   0   0   0   0 \n 6 |  1   0   0   0   0   0   0   0   1   1   0   0   0   0   0 \n 7 |  1   1   0   0   0   0   0   1   1   0   0   0   0   0   0 \n 8 |  0   0   0   0   1   0   1   0   0   0   0   0   0   1   0 \n 9 |  0   0   0   1   0   1   1   0   0   0   0   0   0   1   0 \n10 |  1   0   0   0   0   1   0   0   0   0   0   0   0   0   1 \n11 |  0   0   1   0   0   0   0   0   0   0   0   0   1   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n13 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n14 |  0   0   1   1   0   0   0   1   1   0   0   1   0   0   0 \n15 |  1   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n",
    "graph_output": "15 25\n2 7\n9 6\n1 7\n2 5\n4 1\n8 14\n14 4\n3 11\n2 4\n11 13\n14 3\n12 14\n6 10\n7 8\n10 15\n10 1\n5 8\n14 9\n3 2\n9 7\n4 9\n5 1\n15 1\n3 5\n1 6\n",
    "vertices": [
      5,
      14
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 6 vertices and 12 edges\n\nEdges (Format: Node Node):\n4 2\n4 1\n5 3\n6 5\n4 6\n2 1\n3 1\n3 4\n2 3\n6 1\n2 6\n6 3\n",
    "graph_output": "6 12\n4 2\n4 1\n5 3\n6 5\n4 6\n2 1\n3 1\n3 4\n2 3\n6 1\n2 6\n6 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 53,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 13 vertices and 15 edges\n\nEdges (Format: Node Node):\n1 7\n13 6\n13 7\n6 3\n4 13\n4 3\n9 7\n7 12\n11 5\n10 2\n12 2\n1 12\n9 12\n6 11\n4 8\n",
    "graph_output": "13 15\n1 7\n13 6\n13 7\n6 3\n4 13\n4 3\n9 7\n7 12\n11 5\n10 2\n12 2\n1 12\n9 12\n6 11\n4 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 16 vertices and 30 edges\n\nEdges (Format: Node Node):\n10 7\n16 6\n15 4\n16 3\n6 8\n11 5\n13 11\n13 12\n3 8\n7 14\n9 5\n9 15\n14 16\n1 12\n10 4\n1 10\n7 1\n11 14\n2 15\n5 13\n16 10\n5 12\n12 10\n1 13\n6 5\n14 13\n7 15\n7 2\n1 11\n8 4\n",
    "graph_output": "16 30\n10 7\n16 6\n15 4\n16 3\n6 8\n11 5\n13 11\n13 12\n3 8\n7 14\n9 5\n9 15\n14 16\n1 12\n10 4\n1 10\n7 1\n11 14\n2 15\n5 13\n16 10\n5 12\n12 10\n1 13\n6 5\n14 13\n7 15\n7 2\n1 11\n8 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 16 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3\nVertex 2: 4, 11, 7, 8, 10\nVertex 3: 9, 1, 4, 10\nVertex 4: 2, 8, 3, 10\nVertex 5: 10\nVertex 6: 10\nVertex 7: 9, 2\nVertex 8: 4, 2, 11\nVertex 9: 7, 3\nVertex 10: 5, 3, 2, 6, 12, 4\nVertex 11: 2, 8\nVertex 12: 10\n",
    "graph_output": "12 16\n9 7\n3 9\n3 1\n4 2\n8 4\n2 11\n10 5\n2 7\n2 8\n4 3\n10 3\n10 2\n6 10\n8 11\n10 12\n4 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 5,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 98 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 6 and vertex 14.\n",
    "graph_output": "15 98\n1 14\n14 10\n10 9\n10 8\n10 12\n14 5\n14 3\n8 2\n9 15\n3 13\n14 4\n14 7\n8 11\n9 6\n7 10\n7 6\n3 10\n8 5\n15 11\n14 8\n13 15\n4 10\n2 11\n12 8\n2 1\n6 8\n3 7\n3 11\n3 8\n9 13\n6 11\n14 9\n2 14\n2 4\n12 4\n4 1\n11 1\n1 6\n4 11\n11 14\n12 13\n13 5\n5 11\n1 12\n9 4\n13 11\n2 5\n14 12\n11 7\n4 6\n10 6\n7 12\n5 7\n4 15\n6 5\n5 1\n5 9\n13 8\n6 2\n8 9\n4 7\n12 9\n9 7\n12 11\n13 14\n7 1\n11 10\n6 15\n13 6\n7 13\n3 2\n4 13\n14 15\n13 1\n2 15\n15 3\n1 3\n5 3\n9 3\n1 9\n4 8\n8 1\n8 7\n10 13\n15 8\n2 10\n12 5\n15 10\n15 5\n12 2\n10 1\n6 3\n12 6\n4 3\n3 12\n7 15\n2 13\n6 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 123 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n 3 |  1   1   0   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   0   0   1   1   0   1   1   1   1   0   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   0   1   0   1   1   1   1   1 \n 6 |  0   1   1   1   1   0   1   1   1   1   1   0   1   1   0   1   1 \n 7 |  1   1   1   0   1   1   0   1   1   1   1   1   0   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   0   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   0   1 \n10 |  1   1   1   1   0   1   1   1   1   0   1   1   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n12 |  1   1   1   0   0   0   1   1   1   1   1   0   1   1   0   1   1 \n13 |  1   1   1   1   1   1   0   1   1   1   1   1   0   1   1   1   1 \n14 |  1   1   1   1   1   1   1   0   1   1   1   1   1   0   1   1   1 \n15 |  1   0   1   1   1   0   1   1   1   1   1   0   1   1   0   1   1 \n16 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   0   1 \n17 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "17 123\n1 15\n1 16\n15 9\n15 13\n1 8\n13 3\n16 10\n13 4\n15 14\n15 7\n8 5\n5 6\n8 11\n16 2\n10 17\n2 12\n5 1\n5 9\n17 7\n14 13\n2 10\n9 1\n4 2\n11 14\n3 12\n16 14\n8 6\n15 4\n14 17\n4 11\n16 5\n14 2\n17 3\n12 16\n17 8\n9 6\n6 4\n9 11\n16 6\n17 16\n10 12\n4 14\n1 11\n2 1\n6 11\n16 15\n3 1\n9 2\n12 1\n10 9\n14 12\n10 6\n11 16\n7 2\n10 4\n11 5\n6 17\n9 13\n17 9\n6 14\n9 4\n11 12\n10 11\n4 17\n1 17\n1 7\n13 6\n17 5\n16 3\n8 13\n5 14\n1 14\n3 5\n5 13\n2 11\n14 9\n14 7\n6 3\n12 7\n11 3\n8 10\n9 8\n7 11\n11 13\n2 3\n4 1\n10 3\n7 16\n13 2\n8 15\n4 5\n17 13\n9 3\n9 7\n3 15\n8 4\n10 7\n2 6\n3 7\n8 7\n17 12\n13 1\n15 17\n10 15\n10 14\n17 2\n10 1\n8 16\n11 17\n12 8\n7 5\n8 2\n13 16\n6 7\n3 14\n5 15\n13 12\n8 3\n9 12\n15 11\n5 2\n10 13\n16 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 26 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 14 and vertex 16.\n",
    "graph_output": "16 26\n1 3\n1 10\n10 15\n1 4\n3 11\n3 9\n1 16\n16 7\n11 6\n6 5\n9 2\n6 8\n7 14\n2 13\n16 12\n16 13\n7 3\n1 7\n4 12\n16 4\n7 6\n14 9\n10 14\n12 15\n12 7\n14 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 45 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 3 and vertex 9.\n",
    "graph_output": "12 45\n6 5\n2 12\n8 11\n1 10\n9 2\n11 4\n12 9\n8 6\n9 1\n5 1\n5 9\n12 1\n10 2\n5 7\n5 2\n8 2\n2 3\n12 4\n7 9\n2 11\n5 12\n5 10\n8 4\n7 1\n7 11\n8 9\n10 3\n11 12\n6 1\n6 10\n6 2\n7 8\n10 9\n9 6\n6 11\n12 7\n1 2\n6 4\n6 12\n3 1\n3 5\n3 12\n10 12\n11 9\n3 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 17 vertices and 20 edges\n\nEdges (Format: Node Node):\n1 17\n17 4\n1 11\n11 15\n1 16\n11 14\n16 9\n9 13\n11 10\n9 3\n14 8\n1 12\n10 6\n12 2\n17 7\n13 5\n14 1\n1 13\n6 16\n1 15\n",
    "graph_output": "17 20\n1 17\n17 4\n1 11\n11 15\n1 16\n11 14\n16 9\n9 13\n11 10\n9 3\n14 8\n1 12\n10 6\n12 2\n17 7\n13 5\n14 1\n1 13\n6 16\n1 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 4 (source) to vertex 12 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 56 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13 with a capacity of 6.\nThere is an edge between vertex 1 and vertex 8 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 2 with a capacity of 9.\nThere is an edge between vertex 13 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 2 and vertex 6 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 5 with a capacity of 3.\nThere is an edge between vertex 10 and vertex 12 with a capacity of 8.\nThere is an edge between vertex 9 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 3 and vertex 11 with a capacity of 3.\nThere is an edge between vertex 8 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 5 and vertex 4 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 5 with a capacity of 10.\nThere is an edge between vertex 10 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 9 and vertex 2 with a capacity of 8.\nThere is an edge between vertex 12 and vertex 5 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 13 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 1 with a capacity of 9.\nThere is an edge between vertex 6 and vertex 5 with a capacity of 1.\nThere is an edge between vertex 9 and vertex 12 with a capacity of 4.\nThere is an edge between vertex 13 and vertex 12 with a capacity of 3.\nThere is an edge between vertex 13 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 12 with a capacity of 10.\nThere is an edge between vertex 10 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 11 and vertex 5 with a capacity of 3.\nThere is an edge between vertex 9 and vertex 4 with a capacity of 4.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 2 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 11 with a capacity of 6.\nThere is an edge between vertex 5 and vertex 13 with a capacity of 4.\nThere is an edge between vertex 11 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 2 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 4 and vertex 8 with a capacity of 8.\nThere is an edge between vertex 7 and vertex 6 with a capacity of 8.\nThere is an edge between vertex 3 and vertex 12 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 8 and vertex 3 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 13 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 12 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 12 and vertex 2 with a capacity of 9.\nThere is an edge between vertex 2 and vertex 13 with a capacity of 2.\nThere is an edge between vertex 10 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 3 and vertex 2 with a capacity of 6.\nThere is an edge between vertex 1 and vertex 7 with a capacity of 7.\nThere is an edge between vertex 10 and vertex 3 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 3 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 11 with a capacity of 1.\nThere is an edge between vertex 10 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 10 and vertex 4 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 11 and vertex 1 with a capacity of 2.\nThere is an edge between vertex 10 and vertex 13 with a capacity of 4.\nThere is an edge between vertex 12 and vertex 11 with a capacity of 8.\n",
    "graph_output": "13 56\n1 13 6\n1 8 8\n1 2 9\n13 9 4\n2 6 2\n2 10 5\n10 5 3\n10 12 8\n9 3 8\n3 11 3\n8 7 6\n5 4 5\n7 5 10\n10 8 1\n9 2 8\n12 5 3\n7 13 4\n4 1 9\n6 5 1\n9 12 4\n13 12 3\n13 8 2\n4 12 10\n10 9 5\n11 5 3\n9 4 4\n2 7 5\n3 6 10\n2 8 5\n9 11 6\n5 13 4\n11 7 6\n2 4 6\n4 8 8\n7 6 8\n3 12 3\n1 5 9\n8 3 1\n6 13 5\n1 12 1\n3 7 3\n12 2 9\n2 13 2\n10 6 9\n3 2 6\n1 7 7\n10 3 3\n1 3 1\n6 11 1\n10 7 4\n10 4 10\n9 7 9\n1 10 4\n11 1 2\n10 13 4\n12 11 8\n",
    "vertices": [
      4,
      12
    ],
    "answer": 49,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 99 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 5, 12, 11, 6, 14, 4, 2, 13, 9, 8\nVertex 2: 13, 9, 3, 5, 15, 14, 8, 16, 4, 1, 12, 10, 11, 6\nVertex 3: 1, 11, 13, 2, 9, 4, 16, 12, 15, 10, 14, 8, 7\nVertex 4: 5, 14, 15, 16, 7, 3, 9, 10, 1, 2, 13, 12, 11\nVertex 5: 8, 1, 4, 11, 13, 9, 2, 12, 15, 7, 10\nVertex 6: 16, 9, 7, 11, 1, 8, 14, 10, 13, 12, 2\nVertex 7: 11, 9, 10, 12, 6, 14, 4, 15, 5, 16, 13, 3\nVertex 8: 9, 5, 10, 15, 6, 2, 14, 11, 13, 1, 3, 12\nVertex 9: 8, 12, 6, 14, 2, 7, 11, 5, 3, 16, 4, 13, 10, 1\nVertex 10: 7, 11, 8, 12, 13, 14, 4, 6, 5, 9, 3, 2\nVertex 11: 3, 7, 14, 15, 5, 1, 9, 10, 13, 6, 16, 8, 2, 4\nVertex 12: 9, 1, 16, 7, 5, 10, 3, 2, 15, 13, 14, 6, 4, 8\nVertex 13: 2, 16, 3, 5, 11, 15, 10, 14, 9, 8, 1, 6, 12, 7, 4\nVertex 14: 11, 9, 4, 7, 2, 1, 10, 13, 6, 8, 16, 12, 3\nVertex 15: 11, 4, 13, 2, 8, 7, 5, 12, 3\nVertex 16: 6, 13, 12, 11, 4, 9, 3, 2, 7, 14\n",
    "graph_output": "16 99\n3 1\n6 16\n11 3\n11 7\n9 8\n8 5\n14 11\n11 15\n9 12\n2 13\n1 5\n6 9\n4 5\n16 13\n13 3\n14 9\n9 2\n5 11\n7 9\n14 4\n1 12\n11 1\n15 4\n9 11\n13 5\n7 10\n11 10\n11 13\n9 5\n12 16\n12 7\n2 3\n13 15\n2 5\n7 6\n11 6\n2 15\n7 14\n5 12\n8 10\n6 1\n16 11\n2 14\n16 4\n14 1\n9 3\n4 7\n15 8\n10 12\n10 13\n8 6\n4 3\n8 2\n14 10\n14 13\n9 16\n4 9\n4 10\n15 7\n4 1\n6 14\n16 3\n14 8\n5 15\n16 2\n11 8\n3 12\n2 4\n7 5\n1 2\n7 16\n9 13\n12 2\n15 12\n6 10\n10 5\n13 8\n9 10\n15 3\n13 1\n3 10\n6 13\n13 12\n10 2\n16 14\n9 1\n14 12\n1 8\n14 3\n7 13\n12 6\n3 8\n13 4\n4 12\n8 12\n11 2\n6 2\n4 11\n7 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 4 (source) to vertex 5 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 12 vertices and 22 edges\n\nEdges (Format: Node Node Capacity):\n1 9 6\n9 5 9\n9 2 5\n5 11 7\n1 12 10\n11 6 1\n6 8 4\n12 4 5\n1 10 9\n8 7 10\n11 3 9\n7 10 7\n1 3 7\n2 3 4\n7 5 9\n10 11 4\n9 8 10\n7 3 2\n11 8 5\n12 8 4\n12 10 1\n12 9 7\n",
    "graph_output": "12 22\n1 9 6\n9 5 9\n9 2 5\n5 11 7\n1 12 10\n11 6 1\n6 8 4\n12 4 5\n1 10 9\n8 7 10\n11 3 9\n7 10 7\n1 3 7\n2 3 4\n7 5 9\n10 11 4\n9 8 10\n7 3 2\n11 8 5\n12 8 4\n12 10 1\n12 9 7\n",
    "vertices": [
      4,
      5
    ],
    "answer": 5,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 1 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 77 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 1 and vertex 6 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 3 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 12 with a capacity of 4.\nThere is an edge between vertex 12 and vertex 4 with a capacity of 7.\nThere is an edge between vertex 6 and vertex 13 with a capacity of 7.\nThere is an edge between vertex 3 and vertex 9 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 2 with a capacity of 7.\nThere is an edge between vertex 6 and vertex 5 with a capacity of 10.\nThere is an edge between vertex 4 and vertex 11 with a capacity of 6.\nThere is an edge between vertex 1 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 1 and vertex 12 with a capacity of 7.\nThere is an edge between vertex 11 and vertex 8 with a capacity of 6.\nThere is an edge between vertex 10 and vertex 6 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 8.\nThere is an edge between vertex 9 and vertex 5 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 4.\nThere is an edge between vertex 9 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 2 with a capacity of 3.\nThere is an edge between vertex 8 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 8 with a capacity of 3.\nThere is an edge between vertex 11 and vertex 12 with a capacity of 8.\nThere is an edge between vertex 9 and vertex 12 with a capacity of 2.\nThere is an edge between vertex 9 and vertex 13 with a capacity of 10.\nThere is an edge between vertex 7 and vertex 11 with a capacity of 3.\nThere is an edge between vertex 5 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 11 and vertex 10 with a capacity of 8.\nThere is an edge between vertex 3 and vertex 12 with a capacity of 8.\nThere is an edge between vertex 4 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 3 with a capacity of 4.\nThere is an edge between vertex 5 and vertex 7 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 8 and vertex 2 with a capacity of 9.\nThere is an edge between vertex 9 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 11 and vertex 9 with a capacity of 7.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 13 and vertex 8 with a capacity of 3.\nThere is an edge between vertex 3 and vertex 8 with a capacity of 6.\nThere is an edge between vertex 13 and vertex 11 with a capacity of 10.\nThere is an edge between vertex 3 and vertex 11 with a capacity of 6.\nThere is an edge between vertex 5 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 7 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 13 with a capacity of 6.\nThere is an edge between vertex 13 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 3 and vertex 4 with a capacity of 7.\nThere is an edge between vertex 13 and vertex 1 with a capacity of 6.\nThere is an edge between vertex 6 and vertex 12 with a capacity of 2.\nThere is an edge between vertex 12 and vertex 2 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 11 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 1.\nThere is an edge between vertex 10 and vertex 4 with a capacity of 5.\nThere is an edge between vertex 2 and vertex 11 with a capacity of 10.\nThere is an edge between vertex 10 and vertex 1 with a capacity of 4.\nThere is an edge between vertex 10 and vertex 12 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 3 with a capacity of 9.\nThere is an edge between vertex 13 and vertex 12 with a capacity of 7.\nThere is an edge between vertex 5 and vertex 13 with a capacity of 6.\nThere is an edge between vertex 8 and vertex 10 with a capacity of 7.\nThere is an edge between vertex 11 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 2 with a capacity of 4.\nThere is an edge between vertex 13 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 2 and vertex 5 with a capacity of 8.\nThere is an edge between vertex 13 and vertex 4 with a capacity of 8.\nThere is an edge between vertex 4 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 6 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 10 and vertex 13 with a capacity of 9.\nThere is an edge between vertex 8 and vertex 12 with a capacity of 5.\nThere is an edge between vertex 12 and vertex 5 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 6 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 11 and vertex 1 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 9 with a capacity of 2.\n",
    "graph_output": "13 77\n1 7 4\n1 6 3\n1 3 6\n7 12 4\n12 4 7\n6 13 7\n3 9 2\n3 10 5\n9 2 7\n6 5 10\n4 11 6\n1 8 4\n1 12 7\n11 8 6\n10 6 5\n7 10 4\n1 4 8\n9 5 10\n1 9 1\n6 3 4\n9 6 9\n4 2 3\n8 7 5\n2 10 5\n9 8 3\n11 12 8\n9 12 2\n9 13 10\n7 11 3\n5 8 2\n11 10 8\n3 12 8\n4 5 9\n5 3 4\n5 7 2\n2 7 4\n8 2 9\n9 10 9\n11 9 7\n6 8 5\n13 8 3\n3 8 6\n13 11 10\n3 11 6\n5 10 9\n4 7 1\n2 13 6\n13 3 8\n3 4 7\n13 1 6\n6 12 2\n12 2 9\n5 11 5\n3 7 1\n10 4 5\n2 11 10\n10 1 4\n10 12 1\n2 3 9\n13 12 7\n5 13 6\n8 10 7\n11 6 9\n1 2 4\n13 7 4\n2 5 8\n13 4 8\n4 9 6\n6 4 6\n10 13 9\n8 12 5\n12 5 1\n6 7 6\n6 2 10\n11 1 9\n1 5 3\n7 9 2\n",
    "vertices": [
      1,
      6
    ],
    "answer": 59,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 23 edges\n\nEdges (Format: Node Node):\n1 5\n1 9\n1 14\n5 3\n14 16\n9 8\n14 2\n3 4\n1 12\n16 11\n9 7\n16 13\n4 10\n3 15\n16 6\n14 15\n4 14\n4 6\n3 10\n5 15\n14 5\n8 6\n5 8\n",
    "graph_output": "16 23\n1 5\n1 9\n1 14\n5 3\n14 16\n9 8\n14 2\n3 4\n1 12\n16 11\n9 7\n16 13\n4 10\n3 15\n16 6\n14 15\n4 14\n4 6\n3 10\n5 15\n14 5\n8 6\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 13 vertices and 16 edges\n\nEdges (Format: Node Node Weight):\n1 9 84\n9 7 82\n7 3 12\n1 6 32\n6 5 59\n7 2 28\n5 10 42\n7 4 20\n10 13 94\n1 11 51\n11 8 39\n9 12 29\n11 13 20\n11 12 59\n6 2 99\n1 12 1\n",
    "graph_output": "13 16\n1 9 84\n9 7 82\n7 3 12\n1 6 32\n6 5 59\n7 2 28\n5 10 42\n7 4 20\n10 13 94\n1 11 51\n11 8 39\n9 12 29\n11 13 20\n11 12 59\n6 2 99\n1 12 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 423,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 70 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 11, 8, 13, 10, 9, 3, 2, 5, 6\nVertex 2: 4, 3, 8, 13, 12, 10, 6, 9, 11, 7, 1\nVertex 3: 11, 6, 2, 13, 7, 12, 4, 5, 9, 1, 10, 8\nVertex 4: 2, 9, 10, 12, 11, 5, 6, 3, 8, 7, 13\nVertex 5: 10, 6, 13, 4, 11, 3, 9, 7, 1, 12\nVertex 6: 3, 5, 8, 4, 11, 9, 2, 7, 10, 12, 13, 1\nVertex 7: 1, 9, 3, 4, 12, 5, 6, 8, 2, 13\nVertex 8: 1, 13, 9, 2, 6, 10, 4, 11, 7, 3, 12\nVertex 9: 4, 7, 8, 10, 13, 6, 3, 5, 1, 2\nVertex 10: 13, 5, 4, 9, 8, 12, 1, 2, 11, 3, 6\nVertex 11: 3, 1, 13, 4, 5, 6, 8, 10, 12, 2\nVertex 12: 13, 4, 3, 2, 10, 7, 11, 6, 8, 5\nVertex 13: 3, 10, 5, 12, 1, 11, 8, 2, 9, 7, 4, 6\n",
    "graph_output": "13 70\n3 11\n2 4\n1 7\n1 11\n3 6\n4 9\n8 1\n3 2\n3 13\n7 9\n3 7\n13 10\n10 5\n10 4\n6 5\n13 5\n12 13\n1 13\n4 12\n11 13\n8 13\n4 11\n8 9\n8 2\n3 12\n5 4\n2 13\n8 6\n10 9\n4 6\n8 10\n2 12\n5 11\n4 3\n10 12\n8 4\n9 13\n5 3\n10 1\n11 6\n11 8\n6 9\n4 7\n2 10\n9 3\n6 2\n9 5\n7 12\n1 9\n10 11\n1 3\n7 5\n6 7\n3 10\n8 7\n3 8\n11 12\n10 6\n9 2\n2 11\n7 2\n12 6\n1 2\n12 8\n1 5\n13 7\n5 12\n13 4\n6 13\n6 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 204,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 109 edges\n\nEdges (Format: Node Node Weight):\n1 7 50\n7 16 75\n1 12 64\n1 13 2\n16 3 94\n12 5 78\n13 15 98\n7 9 27\n15 14 62\n3 4 18\n13 11 99\n3 2 71\n13 6 39\n6 10 17\n7 8 23\n9 6 62\n5 15 4\n12 13 87\n16 10 57\n13 14 47\n5 9 2\n10 13 83\n5 6 58\n14 7 69\n10 14 16\n5 16 24\n7 3 87\n9 3 37\n3 10 62\n11 12 31\n2 13 98\n4 16 16\n3 13 26\n1 10 68\n2 6 70\n10 11 30\n3 1 17\n11 4 97\n14 8 97\n2 11 25\n5 14 93\n4 7 10\n15 9 22\n2 15 86\n10 5 61\n11 16 37\n8 13 86\n5 7 71\n12 4 38\n16 1 94\n7 12 52\n1 15 100\n9 2 65\n8 3 17\n2 4 31\n4 10 44\n14 16 54\n15 12 12\n15 16 21\n8 9 8\n16 12 24\n15 4 14\n15 10 95\n2 1 92\n5 1 27\n9 13 80\n2 14 56\n16 9 40\n8 16 84\n12 8 9\n14 6 99\n15 7 93\n4 5 25\n6 3 70\n5 13 90\n5 11 1\n6 4 22\n7 11 99\n7 10 1\n9 11 23\n15 11 89\n14 4 25\n5 3 67\n8 6 87\n8 2 2\n14 12 1\n15 8 28\n14 11 33\n9 10 46\n2 16 7\n12 6 79\n7 13 66\n14 9 46\n1 8 11\n15 6 97\n2 5 77\n8 10 13\n16 13 36\n10 12 64\n4 13 54\n3 12 74\n9 12 20\n4 8 19\n1 9 74\n2 7 19\n12 2 43\n10 2 7\n11 6 86\n11 8 59\n",
    "graph_output": "16 109\n1 7 50\n7 16 75\n1 12 64\n1 13 2\n16 3 94\n12 5 78\n13 15 98\n7 9 27\n15 14 62\n3 4 18\n13 11 99\n3 2 71\n13 6 39\n6 10 17\n7 8 23\n9 6 62\n5 15 4\n12 13 87\n16 10 57\n13 14 47\n5 9 2\n10 13 83\n5 6 58\n14 7 69\n10 14 16\n5 16 24\n7 3 87\n9 3 37\n3 10 62\n11 12 31\n2 13 98\n4 16 16\n3 13 26\n1 10 68\n2 6 70\n10 11 30\n3 1 17\n11 4 97\n14 8 97\n2 11 25\n5 14 93\n4 7 10\n15 9 22\n2 15 86\n10 5 61\n11 16 37\n8 13 86\n5 7 71\n12 4 38\n16 1 94\n7 12 52\n1 15 100\n9 2 65\n8 3 17\n2 4 31\n4 10 44\n14 16 54\n15 12 12\n15 16 21\n8 9 8\n16 12 24\n15 4 14\n15 10 95\n2 1 92\n5 1 27\n9 13 80\n2 14 56\n16 9 40\n8 16 84\n12 8 9\n14 6 99\n15 7 93\n4 5 25\n6 3 70\n5 13 90\n5 11 1\n6 4 22\n7 11 99\n7 10 1\n9 11 23\n15 11 89\n14 4 25\n5 3 67\n8 6 87\n8 2 2\n14 12 1\n15 8 28\n14 11 33\n9 10 46\n2 16 7\n12 6 79\n7 13 66\n14 9 46\n1 8 11\n15 6 97\n2 5 77\n8 10 13\n16 13 36\n10 12 64\n4 13 54\n3 12 74\n9 12 20\n4 8 19\n1 9 74\n2 7 19\n12 2 43\n10 2 7\n11 6 86\n11 8 59\n",
    "vertices": [
      null,
      null
    ],
    "answer": 99,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 17 vertices and 18 edges\n\nEdges (Format: Node Node):\n1 5\n1 13\n5 7\n1 17\n1 4\n5 11\n17 2\n2 10\n17 9\n7 15\n2 16\n13 14\n1 6\n11 12\n13 8\n11 3\n6 7\n15 11\n",
    "graph_output": "17 18\n1 5\n1 13\n5 7\n1 17\n1 4\n5 11\n17 2\n2 10\n17 9\n7 15\n2 16\n13 14\n1 6\n11 12\n13 8\n11 3\n6 7\n15 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 23 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 9, 14, 12\nVertex 2: 14\nVertex 3: 5, 4, 15, 10\nVertex 4: 3, 10, 14, 6\nVertex 5: 1, 3, 15, 14, 8\nVertex 6: 16, 4, 8\nVertex 7: 9\nVertex 8: 9, 6, 5\nVertex 9: 1, 8, 7\nVertex 10: 4, 3\nVertex 11: 16\nVertex 12: 1\nVertex 13: 16\nVertex 14: 1, 16, 2, 15, 4, 5\nVertex 15: 3, 14, 5\nVertex 16: 14, 11, 13, 6\n",
    "graph_output": "16 23\n1 5\n1 9\n1 14\n5 3\n14 16\n9 8\n14 2\n3 4\n1 12\n16 11\n9 7\n16 13\n4 10\n3 15\n16 6\n14 15\n4 14\n4 6\n3 10\n5 15\n14 5\n8 6\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 15 vertices and 88 edges\n\nEdges (Format: Node Node):\n1 11\n11 13\n1 2\n11 7\n11 6\n7 15\n6 9\n9 3\n13 5\n7 12\n6 14\n1 8\n8 10\n9 4\n9 11\n8 5\n5 10\n14 15\n15 10\n5 1\n12 13\n14 3\n5 7\n1 10\n8 14\n4 11\n4 1\n12 4\n9 14\n3 4\n6 15\n4 6\n9 2\n13 4\n7 10\n6 10\n11 10\n6 8\n3 10\n2 10\n6 13\n15 2\n9 1\n6 2\n7 4\n1 14\n1 15\n12 3\n7 13\n2 12\n3 11\n5 15\n10 14\n13 10\n1 3\n12 1\n3 2\n15 11\n6 5\n2 5\n14 12\n8 2\n8 11\n12 15\n14 7\n11 2\n9 13\n7 9\n8 4\n4 10\n13 14\n5 4\n12 6\n15 8\n13 8\n12 10\n5 14\n13 1\n5 12\n14 11\n3 8\n14 4\n3 15\n9 12\n2 7\n2 4\n5 3\n9 8\n",
    "graph_output": "15 88\n1 11\n11 13\n1 2\n11 7\n11 6\n7 15\n6 9\n9 3\n13 5\n7 12\n6 14\n1 8\n8 10\n9 4\n9 11\n8 5\n5 10\n14 15\n15 10\n5 1\n12 13\n14 3\n5 7\n1 10\n8 14\n4 11\n4 1\n12 4\n9 14\n3 4\n6 15\n4 6\n9 2\n13 4\n7 10\n6 10\n11 10\n6 8\n3 10\n2 10\n6 13\n15 2\n9 1\n6 2\n7 4\n1 14\n1 15\n12 3\n7 13\n2 12\n3 11\n5 15\n10 14\n13 10\n1 3\n12 1\n3 2\n15 11\n6 5\n2 5\n14 12\n8 2\n8 11\n12 15\n14 7\n11 2\n9 13\n7 9\n8 4\n4 10\n13 14\n5 4\n12 6\n15 8\n13 8\n12 10\n5 14\n13 1\n5 12\n14 11\n3 8\n14 4\n3 15\n9 12\n2 7\n2 4\n5 3\n9 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 20 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   0  97  45   0  58   0   0  70   0  13 \n 2 |  0   0   0   0  61   0   0   0  17  44   0   0   0 \n 3 |  0   0   0  25   0   0   0   0   0  31   0   0  16 \n 4 |  0   0  25   0   0   0   0   0  54   0  93   0   0 \n 5 | 97  61   0   0   0   0   0   0   0   0   0   0   0 \n 6 | 45   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0  33   0   0  19   0   0 \n 8 | 58   0   0   0   0   0  33   0   0   0   0   0  94 \n 9 |  0  17   0  54   0   0   0   0   0   0   0  52   9 \n10 |  0  44  31   0   0   0   0   0   0   0   0   0  14 \n11 | 70   0   0  93   0   0  19   0   0   0   0  64   0 \n12 |  0   0   0   0   0   0   0   0  52   0  64   0   0 \n13 | 13   0  16   0   0   0   0  94   9  14   0   0   0 \n",
    "graph_output": "13 20\n1 8 58\n8 13 94\n13 10 14\n1 11 70\n11 4 93\n4 9 54\n9 12 52\n4 3 25\n10 2 44\n1 6 45\n8 7 33\n2 5 61\n10 3 31\n13 1 13\n5 1 97\n11 12 64\n2 9 17\n9 13 9\n13 3 16\n11 7 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 368,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 101 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 15, 9, 5, 8, 13, 2, 10, 4, 6, 14, 3, 7, 12\nVertex 2: 13, 6, 7, 12, 1, 11, 15, 9, 10, 4, 14, 8, 5, 3\nVertex 3: 4, 14, 5, 15, 7, 13, 6, 11, 1, 2, 10, 12\nVertex 4: 13, 3, 6, 5, 1, 7, 2, 15, 9, 8, 10, 11\nVertex 5: 1, 8, 3, 10, 4, 7, 12, 15, 13, 14, 2, 9, 11, 6\nVertex 6: 2, 11, 13, 14, 4, 3, 1, 8, 15, 12, 10, 5, 7, 9\nVertex 7: 11, 12, 14, 2, 8, 13, 3, 4, 9, 10, 5, 15, 6, 1\nVertex 8: 5, 1, 7, 10, 14, 12, 15, 6, 13, 2, 4, 9, 11\nVertex 9: 1, 2, 10, 14, 15, 7, 12, 4, 13, 11, 5, 8, 6\nVertex 10: 11, 13, 14, 8, 1, 5, 12, 15, 2, 9, 7, 6, 4, 3\nVertex 11: 1, 7, 10, 6, 15, 12, 13, 14, 2, 3, 9, 4, 5, 8\nVertex 12: 7, 2, 11, 8, 10, 15, 9, 6, 5, 13, 14, 1, 3\nVertex 13: 15, 2, 4, 10, 6, 1, 7, 11, 3, 8, 5, 9, 12, 14\nVertex 14: 7, 10, 3, 8, 11, 15, 6, 9, 1, 2, 5, 12, 13\nVertex 15: 1, 13, 11, 3, 14, 8, 2, 10, 9, 12, 6, 7, 5, 4\n",
    "graph_output": "15 101\n1 11\n1 15\n11 7\n7 12\n11 10\n1 9\n7 14\n1 5\n15 13\n13 2\n2 6\n13 4\n4 3\n5 8\n10 13\n2 7\n8 1\n7 8\n2 12\n14 10\n14 3\n3 5\n10 8\n6 11\n6 13\n11 15\n13 1\n12 11\n3 15\n8 14\n7 13\n13 11\n11 14\n1 2\n11 2\n15 14\n6 14\n12 8\n10 1\n10 5\n10 12\n4 6\n7 3\n8 15\n4 5\n4 1\n3 13\n15 2\n10 15\n3 6\n6 1\n2 9\n2 10\n7 4\n9 10\n9 14\n15 9\n12 15\n6 8\n14 1\n8 13\n9 7\n12 9\n11 3\n10 7\n15 6\n4 2\n12 6\n5 7\n10 6\n12 5\n15 7\n2 14\n8 2\n15 5\n5 13\n15 4\n9 4\n14 5\n4 8\n13 9\n11 9\n5 2\n5 9\n4 10\n4 11\n12 13\n3 1\n5 11\n3 2\n5 6\n9 8\n3 10\n11 8\n7 6\n1 7\n6 9\n14 12\n13 14\n12 1\n3 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 8 and vertex 6 are connected.\n\nThis is an undirected graph with 15 vertices and 91 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 15 and vertex 10.\n",
    "graph_output": "15 91\n6 15\n8 12\n13 11\n8 4\n2 14\n5 4\n2 7\n14 13\n5 7\n9 5\n10 4\n14 3\n9 4\n9 6\n6 10\n12 6\n13 2\n9 10\n4 12\n2 9\n2 10\n5 2\n3 1\n13 8\n1 4\n7 11\n1 14\n11 8\n15 11\n3 7\n9 13\n11 14\n9 3\n13 7\n14 6\n3 11\n9 15\n10 5\n12 7\n3 8\n4 13\n10 7\n3 15\n1 11\n3 6\n15 13\n12 14\n1 8\n1 12\n4 14\n12 13\n12 11\n3 4\n7 8\n6 13\n15 4\n13 5\n12 3\n10 13\n8 15\n12 2\n4 11\n11 9\n1 7\n14 15\n11 2\n6 8\n8 14\n4 6\n6 1\n9 12\n5 12\n1 10\n5 6\n9 8\n4 2\n14 10\n9 14\n7 14\n13 3\n5 3\n15 5\n15 12\n1 13\n10 12\n10 11\n2 8\n2 1\n7 6\n15 2\n15 10\n",
    "vertices": [
      8,
      6
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 10 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 54 edges\n\nEdges (Format: Node Node Capacity):\n1 3 2\n1 5 5\n3 8 2\n5 7 5\n3 6 7\n6 9 3\n8 4 10\n6 11 6\n8 2 5\n7 10 1\n4 3 2\n3 2 9\n11 3 8\n10 5 2\n3 7 5\n4 7 9\n8 1 8\n4 1 9\n10 11 10\n4 9 7\n8 7 3\n2 11 5\n9 7 3\n2 9 2\n3 5 8\n10 3 5\n8 9 6\n10 1 7\n7 6 3\n9 1 8\n6 10 10\n4 6 1\n11 4 8\n11 1 1\n7 11 3\n9 3 5\n10 4 10\n5 6 5\n8 11 5\n9 5 9\n4 5 6\n6 8 4\n1 6 6\n5 2 10\n2 10 3\n10 9 6\n4 2 2\n11 9 10\n7 1 5\n7 2 4\n6 2 7\n5 8 1\n1 2 4\n10 8 7\n",
    "graph_output": "11 54\n1 3 2\n1 5 5\n3 8 2\n5 7 5\n3 6 7\n6 9 3\n8 4 10\n6 11 6\n8 2 5\n7 10 1\n4 3 2\n3 2 9\n11 3 8\n10 5 2\n3 7 5\n4 7 9\n8 1 8\n4 1 9\n10 11 10\n4 9 7\n8 7 3\n2 11 5\n9 7 3\n2 9 2\n3 5 8\n10 3 5\n8 9 6\n10 1 7\n7 6 3\n9 1 8\n6 10 10\n4 6 1\n11 4 8\n11 1 1\n7 11 3\n9 3 5\n10 4 10\n5 6 5\n8 11 5\n9 5 9\n4 5 6\n6 8 4\n1 6 6\n5 2 10\n2 10 3\n10 9 6\n4 2 2\n11 9 10\n7 1 5\n7 2 4\n6 2 7\n5 8 1\n1 2 4\n10 8 7\n",
    "vertices": [
      10,
      2
    ],
    "answer": 51,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 16 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (8\u00d78):\n\n      1   2   3   4   5   6   7   8\n   --------------------------------\n 1 |  0   1   0   1   1   1   1   0 \n 2 |  1   0   1   1   1   0   1   1 \n 3 |  0   1   0   0   1   0   1   0 \n 4 |  1   1   0   0   0   1   0   0 \n 5 |  1   1   1   0   0   0   1   0 \n 6 |  1   0   0   1   0   0   0   1 \n 7 |  1   1   1   0   1   0   0   1 \n 8 |  0   1   0   0   0   1   1   0 \n",
    "graph_output": "8 16\n1 4\n1 6\n1 5\n5 3\n3 2\n2 7\n7 8\n2 5\n4 6\n5 7\n2 1\n2 8\n4 2\n6 8\n7 3\n1 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2631,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 109 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   0   1   1   0   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   0   1   0   0   1   0   1   1   1   1 \n 3 |  1   1   0   0   1   1   1   0   1   1   1   1   1   0   1   1   1 \n 4 |  1   1   0   0   0   1   1   1   1   0   1   0   1   1   1   1   1 \n 5 |  1   1   1   0   0   0   1   1   0   1   1   1   1   1   1   0   0 \n 6 |  1   1   1   1   0   0   0   1   1   1   1   1   1   1   1   0   1 \n 7 |  1   1   1   1   1   0   0   1   1   1   1   1   1   1   1   0   1 \n 8 |  1   0   0   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 9 |  0   1   1   1   0   1   1   1   0   1   1   0   1   0   1   1   0 \n10 |  1   0   1   0   1   1   1   1   1   0   1   1   1   0   1   1   1 \n11 |  1   0   1   1   1   1   1   1   1   1   0   1   1   1   1   0   1 \n12 |  0   1   1   0   1   1   1   1   0   1   1   0   0   1   1   0   1 \n13 |  1   0   1   1   1   1   1   1   1   1   1   0   0   1   1   0   1 \n14 |  1   1   0   1   1   1   1   1   0   0   1   1   1   0   1   1   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n16 |  1   1   1   1   0   0   0   1   1   1   0   0   0   1   1   0   1 \n17 |  1   1   1   1   0   1   1   1   0   1   1   1   1   1   1   1   0 \n",
    "graph_output": "17 109\n7 15\n10 6\n17 3\n17 7\n16 8\n13 7\n13 10\n12 7\n13 4\n7 1\n15 13\n5 7\n7 10\n2 6\n5 15\n2 16\n4 17\n3 5\n1 15\n1 16\n2 4\n11 15\n17 6\n9 2\n9 10\n3 6\n14 5\n3 7\n12 8\n2 14\n1 11\n1 8\n1 17\n13 3\n4 1\n14 17\n14 7\n13 17\n16 10\n2 3\n8 4\n5 1\n11 3\n5 2\n12 2\n11 14\n9 6\n1 6\n15 9\n15 16\n12 14\n16 14\n6 13\n4 7\n8 14\n3 15\n8 10\n4 11\n11 9\n4 15\n15 12\n17 12\n15 8\n17 10\n17 16\n11 8\n9 3\n11 6\n11 17\n13 5\n2 7\n17 2\n15 6\n3 12\n10 5\n7 11\n4 14\n10 1\n12 11\n12 6\n14 6\n13 8\n6 4\n17 15\n1 2\n13 14\n11 10\n4 9\n3 1\n14 15\n15 2\n5 11\n1 14\n17 8\n9 8\n3 16\n13 9\n8 5\n8 7\n12 10\n10 15\n6 8\n13 11\n10 3\n16 9\n1 13\n5 12\n4 16\n7 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 9 (source) to vertex 7 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 38 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (10\u00d710):\n\n      1   2   3   4   5   6   7   8   9  10\n   ----------------------------------------\n 1 |  0  70  50  64  71   0  70  29  92  10 \n 2 | 70   0  32   7   0   8  29   0   0  55 \n 3 | 50  32   0  85  40  28  98  64  28  30 \n 4 | 64   7  85   0  67  52  48  16   0  35 \n 5 | 71   0  40  67   0   0  35  13  95  72 \n 6 |  0   8  28  52   0   0  26  58  41  65 \n 7 | 70  29  98  48  35  26   0  61  34   0 \n 8 | 29   0  64  16  13  58  61   0   3  14 \n 9 | 92   0  28   0  95  41  34   3   0  15 \n10 | 10  55  30  35  72  65   0  14  15   0 \n\nCapacity Matrix (10\u00d710):\n\n      1   2   3   4   5   6   7   8   9  10\n   ----------------------------------------\n 1 |  0   9   3   7   1   0   7   3   3   4 \n 2 |  9   0  10   7   0   7   2   0   0   2 \n 3 |  3  10   0   4   4   9   4  10   2   3 \n 4 |  7   7   4   0   4   9   4   4   0   2 \n 5 |  1   0   4   4   0   0   4   8   5   9 \n 6 |  0   7   9   9   0   0   8   8  10   4 \n 7 |  7   2   4   4   4   8   0   3   6   0 \n 8 |  3   0  10   4   8   8   3   0   4   7 \n 9 |  3   0   2   0   5  10   6   4   0   1 \n10 |  4   2   3   2   9   4   0   7   1   0 \n",
    "graph_output": "10 38\n1 9 92 3\n1 4 64 7\n1 10 10 4\n9 7 34 6\n4 6 52 9\n10 5 72 9\n4 8 16 4\n6 2 8 7\n1 3 50 3\n9 8 3 4\n5 7 35 4\n4 5 67 4\n9 3 28 2\n10 9 15 1\n1 5 71 1\n3 7 98 4\n2 1 70 9\n3 6 28 9\n6 10 65 4\n8 10 14 7\n2 3 32 10\n6 8 58 8\n3 4 85 4\n10 2 55 2\n8 5 13 8\n2 4 7 7\n8 1 29 3\n1 7 70 7\n10 4 35 2\n8 7 61 3\n7 2 29 2\n7 4 48 4\n6 9 41 10\n10 3 30 3\n5 3 40 4\n3 8 64 10\n6 7 26 8\n9 5 95 5\n",
    "vertices": [
      9,
      7
    ],
    "answer": 2658,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 13 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 13 vertices and 56 edges\n\nEdges (Format: Node Node Capacity):\n1 13 9\n1 9 3\n1 3 4\n9 6 10\n9 2 8\n13 8 3\n9 7 10\n9 4 1\n3 11 7\n8 10 2\n3 5 8\n1 12 4\n2 4 2\n5 10 6\n4 1 6\n9 8 5\n12 13 1\n1 5 9\n8 3 5\n6 8 5\n4 8 3\n10 6 10\n11 6 2\n3 2 5\n10 2 1\n8 1 2\n12 7 5\n11 9 5\n6 12 5\n10 13 2\n10 12 7\n2 7 6\n8 2 2\n10 1 7\n10 4 10\n10 3 3\n7 4 1\n10 11 4\n13 6 4\n5 13 4\n6 2 4\n2 11 7\n3 6 2\n13 11 3\n11 4 2\n12 8 8\n12 9 2\n3 4 2\n2 13 8\n5 2 8\n7 5 1\n6 1 5\n7 13 5\n5 9 10\n2 12 1\n13 9 9\n",
    "graph_output": "13 56\n1 13 9\n1 9 3\n1 3 4\n9 6 10\n9 2 8\n13 8 3\n9 7 10\n9 4 1\n3 11 7\n8 10 2\n3 5 8\n1 12 4\n2 4 2\n5 10 6\n4 1 6\n9 8 5\n12 13 1\n1 5 9\n8 3 5\n6 8 5\n4 8 3\n10 6 10\n11 6 2\n3 2 5\n10 2 1\n8 1 2\n12 7 5\n11 9 5\n6 12 5\n10 13 2\n10 12 7\n2 7 6\n8 2 2\n10 1 7\n10 4 10\n10 3 3\n7 4 1\n10 11 4\n13 6 4\n5 13 4\n6 2 4\n2 11 7\n3 6 2\n13 11 3\n11 4 2\n12 8 8\n12 9 2\n3 4 2\n2 13 8\n5 2 8\n7 5 1\n6 1 5\n7 13 5\n5 9 10\n2 12 1\n13 9 9\n",
    "vertices": [
      13,
      4
    ],
    "answer": 27,
    "description_type": "structured"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 43 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 2, 4, 6, 3, 10, 11, 5, 8\nVertex 2: 8, 10, 9, 1, 5, 11, 6, 7\nVertex 3: 9, 11, 7, 4, 8, 1, 10\nVertex 4: 3, 6, 7, 1, 8, 10, 5\nVertex 5: 11, 7, 9, 10, 6, 2, 8, 4, 1\nVertex 6: 11, 7, 10, 4, 1, 5, 2, 8, 9\nVertex 7: 6, 5, 3, 8, 4, 11, 2\nVertex 8: 2, 7, 4, 9, 3, 5, 6, 1\nVertex 9: 3, 11, 2, 1, 5, 8, 6\nVertex 10: 2, 6, 5, 4, 1, 11, 3\nVertex 11: 5, 9, 6, 3, 7, 2, 10, 1\n",
    "graph_output": "11 43\n3 9\n11 5\n9 11\n8 2\n2 10\n11 6\n7 6\n2 9\n11 3\n5 7\n9 1\n5 9\n10 6\n2 1\n3 7\n7 8\n3 4\n6 4\n4 7\n4 1\n8 4\n8 9\n8 3\n5 10\n4 10\n1 6\n1 3\n6 5\n11 7\n2 5\n10 1\n11 2\n10 11\n8 5\n2 6\n1 11\n8 6\n7 2\n3 10\n4 5\n1 5\n9 6\n1 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 15 vertices and 18 edges\n\nEdges (Format: Node Node):\n12 5\n10 4\n6 4\n12 11\n9 5\n9 12\n2 11\n12 7\n15 7\n8 1\n14 13\n1 3\n13 11\n8 13\n4 3\n12 10\n7 14\n7 13\n",
    "graph_output": "15 18\n12 5\n10 4\n6 4\n12 11\n9 5\n9 12\n2 11\n12 7\n15 7\n8 1\n14 13\n1 3\n13 11\n8 13\n4 3\n12 10\n7 14\n7 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 8 vertices and 13 edges\n\nEdges (Format: Node Node):\n1 4\n4 6\n6 5\n1 3\n1 7\n4 2\n2 8\n3 8\n2 1\n6 8\n7 8\n4 7\n6 3\n",
    "graph_output": "8 13\n1 4\n4 6\n6 5\n1 3\n1 7\n4 2\n2 8\n3 8\n2 1\n6 8\n7 8\n4 7\n6 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 399,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 1 (source) to vertex 10 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 10 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0  97   0   0  34   0   0   0   0   0   0 \n 2 | 97   0   0  25   0   0   0   0   0   0   0 \n 3 |  0   0   0  46   0   0   0  71   0   0   0 \n 4 |  0  25  46   0   0   0  20   0   0  36  57 \n 5 | 34   0   0   0   0   6   0   0   6   0   0 \n 6 |  0   0   0   0   6   0   0   0   0   0   0 \n 7 |  0   0   0  20   0   0   0   0   0   0   0 \n 8 |  0   0  71   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   6   0   0   0   0   0   0 \n10 |  0   0   0  36   0   0   0   0   0   0   0 \n11 |  0   0   0  57   0   0   0   0   0   0   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0  10   0   0   9   0   0   0   0   0   0 \n 2 | 10   0   0   1   0   0   0   0   0   0   0 \n 3 |  0   0   0   4   0   0   0   1   0   0   0 \n 4 |  0   1   4   0   0   0   2   0   0   5   5 \n 5 |  9   0   0   0   0  10   0   0  10   0   0 \n 6 |  0   0   0   0  10   0   0   0   0   0   0 \n 7 |  0   0   0   2   0   0   0   0   0   0   0 \n 8 |  0   0   1   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0  10   0   0   0   0   0   0 \n10 |  0   0   0   5   0   0   0   0   0   0   0 \n11 |  0   0   0   5   0   0   0   0   0   0   0 \n",
    "graph_output": "11 10\n1 2 97 10\n1 5 34 9\n2 4 25 1\n4 10 36 5\n5 9 6 10\n4 3 46 4\n4 7 20 2\n5 6 6 10\n3 8 71 1\n4 11 57 5\n",
    "vertices": [
      1,
      10
    ],
    "answer": 158,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 19 edges\n\nEdges (Format: Node Node):\n1 9\n1 3\n9 15\n15 10\n10 12\n10 6\n3 4\n1 13\n12 14\n10 8\n4 7\n14 16\n4 11\n16 2\n3 5\n7 1\n12 8\n14 3\n13 15\n",
    "graph_output": "16 19\n1 9\n1 3\n9 15\n15 10\n10 12\n10 6\n3 4\n1 13\n12 14\n10 8\n4 7\n14 16\n4 11\n16 2\n3 5\n7 1\n12 8\n14 3\n13 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 14 vertices and 84 edges\n\nEdges (Format: Node Node Weight):\n1 4 56\n4 7 7\n1 8 97\n4 6 19\n6 14 28\n4 12 88\n1 5 5\n1 13 85\n7 10 60\n5 9 60\n1 2 13\n8 3 29\n13 11 82\n6 13 18\n14 3 35\n9 13 11\n5 11 72\n11 14 83\n12 6 92\n14 1 20\n4 2 14\n11 3 83\n3 6 29\n7 11 55\n8 4 88\n13 5 72\n14 5 26\n11 2 31\n1 10 64\n13 10 41\n8 14 44\n2 5 45\n4 5 13\n6 9 88\n9 4 53\n12 2 26\n11 10 76\n10 3 62\n2 9 78\n14 12 61\n6 10 15\n4 13 14\n1 12 32\n3 13 2\n7 8 47\n12 10 50\n2 6 92\n9 1 22\n3 9 17\n7 6 59\n3 2 19\n8 6 12\n3 4 85\n7 9 94\n12 5 72\n2 10 45\n2 7 35\n12 7 84\n10 4 66\n11 8 4\n7 5 11\n10 5 91\n13 8 63\n9 12 8\n9 8 71\n13 12 49\n10 9 53\n2 8 56\n9 14 86\n1 6 88\n4 14 30\n3 12 92\n13 7 44\n5 6 79\n13 2 93\n11 4 85\n14 13 47\n12 8 1\n7 14 73\n12 11 61\n9 11 98\n11 1 59\n14 10 66\n3 1 2\n",
    "graph_output": "14 84\n1 4 56\n4 7 7\n1 8 97\n4 6 19\n6 14 28\n4 12 88\n1 5 5\n1 13 85\n7 10 60\n5 9 60\n1 2 13\n8 3 29\n13 11 82\n6 13 18\n14 3 35\n9 13 11\n5 11 72\n11 14 83\n12 6 92\n14 1 20\n4 2 14\n11 3 83\n3 6 29\n7 11 55\n8 4 88\n13 5 72\n14 5 26\n11 2 31\n1 10 64\n13 10 41\n8 14 44\n2 5 45\n4 5 13\n6 9 88\n9 4 53\n12 2 26\n11 10 76\n10 3 62\n2 9 78\n14 12 61\n6 10 15\n4 13 14\n1 12 32\n3 13 2\n7 8 47\n12 10 50\n2 6 92\n9 1 22\n3 9 17\n7 6 59\n3 2 19\n8 6 12\n3 4 85\n7 9 94\n12 5 72\n2 10 45\n2 7 35\n12 7 84\n10 4 66\n11 8 4\n7 5 11\n10 5 91\n13 8 63\n9 12 8\n9 8 71\n13 12 49\n10 9 53\n2 8 56\n9 14 86\n1 6 88\n4 14 30\n3 12 92\n13 7 44\n5 6 79\n13 2 93\n11 4 85\n14 13 47\n12 8 1\n7 14 73\n12 11 61\n9 11 98\n11 1 59\n14 10 66\n3 1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 111,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 17 vertices and 121 edges\n\nEdges (Format: Node Node):\n17 14\n14 3\n16 11\n16 17\n13 12\n8 12\n10 8\n16 6\n3 1\n15 10\n6 11\n14 2\n14 8\n5 8\n2 6\n15 6\n14 4\n5 15\n16 15\n10 14\n8 3\n13 4\n11 7\n11 10\n11 4\n3 17\n6 5\n3 10\n7 12\n15 4\n8 16\n6 10\n13 16\n5 17\n9 4\n7 5\n7 13\n13 14\n8 6\n11 14\n3 11\n6 13\n5 16\n9 11\n7 2\n1 4\n5 14\n4 16\n8 2\n1 15\n8 11\n17 13\n14 16\n14 7\n12 3\n3 13\n5 10\n11 1\n12 5\n4 10\n8 13\n2 15\n6 7\n6 17\n16 3\n5 13\n14 1\n9 17\n15 12\n7 17\n6 3\n5 9\n6 4\n2 13\n16 2\n4 12\n2 4\n10 12\n2 9\n2 12\n14 6\n14 12\n1 8\n1 9\n7 9\n10 17\n15 13\n14 9\n11 17\n3 9\n9 10\n2 3\n7 16\n1 10\n15 9\n4 17\n1 6\n1 7\n12 1\n10 13\n2 11\n7 8\n11 5\n2 5\n3 4\n13 9\n9 16\n12 9\n1 2\n1 5\n4 7\n10 7\n15 7\n5 4\n3 15\n12 17\n16 1\n16 12\n11 13\n15 17\n11 15\n",
    "graph_output": "17 121\n17 14\n14 3\n16 11\n16 17\n13 12\n8 12\n10 8\n16 6\n3 1\n15 10\n6 11\n14 2\n14 8\n5 8\n2 6\n15 6\n14 4\n5 15\n16 15\n10 14\n8 3\n13 4\n11 7\n11 10\n11 4\n3 17\n6 5\n3 10\n7 12\n15 4\n8 16\n6 10\n13 16\n5 17\n9 4\n7 5\n7 13\n13 14\n8 6\n11 14\n3 11\n6 13\n5 16\n9 11\n7 2\n1 4\n5 14\n4 16\n8 2\n1 15\n8 11\n17 13\n14 16\n14 7\n12 3\n3 13\n5 10\n11 1\n12 5\n4 10\n8 13\n2 15\n6 7\n6 17\n16 3\n5 13\n14 1\n9 17\n15 12\n7 17\n6 3\n5 9\n6 4\n2 13\n16 2\n4 12\n2 4\n10 12\n2 9\n2 12\n14 6\n14 12\n1 8\n1 9\n7 9\n10 17\n15 13\n14 9\n11 17\n3 9\n9 10\n2 3\n7 16\n1 10\n15 9\n4 17\n1 6\n1 7\n12 1\n10 13\n2 11\n7 8\n11 5\n2 5\n3 4\n13 9\n9 16\n12 9\n1 2\n1 5\n4 7\n10 7\n15 7\n5 4\n3 15\n12 17\n16 1\n16 12\n11 13\n15 17\n11 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 22 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7 with a weight of 72.\nThere is an edge between vertex 7 and vertex 2 with a weight of 3.\nThere is an edge between vertex 1 and vertex 10 with a weight of 47.\nThere is an edge between vertex 7 and vertex 9 with a weight of 72.\nThere is an edge between vertex 9 and vertex 3 with a weight of 75.\nThere is an edge between vertex 1 and vertex 5 with a weight of 84.\nThere is an edge between vertex 5 and vertex 8 with a weight of 46.\nThere is an edge between vertex 10 and vertex 6 with a weight of 61.\nThere is an edge between vertex 5 and vertex 11 with a weight of 66.\nThere is an edge between vertex 5 and vertex 4 with a weight of 68.\nThere is an edge between vertex 6 and vertex 12 with a weight of 73.\nThere is an edge between vertex 10 and vertex 5 with a weight of 35.\nThere is an edge between vertex 2 and vertex 8 with a weight of 36.\nThere is an edge between vertex 2 and vertex 6 with a weight of 2.\nThere is an edge between vertex 5 and vertex 7 with a weight of 60.\nThere is an edge between vertex 2 and vertex 5 with a weight of 89.\nThere is an edge between vertex 7 and vertex 11 with a weight of 15.\nThere is an edge between vertex 8 and vertex 12 with a weight of 19.\nThere is an edge between vertex 9 and vertex 2 with a weight of 1.\nThere is an edge between vertex 8 and vertex 11 with a weight of 35.\nThere is an edge between vertex 12 and vertex 11 with a weight of 87.\nThere is an edge between vertex 3 and vertex 4 with a weight of 17.\n",
    "graph_output": "12 22\n1 7 72\n7 2 3\n1 10 47\n7 9 72\n9 3 75\n1 5 84\n5 8 46\n10 6 61\n5 11 66\n5 4 68\n6 12 73\n10 5 35\n2 8 36\n2 6 2\n5 7 60\n2 5 89\n7 11 15\n8 12 19\n9 2 1\n8 11 35\n12 11 87\n3 4 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": 289,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 81 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   0   1   1   1   0   0   1   0   1   0   0   1 \n 3 |  1   1   0   1   1   1   0   1   0   1   1   0   0   1   1 \n 4 |  1   0   1   0   0   1   0   0   1   1   1   0   1   1   0 \n 5 |  1   1   1   0   0   1   1   1   1   1   1   1   0   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   0   0 \n 7 |  1   1   0   0   1   1   0   0   1   1   1   1   1   1   1 \n 8 |  1   0   1   0   1   1   0   0   0   1   1   1   1   1   1 \n 9 |  1   0   0   1   1   1   1   0   0   1   1   1   0   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   0   1   0   1 \n11 |  1   0   1   1   1   1   1   1   1   1   0   1   1   1   1 \n12 |  1   1   0   0   1   1   1   1   1   0   1   0   1   1   1 \n13 |  1   0   0   1   0   1   1   1   0   1   1   1   0   0   1 \n14 |  1   0   1   1   1   0   1   1   1   0   1   1   0   0   1 \n15 |  1   1   1   0   1   0   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 81\n11 10\n2 15\n10 8\n6 2\n8 5\n1 13\n9 10\n15 3\n15 5\n5 11\n9 11\n2 3\n12 6\n9 1\n11 15\n5 14\n7 14\n7 2\n3 5\n9 12\n11 8\n5 2\n8 1\n4 11\n11 6\n8 14\n12 8\n8 3\n4 3\n1 12\n7 9\n11 3\n9 15\n6 1\n4 6\n7 11\n9 5\n15 1\n8 15\n2 12\n2 10\n15 12\n1 4\n7 10\n4 14\n14 12\n11 13\n5 1\n10 3\n11 1\n2 1\n14 1\n3 6\n14 9\n5 12\n9 4\n6 5\n5 7\n8 13\n13 4\n15 10\n13 15\n13 6\n3 1\n7 1\n12 7\n10 13\n13 12\n14 3\n14 15\n9 6\n6 8\n14 11\n5 10\n10 4\n15 7\n1 10\n12 11\n6 10\n13 7\n6 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 105 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 3, 10, 14, 11, 2, 12, 5, 6, 4, 8, 15, 9, 13\nVertex 2: 8, 3, 6, 12, 4, 14, 7, 11, 9, 1, 13, 10, 15, 5\nVertex 3: 2, 5, 13, 1, 7, 9, 8, 4, 11, 14, 15, 12, 10, 6\nVertex 4: 10, 11, 9, 3, 2, 8, 13, 7, 14, 6, 1, 15, 5, 12\nVertex 5: 14, 3, 6, 7, 8, 12, 13, 1, 10, 9, 4, 2, 15, 11\nVertex 6: 13, 2, 15, 5, 12, 14, 9, 7, 10, 4, 1, 8, 11, 3\nVertex 7: 1, 3, 13, 5, 14, 2, 9, 4, 6, 10, 15, 8, 12, 11\nVertex 8: 2, 11, 10, 3, 15, 9, 14, 5, 4, 13, 12, 7, 6, 1\nVertex 9: 12, 3, 11, 4, 8, 7, 2, 6, 13, 14, 5, 10, 1, 15\nVertex 10: 4, 13, 8, 1, 15, 14, 7, 6, 5, 3, 11, 12, 9, 2\nVertex 11: 14, 13, 8, 4, 9, 2, 3, 1, 10, 15, 12, 7, 6, 5\nVertex 12: 14, 9, 6, 2, 13, 5, 15, 1, 3, 8, 7, 10, 11, 4\nVertex 13: 11, 10, 3, 6, 12, 7, 15, 4, 8, 5, 9, 14, 2, 1\nVertex 14: 11, 12, 5, 6, 15, 2, 8, 7, 1, 3, 10, 4, 13, 9\nVertex 15: 6, 8, 14, 13, 10, 12, 3, 7, 4, 11, 1, 2, 5, 9\n",
    "graph_output": "15 105\n10 4\n14 11\n2 8\n2 3\n12 14\n14 5\n13 11\n1 7\n10 13\n5 3\n3 13\n11 8\n3 1\n12 9\n7 3\n11 4\n3 9\n6 13\n11 9\n2 6\n10 8\n15 6\n4 9\n10 1\n3 8\n4 3\n5 6\n15 8\n6 12\n2 12\n13 12\n6 14\n14 15\n4 2\n7 13\n9 8\n2 14\n8 14\n7 5\n7 14\n5 8\n2 7\n12 5\n15 13\n2 11\n7 9\n8 4\n2 9\n14 1\n11 3\n4 13\n8 13\n6 9\n10 15\n14 3\n13 5\n13 9\n4 7\n6 7\n1 11\n15 12\n14 10\n1 2\n15 3\n12 1\n12 3\n10 7\n14 4\n1 5\n10 6\n8 12\n13 14\n14 9\n7 15\n8 7\n4 6\n1 6\n12 7\n5 10\n4 1\n2 13\n3 10\n8 6\n15 4\n11 10\n11 15\n1 8\n9 5\n10 12\n9 10\n11 12\n2 10\n5 4\n15 1\n9 1\n12 4\n7 11\n2 15\n2 5\n15 5\n1 13\n15 9\n6 11\n5 11\n3 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 32 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   0  29   0   0   0   0   0   4   0   0  97 \n 2 |  0   0  20  88   0  31  57  99   0   0   0   0  18   0  48  78 \n 3 |  0  20   0   0   0   0  94   0  43  61   0   0   0   0   0   0 \n 4 |  0  88   0   0   0  38   0   0  28   0   0   0   0  75   0   0 \n 5 |  0   0   0   0   0  65  85  44   0   0  30   0   0   0   0  82 \n 6 |  0  31   0  38  65   0   0   0  34   0   0   0   0   0   0   0 \n 7 | 29  57  94   0  85   0   0   0   0   0   0   0   0  33   0   0 \n 8 |  0  99   0   0  44   0   0   0   0   0   0   0   0   0  38   0 \n 9 |  0   0  43  28   0  34   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0  61   0   0   0   0   0   0   0  75   0  51   0   0  23 \n11 |  0   0   0   0  30   0   0   0   0  75   0   0   0   0   0  62 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   4  25   0   0 \n13 |  4  18   0   0   0   0   0   0   0  51   0   4   0   0   0   0 \n14 |  0   0   0  75   0   0  33   0   0   0   0  25   0   0   0  18 \n15 |  0  48   0   0   0   0   0  38   0   0   0   0   0   0   0   0 \n16 | 97  78   0   0  82   0   0   0   0  23  62   0   0  18   0   0 \n",
    "graph_output": "16 32\n1 16 97\n1 13 4\n13 2 18\n2 6 31\n2 3 20\n16 11 62\n6 4 38\n2 15 48\n11 5 30\n16 14 18\n3 10 61\n5 8 44\n5 7 85\n4 9 28\n13 12 4\n1 7 29\n2 4 88\n5 6 65\n2 16 78\n16 10 23\n14 12 25\n8 2 99\n9 6 34\n7 2 57\n8 15 38\n13 10 51\n9 3 43\n14 4 75\n5 16 82\n10 11 75\n14 7 33\n7 3 94\n",
    "vertices": [
      null,
      null
    ],
    "answer": 394,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 15 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 30 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 3 (weight=70), 14 (weight=28), 6 (weight=2), 15 (weight=31), 10 (weight=79), 13 (weight=37), 7 (weight=54), 9 (weight=9)\nVertex 2: 15 (weight=60), 14 (weight=90), 10 (weight=75), 6 (weight=52)\nVertex 3: 1 (weight=70), 13 (weight=42)\nVertex 4: 16 (weight=60), 8 (weight=47)\nVertex 5: 16 (weight=18), 9 (weight=18)\nVertex 6: 1 (weight=2), 2 (weight=52), 15 (weight=75), 7 (weight=58), 12 (weight=73)\nVertex 7: 14 (weight=24), 10 (weight=25), 16 (weight=33), 13 (weight=73), 1 (weight=54), 6 (weight=58)\nVertex 8: 13 (weight=20), 4 (weight=47)\nVertex 9: 13 (weight=95), 5 (weight=18), 1 (weight=9)\nVertex 10: 7 (weight=25), 1 (weight=79), 2 (weight=75)\nVertex 11: 16 (weight=93), 12 (weight=76), 14 (weight=75)\nVertex 12: 11 (weight=76), 6 (weight=73)\nVertex 13: 3 (weight=42), 8 (weight=20), 9 (weight=95), 1 (weight=37), 7 (weight=73)\nVertex 14: 1 (weight=28), 7 (weight=24), 15 (weight=36), 11 (weight=75), 2 (weight=90)\nVertex 15: 14 (weight=36), 2 (weight=60), 1 (weight=31), 6 (weight=75)\nVertex 16: 7 (weight=33), 4 (weight=60), 11 (weight=93), 5 (weight=18)\n",
    "graph_output": "16 30\n1 3 70\n1 14 28\n14 7 24\n7 10 25\n7 16 33\n3 13 42\n13 8 20\n16 4 60\n1 6 2\n14 15 36\n15 2 60\n16 11 93\n16 5 18\n13 9 95\n11 12 76\n1 15 31\n1 10 79\n14 11 75\n2 14 90\n8 4 47\n13 1 37\n9 5 18\n2 10 75\n7 13 73\n1 7 54\n2 6 52\n15 6 75\n7 6 58\n9 1 9\n12 6 73\n",
    "vertices": [
      4,
      15
    ],
    "answer": 135,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 107 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 17 and vertex 6.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 17 and vertex 3.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 17 and vertex 16.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 17 and vertex 13.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 8 and vertex 17.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 10 and vertex 14.\n",
    "graph_output": "17 107\n1 4\n1 8\n8 13\n4 3\n3 14\n4 12\n1 2\n4 17\n13 16\n8 6\n8 9\n2 11\n3 10\n16 5\n10 7\n8 15\n13 1\n1 17\n11 7\n11 9\n8 7\n17 6\n4 16\n16 8\n17 3\n3 12\n4 7\n11 13\n5 13\n14 2\n10 9\n17 16\n13 2\n13 14\n3 5\n11 14\n15 13\n15 5\n17 12\n10 15\n7 12\n2 5\n17 9\n12 14\n2 16\n14 15\n1 6\n4 14\n10 6\n12 5\n14 5\n17 13\n7 1\n7 15\n8 2\n10 16\n8 10\n1 14\n1 5\n12 13\n6 4\n14 17\n6 15\n8 14\n4 11\n16 1\n15 3\n3 13\n17 7\n8 17\n11 17\n4 8\n4 13\n12 15\n9 15\n11 12\n15 11\n16 11\n16 6\n6 11\n3 6\n1 11\n17 5\n1 10\n15 17\n16 15\n2 9\n5 7\n9 1\n4 15\n5 4\n12 6\n6 7\n4 9\n7 3\n7 14\n16 7\n1 3\n1 15\n5 6\n11 5\n9 5\n3 8\n1 12\n2 3\n13 10\n10 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 6 to vertex 8 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 14 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 13 (weight=9), 5 (weight=8)\nVertex 2: 12 (weight=72)\nVertex 3: 14 (weight=11)\nVertex 4: 11 (weight=22)\nVertex 5: 1 (weight=8), 11 (weight=69)\nVertex 6: 11 (weight=2)\nVertex 7: 12 (weight=57)\nVertex 8: 11 (weight=39), 14 (weight=28)\nVertex 9: 13 (weight=75)\nVertex 10: 14 (weight=87), 12 (weight=43)\nVertex 11: 5 (weight=69), 8 (weight=39), 6 (weight=2), 4 (weight=22)\nVertex 12: 13 (weight=60), 2 (weight=72), 7 (weight=57), 10 (weight=43)\nVertex 13: 1 (weight=9), 12 (weight=60), 9 (weight=75)\nVertex 14: 8 (weight=28), 10 (weight=87), 3 (weight=11)\n",
    "graph_output": "14 14\n1 13 9\n13 12 60\n1 5 8\n5 11 69\n11 8 39\n11 6 2\n8 14 28\n11 4 22\n14 10 87\n13 9 75\n12 2 72\n12 7 57\n14 3 11\n12 10 43\n",
    "vertices": [
      6,
      8
    ],
    "answer": 41,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 65 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0  45  43  32  69  26  99  32   5  80  76  86 \n 2 | 45   0  80  59  94  57  44  30  84   9   0  73 \n 3 | 43  80   0  36  43  62  26  86  28  52  95 100 \n 4 | 32  59  36   0  61  31  44  15  79  38  51  49 \n 5 | 69  94  43  61   0  45   8  62  72  86  21  25 \n 6 | 26  57  62  31  45   0  38  40  71  99  59  79 \n 7 | 99  44  26  44   8  38   0  29  70  52  57  48 \n 8 | 32  30  86  15  62  40  29   0  50 100  55  88 \n 9 |  5  84  28  79  72  71  70  50   0  59  43   8 \n10 | 80   9  52  38  86  99  52 100  59   0  68  59 \n11 | 76   0  95  51  21  59  57  55  43  68   0  72 \n12 | 86  73 100  49  25  79  48  88   8  59  72   0 \n",
    "graph_output": "12 65\n1 7 99\n1 6 26\n6 10 99\n6 3 62\n3 4 36\n6 12 79\n12 9 8\n7 11 57\n9 5 72\n9 8 50\n6 2 57\n3 9 28\n12 8 88\n5 7 8\n1 9 5\n7 10 52\n1 4 32\n5 2 94\n9 2 84\n7 3 26\n8 11 55\n2 7 44\n1 5 69\n11 9 43\n6 5 45\n12 3 100\n4 12 49\n11 1 76\n2 1 45\n4 11 51\n4 5 61\n2 3 80\n3 11 95\n11 12 72\n6 4 31\n4 9 79\n6 7 38\n8 1 32\n8 3 86\n7 4 44\n4 10 38\n6 8 40\n10 11 68\n8 10 100\n2 10 9\n5 12 25\n1 10 80\n8 4 15\n6 9 71\n5 8 62\n12 7 48\n4 2 59\n8 7 29\n10 3 52\n1 12 86\n5 11 21\n7 9 70\n2 12 73\n10 5 86\n3 1 43\n10 12 59\n9 10 59\n5 3 43\n8 2 30\n6 11 59\n",
    "vertices": [
      null,
      null
    ],
    "answer": 204,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 66 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 10, 6, 2, 8, 12, 5, 9, 11, 3, 4\nVertex 2: 7, 8, 10, 12, 5, 3, 4, 1, 11, 6, 9\nVertex 3: 10, 2, 7, 4, 12, 8, 11, 9, 6, 5, 1\nVertex 4: 11, 8, 3, 2, 6, 12, 5, 10, 7, 9, 1\nVertex 5: 7, 9, 2, 12, 1, 4, 11, 8, 3, 10, 6\nVertex 6: 11, 10, 1, 4, 7, 3, 12, 9, 8, 2, 5\nVertex 7: 2, 12, 5, 1, 11, 8, 3, 9, 6, 10, 4\nVertex 8: 11, 2, 10, 7, 4, 3, 1, 12, 5, 6, 9\nVertex 9: 10, 5, 7, 3, 12, 6, 1, 11, 8, 4, 2\nVertex 10: 9, 2, 6, 1, 8, 3, 7, 4, 11, 12, 5\nVertex 11: 8, 6, 7, 4, 3, 2, 12, 10, 5, 1, 9\nVertex 12: 7, 2, 5, 3, 9, 6, 4, 1, 11, 8, 10\n",
    "graph_output": "12 66\n2 7\n9 10\n12 7\n8 11\n6 11\n7 5\n2 8\n1 7\n2 10\n9 5\n12 2\n7 11\n10 6\n1 10\n8 10\n4 11\n10 3\n2 5\n7 8\n12 5\n2 3\n4 8\n3 7\n4 3\n3 12\n1 6\n3 8\n11 3\n2 4\n9 7\n1 2\n4 6\n6 7\n2 11\n8 1\n9 3\n6 3\n7 10\n9 12\n12 6\n4 12\n1 12\n5 1\n12 11\n4 5\n12 8\n4 10\n11 10\n11 5\n8 5\n6 9\n10 12\n6 8\n5 3\n1 9\n7 4\n2 6\n11 1\n10 5\n5 6\n9 11\n3 1\n8 9\n4 9\n2 9\n1 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 16 vertices and 28 edges\n\nEdges (Format: Node Node):\n4 6\n11 10\n15 4\n12 5\n8 13\n4 9\n3 2\n13 4\n11 1\n2 6\n3 15\n7 16\n12 4\n13 7\n5 3\n5 14\n11 15\n6 5\n6 15\n11 5\n4 2\n1 2\n13 10\n5 8\n4 16\n14 7\n12 2\n12 11\n",
    "graph_output": "16 28\n4 6\n11 10\n15 4\n12 5\n8 13\n4 9\n3 2\n13 4\n11 1\n2 6\n3 15\n7 16\n12 4\n13 7\n5 3\n5 14\n11 15\n6 5\n6 15\n11 5\n4 2\n1 2\n13 10\n5 8\n4 16\n14 7\n12 2\n12 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 8 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 2, 3\nVertex 2: 1, 7\nVertex 3: 1, 4, 6\nVertex 4: 3, 7\nVertex 5: 1, 7\nVertex 6: 3\nVertex 7: 5, 4, 2\n",
    "graph_output": "7 8\n1 5\n5 7\n1 2\n1 3\n3 4\n3 6\n7 4\n7 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 16,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 108 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 16, 12, 6, 13, 10, 9, 2, 3, 11, 8, 5, 15, 14, 4\nVertex 2: 6, 12, 1, 8, 15, 3, 4, 11, 14, 16, 5, 9, 10, 13\nVertex 3: 8, 10, 1, 2, 4, 15, 11, 12, 5, 16, 14\nVertex 4: 14, 10, 9, 5, 2, 16, 3, 8, 6, 15, 13, 12, 1, 11\nVertex 5: 16, 8, 7, 4, 6, 9, 15, 1, 2, 10, 13, 11, 12, 14, 3\nVertex 6: 1, 2, 13, 11, 5, 7, 8, 10, 14, 15, 4, 16, 12\nVertex 7: 12, 5, 16, 15, 6, 8, 10, 9, 11, 13\nVertex 8: 5, 14, 3, 2, 12, 6, 1, 9, 7, 11, 10, 4, 16, 15\nVertex 9: 15, 1, 4, 16, 13, 8, 5, 2, 10, 11, 14, 7, 12\nVertex 10: 12, 1, 16, 3, 4, 14, 6, 13, 11, 15, 8, 7, 5, 9, 2\nVertex 11: 14, 6, 12, 1, 2, 16, 10, 8, 15, 3, 5, 9, 7, 4\nVertex 12: 1, 7, 10, 13, 2, 11, 8, 15, 6, 3, 5, 4, 9, 14\nVertex 13: 1, 12, 16, 6, 9, 15, 10, 14, 5, 4, 7, 2\nVertex 14: 8, 11, 4, 10, 6, 2, 13, 15, 16, 9, 5, 1, 12, 3\nVertex 15: 16, 9, 7, 2, 13, 5, 10, 6, 3, 12, 11, 14, 8, 4, 1\nVertex 16: 1, 5, 15, 10, 7, 13, 9, 4, 11, 2, 6, 8, 14, 3\n",
    "graph_output": "16 108\n1 16\n16 5\n5 8\n1 12\n8 14\n12 7\n1 6\n1 13\n14 11\n6 2\n16 15\n15 9\n14 4\n12 10\n8 3\n10 1\n9 1\n13 12\n16 10\n10 3\n10 4\n7 5\n7 16\n2 12\n16 13\n6 13\n2 1\n3 1\n9 4\n7 15\n11 6\n2 8\n4 5\n9 16\n2 15\n11 12\n2 3\n8 12\n2 4\n5 6\n16 4\n7 6\n1 11\n8 6\n2 11\n3 4\n1 8\n9 13\n8 9\n9 5\n13 15\n5 15\n8 7\n16 11\n14 10\n6 10\n13 10\n14 6\n11 10\n8 11\n15 10\n8 10\n15 6\n4 8\n2 14\n16 2\n15 3\n12 15\n4 6\n15 11\n16 6\n16 8\n1 5\n7 10\n2 5\n12 6\n14 13\n5 10\n5 13\n11 3\n15 14\n3 12\n5 11\n2 9\n10 9\n11 9\n15 8\n5 12\n14 16\n15 4\n9 14\n5 14\n10 2\n4 13\n3 5\n3 16\n12 4\n9 7\n15 1\n11 7\n12 9\n13 7\n1 14\n1 4\n12 14\n2 13\n14 3\n4 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 104 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 12 and vertex 10.\n",
    "graph_output": "16 104\n1 14\n14 2\n1 9\n2 8\n2 3\n9 12\n9 13\n1 4\n3 10\n2 15\n13 6\n1 5\n14 11\n12 16\n13 7\n8 9\n7 15\n1 2\n6 12\n4 10\n6 3\n2 7\n9 16\n6 15\n4 11\n11 10\n13 10\n15 10\n9 14\n5 16\n7 5\n8 4\n1 10\n12 5\n6 7\n6 9\n11 2\n6 8\n8 15\n9 5\n6 14\n15 9\n8 14\n15 3\n13 14\n16 14\n5 3\n14 5\n3 12\n9 10\n16 11\n1 15\n4 16\n15 12\n6 16\n10 16\n12 8\n3 4\n8 11\n15 11\n5 15\n1 11\n15 13\n11 7\n1 12\n3 16\n5 8\n1 3\n5 11\n14 15\n12 13\n14 4\n5 6\n16 13\n3 13\n8 16\n16 15\n2 5\n13 1\n2 4\n9 4\n12 11\n14 12\n5 13\n7 9\n6 11\n11 9\n8 13\n7 10\n8 3\n7 8\n4 5\n3 11\n7 4\n9 2\n10 8\n7 3\n12 4\n7 16\n14 3\n7 14\n12 2\n10 6\n12 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 6 to vertex 8 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 14 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (14\u00d714):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14\n   --------------------------------------------------------\n 1 |  0   0   0   0   8   0   0   0   0   0   0   0   9   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0  72   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0  11 \n 4 |  0   0   0   0   0   0   0   0   0   0  22   0   0   0 \n 5 |  8   0   0   0   0   0   0   0   0   0  69   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   2   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0  57   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0  39   0   0  28 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0  75   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0  43   0  87 \n11 |  0   0   0  22  69   2   0  39   0   0   0   0   0   0 \n12 |  0  72   0   0   0   0  57   0   0  43   0   0  60   0 \n13 |  9   0   0   0   0   0   0   0  75   0   0  60   0   0 \n14 |  0   0  11   0   0   0   0  28   0  87   0   0   0   0 \n",
    "graph_output": "14 14\n1 13 9\n13 12 60\n1 5 8\n5 11 69\n11 8 39\n11 6 2\n8 14 28\n11 4 22\n14 10 87\n13 9 75\n12 2 72\n12 7 57\n14 3 11\n12 10 43\n",
    "vertices": [
      6,
      8
    ],
    "answer": 41,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 15 vertices and 77 edges\n\nEdges (Format: Node Node):\n1 4\n11 12\n6 1\n7 10\n5 12\n14 2\n7 3\n6 7\n10 11\n11 14\n4 14\n6 8\n6 14\n15 2\n1 3\n7 9\n8 12\n1 12\n15 7\n11 6\n8 7\n15 12\n13 11\n14 7\n5 15\n2 9\n13 8\n15 4\n2 7\n8 5\n5 3\n4 12\n1 5\n6 13\n14 1\n2 12\n6 10\n13 15\n7 4\n2 5\n5 11\n2 11\n3 6\n10 5\n1 13\n13 10\n9 13\n5 14\n10 1\n4 5\n6 5\n8 2\n15 1\n7 13\n12 13\n9 10\n9 12\n14 9\n3 15\n8 15\n3 4\n10 4\n10 15\n6 12\n11 4\n4 8\n4 6\n14 10\n4 2\n11 9\n12 10\n13 3\n15 11\n1 11\n3 12\n11 8\n9 8\n",
    "graph_output": "15 77\n1 4\n11 12\n6 1\n7 10\n5 12\n14 2\n7 3\n6 7\n10 11\n11 14\n4 14\n6 8\n6 14\n15 2\n1 3\n7 9\n8 12\n1 12\n15 7\n11 6\n8 7\n15 12\n13 11\n14 7\n5 15\n2 9\n13 8\n15 4\n2 7\n8 5\n5 3\n4 12\n1 5\n6 13\n14 1\n2 12\n6 10\n13 15\n7 4\n2 5\n5 11\n2 11\n3 6\n10 5\n1 13\n13 10\n9 13\n5 14\n10 1\n4 5\n6 5\n8 2\n15 1\n7 13\n12 13\n9 10\n9 12\n14 9\n3 15\n8 15\n3 4\n10 4\n10 15\n6 12\n11 4\n4 8\n4 6\n14 10\n4 2\n11 9\n12 10\n13 3\n15 11\n1 11\n3 12\n11 8\n9 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 3 and vertex 1 are connected.\n\nThis is an undirected graph with 15 vertices and 79 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 12, 13, 15, 8, 9, 14, 10, 4, 6, 7, 2, 11\nVertex 2: 9, 7, 15, 10, 4, 6, 12, 1, 14, 13\nVertex 3: 5, 7, 12, 9, 13, 15, 8, 11\nVertex 4: 12, 13, 5, 6, 9, 2, 10, 8, 1\nVertex 5: 3, 13, 15, 4, 8, 11, 14, 6, 12, 10, 9\nVertex 6: 14, 11, 15, 4, 9, 2, 5, 12, 1, 10, 13\nVertex 7: 3, 13, 2, 15, 9, 10, 8, 14, 1, 12\nVertex 8: 14, 5, 1, 15, 3, 13, 4, 10, 7, 9\nVertex 9: 12, 2, 3, 4, 13, 10, 11, 6, 1, 7, 8, 5\nVertex 10: 11, 12, 2, 9, 4, 1, 13, 8, 7, 6, 5\nVertex 11: 10, 6, 15, 12, 14, 5, 9, 13, 3, 1\nVertex 12: 4, 13, 9, 14, 3, 1, 10, 11, 15, 2, 6, 5, 7\nVertex 13: 5, 12, 7, 1, 4, 3, 9, 11, 15, 8, 10, 6, 2\nVertex 14: 12, 6, 8, 11, 5, 1, 7, 2\nVertex 15: 1, 6, 7, 5, 2, 11, 12, 8, 3, 13\n",
    "graph_output": "15 79\n11 10\n5 3\n4 12\n7 3\n5 13\n13 12\n9 12\n12 14\n12 3\n13 7\n12 1\n13 1\n6 14\n2 9\n6 11\n15 1\n6 15\n13 4\n7 2\n10 12\n15 7\n3 9\n14 8\n5 15\n5 4\n2 15\n6 4\n13 3\n2 10\n11 15\n12 11\n4 9\n14 11\n13 9\n8 5\n10 9\n5 11\n8 1\n15 12\n9 11\n6 9\n4 2\n6 2\n9 1\n14 5\n10 4\n6 5\n14 1\n15 8\n3 15\n11 13\n15 13\n8 3\n10 1\n8 13\n12 2\n10 13\n4 8\n8 10\n7 9\n1 4\n3 11\n12 6\n1 6\n10 7\n8 7\n7 14\n1 7\n5 12\n6 10\n1 2\n5 10\n12 7\n2 14\n1 11\n6 13\n9 8\n2 13\n5 9\n",
    "vertices": [
      3,
      1
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 19 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 8, 12\nVertex 2: 6, 3, 7\nVertex 3: 2, 15\nVertex 4: 16, 12, 6\nVertex 5: 8\nVertex 6: 1, 2, 16, 9, 11, 14, 15, 4\nVertex 7: 2, 10\nVertex 8: 1, 5\nVertex 9: 6, 16\nVertex 10: 7\nVertex 11: 6\nVertex 12: 4, 1\nVertex 13: 15\nVertex 14: 6\nVertex 15: 3, 13, 6\nVertex 16: 6, 4, 9\n",
    "graph_output": "16 19\n1 6\n6 2\n6 16\n6 9\n6 11\n2 3\n2 7\n1 8\n16 4\n4 12\n7 10\n6 14\n8 5\n3 15\n15 13\n9 16\n12 1\n6 15\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 14 to vertex 1 in the weighted graph.\n\nUndirected, Weighted Graph with 15 vertices and 94 edges\n\nEdges (Format: Node Node Weight):\n1 2 45\n2 7 28\n7 13 11\n13 12 28\n2 6 52\n2 15 91\n1 14 56\n1 5 88\n14 10 15\n12 3 14\n7 11 99\n12 8 68\n1 4 88\n3 9 81\n10 6 9\n7 5 82\n12 6 81\n10 2 71\n9 6 22\n13 2 58\n10 8 31\n15 8 10\n6 8 89\n9 5 23\n15 9 75\n4 5 87\n11 1 51\n10 7 69\n7 1 19\n5 10 38\n2 11 51\n7 4 70\n10 15 78\n11 8 5\n1 12 47\n12 4 58\n4 9 94\n1 15 96\n11 13 43\n2 3 87\n4 2 56\n4 8 72\n2 8 23\n4 11 51\n1 8 53\n13 15 70\n7 15 6\n13 4 32\n14 13 2\n11 12 76\n3 4 3\n3 8 63\n10 4 69\n11 10 86\n8 14 88\n3 7 51\n14 6 22\n10 9 90\n14 2 10\n14 3 90\n13 10 18\n5 3 66\n5 13 12\n6 1 19\n13 3 8\n5 12 78\n1 3 23\n10 3 2\n10 1 66\n6 13 77\n15 11 76\n12 10 80\n3 11 4\n8 9 29\n15 4 44\n9 7 54\n9 13 39\n8 7 88\n11 14 64\n6 4 85\n9 2 33\n14 12 21\n9 1 99\n12 15 9\n5 8 80\n5 11 82\n2 5 39\n2 12 6\n9 11 46\n11 6 70\n12 7 5\n15 5 42\n6 7 90\n6 15 77\n",
    "graph_output": "15 94\n1 2 45\n2 7 28\n7 13 11\n13 12 28\n2 6 52\n2 15 91\n1 14 56\n1 5 88\n14 10 15\n12 3 14\n7 11 99\n12 8 68\n1 4 88\n3 9 81\n10 6 9\n7 5 82\n12 6 81\n10 2 71\n9 6 22\n13 2 58\n10 8 31\n15 8 10\n6 8 89\n9 5 23\n15 9 75\n4 5 87\n11 1 51\n10 7 69\n7 1 19\n5 10 38\n2 11 51\n7 4 70\n10 15 78\n11 8 5\n1 12 47\n12 4 58\n4 9 94\n1 15 96\n11 13 43\n2 3 87\n4 2 56\n4 8 72\n2 8 23\n4 11 51\n1 8 53\n13 15 70\n7 15 6\n13 4 32\n14 13 2\n11 12 76\n3 4 3\n3 8 63\n10 4 69\n11 10 86\n8 14 88\n3 7 51\n14 6 22\n10 9 90\n14 2 10\n14 3 90\n13 10 18\n5 3 66\n5 13 12\n6 1 19\n13 3 8\n5 12 78\n1 3 23\n10 3 2\n10 1 66\n6 13 77\n15 11 76\n12 10 80\n3 11 4\n8 9 29\n15 4 44\n9 7 54\n9 13 39\n8 7 88\n11 14 64\n6 4 85\n9 2 33\n14 12 21\n9 1 99\n12 15 9\n5 8 80\n5 11 82\n2 5 39\n2 12 6\n9 11 46\n11 6 70\n12 7 5\n15 5 42\n6 7 90\n6 15 77\n",
    "vertices": [
      14,
      1
    ],
    "answer": 32,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 17 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 6\n6 14\n14 8\n14 16\n8 9\n14 5\n5 4\n1 7\n6 11\n14 12\n12 13\n1 3\n1 10\n10 2\n13 15\n2 17\n6 16\n7 17\n6 13\n10 4\n10 5\n12 16\n12 6\n16 13\n15 1\n9 15\n6 17\n3 11\n8 12\n1 16\n",
    "graph_output": "17 30\n1 6\n6 14\n14 8\n14 16\n8 9\n14 5\n5 4\n1 7\n6 11\n14 12\n12 13\n1 3\n1 10\n10 2\n13 15\n2 17\n6 16\n7 17\n6 13\n10 4\n10 5\n12 16\n12 6\n16 13\n15 1\n9 15\n6 17\n3 11\n8 12\n1 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 44 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   0   1   1   1   0   1   1   1 \n 2 |  1   0   1   1   0   1   1   1   1   1   1 \n 3 |  1   1   0   0   1   1   1   1   0   1   1 \n 4 |  0   1   0   0   1   1   1   1   1   1   0 \n 5 |  1   0   1   1   0   0   1   0   1   1   1 \n 6 |  1   1   1   1   0   0   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1 \n 8 |  0   1   1   1   0   1   1   0   1   0   1 \n 9 |  1   1   0   1   1   1   1   1   0   0   0 \n10 |  1   1   1   1   1   1   1   0   0   0   1 \n11 |  1   1   1   0   1   1   1   1   0   1   0 \n",
    "graph_output": "11 44\n3 11\n6 7\n4 2\n5 3\n8 9\n11 5\n3 2\n11 1\n1 10\n6 8\n6 3\n7 8\n1 3\n2 6\n7 3\n5 1\n3 10\n4 8\n7 9\n11 8\n1 7\n5 4\n2 10\n6 9\n10 6\n6 11\n8 2\n4 7\n11 10\n9 2\n10 5\n2 1\n11 7\n6 4\n4 9\n10 4\n6 1\n7 2\n7 5\n5 9\n8 3\n1 9\n11 2\n10 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 111 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 2 and vertex 17.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 17 and vertex 15.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 5 and vertex 17.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 17 and vertex 11.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 17 and vertex 16.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 9 and vertex 17.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 17 and vertex 13.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 17 and vertex 1.\n",
    "graph_output": "17 111\n1 15\n1 2\n2 14\n15 4\n2 5\n2 13\n5 6\n5 16\n5 10\n15 9\n2 17\n14 8\n1 11\n1 3\n16 12\n16 7\n2 4\n14 16\n10 4\n6 17\n1 9\n2 11\n6 12\n4 8\n11 14\n7 8\n17 15\n6 15\n13 6\n6 2\n12 1\n10 8\n6 4\n13 5\n9 16\n6 10\n11 12\n9 8\n12 7\n14 3\n9 3\n6 11\n16 3\n5 17\n5 11\n3 6\n1 4\n3 8\n4 14\n11 9\n16 8\n11 10\n1 8\n2 8\n10 7\n14 10\n9 13\n15 8\n12 15\n10 12\n1 5\n12 5\n12 17\n17 11\n10 15\n7 11\n3 2\n16 13\n15 2\n3 17\n16 1\n9 14\n2 12\n7 2\n16 10\n1 6\n17 16\n14 1\n15 14\n7 15\n13 11\n11 15\n14 7\n10 2\n7 6\n2 9\n3 13\n12 4\n9 6\n17 4\n14 17\n8 13\n2 16\n14 5\n9 12\n9 17\n15 13\n12 3\n10 9\n3 4\n5 4\n7 13\n17 13\n10 1\n1 7\n11 3\n16 15\n7 5\n3 15\n5 9\n17 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 10 and 1 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 25, 28, 20, 15\nVertex 2: 9, 27\nVertex 3: 17, 4\nVertex 4: 3\nVertex 5: 22, 24\nVertex 6: 9\nVertex 7: 20\nVertex 8: 13\nVertex 9: 20, 2, 29, 6\nVertex 10: 22\nVertex 11: 1, 19, 23\nVertex 12: 26\nVertex 13: 31, 8, 30\nVertex 14: 20\nVertex 15: 1\nVertex 16: 28\nVertex 17: 25, 3\nVertex 18: 23\nVertex 19: 11, 31, 21\nVertex 20: 1, 22, 9, 14, 7\nVertex 21: 19\nVertex 22: 20, 10, 5\nVertex 23: 11, 18\nVertex 24: 5\nVertex 25: 1, 17, 26\nVertex 26: 25, 12\nVertex 27: 2\nVertex 28: 1, 16\nVertex 29: 9\nVertex 30: 13\nVertex 31: 19, 13\n",
    "graph_output": "31 30\n1 11\n11 19\n19 31\n19 21\n1 25\n1 28\n1 20\n25 17\n20 22\n17 3\n11 23\n20 9\n1 15\n22 10\n9 2\n9 29\n22 5\n23 18\n31 13\n20 14\n13 8\n5 24\n3 4\n20 7\n2 27\n25 26\n13 30\n28 16\n26 12\n9 6\n",
    "vertices": [
      10,
      1
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 4 (source) to vertex 12 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 56 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 13 (capacity=6), 8 (capacity=8), 2 (capacity=9), 4 (capacity=9), 5 (capacity=9), 12 (capacity=1), 7 (capacity=7), 3 (capacity=1), 10 (capacity=4), 11 (capacity=2)\nVertex 2: 1 (capacity=9), 6 (capacity=2), 10 (capacity=5), 9 (capacity=8), 7 (capacity=5), 8 (capacity=5), 4 (capacity=6), 12 (capacity=9), 13 (capacity=2), 3 (capacity=6)\nVertex 3: 9 (capacity=8), 11 (capacity=3), 6 (capacity=10), 12 (capacity=3), 8 (capacity=1), 7 (capacity=3), 2 (capacity=6), 10 (capacity=3), 1 (capacity=1)\nVertex 4: 5 (capacity=5), 1 (capacity=9), 12 (capacity=10), 9 (capacity=4), 2 (capacity=6), 8 (capacity=8), 10 (capacity=10)\nVertex 5: 10 (capacity=3), 4 (capacity=5), 7 (capacity=10), 12 (capacity=3), 6 (capacity=1), 11 (capacity=3), 13 (capacity=4), 1 (capacity=9)\nVertex 6: 2 (capacity=2), 5 (capacity=1), 3 (capacity=10), 7 (capacity=8), 13 (capacity=5), 10 (capacity=9), 11 (capacity=1)\nVertex 7: 8 (capacity=6), 5 (capacity=10), 13 (capacity=4), 2 (capacity=5), 11 (capacity=6), 6 (capacity=8), 3 (capacity=3), 1 (capacity=7), 10 (capacity=4), 9 (capacity=9)\nVertex 8: 1 (capacity=8), 7 (capacity=6), 10 (capacity=1), 13 (capacity=2), 2 (capacity=5), 4 (capacity=8), 3 (capacity=1)\nVertex 9: 13 (capacity=4), 3 (capacity=8), 2 (capacity=8), 12 (capacity=4), 10 (capacity=5), 4 (capacity=4), 11 (capacity=6), 7 (capacity=9)\nVertex 10: 2 (capacity=5), 5 (capacity=3), 12 (capacity=8), 8 (capacity=1), 9 (capacity=5), 6 (capacity=9), 3 (capacity=3), 7 (capacity=4), 4 (capacity=10), 1 (capacity=4), 13 (capacity=4)\nVertex 11: 3 (capacity=3), 5 (capacity=3), 9 (capacity=6), 7 (capacity=6), 6 (capacity=1), 1 (capacity=2), 12 (capacity=8)\nVertex 12: 10 (capacity=8), 5 (capacity=3), 9 (capacity=4), 13 (capacity=3), 4 (capacity=10), 3 (capacity=3), 1 (capacity=1), 2 (capacity=9), 11 (capacity=8)\nVertex 13: 1 (capacity=6), 9 (capacity=4), 7 (capacity=4), 12 (capacity=3), 8 (capacity=2), 5 (capacity=4), 6 (capacity=5), 2 (capacity=2), 10 (capacity=4)\n",
    "graph_output": "13 56\n1 13 6\n1 8 8\n1 2 9\n13 9 4\n2 6 2\n2 10 5\n10 5 3\n10 12 8\n9 3 8\n3 11 3\n8 7 6\n5 4 5\n7 5 10\n10 8 1\n9 2 8\n12 5 3\n7 13 4\n4 1 9\n6 5 1\n9 12 4\n13 12 3\n13 8 2\n4 12 10\n10 9 5\n11 5 3\n9 4 4\n2 7 5\n3 6 10\n2 8 5\n9 11 6\n5 13 4\n11 7 6\n2 4 6\n4 8 8\n7 6 8\n3 12 3\n1 5 9\n8 3 1\n6 13 5\n1 12 1\n3 7 3\n12 2 9\n2 13 2\n10 6 9\n3 2 6\n1 7 7\n10 3 3\n1 3 1\n6 11 1\n10 7 4\n10 4 10\n9 7 9\n1 10 4\n11 1 2\n10 13 4\n12 11 8\n",
    "vertices": [
      4,
      12
    ],
    "answer": 49,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 26 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 10 and vertex 5.\n",
    "graph_output": "15 26\n14 11\n14 10\n14 12\n13 11\n12 1\n8 4\n3 12\n15 1\n14 5\n15 3\n4 2\n2 11\n1 2\n2 13\n5 3\n2 3\n3 10\n6 9\n8 12\n13 10\n11 1\n1 8\n10 11\n6 14\n3 8\n10 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 110 edges\n\nEdges (Format: Node Node):\n1 13\n13 4\n1 9\n4 16\n1 3\n4 11\n13 12\n4 7\n3 10\n11 5\n11 14\n1 2\n5 6\n13 15\n15 8\n15 9\n3 14\n7 13\n6 2\n14 4\n1 16\n1 15\n5 2\n11 1\n8 10\n5 13\n10 13\n2 13\n7 12\n15 14\n16 6\n7 10\n2 10\n12 6\n7 9\n8 14\n2 8\n10 1\n10 14\n8 7\n13 11\n7 14\n6 13\n15 6\n14 13\n14 16\n6 4\n4 9\n11 16\n2 7\n10 4\n7 15\n11 2\n9 13\n8 13\n5 16\n14 6\n16 12\n15 16\n8 9\n12 5\n5 4\n7 16\n8 16\n7 11\n11 12\n9 12\n9 10\n12 15\n4 1\n8 6\n8 5\n3 6\n10 5\n5 7\n15 2\n8 4\n14 12\n6 11\n3 11\n12 10\n8 3\n4 3\n10 16\n9 16\n10 6\n3 16\n13 3\n1 14\n1 7\n14 9\n12 4\n12 1\n2 3\n14 2\n13 16\n11 9\n10 15\n2 4\n5 3\n6 7\n1 5\n11 15\n9 6\n12 3\n9 2\n3 9\n5 9\n2 12\n14 5\n",
    "graph_output": "16 110\n1 13\n13 4\n1 9\n4 16\n1 3\n4 11\n13 12\n4 7\n3 10\n11 5\n11 14\n1 2\n5 6\n13 15\n15 8\n15 9\n3 14\n7 13\n6 2\n14 4\n1 16\n1 15\n5 2\n11 1\n8 10\n5 13\n10 13\n2 13\n7 12\n15 14\n16 6\n7 10\n2 10\n12 6\n7 9\n8 14\n2 8\n10 1\n10 14\n8 7\n13 11\n7 14\n6 13\n15 6\n14 13\n14 16\n6 4\n4 9\n11 16\n2 7\n10 4\n7 15\n11 2\n9 13\n8 13\n5 16\n14 6\n16 12\n15 16\n8 9\n12 5\n5 4\n7 16\n8 16\n7 11\n11 12\n9 12\n9 10\n12 15\n4 1\n8 6\n8 5\n3 6\n10 5\n5 7\n15 2\n8 4\n14 12\n6 11\n3 11\n12 10\n8 3\n4 3\n10 16\n9 16\n10 6\n3 16\n13 3\n1 14\n1 7\n14 9\n12 4\n12 1\n2 3\n14 2\n13 16\n11 9\n10 15\n2 4\n5 3\n6 7\n1 5\n11 15\n9 6\n12 3\n9 2\n3 9\n5 9\n2 12\n14 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 25 edges\n\nEdges (Format: Node Node):\n1 12\n12 13\n12 4\n12 5\n4 6\n4 3\n6 8\n3 2\n5 9\n4 11\n6 14\n9 7\n4 16\n14 15\n4 10\n2 8\n2 12\n2 10\n10 8\n16 11\n1 2\n9 13\n3 16\n3 10\n2 4\n",
    "graph_output": "16 25\n1 12\n12 13\n12 4\n12 5\n4 6\n4 3\n6 8\n3 2\n5 9\n4 11\n6 14\n9 7\n4 16\n14 15\n4 10\n2 8\n2 12\n2 10\n10 8\n16 11\n1 2\n9 13\n3 16\n3 10\n2 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 15 to vertex 6 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 119 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0  37  61  37  46  33  28  22  82  47  98  41  86  38  88  20 \n 2 | 37   0  39  49  25  89  95  22  16  24  46  31  73  96   4  64 \n 3 | 61  39   0  35  40  20  41  98  96  88  96  44  31  18  95  68 \n 4 | 37  49  35   0  69  68  18  35  32  42  71   3  89  27  69  19 \n 5 | 46  25  40  69   0  43  16  79  76  19  45   6   0   6  54  21 \n 6 | 33  89  20  68  43   0  21  67  32  75  57  89  11  86  87  81 \n 7 | 28  95  41  18  16  21   0  44  97  91  59  69  29  81   1  41 \n 8 | 22  22  98  35  79  67  44   0  38  53  39  26  10  66  73  23 \n 9 | 82  16  96  32  76  32  97  38   0  54  83  25  42  11  86  93 \n10 | 47  24  88  42  19  75  91  53  54   0  53  67  93   5  10  35 \n11 | 98  46  96  71  45  57  59  39  83  53   0  37   2  41  86  65 \n12 | 41  31  44   3   6  89  69  26  25  67  37   0  23  99  74  58 \n13 | 86  73  31  89   0  11  29  10  42  93   2  23   0  21 100  12 \n14 | 38  96  18  27   6  86  81  66  11   5  41  99  21   0  86  90 \n15 | 88   4  95  69  54  87   1  73  86  10  86  74 100  86   0  55 \n16 | 20  64  68  19  21  81  41  23  93  35  65  58  12  90  55   0 \n",
    "graph_output": "16 119\n1 8 22\n1 3 61\n8 9 38\n8 12 26\n8 5 79\n3 15 95\n1 13 86\n5 2 25\n12 4 3\n8 10 53\n12 11 37\n4 16 19\n3 7 41\n2 14 96\n13 6 11\n7 10 91\n12 2 31\n7 9 97\n6 11 57\n5 4 69\n12 16 58\n5 16 21\n1 12 41\n1 5 46\n5 6 43\n13 10 93\n11 15 86\n4 15 69\n10 4 42\n5 15 54\n9 15 86\n15 16 55\n7 14 81\n13 12 23\n16 6 81\n3 4 35\n13 15 100\n5 14 6\n8 2 22\n4 7 18\n9 14 11\n14 15 86\n2 4 49\n14 13 21\n11 2 46\n6 3 20\n12 6 89\n3 2 39\n3 16 68\n16 7 41\n8 3 98\n14 6 86\n10 15 10\n11 3 96\n5 12 6\n3 10 88\n13 3 31\n9 2 16\n6 15 87\n9 4 32\n8 6 67\n1 9 82\n16 9 93\n11 8 39\n15 8 73\n12 15 74\n6 10 75\n1 11 98\n6 2 89\n7 2 95\n4 11 71\n15 7 1\n12 7 69\n14 10 5\n6 7 21\n16 8 23\n2 1 37\n12 9 25\n10 2 24\n11 16 65\n16 13 12\n9 6 32\n4 14 27\n9 11 83\n6 1 33\n2 16 64\n8 13 10\n14 8 66\n4 6 68\n16 1 20\n14 1 38\n9 13 42\n11 5 45\n5 9 76\n4 1 37\n3 5 40\n8 4 35\n1 15 88\n3 9 96\n11 14 41\n10 5 19\n10 16 35\n11 10 53\n7 8 44\n9 10 54\n16 14 90\n15 2 4\n3 12 44\n11 13 2\n13 2 73\n11 7 59\n7 5 16\n1 10 47\n3 14 18\n7 1 28\n4 13 89\n7 13 29\n10 12 67\n14 12 99\n",
    "vertices": [
      15,
      6
    ],
    "answer": 22,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 23 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 5 and vertex 1.\n",
    "graph_output": "16 23\n1 6\n1 14\n14 9\n6 11\n1 16\n11 12\n16 2\n14 8\n12 4\n6 10\n6 7\n9 5\n12 13\n11 15\n16 3\n3 6\n10 2\n12 8\n4 10\n10 3\n2 6\n2 13\n5 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 16 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9 with a weight of 84.\nThere is an edge between vertex 9 and vertex 7 with a weight of 82.\nThere is an edge between vertex 7 and vertex 3 with a weight of 12.\nThere is an edge between vertex 1 and vertex 6 with a weight of 32.\nThere is an edge between vertex 6 and vertex 5 with a weight of 59.\nThere is an edge between vertex 7 and vertex 2 with a weight of 28.\nThere is an edge between vertex 5 and vertex 10 with a weight of 42.\nThere is an edge between vertex 7 and vertex 4 with a weight of 20.\nThere is an edge between vertex 10 and vertex 13 with a weight of 94.\nThere is an edge between vertex 1 and vertex 11 with a weight of 51.\nThere is an edge between vertex 11 and vertex 8 with a weight of 39.\nThere is an edge between vertex 9 and vertex 12 with a weight of 29.\nThere is an edge between vertex 11 and vertex 13 with a weight of 20.\nThere is an edge between vertex 11 and vertex 12 with a weight of 59.\nThere is an edge between vertex 6 and vertex 2 with a weight of 99.\nThere is an edge between vertex 1 and vertex 12 with a weight of 1.\n",
    "graph_output": "13 16\n1 9 84\n9 7 82\n7 3 12\n1 6 32\n6 5 59\n7 2 28\n5 10 42\n7 4 20\n10 13 94\n1 11 51\n11 8 39\n9 12 29\n11 13 20\n11 12 59\n6 2 99\n1 12 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 423,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 5 (source) to vertex 8 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 21 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   0   0   1   0   0   1   1   1   0   0 \n 2 |  0   0   0   0   0   0   1   0   0   0   1   0 \n 3 |  0   0   0   1   0   0   0   1   0   1   0   0 \n 4 |  0   0   1   0   1   0   0   0   0   0   0   1 \n 5 |  1   0   0   1   0   0   0   0   0   0   1   0 \n 6 |  0   0   0   0   0   0   0   1   0   0   1   0 \n 7 |  0   1   0   0   0   0   0   0   1   1   1   0 \n 8 |  1   0   1   0   0   1   0   0   0   0   1   1 \n 9 |  1   0   0   0   0   0   1   0   0   1   0   0 \n10 |  1   0   1   0   0   0   1   0   1   0   0   1 \n11 |  0   1   0   0   1   1   1   1   0   0   0   0 \n12 |  0   0   0   1   0   0   0   1   0   1   0   0 \n\nCapacity Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   0   0  10   0   0   9   9   4   0   0 \n 2 |  0   0   0   0   0   0   8   0   0   0   1   0 \n 3 |  0   0   0   3   0   0   0   8   0  10   0   0 \n 4 |  0   0   3   0   3   0   0   0   0   0   0   9 \n 5 | 10   0   0   3   0   0   0   0   0   0  10   0 \n 6 |  0   0   0   0   0   0   0   8   0   0   8   0 \n 7 |  0   8   0   0   0   0   0   0  10   6   2   0 \n 8 |  9   0   8   0   0   8   0   0   0   0   9   4 \n 9 |  9   0   0   0   0   0  10   0   0  10   0   0 \n10 |  4   0  10   0   0   0   6   0  10   0   0   8 \n11 |  0   1   0   0  10   8   2   9   0   0   0   0 \n12 |  0   0   0   9   0   0   0   4   0   8   0   0 \n",
    "graph_output": "12 21\n1 8 9\n8 11 9\n11 2 1\n11 5 10\n1 10 4\n11 6 8\n1 9 9\n10 12 8\n10 7 6\n12 4 9\n4 3 3\n7 2 8\n12 8 4\n3 8 8\n3 10 10\n9 10 10\n7 11 2\n8 6 8\n9 7 10\n1 5 10\n4 5 3\n",
    "vertices": [
      5,
      8
    ],
    "answer": 23,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 24 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 4 and vertex 12.\n",
    "graph_output": "13 24\n3 6\n9 4\n9 13\n11 10\n10 1\n13 11\n12 8\n8 9\n5 10\n10 7\n11 1\n4 6\n4 11\n1 12\n3 2\n5 1\n2 8\n1 7\n12 5\n4 7\n8 13\n1 8\n11 12\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 10 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (6\u00d76):\n\n      1   2   3   4   5   6\n   ------------------------\n 1 |  0   1   0   1   0   1 \n 2 |  1   0   1   0   1   1 \n 3 |  0   1   0   1   1   0 \n 4 |  1   0   1   0   1   0 \n 5 |  0   1   1   1   0   1 \n 6 |  1   1   0   0   1   0 \n",
    "graph_output": "6 10\n1 4\n4 3\n1 6\n4 5\n5 2\n2 3\n2 6\n1 2\n6 5\n3 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 130,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 5 (source) to vertex 9 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 8 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 9 (weight=78, capacity=8), 5 (weight=48, capacity=6), 3 (weight=45, capacity=5), 7 (weight=13, capacity=4)\nVertex 2: 9 (weight=54, capacity=10), 6 (weight=26, capacity=10)\nVertex 3: 1 (weight=45, capacity=5)\nVertex 4: 9 (weight=86, capacity=4)\nVertex 5: 1 (weight=48, capacity=6), 8 (weight=71, capacity=1)\nVertex 6: 2 (weight=26, capacity=10)\nVertex 7: 1 (weight=13, capacity=4)\nVertex 8: 5 (weight=71, capacity=1)\nVertex 9: 1 (weight=78, capacity=8), 2 (weight=54, capacity=10), 4 (weight=86, capacity=4)\n",
    "graph_output": "9 8\n1 9 78 8\n1 5 48 6\n9 2 54 10\n1 3 45 5\n5 8 71 1\n2 6 26 10\n1 7 13 4\n9 4 86 4\n",
    "vertices": [
      5,
      9
    ],
    "answer": 756,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   1   0   1   0   0   0   1   0   1   1   1   0 \n 2 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   1 \n 3 |  0   0   0   0   0   0   0   0   1   0   0   0   0   1   1 \n 4 |  1   0   0   0   0   1   0   1   0   0   1   0   0   0   0 \n 5 |  0   0   0   0   0   0   1   0   1   0   0   0   0   1   0 \n 6 |  1   0   0   1   0   0   0   0   1   0   1   0   0   0   1 \n 7 |  0   0   0   0   1   0   0   1   1   0   0   1   0   0   0 \n 8 |  0   0   0   1   0   0   1   0   0   0   0   1   0   0   0 \n 9 |  0   1   1   0   1   1   1   0   0   0   0   0   1   0   1 \n10 |  1   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n11 |  0   0   0   1   0   1   0   0   0   0   0   0   1   1   0 \n12 |  1   0   0   0   0   0   1   1   0   1   0   0   0   0   0 \n13 |  1   0   0   0   0   0   0   0   1   0   1   0   0   0   0 \n14 |  1   0   1   0   1   0   0   0   0   0   1   0   0   0   1 \n15 |  0   1   1   0   0   1   0   0   1   0   0   0   0   1   0 \n",
    "graph_output": "15 30\n1 12\n1 14\n1 13\n1 10\n14 3\n3 9\n14 15\n9 7\n15 6\n7 8\n9 5\n14 11\n9 2\n8 4\n11 6\n12 7\n6 4\n9 13\n3 15\n15 9\n5 7\n9 6\n4 1\n10 12\n14 5\n8 12\n15 2\n11 4\n6 1\n11 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 11 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 11 and vertex 6.\n",
    "graph_output": "11 11\n4 9\n10 1\n10 2\n3 10\n4 10\n5 9\n11 1\n10 6\n5 8\n11 3\n11 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 107 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 8, 2, 13, 17, 6, 7, 14, 5, 16, 11, 10, 9, 3, 15, 12\nVertex 2: 1, 11, 14, 13, 5, 16, 8, 9, 3\nVertex 3: 4, 14, 10, 17, 12, 5, 15, 13, 6, 7, 1, 8, 2\nVertex 4: 1, 3, 12, 17, 16, 7, 14, 6, 11, 8, 13, 15, 5, 9\nVertex 5: 16, 13, 3, 15, 2, 12, 14, 1, 17, 7, 4, 6, 11, 9\nVertex 6: 8, 17, 1, 10, 4, 15, 16, 11, 3, 12, 7, 5\nVertex 7: 10, 11, 8, 4, 12, 1, 15, 17, 5, 6, 3, 14, 16\nVertex 8: 1, 13, 6, 9, 15, 7, 16, 2, 10, 14, 17, 4, 3\nVertex 9: 8, 11, 10, 17, 15, 2, 1, 4, 5\nVertex 10: 3, 7, 9, 15, 6, 16, 8, 1, 13, 14\nVertex 11: 2, 7, 9, 13, 14, 4, 17, 12, 15, 16, 6, 1, 5\nVertex 12: 4, 3, 17, 7, 14, 5, 13, 15, 11, 6, 1\nVertex 13: 8, 16, 1, 11, 5, 2, 14, 15, 17, 12, 3, 4, 10\nVertex 14: 3, 2, 13, 11, 12, 15, 4, 5, 1, 17, 8, 7, 10\nVertex 15: 8, 13, 5, 10, 14, 7, 6, 3, 12, 9, 11, 17, 16, 4, 1\nVertex 16: 13, 5, 4, 8, 17, 2, 10, 1, 11, 6, 15, 7\nVertex 17: 4, 1, 6, 3, 16, 12, 9, 13, 14, 7, 8, 11, 5, 15\n",
    "graph_output": "17 107\n1 4\n1 8\n8 13\n4 3\n3 14\n4 12\n1 2\n4 17\n13 16\n8 6\n8 9\n2 11\n3 10\n16 5\n10 7\n8 15\n13 1\n1 17\n11 7\n11 9\n8 7\n17 6\n4 16\n16 8\n17 3\n3 12\n4 7\n11 13\n5 13\n14 2\n10 9\n17 16\n13 2\n13 14\n3 5\n11 14\n15 13\n15 5\n17 12\n10 15\n7 12\n2 5\n17 9\n12 14\n2 16\n14 15\n1 6\n4 14\n10 6\n12 5\n14 5\n17 13\n7 1\n7 15\n8 2\n10 16\n8 10\n1 14\n1 5\n12 13\n6 4\n14 17\n6 15\n8 14\n4 11\n16 1\n15 3\n3 13\n17 7\n8 17\n11 17\n4 8\n4 13\n12 15\n9 15\n11 12\n15 11\n16 11\n16 6\n6 11\n3 6\n1 11\n17 5\n1 10\n15 17\n16 15\n2 9\n5 7\n9 1\n4 15\n5 4\n12 6\n6 7\n4 9\n7 3\n7 14\n16 7\n1 3\n1 15\n5 6\n11 5\n9 5\n3 8\n1 12\n2 3\n13 10\n10 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 130 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 3, 4, 12, 16, 9, 5, 15, 14, 8, 6, 13, 17, 10, 7\nVertex 2: 1, 6, 7, 8, 16, 15, 13, 9, 4, 5, 14, 11, 3, 17, 12\nVertex 3: 1, 12, 9, 17, 7, 8, 10, 14, 11, 15, 16, 4, 2, 6, 13, 5\nVertex 4: 1, 5, 10, 6, 7, 17, 15, 13, 2, 12, 9, 3, 8, 11, 14\nVertex 5: 4, 9, 13, 12, 17, 8, 6, 1, 2, 16, 11, 15, 10, 14, 3\nVertex 6: 2, 15, 16, 14, 4, 12, 10, 7, 13, 5, 8, 17, 1, 9, 3, 11\nVertex 7: 2, 14, 8, 10, 13, 16, 15, 3, 4, 6, 12, 11, 17, 9, 1\nVertex 8: 7, 2, 3, 11, 15, 5, 14, 6, 1, 13, 17, 4, 9, 16, 12, 10\nVertex 9: 3, 5, 13, 12, 2, 16, 1, 11, 4, 14, 7, 10, 6, 8, 15\nVertex 10: 14, 13, 4, 7, 6, 3, 17, 12, 15, 16, 1, 9, 5, 8\nVertex 11: 16, 13, 8, 14, 15, 7, 12, 3, 9, 2, 5, 17, 4, 6\nVertex 12: 3, 6, 1, 14, 13, 5, 10, 9, 7, 11, 4, 15, 16, 8, 2, 17\nVertex 13: 10, 7, 11, 9, 5, 12, 2, 17, 4, 6, 14, 15, 1, 8, 16, 3\nVertex 14: 7, 10, 6, 12, 11, 3, 8, 1, 2, 13, 9, 15, 17, 5, 16, 4\nVertex 15: 6, 7, 16, 2, 11, 17, 8, 4, 10, 1, 3, 13, 12, 14, 5, 9\nVertex 16: 6, 11, 7, 15, 2, 1, 9, 10, 17, 3, 5, 13, 8, 12, 14\nVertex 17: 3, 5, 10, 15, 13, 4, 7, 6, 16, 1, 14, 8, 11, 2, 12\n",
    "graph_output": "17 130\n1 2\n2 6\n2 7\n6 15\n7 14\n1 3\n7 8\n3 12\n6 16\n16 11\n14 10\n3 9\n3 17\n10 13\n1 4\n4 5\n8 2\n10 4\n6 14\n5 9\n7 10\n4 6\n7 13\n16 7\n15 7\n13 11\n13 9\n6 12\n3 7\n3 8\n1 12\n14 12\n5 13\n6 10\n7 4\n8 11\n16 15\n12 13\n2 16\n5 12\n11 14\n2 15\n13 2\n11 15\n17 5\n10 3\n14 3\n16 1\n17 10\n17 15\n8 15\n13 17\n10 12\n6 7\n9 12\n9 2\n4 17\n5 8\n16 9\n8 14\n4 15\n12 7\n4 13\n1 9\n6 13\n5 6\n8 6\n11 7\n10 15\n5 1\n7 17\n2 4\n1 15\n12 11\n1 14\n2 5\n2 14\n17 6\n14 13\n11 3\n10 16\n9 11\n8 1\n1 6\n4 12\n9 4\n11 2\n3 15\n15 13\n17 16\n16 3\n13 1\n17 1\n14 9\n15 12\n10 1\n4 3\n7 9\n3 2\n15 14\n17 14\n9 10\n16 5\n5 11\n8 13\n15 5\n13 16\n17 8\n8 4\n6 9\n8 9\n3 6\n8 16\n10 5\n15 9\n16 12\n11 17\n12 8\n8 10\n7 1\n14 5\n2 17\n4 11\n12 2\n13 3\n5 3\n12 17\n11 6\n14 16\n4 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 31 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   1   0   0   0   1   0   0   1   0   0   1 \n 2 |  0   0   0   1   0   0   0   1   0   0   0   0   0   1   1   1   0 \n 3 |  0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0 \n 4 |  0   1   0   0   0   1   0   0   0   0   1   1   0   0   0   1   0 \n 5 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   1   1   0   0   0   1   0   0   0   1   1   1   1   0   0 \n 7 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 8 |  0   1   0   0   1   1   0   0   0   0   0   0   1   0   0   0   1 \n 9 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   1   0   1   1   1   1   0   0   0 \n11 |  1   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   1 \n12 |  0   0   0   1   0   1   0   0   0   1   0   0   0   0   0   0   1 \n13 |  0   0   0   0   0   1   0   1   0   1   0   0   0   0   0   0   0 \n14 |  1   1   1   0   0   1   0   0   0   1   0   0   0   0   0   0   0 \n15 |  0   1   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0 \n16 |  0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  1   0   0   0   0   0   0   1   0   0   1   1   0   0   0   0   0 \n",
    "graph_output": "17 31\n1 7\n1 14\n1 11\n11 4\n11 17\n17 12\n17 8\n14 6\n4 2\n2 15\n8 5\n6 13\n4 16\n11 10\n10 9\n14 3\n7 15\n10 14\n6 8\n6 12\n6 15\n8 13\n4 12\n16 2\n17 1\n4 6\n8 2\n3 6\n14 2\n13 10\n12 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 20 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 6 and vertex 7.\n",
    "graph_output": "12 20\n3 7\n2 10\n6 2\n12 10\n5 2\n7 11\n11 4\n5 12\n12 8\n9 5\n7 12\n3 6\n8 1\n8 10\n12 1\n5 10\n3 4\n12 6\n5 6\n6 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 10 (source) to vertex 3 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 34 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4 with a weight of 93 and a capacity of 8.\nThere is an edge between vertex 1 and vertex 3 with a weight of 13 and a capacity of 5.\nThere is an edge between vertex 3 and vertex 10 with a weight of 2 and a capacity of 4.\nThere is an edge between vertex 1 and vertex 5 with a weight of 46 and a capacity of 4.\nThere is an edge between vertex 1 and vertex 2 with a weight of 27 and a capacity of 6.\nThere is an edge between vertex 3 and vertex 9 with a weight of 98 and a capacity of 10.\nThere is an edge between vertex 3 and vertex 6 with a weight of 100 and a capacity of 8.\nThere is an edge between vertex 6 and vertex 11 with a weight of 72 and a capacity of 7.\nThere is an edge between vertex 9 and vertex 8 with a weight of 11 and a capacity of 2.\nThere is an edge between vertex 10 and vertex 7 with a weight of 32 and a capacity of 3.\nThere is an edge between vertex 11 and vertex 10 with a weight of 72 and a capacity of 1.\nThere is an edge between vertex 9 and vertex 11 with a weight of 68 and a capacity of 10.\nThere is an edge between vertex 10 and vertex 8 with a weight of 22 and a capacity of 9.\nThere is an edge between vertex 8 and vertex 6 with a weight of 76 and a capacity of 8.\nThere is an edge between vertex 2 and vertex 11 with a weight of 15 and a capacity of 4.\nThere is an edge between vertex 8 and vertex 1 with a weight of 82 and a capacity of 4.\nThere is an edge between vertex 1 and vertex 6 with a weight of 46 and a capacity of 5.\nThere is an edge between vertex 9 and vertex 2 with a weight of 70 and a capacity of 1.\nThere is an edge between vertex 8 and vertex 3 with a weight of 98 and a capacity of 1.\nThere is an edge between vertex 3 and vertex 5 with a weight of 73 and a capacity of 8.\nThere is an edge between vertex 2 and vertex 8 with a weight of 86 and a capacity of 9.\nThere is an edge between vertex 4 and vertex 2 with a weight of 90 and a capacity of 6.\nThere is an edge between vertex 9 and vertex 6 with a weight of 29 and a capacity of 2.\nThere is an edge between vertex 10 and vertex 9 with a weight of 98 and a capacity of 5.\nThere is an edge between vertex 10 and vertex 4 with a weight of 14 and a capacity of 9.\nThere is an edge between vertex 6 and vertex 7 with a weight of 92 and a capacity of 3.\nThere is an edge between vertex 7 and vertex 2 with a weight of 83 and a capacity of 4.\nThere is an edge between vertex 5 and vertex 2 with a weight of 6 and a capacity of 2.\nThere is an edge between vertex 6 and vertex 4 with a weight of 51 and a capacity of 2.\nThere is an edge between vertex 7 and vertex 3 with a weight of 31 and a capacity of 2.\nThere is an edge between vertex 10 and vertex 6 with a weight of 30 and a capacity of 1.\nThere is an edge between vertex 5 and vertex 4 with a weight of 12 and a capacity of 2.\nThere is an edge between vertex 7 and vertex 5 with a weight of 66 and a capacity of 3.\nThere is an edge between vertex 4 and vertex 11 with a weight of 9 and a capacity of 5.\n",
    "graph_output": "11 34\n1 4 93 8\n1 3 13 5\n3 10 2 4\n1 5 46 4\n1 2 27 6\n3 9 98 10\n3 6 100 8\n6 11 72 7\n9 8 11 2\n10 7 32 3\n11 10 72 1\n9 11 68 10\n10 8 22 9\n8 6 76 8\n2 11 15 4\n8 1 82 4\n1 6 46 5\n9 2 70 1\n8 3 98 1\n3 5 73 8\n2 8 86 9\n4 2 90 6\n9 6 29 2\n10 9 98 5\n10 4 14 9\n6 7 92 3\n7 2 83 4\n5 2 6 2\n6 4 51 2\n7 3 31 2\n10 6 30 1\n5 4 12 2\n7 5 66 3\n4 11 9 5\n",
    "vertices": [
      10,
      3
    ],
    "answer": 4087,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 16 vertices and 93 edges\n\nEdges (Format: Node Node):\n6 14\n16 13\n1 6\n10 1\n7 6\n15 10\n13 14\n16 2\n6 2\n5 7\n10 12\n9 2\n8 1\n16 10\n8 10\n12 8\n4 9\n5 14\n11 15\n16 11\n11 14\n9 5\n13 8\n14 3\n13 11\n6 11\n10 5\n3 10\n10 11\n15 13\n2 13\n9 3\n5 13\n12 2\n14 9\n1 9\n2 10\n7 1\n15 1\n6 9\n3 15\n7 14\n9 8\n11 5\n15 8\n8 5\n8 14\n15 2\n16 8\n7 9\n13 12\n1 12\n6 10\n5 4\n12 6\n5 16\n7 13\n4 6\n14 12\n15 6\n4 2\n15 7\n13 3\n2 5\n13 10\n16 9\n4 3\n3 5\n9 12\n11 4\n11 12\n11 9\n11 7\n15 9\n11 1\n14 16\n14 15\n4 15\n13 1\n13 9\n11 2\n1 4\n14 1\n15 16\n2 1\n6 5\n7 2\n15 12\n16 1\n10 7\n10 4\n4 14\n12 4\n",
    "graph_output": "16 93\n6 14\n16 13\n1 6\n10 1\n7 6\n15 10\n13 14\n16 2\n6 2\n5 7\n10 12\n9 2\n8 1\n16 10\n8 10\n12 8\n4 9\n5 14\n11 15\n16 11\n11 14\n9 5\n13 8\n14 3\n13 11\n6 11\n10 5\n3 10\n10 11\n15 13\n2 13\n9 3\n5 13\n12 2\n14 9\n1 9\n2 10\n7 1\n15 1\n6 9\n3 15\n7 14\n9 8\n11 5\n15 8\n8 5\n8 14\n15 2\n16 8\n7 9\n13 12\n1 12\n6 10\n5 4\n12 6\n5 16\n7 13\n4 6\n14 12\n15 6\n4 2\n15 7\n13 3\n2 5\n13 10\n16 9\n4 3\n3 5\n9 12\n11 4\n11 12\n11 9\n11 7\n15 9\n11 1\n14 16\n14 15\n4 15\n13 1\n13 9\n11 2\n1 4\n14 1\n15 16\n2 1\n6 5\n7 2\n15 12\n16 1\n10 7\n10 4\n4 14\n12 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 84 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   0   0   0   1   1   0   1   0   1   1   1   1   1   1 \n 4 |  1   1   0   0   1   1   1   1   0   0   1   1   1   0   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   0   1   1 \n 6 |  0   1   1   1   1   0   0   1   1   1   1   0   1   1   1 \n 7 |  1   1   0   1   1   0   0   1   1   0   1   0   1   0   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   0   1   1   0   1 \n 9 |  1   1   0   0   1   1   1   1   0   1   1   1   1   0   1 \n10 |  1   1   1   0   1   1   0   1   1   0   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   0   1   1   0   1   0   1   1 \n12 |  1   1   1   1   1   0   0   1   1   1   1   0   0   1   0 \n13 |  1   1   1   1   0   1   1   1   1   1   0   0   0   1   1 \n14 |  1   1   1   0   1   1   0   0   0   1   1   1   1   0   0 \n15 |  1   1   1   1   1   1   1   1   1   1   1   0   1   0   0 \n",
    "graph_output": "15 84\n1 2\n2 11\n11 4\n1 5\n4 7\n1 15\n4 6\n11 9\n11 10\n10 12\n11 3\n4 8\n4 13\n5 14\n12 14\n5 4\n1 4\n9 6\n15 7\n5 8\n14 11\n10 8\n9 13\n15 8\n6 10\n7 11\n1 11\n5 15\n3 8\n7 2\n9 10\n5 10\n6 8\n2 13\n1 8\n15 3\n8 9\n10 1\n6 2\n1 7\n2 15\n4 2\n1 14\n15 10\n14 3\n1 9\n12 11\n10 14\n12 4\n2 9\n12 5\n1 13\n13 6\n14 13\n6 3\n2 5\n2 10\n11 5\n15 6\n3 12\n15 13\n14 6\n3 5\n10 3\n13 7\n10 13\n4 15\n3 1\n7 8\n11 15\n6 5\n5 7\n9 5\n6 11\n13 3\n13 8\n2 8\n12 2\n8 12\n14 2\n12 1\n12 9\n7 9\n9 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 16 vertices and 113 edges\n\nEdges (Format: Node Node):\n16 15\n3 11\n14 1\n7 8\n7 4\n8 9\n4 9\n3 6\n13 3\n12 16\n11 14\n9 16\n5 13\n3 8\n15 6\n7 11\n8 10\n8 2\n7 2\n13 1\n10 7\n12 10\n16 4\n4 10\n9 3\n14 12\n11 16\n5 2\n8 16\n16 5\n15 14\n9 10\n1 2\n14 3\n5 7\n6 8\n10 16\n3 16\n9 14\n4 5\n14 2\n13 15\n6 16\n11 13\n12 8\n13 9\n2 16\n6 14\n4 11\n7 15\n15 8\n3 1\n10 15\n10 14\n6 4\n2 13\n4 1\n11 6\n14 16\n1 16\n10 3\n1 9\n5 14\n6 1\n13 12\n15 4\n8 5\n15 2\n13 10\n4 14\n15 5\n13 16\n12 4\n7 13\n11 9\n1 15\n1 11\n4 3\n6 5\n11 12\n15 3\n14 7\n11 15\n8 11\n13 4\n12 9\n5 11\n10 6\n5 12\n5 3\n8 13\n2 9\n7 16\n14 13\n9 5\n12 6\n1 8\n1 10\n3 2\n5 1\n4 2\n14 8\n6 9\n4 8\n3 7\n7 1\n13 6\n12 15\n5 10\n1 12\n9 7\n10 2\n7 6\n",
    "graph_output": "16 113\n16 15\n3 11\n14 1\n7 8\n7 4\n8 9\n4 9\n3 6\n13 3\n12 16\n11 14\n9 16\n5 13\n3 8\n15 6\n7 11\n8 10\n8 2\n7 2\n13 1\n10 7\n12 10\n16 4\n4 10\n9 3\n14 12\n11 16\n5 2\n8 16\n16 5\n15 14\n9 10\n1 2\n14 3\n5 7\n6 8\n10 16\n3 16\n9 14\n4 5\n14 2\n13 15\n6 16\n11 13\n12 8\n13 9\n2 16\n6 14\n4 11\n7 15\n15 8\n3 1\n10 15\n10 14\n6 4\n2 13\n4 1\n11 6\n14 16\n1 16\n10 3\n1 9\n5 14\n6 1\n13 12\n15 4\n8 5\n15 2\n13 10\n4 14\n15 5\n13 16\n12 4\n7 13\n11 9\n1 15\n1 11\n4 3\n6 5\n11 12\n15 3\n14 7\n11 15\n8 11\n13 4\n12 9\n5 11\n10 6\n5 12\n5 3\n8 13\n2 9\n7 16\n14 13\n9 5\n12 6\n1 8\n1 10\n3 2\n5 1\n4 2\n14 8\n6 9\n4 8\n3 7\n7 1\n13 6\n12 15\n5 10\n1 12\n9 7\n10 2\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 116 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 5 and vertex 17.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 17 and vertex 16.\nThere is an edge between vertex 17 and vertex 13.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 7 and vertex 17.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 9 and vertex 17.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 17 and vertex 1.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 17 and vertex 11.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 3 and vertex 11.\n",
    "graph_output": "17 116\n1 9\n9 2\n2 7\n2 3\n3 12\n9 14\n2 4\n4 15\n2 6\n1 13\n14 10\n13 8\n10 5\n5 17\n13 11\n17 16\n17 13\n15 5\n11 5\n3 17\n7 11\n7 1\n5 2\n7 17\n5 12\n15 7\n4 7\n3 10\n14 4\n8 3\n11 1\n8 10\n3 4\n9 4\n1 5\n15 17\n12 7\n7 5\n8 5\n3 14\n9 17\n9 3\n12 17\n12 6\n8 12\n10 11\n3 1\n12 2\n4 5\n17 1\n16 7\n16 2\n6 17\n2 13\n16 15\n4 13\n11 6\n17 11\n8 14\n16 5\n3 16\n15 8\n6 13\n10 4\n11 9\n7 14\n9 10\n10 1\n4 11\n12 11\n17 4\n15 13\n7 3\n6 1\n14 11\n9 5\n4 8\n7 8\n11 15\n7 9\n16 4\n16 6\n1 16\n13 3\n15 10\n12 14\n9 15\n5 3\n4 1\n4 6\n15 6\n4 12\n13 16\n15 3\n12 16\n14 2\n7 13\n6 9\n12 10\n12 15\n1 8\n14 5\n14 6\n2 15\n2 11\n8 9\n2 8\n11 8\n15 1\n9 16\n8 6\n7 10\n1 14\n10 13\n16 8\n3 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 13 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 3, 7, 2\nVertex 2: 4, 8, 1\nVertex 3: 1, 8, 6\nVertex 4: 1, 6, 2, 7\nVertex 5: 6\nVertex 6: 4, 5, 8, 3\nVertex 7: 1, 8, 4\nVertex 8: 2, 3, 6, 7\n",
    "graph_output": "8 13\n1 4\n4 6\n6 5\n1 3\n1 7\n4 2\n2 8\n3 8\n2 1\n6 8\n7 8\n4 7\n6 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 399,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 16 vertices and 117 edges\n\nEdges (Format: Node Node):\n11 12\n1 13\n8 7\n5 13\n3 12\n15 10\n2 9\n14 4\n15 8\n13 6\n9 16\n8 14\n7 6\n8 2\n13 7\n13 2\n14 2\n5 3\n14 3\n4 11\n15 12\n8 6\n3 4\n14 6\n16 4\n11 3\n16 8\n10 11\n12 16\n1 8\n6 1\n9 14\n13 14\n5 11\n9 4\n9 11\n11 1\n8 11\n14 15\n14 5\n1 14\n9 12\n13 11\n3 13\n9 1\n7 12\n4 6\n16 10\n6 16\n1 3\n15 3\n7 5\n11 6\n5 16\n6 15\n11 14\n15 7\n6 9\n15 13\n8 13\n7 16\n4 2\n5 15\n1 2\n2 7\n9 10\n15 9\n5 10\n16 1\n7 3\n12 8\n1 5\n1 10\n7 10\n4 8\n3 10\n10 14\n9 5\n4 15\n1 4\n14 7\n3 6\n10 12\n15 2\n16 3\n8 9\n10 8\n2 12\n14 12\n16 15\n16 2\n7 1\n9 13\n6 10\n10 4\n12 4\n16 13\n2 10\n2 5\n12 13\n7 9\n6 5\n3 2\n10 13\n1 12\n12 5\n8 3\n6 2\n7 4\n2 11\n13 4\n16 14\n7 11\n15 11\n6 12\n9 3\n4 5\n",
    "graph_output": "16 117\n11 12\n1 13\n8 7\n5 13\n3 12\n15 10\n2 9\n14 4\n15 8\n13 6\n9 16\n8 14\n7 6\n8 2\n13 7\n13 2\n14 2\n5 3\n14 3\n4 11\n15 12\n8 6\n3 4\n14 6\n16 4\n11 3\n16 8\n10 11\n12 16\n1 8\n6 1\n9 14\n13 14\n5 11\n9 4\n9 11\n11 1\n8 11\n14 15\n14 5\n1 14\n9 12\n13 11\n3 13\n9 1\n7 12\n4 6\n16 10\n6 16\n1 3\n15 3\n7 5\n11 6\n5 16\n6 15\n11 14\n15 7\n6 9\n15 13\n8 13\n7 16\n4 2\n5 15\n1 2\n2 7\n9 10\n15 9\n5 10\n16 1\n7 3\n12 8\n1 5\n1 10\n7 10\n4 8\n3 10\n10 14\n9 5\n4 15\n1 4\n14 7\n3 6\n10 12\n15 2\n16 3\n8 9\n10 8\n2 12\n14 12\n16 15\n16 2\n7 1\n9 13\n6 10\n10 4\n12 4\n16 13\n2 10\n2 5\n12 13\n7 9\n6 5\n3 2\n10 13\n1 12\n12 5\n8 3\n6 2\n7 4\n2 11\n13 4\n16 14\n7 11\n15 11\n6 12\n9 3\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 8 and vertex 6 are connected.\n\nThis is an undirected graph with 15 vertices and 91 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 4, 14, 11, 8, 12, 7, 6, 10, 13, 2\nVertex 2: 14, 7, 13, 9, 10, 5, 12, 11, 4, 8, 1, 15\nVertex 3: 14, 1, 7, 9, 11, 8, 15, 6, 4, 12, 13, 5\nVertex 4: 8, 5, 10, 9, 12, 1, 13, 14, 3, 15, 11, 6, 2\nVertex 5: 4, 7, 9, 2, 10, 13, 12, 6, 3, 15\nVertex 6: 15, 9, 10, 12, 14, 3, 13, 8, 4, 1, 5, 7\nVertex 7: 2, 5, 11, 3, 13, 12, 10, 8, 1, 14, 6\nVertex 8: 12, 4, 13, 11, 3, 1, 7, 15, 6, 14, 9, 2\nVertex 9: 5, 4, 6, 10, 2, 13, 3, 15, 11, 12, 8, 14\nVertex 10: 4, 6, 9, 2, 5, 7, 13, 1, 14, 12, 11, 15\nVertex 11: 13, 7, 8, 15, 14, 3, 1, 12, 4, 9, 2, 10\nVertex 12: 8, 6, 4, 7, 14, 1, 13, 11, 3, 2, 9, 5, 15, 10\nVertex 13: 11, 14, 2, 8, 9, 7, 4, 15, 12, 6, 5, 10, 3, 1\nVertex 14: 2, 13, 3, 1, 11, 6, 12, 4, 15, 8, 10, 9, 7\nVertex 15: 6, 11, 9, 3, 13, 4, 8, 14, 5, 12, 2, 10\n",
    "graph_output": "15 91\n6 15\n8 12\n13 11\n8 4\n2 14\n5 4\n2 7\n14 13\n5 7\n9 5\n10 4\n14 3\n9 4\n9 6\n6 10\n12 6\n13 2\n9 10\n4 12\n2 9\n2 10\n5 2\n3 1\n13 8\n1 4\n7 11\n1 14\n11 8\n15 11\n3 7\n9 13\n11 14\n9 3\n13 7\n14 6\n3 11\n9 15\n10 5\n12 7\n3 8\n4 13\n10 7\n3 15\n1 11\n3 6\n15 13\n12 14\n1 8\n1 12\n4 14\n12 13\n12 11\n3 4\n7 8\n6 13\n15 4\n13 5\n12 3\n10 13\n8 15\n12 2\n4 11\n11 9\n1 7\n14 15\n11 2\n6 8\n8 14\n4 6\n6 1\n9 12\n5 12\n1 10\n5 6\n9 8\n4 2\n14 10\n9 14\n7 14\n13 3\n5 3\n15 5\n15 12\n1 13\n10 12\n10 11\n2 8\n2 1\n7 6\n15 2\n15 10\n",
    "vertices": [
      8,
      6
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 6 vertices and 8 edges\n\nEdges (Format: Node Node):\n1 2\n1 3\n2 4\n2 6\n1 5\n4 1\n4 5\n3 5\n",
    "graph_output": "6 8\n1 2\n1 3\n2 4\n2 6\n1 5\n4 1\n4 5\n3 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 21,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 26 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 2, 11, 8, 9\nVertex 2: 1, 9\nVertex 3: 5, 4\nVertex 4: 9, 5, 3\nVertex 5: 10, 3, 13, 4, 14, 11\nVertex 6: 12, 9, 15\nVertex 7: 1, 12, 15, 10, 9\nVertex 8: 10, 1, 9\nVertex 9: 4, 2, 7, 6, 13, 8, 1\nVertex 10: 5, 7, 8\nVertex 11: 1, 5, 14\nVertex 12: 7, 6, 13\nVertex 13: 5, 9, 12\nVertex 14: 5, 11\nVertex 15: 7, 6\n",
    "graph_output": "15 26\n5 10\n1 7\n2 1\n12 7\n4 9\n11 1\n12 6\n3 5\n2 9\n15 7\n7 10\n5 13\n5 4\n7 9\n8 10\n5 14\n9 6\n13 9\n3 4\n12 13\n5 11\n1 8\n14 11\n6 15\n9 8\n1 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "list"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 29 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 15\n15 24\n24 28\n15 18\n1 17\n28 6\n24 14\n17 20\n18 13\n28 23\n20 12\n28 21\n14 11\n20 29\n17 27\n15 2\n6 10\n17 8\n13 26\n21 7\n1 25\n29 3\n24 22\n21 16\n6 5\n26 4\n7 9\n4 19\n",
    "graph_output": "29 28\n1 15\n15 24\n24 28\n15 18\n1 17\n28 6\n24 14\n17 20\n18 13\n28 23\n20 12\n28 21\n14 11\n20 29\n17 27\n15 2\n6 10\n17 8\n13 26\n21 7\n1 25\n29 3\n24 22\n21 16\n6 5\n26 4\n7 9\n4 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 16,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 11, 7\nVertex 2: 13, 3, 1, 12, 6\nVertex 3: 2, 14, 5, 16, 8\nVertex 4: 11, 6, 5, 12\nVertex 5: 3, 4\nVertex 6: 12, 4, 2, 15\nVertex 7: 8, 14, 1, 15\nVertex 8: 12, 7, 9, 10, 3\nVertex 9: 15, 8\nVertex 10: 8\nVertex 11: 17, 4, 14, 1\nVertex 12: 8, 16, 6, 2, 4\nVertex 13: 2, 15\nVertex 14: 3, 11, 16, 7\nVertex 15: 9, 13, 7, 6\nVertex 16: 12, 17, 14, 3\nVertex 17: 11, 16\n",
    "graph_output": "17 30\n12 8\n17 11\n16 12\n13 2\n3 2\n14 3\n4 11\n11 14\n15 9\n2 1\n16 17\n8 7\n1 11\n16 14\n5 3\n6 12\n4 6\n9 8\n12 2\n16 3\n14 7\n13 15\n7 1\n7 15\n2 6\n10 8\n8 3\n5 4\n6 15\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 10 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 6, 2\nVertex 2: 5, 3, 6, 1\nVertex 3: 4, 2, 5\nVertex 4: 1, 3, 5\nVertex 5: 4, 2, 6, 3\nVertex 6: 1, 2, 5\n",
    "graph_output": "6 10\n1 4\n4 3\n1 6\n4 5\n5 2\n2 3\n2 6\n1 2\n6 5\n3 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 130,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 11 vertices and 22 edges\n\nEdges (Format: Node Node):\n1 2\n5 10\n10 4\n5 1\n10 7\n3 1\n6 5\n6 2\n5 7\n11 1\n6 3\n3 10\n2 11\n5 9\n9 4\n6 7\n10 9\n11 4\n7 4\n7 9\n11 5\n1 10\n",
    "graph_output": "11 22\n1 2\n5 10\n10 4\n5 1\n10 7\n3 1\n6 5\n6 2\n5 7\n11 1\n6 3\n3 10\n2 11\n5 9\n9 4\n6 7\n10 9\n11 4\n7 4\n7 9\n11 5\n1 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 15 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   1   0   0   0   0   1   0   0   1 \n 2 |  0   0   1   0   1   1   0   0   0   0   0 \n 3 |  1   1   0   1   1   0   0   0   0   0   1 \n 4 |  0   0   1   0   0   0   0   1   1   0   1 \n 5 |  0   1   1   0   0   0   0   0   0   0   1 \n 6 |  0   1   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   1   0 \n 8 |  1   0   0   1   0   0   0   0   0   0   0 \n 9 |  0   0   0   1   0   0   0   0   0   1   0 \n10 |  0   0   0   0   0   0   1   0   1   0   0 \n11 |  1   0   1   1   1   0   0   0   0   0   0 \n",
    "graph_output": "11 15\n2 5\n4 8\n10 7\n3 1\n4 11\n1 11\n1 8\n10 9\n2 3\n3 5\n2 6\n11 3\n3 4\n11 5\n4 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (30\u00d730):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n   ------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 2 |  0   0   0   1   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 4 |  0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 7 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n10 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n13 |  1   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n16 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0 \n17 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n21 |  0   0   0   0   0   0   0   1   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  1   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   1   0   0   0   0   0   0   1   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1 \n30 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n",
    "graph_output": "30 29\n1 10\n1 16\n1 24\n1 13\n10 25\n25 18\n13 21\n21 9\n13 2\n10 20\n24 11\n16 26\n13 15\n2 4\n11 14\n20 29\n21 8\n2 5\n25 3\n18 23\n13 27\n24 6\n16 22\n4 7\n15 28\n29 30\n14 19\n8 17\n25 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 8 (source) to vertex 6 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 10 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (10\u00d710):\n\n      1   2   3   4   5   6   7   8   9  10\n   ----------------------------------------\n 1 |  0   0   0   0   0   0   0  29   0   0 \n 2 |  0   0   0  53   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   7   0 \n 4 |  0  53   0   0  74   0  16   0   0   9 \n 5 |  0   0   0  74   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0  34   0   6 \n 7 |  0   0   0  16   0   0   0   0   0   0 \n 8 | 29   0   0   0   0  34   0   0  35  97 \n 9 |  0   0   7   0   0   0   0  35   0   0 \n10 |  0   0   0   9   0   6   0  97   0   0 \n\nCapacity Matrix (10\u00d710):\n\n      1   2   3   4   5   6   7   8   9  10\n   ----------------------------------------\n 1 |  0   0   0   0   0   0   0   5   0   0 \n 2 |  0   0   0   4   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   6   0 \n 4 |  0   4   0   0   5   0   5   0   0  10 \n 5 |  0   0   0   5   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   9   0   7 \n 7 |  0   0   0   5   0   0   0   0   0   0 \n 8 |  5   0   0   0   0   9   0   0   5   5 \n 9 |  0   0   6   0   0   0   0   5   0   0 \n10 |  0   0   0  10   0   7   0   5   0   0 \n",
    "graph_output": "10 10\n1 8 29 5\n8 10 97 5\n8 9 35 5\n10 4 9 10\n4 7 16 5\n4 5 74 5\n9 3 7 6\n4 2 53 4\n10 6 6 7\n6 8 34 9\n",
    "vertices": [
      8,
      6
    ],
    "answer": 821,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 3 (source) to vertex 1 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 40 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   1   1   1   1   0   1   1   1 \n 2 |  1   0   1   0   0   0   0   1   1   1   1 \n 3 |  1   1   0   0   1   1   1   0   1   1   1 \n 4 |  1   0   0   0   0   0   1   1   1   1   1 \n 5 |  1   0   1   0   0   1   0   0   1   1   1 \n 6 |  1   0   1   0   1   0   0   1   0   0   1 \n 7 |  1   0   1   1   0   0   0   1   1   1   0 \n 8 |  0   1   0   1   0   1   1   0   1   1   1 \n 9 |  1   1   1   1   1   0   1   1   0   1   1 \n10 |  1   1   1   1   1   0   1   1   1   0   1 \n11 |  1   1   1   1   1   1   0   1   1   1   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   9   8   1  10   8   6   0   8   7   8 \n 2 |  9   0   5   0   0   0   0   4   2   5   9 \n 3 |  8   5   0   0   4   8  10   0   5   6   8 \n 4 |  1   0   0   0   0   0   4   6   8   3   9 \n 5 | 10   0   4   0   0   2   0   0   6   2  10 \n 6 |  8   0   8   0   2   0   0   8   0   0   1 \n 7 |  6   0  10   4   0   0   0   2   6   8   0 \n 8 |  0   4   0   6   0   8   2   0   7   6   2 \n 9 |  8   2   5   8   6   0   6   7   0  10   3 \n10 |  7   5   6   3   2   0   8   6  10   0   5 \n11 |  8   9   8   9  10   1   0   2   3   5   0 \n",
    "graph_output": "11 40\n1 6 8\n1 2 9\n6 11 1\n11 3 8\n1 10 7\n3 5 4\n11 4 9\n3 7 10\n2 8 4\n7 9 6\n9 10 10\n5 6 2\n9 8 7\n10 4 3\n11 10 5\n1 9 8\n6 3 8\n1 3 8\n5 11 10\n4 1 1\n6 8 8\n2 10 5\n7 8 2\n9 4 8\n11 8 2\n10 8 6\n10 5 2\n11 2 9\n4 7 4\n9 2 2\n3 9 5\n7 1 6\n10 7 8\n8 4 6\n2 3 5\n10 3 6\n11 9 3\n1 5 10\n5 9 6\n11 1 8\n",
    "vertices": [
      3,
      1
    ],
    "answer": 54,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 9 (source) to vertex 7 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 38 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 9 (weight=92, capacity=3), 4 (weight=64, capacity=7), 10 (weight=10, capacity=4), 3 (weight=50, capacity=3), 5 (weight=71, capacity=1), 2 (weight=70, capacity=9), 8 (weight=29, capacity=3), 7 (weight=70, capacity=7)\nVertex 2: 6 (weight=8, capacity=7), 1 (weight=70, capacity=9), 3 (weight=32, capacity=10), 10 (weight=55, capacity=2), 4 (weight=7, capacity=7), 7 (weight=29, capacity=2)\nVertex 3: 1 (weight=50, capacity=3), 9 (weight=28, capacity=2), 7 (weight=98, capacity=4), 6 (weight=28, capacity=9), 2 (weight=32, capacity=10), 4 (weight=85, capacity=4), 10 (weight=30, capacity=3), 5 (weight=40, capacity=4), 8 (weight=64, capacity=10)\nVertex 4: 1 (weight=64, capacity=7), 6 (weight=52, capacity=9), 8 (weight=16, capacity=4), 5 (weight=67, capacity=4), 3 (weight=85, capacity=4), 2 (weight=7, capacity=7), 10 (weight=35, capacity=2), 7 (weight=48, capacity=4)\nVertex 5: 10 (weight=72, capacity=9), 7 (weight=35, capacity=4), 4 (weight=67, capacity=4), 1 (weight=71, capacity=1), 8 (weight=13, capacity=8), 3 (weight=40, capacity=4), 9 (weight=95, capacity=5)\nVertex 6: 4 (weight=52, capacity=9), 2 (weight=8, capacity=7), 3 (weight=28, capacity=9), 10 (weight=65, capacity=4), 8 (weight=58, capacity=8), 9 (weight=41, capacity=10), 7 (weight=26, capacity=8)\nVertex 7: 9 (weight=34, capacity=6), 5 (weight=35, capacity=4), 3 (weight=98, capacity=4), 1 (weight=70, capacity=7), 8 (weight=61, capacity=3), 2 (weight=29, capacity=2), 4 (weight=48, capacity=4), 6 (weight=26, capacity=8)\nVertex 8: 4 (weight=16, capacity=4), 9 (weight=3, capacity=4), 10 (weight=14, capacity=7), 6 (weight=58, capacity=8), 5 (weight=13, capacity=8), 1 (weight=29, capacity=3), 7 (weight=61, capacity=3), 3 (weight=64, capacity=10)\nVertex 9: 1 (weight=92, capacity=3), 7 (weight=34, capacity=6), 8 (weight=3, capacity=4), 3 (weight=28, capacity=2), 10 (weight=15, capacity=1), 6 (weight=41, capacity=10), 5 (weight=95, capacity=5)\nVertex 10: 1 (weight=10, capacity=4), 5 (weight=72, capacity=9), 9 (weight=15, capacity=1), 6 (weight=65, capacity=4), 8 (weight=14, capacity=7), 2 (weight=55, capacity=2), 4 (weight=35, capacity=2), 3 (weight=30, capacity=3)\n",
    "graph_output": "10 38\n1 9 92 3\n1 4 64 7\n1 10 10 4\n9 7 34 6\n4 6 52 9\n10 5 72 9\n4 8 16 4\n6 2 8 7\n1 3 50 3\n9 8 3 4\n5 7 35 4\n4 5 67 4\n9 3 28 2\n10 9 15 1\n1 5 71 1\n3 7 98 4\n2 1 70 9\n3 6 28 9\n6 10 65 4\n8 10 14 7\n2 3 32 10\n6 8 58 8\n3 4 85 4\n10 2 55 2\n8 5 13 8\n2 4 7 7\n8 1 29 3\n1 7 70 7\n10 4 35 2\n8 7 61 3\n7 2 29 2\n7 4 48 4\n6 9 41 10\n10 3 30 3\n5 3 40 4\n3 8 64 10\n6 7 26 8\n9 5 95 5\n",
    "vertices": [
      9,
      7
    ],
    "answer": 2658,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 38 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 10, 2, 11, 8, 3\nVertex 2: 9, 1, 3, 4, 5, 6, 8\nVertex 3: 11, 8, 10, 4, 2, 5, 7, 9, 1\nVertex 4: 9, 3, 11, 5, 7, 2\nVertex 5: 6, 10, 7, 4, 9, 2, 3, 8\nVertex 6: 5, 11, 9, 2, 8\nVertex 7: 1, 11, 5, 10, 4, 8, 3, 9\nVertex 8: 3, 10, 7, 6, 2, 9, 5, 1\nVertex 9: 2, 4, 6, 5, 8, 7, 3\nVertex 10: 1, 5, 11, 3, 8, 7\nVertex 11: 3, 10, 7, 4, 6, 1\n",
    "graph_output": "11 38\n9 2\n5 6\n11 3\n7 1\n10 1\n10 5\n11 10\n7 11\n3 8\n10 3\n8 10\n1 2\n9 4\n3 4\n2 3\n11 4\n7 5\n10 7\n5 4\n11 6\n9 6\n7 4\n2 4\n5 9\n5 2\n11 1\n7 8\n6 2\n3 5\n6 8\n8 2\n8 9\n3 7\n9 7\n3 9\n8 5\n8 1\n1 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nUndirected Graph with 30 vertices and 29 edges\n\nEdges (Format: Node Node):\n1 14\n1 30\n1 11\n1 20\n14 24\n20 15\n24 21\n15 18\n11 12\n20 2\n30 8\n20 9\n12 16\n2 7\n15 27\n8 10\n7 5\n20 13\n5 22\n12 17\n21 4\n10 26\n9 6\n22 25\n16 3\n30 29\n20 28\n28 19\n3 23\n",
    "graph_output": "30 29\n1 14\n1 30\n1 11\n1 20\n14 24\n20 15\n24 21\n15 18\n11 12\n20 2\n30 8\n20 9\n12 16\n2 7\n15 27\n8 10\n7 5\n20 13\n5 22\n12 17\n21 4\n10 26\n9 6\n22 25\n16 3\n30 29\n20 28\n28 19\n3 23\n",
    "vertices": [
      null,
      null
    ],
    "answer": 11,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 16 vertices and 21 edges\n\nEdges (Format: Node Node):\n1 6\n1 12\n1 7\n1 5\n1 11\n5 4\n12 9\n7 14\n7 3\n4 16\n11 15\n7 10\n6 13\n14 2\n13 8\n16 14\n6 15\n14 3\n9 16\n5 11\n5 3\n",
    "graph_output": "16 21\n1 6\n1 12\n1 7\n1 5\n1 11\n5 4\n12 9\n7 14\n7 3\n4 16\n11 15\n7 10\n6 13\n14 2\n13 8\n16 14\n6 15\n14 3\n9 16\n5 11\n5 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 7 vertices and 12 edges\n\nEdges (Format: Node Node):\n1 7\n7 3\n7 2\n1 6\n7 4\n7 5\n3 1\n6 2\n5 3\n6 3\n1 2\n4 5\n",
    "graph_output": "7 12\n1 7\n7 3\n7 2\n1 6\n7 4\n7 5\n3 1\n6 2\n5 3\n6 3\n1 2\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 297,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 5 (source) to vertex 3 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 17 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   1   1   0   1   0   0   0   0 \n 2 |  0   0   1   0   1   0   1   0   0   0   0 \n 3 |  0   1   0   1   0   0   0   0   0   1   0 \n 4 |  1   0   1   0   0   1   1   1   0   1   0 \n 5 |  1   1   0   0   0   1   0   0   1   0   0 \n 6 |  0   0   0   1   1   0   0   0   0   0   1 \n 7 |  1   1   0   1   0   0   0   0   0   1   1 \n 8 |  0   0   0   1   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   1   0   0   0   0   0   0 \n10 |  0   0   1   1   0   0   1   0   0   0   0 \n11 |  0   0   0   0   0   1   1   0   0   0   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   2   4   0   6   0   0   0   0 \n 2 |  0   0   6   0   4   0   1   0   0   0   0 \n 3 |  0   6   0   2   0   0   0   0   0   2   0 \n 4 |  2   0   2   0   0   3   2   8   0   1   0 \n 5 |  4   4   0   0   0  10   0   0   4   0   0 \n 6 |  0   0   0   3  10   0   0   0   0   0   8 \n 7 |  6   1   0   2   0   0   0   0   0   7   4 \n 8 |  0   0   0   8   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   4   0   0   0   0   0   0 \n10 |  0   0   2   1   0   0   7   0   0   0   0 \n11 |  0   0   0   0   0   8   4   0   0   0   0 \n",
    "graph_output": "11 17\n1 5 4\n5 6 10\n5 2 4\n6 11 8\n1 7 6\n6 4 3\n7 10 7\n4 8 8\n4 3 2\n5 9 4\n4 1 2\n2 7 1\n7 4 2\n3 10 2\n10 4 1\n2 3 6\n7 11 4\n",
    "vertices": [
      5,
      3
    ],
    "answer": 9,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nUndirected Graph with 31 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 7\n1 8\n1 5\n8 22\n8 13\n1 20\n1 6\n20 17\n20 16\n5 29\n7 31\n29 21\n1 9\n31 19\n8 28\n16 24\n28 10\n10 25\n7 15\n21 14\n21 23\n10 30\n15 26\n31 27\n23 12\n19 3\n21 2\n1 4\n4 11\n7 18\n",
    "graph_output": "31 30\n1 7\n1 8\n1 5\n8 22\n8 13\n1 20\n1 6\n20 17\n20 16\n5 29\n7 31\n29 21\n1 9\n31 19\n8 28\n16 24\n28 10\n10 25\n7 15\n21 14\n21 23\n10 30\n15 26\n31 27\n23 12\n19 3\n21 2\n1 4\n4 11\n7 18\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 6 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 99 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 12 with a weight of 19.\nThere is an edge between vertex 12 and vertex 9 with a weight of 19.\nThere is an edge between vertex 9 and vertex 5 with a weight of 51.\nThere is an edge between vertex 1 and vertex 11 with a weight of 99.\nThere is an edge between vertex 1 and vertex 14 with a weight of 61.\nThere is an edge between vertex 11 and vertex 7 with a weight of 33.\nThere is an edge between vertex 14 and vertex 13 with a weight of 84.\nThere is an edge between vertex 11 and vertex 6 with a weight of 30.\nThere is an edge between vertex 14 and vertex 2 with a weight of 5.\nThere is an edge between vertex 6 and vertex 4 with a weight of 23.\nThere is an edge between vertex 14 and vertex 10 with a weight of 48.\nThere is an edge between vertex 11 and vertex 8 with a weight of 90.\nThere is an edge between vertex 12 and vertex 15 with a weight of 41.\nThere is an edge between vertex 8 and vertex 3 with a weight of 86.\nThere is an edge between vertex 5 and vertex 6 with a weight of 33.\nThere is an edge between vertex 14 and vertex 15 with a weight of 12.\nThere is an edge between vertex 9 and vertex 7 with a weight of 6.\nThere is an edge between vertex 2 and vertex 8 with a weight of 74.\nThere is an edge between vertex 3 and vertex 4 with a weight of 40.\nThere is an edge between vertex 7 and vertex 10 with a weight of 53.\nThere is an edge between vertex 4 and vertex 9 with a weight of 72.\nThere is an edge between vertex 1 and vertex 2 with a weight of 63.\nThere is an edge between vertex 8 and vertex 6 with a weight of 73.\nThere is an edge between vertex 4 and vertex 11 with a weight of 75.\nThere is an edge between vertex 8 and vertex 9 with a weight of 30.\nThere is an edge between vertex 7 and vertex 15 with a weight of 15.\nThere is an edge between vertex 6 and vertex 7 with a weight of 9.\nThere is an edge between vertex 15 and vertex 11 with a weight of 83.\nThere is an edge between vertex 12 and vertex 11 with a weight of 44.\nThere is an edge between vertex 15 and vertex 6 with a weight of 5.\nThere is an edge between vertex 8 and vertex 14 with a weight of 12.\nThere is an edge between vertex 2 and vertex 11 with a weight of 100.\nThere is an edge between vertex 3 and vertex 2 with a weight of 55.\nThere is an edge between vertex 6 and vertex 14 with a weight of 18.\nThere is an edge between vertex 13 and vertex 8 with a weight of 41.\nThere is an edge between vertex 7 and vertex 12 with a weight of 54.\nThere is an edge between vertex 2 and vertex 15 with a weight of 64.\nThere is an edge between vertex 7 and vertex 4 with a weight of 92.\nThere is an edge between vertex 1 and vertex 8 with a weight of 54.\nThere is an edge between vertex 10 and vertex 9 with a weight of 2.\nThere is an edge between vertex 1 and vertex 3 with a weight of 22.\nThere is an edge between vertex 6 and vertex 1 with a weight of 93.\nThere is an edge between vertex 7 and vertex 5 with a weight of 33.\nThere is an edge between vertex 9 and vertex 15 with a weight of 44.\nThere is an edge between vertex 12 and vertex 5 with a weight of 7.\nThere is an edge between vertex 14 and vertex 3 with a weight of 74.\nThere is an edge between vertex 7 and vertex 3 with a weight of 77.\nThere is an edge between vertex 12 and vertex 10 with a weight of 80.\nThere is an edge between vertex 11 and vertex 5 with a weight of 79.\nThere is an edge between vertex 13 and vertex 9 with a weight of 49.\nThere is an edge between vertex 12 and vertex 8 with a weight of 45.\nThere is an edge between vertex 4 and vertex 14 with a weight of 41.\nThere is an edge between vertex 13 and vertex 10 with a weight of 13.\nThere is an edge between vertex 3 and vertex 10 with a weight of 3.\nThere is an edge between vertex 12 and vertex 2 with a weight of 33.\nThere is an edge between vertex 9 and vertex 2 with a weight of 41.\nThere is an edge between vertex 1 and vertex 5 with a weight of 17.\nThere is an edge between vertex 1 and vertex 15 with a weight of 62.\nThere is an edge between vertex 10 and vertex 1 with a weight of 8.\nThere is an edge between vertex 2 and vertex 5 with a weight of 7.\nThere is an edge between vertex 10 and vertex 5 with a weight of 42.\nThere is an edge between vertex 11 and vertex 14 with a weight of 73.\nThere is an edge between vertex 14 and vertex 5 with a weight of 28.\nThere is an edge between vertex 4 and vertex 2 with a weight of 20.\nThere is an edge between vertex 13 and vertex 1 with a weight of 11.\nThere is an edge between vertex 12 and vertex 14 with a weight of 83.\nThere is an edge between vertex 6 and vertex 13 with a weight of 5.\nThere is an edge between vertex 11 and vertex 9 with a weight of 21.\nThere is an edge between vertex 15 and vertex 5 with a weight of 95.\nThere is an edge between vertex 7 and vertex 2 with a weight of 43.\nThere is an edge between vertex 10 and vertex 11 with a weight of 6.\nThere is an edge between vertex 2 and vertex 13 with a weight of 84.\nThere is an edge between vertex 15 and vertex 4 with a weight of 39.\nThere is an edge between vertex 6 and vertex 9 with a weight of 6.\nThere is an edge between vertex 7 and vertex 14 with a weight of 85.\nThere is an edge between vertex 10 and vertex 4 with a weight of 88.\nThere is an edge between vertex 6 and vertex 12 with a weight of 2.\nThere is an edge between vertex 5 and vertex 8 with a weight of 48.\nThere is an edge between vertex 2 and vertex 10 with a weight of 69.\nThere is an edge between vertex 4 and vertex 12 with a weight of 68.\nThere is an edge between vertex 1 and vertex 4 with a weight of 23.\nThere is an edge between vertex 8 and vertex 4 with a weight of 58.\nThere is an edge between vertex 13 and vertex 12 with a weight of 87.\nThere is an edge between vertex 15 and vertex 3 with a weight of 28.\nThere is an edge between vertex 13 and vertex 3 with a weight of 61.\nThere is an edge between vertex 14 and vertex 9 with a weight of 50.\nThere is an edge between vertex 13 and vertex 5 with a weight of 84.\nThere is an edge between vertex 13 and vertex 4 with a weight of 30.\nThere is an edge between vertex 1 and vertex 9 with a weight of 31.\nThere is an edge between vertex 7 and vertex 1 with a weight of 46.\nThere is an edge between vertex 11 and vertex 13 with a weight of 21.\nThere is an edge between vertex 3 and vertex 12 with a weight of 35.\nThere is an edge between vertex 15 and vertex 13 with a weight of 8.\nThere is an edge between vertex 5 and vertex 4 with a weight of 59.\nThere is an edge between vertex 7 and vertex 8 with a weight of 23.\nThere is an edge between vertex 2 and vertex 6 with a weight of 29.\nThere is an edge between vertex 3 and vertex 11 with a weight of 21.\nThere is an edge between vertex 15 and vertex 8 with a weight of 47.\nThere is an edge between vertex 8 and vertex 10 with a weight of 67.\n",
    "graph_output": "15 99\n1 12 19\n12 9 19\n9 5 51\n1 11 99\n1 14 61\n11 7 33\n14 13 84\n11 6 30\n14 2 5\n6 4 23\n14 10 48\n11 8 90\n12 15 41\n8 3 86\n5 6 33\n14 15 12\n9 7 6\n2 8 74\n3 4 40\n7 10 53\n4 9 72\n1 2 63\n8 6 73\n4 11 75\n8 9 30\n7 15 15\n6 7 9\n15 11 83\n12 11 44\n15 6 5\n8 14 12\n2 11 100\n3 2 55\n6 14 18\n13 8 41\n7 12 54\n2 15 64\n7 4 92\n1 8 54\n10 9 2\n1 3 22\n6 1 93\n7 5 33\n9 15 44\n12 5 7\n14 3 74\n7 3 77\n12 10 80\n11 5 79\n13 9 49\n12 8 45\n4 14 41\n13 10 13\n3 10 3\n12 2 33\n9 2 41\n1 5 17\n1 15 62\n10 1 8\n2 5 7\n10 5 42\n11 14 73\n14 5 28\n4 2 20\n13 1 11\n12 14 83\n6 13 5\n11 9 21\n15 5 95\n7 2 43\n10 11 6\n2 13 84\n15 4 39\n6 9 6\n7 14 85\n10 4 88\n6 12 2\n5 8 48\n2 10 69\n4 12 68\n1 4 23\n8 4 58\n13 12 87\n15 3 28\n13 3 61\n14 9 50\n13 5 84\n13 4 30\n1 9 31\n7 1 46\n11 13 21\n3 12 35\n15 13 8\n5 4 59\n7 8 23\n2 6 29\n3 11 21\n15 8 47\n8 10 67\n",
    "vertices": [
      8,
      6
    ],
    "answer": 29,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 20 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (7\u00d77):\n\n      1   2   3   4   5   6   7\n   ----------------------------\n 1 |  0   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   0 \n 3 |  1   1   0   1   1   1   1 \n 4 |  1   1   1   0   1   1   1 \n 5 |  1   1   1   1   0   1   1 \n 6 |  1   1   1   1   1   0   1 \n 7 |  1   0   1   1   1   1   0 \n",
    "graph_output": "7 20\n1 6\n5 1\n6 7\n5 7\n2 5\n4 6\n2 1\n3 2\n5 3\n7 3\n5 4\n6 2\n7 1\n3 6\n2 4\n7 4\n1 3\n4 3\n6 5\n1 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 847,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 11 vertices and 50 edges\n\nEdges (Format: Node Node):\n11 2\n2 9\n3 7\n11 10\n3 10\n2 1\n1 5\n1 4\n9 5\n10 1\n8 6\n10 9\n2 4\n3 9\n7 9\n9 1\n11 5\n8 5\n10 4\n8 7\n8 3\n10 7\n8 10\n5 10\n6 9\n11 3\n7 1\n11 9\n9 8\n6 4\n11 1\n6 7\n6 2\n8 4\n11 6\n11 7\n5 3\n5 2\n5 7\n1 6\n4 11\n4 9\n11 8\n6 10\n4 7\n2 7\n3 6\n5 6\n4 5\n1 8\n",
    "graph_output": "11 50\n11 2\n2 9\n3 7\n11 10\n3 10\n2 1\n1 5\n1 4\n9 5\n10 1\n8 6\n10 9\n2 4\n3 9\n7 9\n9 1\n11 5\n8 5\n10 4\n8 7\n8 3\n10 7\n8 10\n5 10\n6 9\n11 3\n7 1\n11 9\n9 8\n6 4\n11 1\n6 7\n6 2\n8 4\n11 6\n11 7\n5 3\n5 2\n5 7\n1 6\n4 11\n4 9\n11 8\n6 10\n4 7\n2 7\n3 6\n5 6\n4 5\n1 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 126,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 15 vertices and 85 edges\n\nEdges (Format: Node Node):\n1 8\n8 2\n2 6\n8 7\n1 13\n7 14\n8 11\n8 10\n11 15\n6 3\n1 9\n8 4\n9 12\n13 5\n10 4\n11 14\n14 2\n6 8\n13 12\n10 5\n13 4\n1 5\n11 5\n2 1\n1 15\n15 7\n12 7\n2 9\n2 13\n2 15\n12 3\n9 5\n15 14\n5 2\n14 10\n14 1\n4 3\n8 5\n4 7\n15 13\n12 11\n7 2\n10 13\n12 15\n4 1\n3 2\n13 6\n12 14\n12 2\n13 3\n5 6\n15 4\n13 14\n3 1\n4 14\n10 1\n13 11\n3 10\n3 11\n10 12\n13 8\n7 10\n3 7\n10 2\n9 13\n11 6\n3 5\n7 6\n9 10\n5 15\n5 14\n9 8\n3 9\n6 12\n7 11\n10 11\n4 9\n14 9\n6 1\n1 7\n15 8\n15 6\n10 6\n4 11\n8 3\n",
    "graph_output": "15 85\n1 8\n8 2\n2 6\n8 7\n1 13\n7 14\n8 11\n8 10\n11 15\n6 3\n1 9\n8 4\n9 12\n13 5\n10 4\n11 14\n14 2\n6 8\n13 12\n10 5\n13 4\n1 5\n11 5\n2 1\n1 15\n15 7\n12 7\n2 9\n2 13\n2 15\n12 3\n9 5\n15 14\n5 2\n14 10\n14 1\n4 3\n8 5\n4 7\n15 13\n12 11\n7 2\n10 13\n12 15\n4 1\n3 2\n13 6\n12 14\n12 2\n13 3\n5 6\n15 4\n13 14\n3 1\n4 14\n10 1\n13 11\n3 10\n3 11\n10 12\n13 8\n7 10\n3 7\n10 2\n9 13\n11 6\n3 5\n7 6\n9 10\n5 15\n5 14\n9 8\n3 9\n6 12\n7 11\n10 11\n4 9\n14 9\n6 1\n1 7\n15 8\n15 6\n10 6\n4 11\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 18 and 23 in the given tree, with node 1 as the root.\n\nUndirected Graph with 29 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 23\n1 2\n1 5\n23 8\n1 18\n18 21\n18 13\n2 15\n21 12\n23 11\n8 25\n11 29\n23 22\n2 9\n9 19\n5 4\n8 3\n2 26\n18 10\n29 20\n12 14\n2 27\n14 7\n18 28\n13 17\n20 24\n27 6\n24 16\n",
    "graph_output": "29 28\n1 23\n1 2\n1 5\n23 8\n1 18\n18 21\n18 13\n2 15\n21 12\n23 11\n8 25\n11 29\n23 22\n2 9\n9 19\n5 4\n8 3\n2 26\n18 10\n29 20\n12 14\n2 27\n14 7\n18 28\n13 17\n20 24\n27 6\n24 16\n",
    "vertices": [
      18,
      23
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 22 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 4 and vertex 7.\n",
    "graph_output": "16 22\n1 14\n14 15\n1 3\n3 16\n1 11\n3 6\n1 5\n15 8\n14 13\n5 9\n1 7\n6 2\n11 10\n2 12\n12 4\n9 15\n6 1\n10 5\n15 4\n1 15\n8 11\n4 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 24 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7 with a weight of 53.\nThere is an edge between vertex 1 and vertex 11 with a weight of 78.\nThere is an edge between vertex 7 and vertex 2 with a weight of 56.\nThere is an edge between vertex 11 and vertex 9 with a weight of 71.\nThere is an edge between vertex 9 and vertex 13 with a weight of 47.\nThere is an edge between vertex 7 and vertex 3 with a weight of 39.\nThere is an edge between vertex 7 and vertex 14 with a weight of 97.\nThere is an edge between vertex 9 and vertex 10 with a weight of 47.\nThere is an edge between vertex 14 and vertex 15 with a weight of 64.\nThere is an edge between vertex 11 and vertex 5 with a weight of 3.\nThere is an edge between vertex 11 and vertex 8 with a weight of 10.\nThere is an edge between vertex 1 and vertex 6 with a weight of 14.\nThere is an edge between vertex 9 and vertex 12 with a weight of 20.\nThere is an edge between vertex 13 and vertex 4 with a weight of 85.\nThere is an edge between vertex 2 and vertex 16 with a weight of 45.\nThere is an edge between vertex 6 and vertex 13 with a weight of 7.\nThere is an edge between vertex 12 and vertex 10 with a weight of 100.\nThere is an edge between vertex 7 and vertex 15 with a weight of 76.\nThere is an edge between vertex 1 and vertex 8 with a weight of 27.\nThere is an edge between vertex 10 and vertex 1 with a weight of 42.\nThere is an edge between vertex 4 and vertex 3 with a weight of 55.\nThere is an edge between vertex 8 and vertex 3 with a weight of 91.\nThere is an edge between vertex 10 and vertex 13 with a weight of 81.\nThere is an edge between vertex 8 and vertex 4 with a weight of 43.\n",
    "graph_output": "16 24\n1 7 53\n1 11 78\n7 2 56\n11 9 71\n9 13 47\n7 3 39\n7 14 97\n9 10 47\n14 15 64\n11 5 3\n11 8 10\n1 6 14\n9 12 20\n13 4 85\n2 16 45\n6 13 7\n12 10 100\n7 15 76\n1 8 27\n10 1 42\n4 3 55\n8 3 91\n10 13 81\n8 4 43\n",
    "vertices": [
      null,
      null
    ],
    "answer": 546,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 1 to vertex 7 in the weighted graph.\n\nUndirected, Weighted Graph with 15 vertices and 16 edges\n\nEdges (Format: Node Node Weight):\n1 8 46\n8 12 22\n12 3 86\n1 11 8\n1 7 62\n7 13 79\n12 2 86\n2 14 9\n12 15 53\n1 5 34\n15 10 45\n10 6 79\n1 9 73\n14 4 84\n7 12 15\n9 12 24\n",
    "graph_output": "15 16\n1 8 46\n8 12 22\n12 3 86\n1 11 8\n1 7 62\n7 13 79\n12 2 86\n2 14 9\n12 15 53\n1 5 34\n15 10 45\n10 6 79\n1 9 73\n14 4 84\n7 12 15\n9 12 24\n",
    "vertices": [
      1,
      7
    ],
    "answer": 62,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 2 and vertex 15 are connected.\n\nThis is an undirected graph with 16 vertices and 27 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   1   1   0   0   0   1   1   0 \n 2 |  0   0   0   1   0   0   0   0   0   1   0   0   1   0   1   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   1   0   0   0   0   1   1   0   0   0   0   0   1   0   0 \n 5 |  0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0 \n 8 |  0   0   0   1   1   1   0   0   1   0   1   0   0   1   0   0 \n 9 |  1   0   0   0   0   0   1   1   0   0   0   1   0   1   1   1 \n10 |  1   1   0   0   1   0   0   0   0   0   0   0   0   1   0   0 \n11 |  0   0   0   0   0   0   0   1   0   0   0   1   1   0   0   0 \n12 |  0   0   0   0   0   0   0   0   1   0   1   0   0   1   0   1 \n13 |  0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n14 |  1   0   0   1   0   0   0   1   1   1   0   1   0   0   0   0 \n15 |  1   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0 \n",
    "graph_output": "16 27\n7 9\n10 1\n15 1\n9 12\n12 11\n14 9\n8 14\n5 10\n2 10\n11 13\n13 2\n16 12\n2 15\n6 8\n14 10\n9 1\n4 2\n4 14\n9 8\n16 9\n8 11\n14 1\n7 4\n12 14\n5 8\n15 9\n8 4\n",
    "vertices": [
      2,
      15
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 9 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (8\u00d78):\n\n      1   2   3   4   5   6   7   8\n   --------------------------------\n 1 |  0   1   0   1   1   0   0   0 \n 2 |  1   0   0   1   1   1   0   0 \n 3 |  0   0   0   1   0   0   0   0 \n 4 |  1   1   1   0   1   0   0   0 \n 5 |  1   1   0   1   0   0   0   1 \n 6 |  0   1   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   1   0   0   0 \n",
    "graph_output": "8 9\n8 5\n4 1\n2 4\n5 4\n3 4\n2 1\n2 5\n1 5\n2 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 125 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 17 and vertex 1.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 2 and vertex 17.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 17 and vertex 16.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 17 and vertex 3.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 17 and vertex 10.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 5 and vertex 17.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 17 and vertex 13.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 9 and vertex 17.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 11 and vertex 9.\n",
    "graph_output": "17 125\n1 12\n1 13\n13 3\n12 5\n5 8\n13 2\n1 9\n12 14\n8 6\n12 17\n9 10\n5 15\n1 16\n5 11\n17 4\n5 7\n3 10\n7 4\n11 1\n17 1\n6 12\n8 11\n9 14\n12 11\n3 14\n10 16\n9 3\n5 9\n10 2\n9 12\n11 10\n4 6\n16 5\n5 1\n2 17\n6 3\n16 11\n6 17\n14 1\n8 13\n15 3\n15 4\n2 16\n17 16\n2 5\n2 8\n3 5\n9 16\n15 17\n10 4\n16 6\n1 4\n5 13\n8 7\n15 13\n15 8\n1 6\n15 9\n17 7\n15 16\n17 3\n12 4\n9 7\n11 17\n7 15\n12 10\n1 10\n2 14\n6 2\n12 16\n8 12\n7 16\n9 4\n11 3\n6 14\n3 8\n6 9\n4 5\n5 10\n8 4\n6 5\n13 6\n10 15\n9 2\n15 11\n14 16\n17 10\n14 5\n17 8\n7 13\n3 16\n14 8\n2 1\n10 8\n4 16\n3 4\n7 3\n6 10\n2 15\n12 7\n10 14\n13 16\n11 14\n1 7\n7 14\n11 2\n13 12\n14 13\n4 14\n5 17\n4 2\n13 4\n1 15\n16 8\n17 13\n3 2\n6 7\n9 17\n2 7\n15 14\n6 15\n8 9\n11 6\n15 12\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 42 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 6, 5, 12, 2, 8\nVertex 2: 5, 12, 10, 11, 7, 4, 1, 9, 8\nVertex 3: 10, 5, 8, 1, 7, 4, 9, 11, 12\nVertex 4: 12, 8, 2, 3, 9, 6\nVertex 5: 2, 3, 12, 1, 11, 7, 8\nVertex 6: 11, 1, 10, 8, 4, 7\nVertex 7: 8, 3, 11, 2, 5, 10, 6\nVertex 8: 10, 3, 7, 4, 1, 2, 6, 5\nVertex 9: 10, 11, 2, 4, 3\nVertex 10: 11, 8, 3, 9, 2, 7, 6\nVertex 11: 6, 10, 2, 12, 9, 7, 5, 3\nVertex 12: 2, 11, 5, 4, 1, 3\n",
    "graph_output": "12 42\n6 11\n11 10\n10 8\n10 3\n5 2\n5 3\n9 10\n3 8\n12 2\n10 2\n7 8\n11 2\n3 1\n11 12\n1 6\n3 7\n12 5\n5 1\n11 9\n11 7\n12 4\n12 1\n2 7\n8 4\n5 11\n4 2\n2 1\n7 5\n9 2\n1 8\n3 4\n4 9\n7 10\n2 8\n6 10\n6 8\n5 8\n3 9\n4 6\n3 11\n6 7\n3 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 19 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 4 and vertex 6.\n",
    "graph_output": "16 19\n1 6\n6 2\n6 16\n6 9\n6 11\n2 3\n2 7\n1 8\n16 4\n4 12\n7 10\n6 14\n8 5\n3 15\n15 13\n9 16\n12 1\n6 15\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 17 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 11 and vertex 5.\n",
    "graph_output": "17 17\n1 6\n1 10\n6 3\n6 7\n7 5\n7 15\n3 9\n15 16\n5 8\n3 14\n6 2\n3 12\n6 11\n14 4\n6 17\n1 13\n11 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 14 to vertex 10 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 89 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 13 (weight=94), 14 (weight=16), 9 (weight=70), 3 (weight=32), 4 (weight=6), 6 (weight=100), 2 (weight=37), 8 (weight=50), 5 (weight=20), 10 (weight=8), 12 (weight=41), 7 (weight=76), 11 (weight=54)\nVertex 2: 8 (weight=4), 6 (weight=62), 5 (weight=67), 4 (weight=92), 9 (weight=15), 14 (weight=40), 7 (weight=30), 1 (weight=37), 13 (weight=6), 3 (weight=22), 12 (weight=28), 11 (weight=57)\nVertex 3: 1 (weight=32), 10 (weight=85), 12 (weight=81), 7 (weight=66), 6 (weight=3), 11 (weight=14), 9 (weight=12), 2 (weight=22), 8 (weight=39), 13 (weight=80), 14 (weight=41), 5 (weight=31), 4 (weight=95)\nVertex 4: 1 (weight=6), 2 (weight=92), 12 (weight=11), 11 (weight=69), 7 (weight=60), 8 (weight=61), 14 (weight=1), 5 (weight=29), 9 (weight=9), 6 (weight=5), 10 (weight=86), 13 (weight=25), 3 (weight=95)\nVertex 5: 2 (weight=67), 7 (weight=37), 6 (weight=41), 9 (weight=31), 10 (weight=19), 1 (weight=20), 13 (weight=23), 8 (weight=91), 4 (weight=29), 11 (weight=36), 3 (weight=31), 12 (weight=17), 14 (weight=98)\nVertex 6: 2 (weight=62), 11 (weight=59), 5 (weight=41), 1 (weight=100), 3 (weight=3), 14 (weight=91), 12 (weight=40), 13 (weight=50), 7 (weight=98), 8 (weight=55), 4 (weight=5), 9 (weight=60), 10 (weight=23)\nVertex 7: 12 (weight=35), 5 (weight=37), 3 (weight=66), 10 (weight=95), 2 (weight=30), 9 (weight=33), 4 (weight=60), 6 (weight=98), 11 (weight=23), 1 (weight=76), 8 (weight=60), 14 (weight=47), 13 (weight=23)\nVertex 8: 13 (weight=23), 2 (weight=4), 14 (weight=22), 1 (weight=50), 5 (weight=91), 4 (weight=61), 10 (weight=92), 3 (weight=39), 6 (weight=55), 9 (weight=56), 11 (weight=21), 7 (weight=60), 12 (weight=77)\nVertex 9: 1 (weight=70), 2 (weight=15), 5 (weight=31), 11 (weight=38), 7 (weight=33), 10 (weight=71), 3 (weight=12), 14 (weight=89), 13 (weight=67), 8 (weight=56), 4 (weight=9), 6 (weight=60), 12 (weight=8)\nVertex 10: 3 (weight=85), 12 (weight=78), 7 (weight=95), 5 (weight=19), 9 (weight=71), 11 (weight=57), 1 (weight=8), 8 (weight=92), 14 (weight=90), 13 (weight=5), 4 (weight=86), 6 (weight=23)\nVertex 11: 6 (weight=59), 4 (weight=69), 9 (weight=38), 3 (weight=14), 10 (weight=57), 12 (weight=56), 14 (weight=4), 2 (weight=57), 7 (weight=23), 5 (weight=36), 8 (weight=21), 1 (weight=54)\nVertex 12: 13 (weight=49), 7 (weight=35), 3 (weight=81), 10 (weight=78), 4 (weight=11), 14 (weight=68), 6 (weight=40), 2 (weight=28), 11 (weight=56), 1 (weight=41), 9 (weight=8), 8 (weight=77), 5 (weight=17)\nVertex 13: 1 (weight=94), 8 (weight=23), 12 (weight=49), 2 (weight=6), 6 (weight=50), 5 (weight=23), 9 (weight=67), 10 (weight=5), 3 (weight=80), 4 (weight=25), 14 (weight=62), 7 (weight=23)\nVertex 14: 1 (weight=16), 8 (weight=22), 2 (weight=40), 12 (weight=68), 6 (weight=91), 9 (weight=89), 10 (weight=90), 4 (weight=1), 11 (weight=4), 3 (weight=41), 7 (weight=47), 13 (weight=62), 5 (weight=98)\n",
    "graph_output": "14 89\n1 13 94\n1 14 16\n13 8 23\n8 2 4\n1 9 70\n2 6 62\n1 3 32\n6 11 59\n13 12 49\n1 4 6\n3 10 85\n2 5 67\n12 7 35\n4 2 92\n5 7 37\n6 5 41\n12 3 81\n2 9 15\n7 3 66\n5 9 31\n10 12 78\n8 14 22\n14 2 40\n10 7 95\n12 4 11\n6 1 100\n11 4 69\n7 2 30\n1 2 37\n3 6 3\n12 14 68\n8 1 50\n11 9 38\n5 10 19\n2 13 6\n14 6 91\n12 6 40\n9 7 33\n3 11 14\n13 6 50\n1 5 20\n4 7 60\n9 10 71\n11 10 57\n13 5 23\n10 1 8\n9 3 12\n14 9 89\n8 5 91\n3 2 22\n2 12 28\n4 8 61\n12 11 56\n8 10 92\n3 8 39\n10 14 90\n4 14 1\n11 14 4\n7 6 98\n13 9 67\n4 5 29\n6 8 55\n11 2 57\n13 10 5\n9 8 56\n4 9 9\n6 4 5\n11 7 23\n3 13 80\n3 14 41\n12 1 41\n11 5 36\n7 1 76\n4 10 86\n8 11 21\n3 5 31\n7 8 60\n4 13 25\n14 7 47\n3 4 95\n9 6 60\n12 9 8\n14 13 62\n12 8 77\n6 10 23\n11 1 54\n5 12 17\n13 7 23\n5 14 98\n",
    "vertices": [
      14,
      10
    ],
    "answer": 15,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 31 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 16, 8\nVertex 2: 5, 15\nVertex 3: 7, 8, 12, 11\nVertex 4: 6, 11, 13\nVertex 5: 1, 6, 2, 15, 14, 8\nVertex 6: 5, 7, 10, 4\nVertex 7: 6, 3, 13, 11, 12\nVertex 8: 3, 16, 5, 1, 17\nVertex 9: 10, 12\nVertex 10: 6, 9, 17\nVertex 11: 7, 14, 3, 4\nVertex 12: 9, 17, 3, 13, 7\nVertex 13: 7, 12, 4, 15\nVertex 14: 11, 5\nVertex 15: 2, 5, 17, 13\nVertex 16: 1, 8\nVertex 17: 10, 12, 15, 8\n",
    "graph_output": "17 31\n1 5\n5 6\n6 7\n5 2\n2 15\n6 10\n10 9\n9 12\n6 4\n7 3\n7 13\n7 11\n11 14\n1 16\n3 8\n10 17\n12 17\n5 15\n8 16\n3 12\n17 15\n3 11\n5 14\n12 13\n8 5\n4 11\n8 1\n7 12\n4 13\n15 13\n8 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 6 vertices and 6 edges\n\nEdges (Format: Node Node):\n1 6\n6 3\n6 4\n4 2\n2 5\n4 3\n",
    "graph_output": "6 6\n1 6\n6 3\n6 4\n4 2\n2 5\n4 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 11 vertices and 16 edges\n\nEdges (Format: Node Node):\n8 4\n6 10\n5 6\n8 2\n4 11\n10 7\n4 6\n5 1\n7 5\n10 1\n11 6\n3 6\n9 2\n3 10\n9 10\n8 3\n",
    "graph_output": "11 16\n8 4\n6 10\n5 6\n8 2\n4 11\n10 7\n4 6\n5 1\n7 5\n10 1\n11 6\n3 6\n9 2\n3 10\n9 10\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 58 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 11, 6, 12, 7, 10, 9, 5, 3, 4\nVertex 2: 4, 6, 10, 7, 3, 12, 11, 5\nVertex 3: 5, 6, 2, 10, 7, 9, 1, 11, 8\nVertex 4: 9, 6, 2, 12, 10, 8, 7, 5, 11, 1\nVertex 5: 8, 3, 10, 6, 7, 4, 1, 9, 2, 11\nVertex 6: 4, 2, 11, 1, 12, 3, 5, 10, 8, 7\nVertex 7: 9, 8, 12, 2, 4, 10, 1, 5, 3, 11, 6\nVertex 8: 1, 5, 10, 7, 9, 4, 6, 12, 3, 11\nVertex 9: 4, 7, 8, 10, 1, 11, 3, 5\nVertex 10: 8, 4, 5, 2, 7, 9, 1, 6, 3, 12, 11\nVertex 11: 6, 1, 12, 9, 2, 5, 10, 7, 3, 4, 8\nVertex 12: 4, 6, 7, 1, 11, 10, 2, 8\n",
    "graph_output": "12 58\n1 8\n8 5\n9 4\n6 4\n4 2\n6 2\n12 4\n11 6\n11 1\n5 3\n6 1\n10 8\n4 10\n9 7\n6 12\n10 5\n7 8\n12 7\n10 2\n2 7\n6 3\n1 12\n6 5\n9 8\n8 4\n7 4\n7 10\n12 11\n7 1\n7 5\n9 10\n1 10\n2 3\n10 6\n9 1\n3 10\n4 5\n3 7\n11 9\n12 10\n2 12\n9 3\n8 6\n1 5\n11 2\n5 9\n2 5\n1 3\n11 5\n11 10\n7 11\n12 8\n11 3\n11 4\n8 3\n7 6\n4 1\n8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 150,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 11 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (6\u00d76):\n\n      1   2   3   4   5   6\n   ------------------------\n 1 |  0   1   1   1   1   1 \n 2 |  1   0   0   1   0   0 \n 3 |  1   0   0   1   1   1 \n 4 |  1   1   1   0   0   1 \n 5 |  1   0   1   0   0   1 \n 6 |  1   0   1   1   1   0 \n",
    "graph_output": "6 11\n1 2\n1 6\n6 3\n1 4\n1 5\n6 5\n5 3\n6 4\n3 1\n4 3\n2 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 185,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (30\u00d730):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n   ------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   1   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   1   1   0   1   1   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1 \n10 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n12 |  0   0   0   1   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   1   0   0   1   0   0 \n21 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n23 |  1   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0 \n29 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n30 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "30 29\n1 16\n1 7\n1 23\n23 18\n23 4\n4 17\n4 27\n27 11\n23 20\n1 21\n18 2\n4 12\n2 13\n12 5\n20 9\n11 15\n23 14\n4 26\n20 28\n20 25\n9 30\n12 10\n4 3\n20 8\n9 6\n28 29\n20 19\n27 22\n4 24\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 23 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13\nVertex 2: 15, 3\nVertex 3: 15, 10, 2, 6\nVertex 4: 15, 8, 17\nVertex 5: 6, 12\nVertex 6: 14, 5, 3\nVertex 7: 12, 14\nVertex 8: 10, 4, 15, 16\nVertex 9: No connections\nVertex 10: 8, 3\nVertex 11: 17, 13, 14\nVertex 12: 7, 5\nVertex 13: 1, 11, 16\nVertex 14: 16, 6, 17, 7, 11\nVertex 15: 4, 3, 8, 2\nVertex 16: 14, 8, 13\nVertex 17: 11, 14, 4\n",
    "graph_output": "17 23\n15 4\n16 14\n3 15\n10 8\n14 6\n11 17\n4 8\n7 12\n8 15\n1 13\n17 14\n8 16\n14 7\n2 15\n11 13\n5 6\n10 3\n13 16\n3 2\n5 12\n17 4\n3 6\n14 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 6 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 99 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0  63  22  23  17  93  46  54  31   8  99  19  11  61  62 \n 2 | 63   0  55  20   7  29  43  74  41  69 100  33  84   5  64 \n 3 | 22  55   0  40   0   0  77  86   0   3  21  35  61  74  28 \n 4 | 23  20  40   0  59  23  92  58  72  88  75  68  30  41  39 \n 5 | 17   7   0  59   0  33  33  48  51  42  79   7  84  28  95 \n 6 | 93  29   0  23  33   0   9  73   6   0  30   2   5  18   5 \n 7 | 46  43  77  92  33   9   0  23   6  53  33  54   0  85  15 \n 8 | 54  74  86  58  48  73  23   0  30  67  90  45  41  12  47 \n 9 | 31  41   0  72  51   6   6  30   0   2  21  19  49  50  44 \n10 |  8  69   3  88  42   0  53  67   2   0   6  80  13  48   0 \n11 | 99 100  21  75  79  30  33  90  21   6   0  44  21  73  83 \n12 | 19  33  35  68   7   2  54  45  19  80  44   0  87  83  41 \n13 | 11  84  61  30  84   5   0  41  49  13  21  87   0  84   8 \n14 | 61   5  74  41  28  18  85  12  50  48  73  83  84   0  12 \n15 | 62  64  28  39  95   5  15  47  44   0  83  41   8  12   0 \n",
    "graph_output": "15 99\n1 12 19\n12 9 19\n9 5 51\n1 11 99\n1 14 61\n11 7 33\n14 13 84\n11 6 30\n14 2 5\n6 4 23\n14 10 48\n11 8 90\n12 15 41\n8 3 86\n5 6 33\n14 15 12\n9 7 6\n2 8 74\n3 4 40\n7 10 53\n4 9 72\n1 2 63\n8 6 73\n4 11 75\n8 9 30\n7 15 15\n6 7 9\n15 11 83\n12 11 44\n15 6 5\n8 14 12\n2 11 100\n3 2 55\n6 14 18\n13 8 41\n7 12 54\n2 15 64\n7 4 92\n1 8 54\n10 9 2\n1 3 22\n6 1 93\n7 5 33\n9 15 44\n12 5 7\n14 3 74\n7 3 77\n12 10 80\n11 5 79\n13 9 49\n12 8 45\n4 14 41\n13 10 13\n3 10 3\n12 2 33\n9 2 41\n1 5 17\n1 15 62\n10 1 8\n2 5 7\n10 5 42\n11 14 73\n14 5 28\n4 2 20\n13 1 11\n12 14 83\n6 13 5\n11 9 21\n15 5 95\n7 2 43\n10 11 6\n2 13 84\n15 4 39\n6 9 6\n7 14 85\n10 4 88\n6 12 2\n5 8 48\n2 10 69\n4 12 68\n1 4 23\n8 4 58\n13 12 87\n15 3 28\n13 3 61\n14 9 50\n13 5 84\n13 4 30\n1 9 31\n7 1 46\n11 13 21\n3 12 35\n15 13 8\n5 4 59\n7 8 23\n2 6 29\n3 11 21\n15 8 47\n8 10 67\n",
    "vertices": [
      8,
      6
    ],
    "answer": 29,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 22 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9\nVertex 2: 3, 6, 10, 11, 4\nVertex 3: 2, 11, 10\nVertex 4: 7, 8, 10, 5, 2\nVertex 5: 7, 6, 4, 8\nVertex 6: 2, 10, 11, 5, 9\nVertex 7: 11, 4, 5\nVertex 8: 9, 11, 4, 10, 5\nVertex 9: 8, 1, 6\nVertex 10: 3, 2, 8, 6, 4\nVertex 11: 7, 3, 8, 6, 2\n",
    "graph_output": "11 22\n8 9\n2 3\n11 7\n3 11\n6 2\n3 10\n8 11\n1 9\n4 7\n4 8\n5 7\n2 10\n8 10\n10 6\n6 11\n10 4\n5 6\n5 4\n5 8\n11 2\n6 9\n4 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 13 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 4 and vertex 5.\n",
    "graph_output": "11 13\n11 10\n8 1\n5 7\n7 8\n6 9\n5 1\n10 3\n9 8\n6 5\n5 3\n8 4\n3 4\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 29 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 28.\nThere is an edge between vertex 28 and vertex 6.\nThere is an edge between vertex 1 and vertex 20.\nThere is an edge between vertex 20 and vertex 25.\nThere is an edge between vertex 28 and vertex 23.\nThere is an edge between vertex 25 and vertex 10.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 23 and vertex 22.\nThere is an edge between vertex 25 and vertex 9.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 6 and vertex 29.\nThere is an edge between vertex 29 and vertex 19.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 22 and vertex 21.\nThere is an edge between vertex 20 and vertex 5.\nThere is an edge between vertex 28 and vertex 7.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 28 and vertex 18.\nThere is an edge between vertex 23 and vertex 16.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 28 and vertex 14.\nThere is an edge between vertex 29 and vertex 11.\nThere is an edge between vertex 7 and vertex 24.\nThere is an edge between vertex 28 and vertex 15.\nThere is an edge between vertex 7 and vertex 27.\nThere is an edge between vertex 19 and vertex 26.\nThere is an edge between vertex 22 and vertex 13.\nThere is an edge between vertex 24 and vertex 12.\n",
    "graph_output": "29 28\n1 28\n28 6\n1 20\n20 25\n28 23\n25 10\n6 17\n23 22\n25 9\n10 4\n6 29\n29 19\n1 2\n22 21\n20 5\n28 7\n6 3\n28 18\n23 16\n9 8\n28 14\n29 11\n7 24\n28 15\n7 27\n19 26\n22 13\n24 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 17 vertices and 130 edges\n\nEdges (Format: Node Node):\n1 4\n1 9\n9 5\n9 8\n9 17\n1 12\n8 11\n9 3\n4 7\n1 6\n7 15\n11 16\n7 14\n5 13\n7 2\n17 10\n17 12\n15 2\n3 1\n9 2\n15 11\n12 2\n2 16\n12 10\n11 10\n15 8\n15 10\n5 3\n16 8\n10 6\n8 7\n3 4\n7 10\n15 1\n4 11\n6 17\n17 2\n14 4\n4 15\n10 8\n2 8\n6 3\n5 8\n12 15\n14 10\n10 5\n2 13\n13 12\n11 17\n12 8\n5 6\n7 1\n4 16\n16 15\n9 12\n7 5\n12 16\n5 12\n8 6\n14 15\n1 16\n17 8\n8 13\n13 17\n5 16\n17 7\n4 9\n11 13\n15 9\n14 13\n14 17\n7 3\n15 6\n6 12\n6 13\n2 5\n3 12\n4 8\n11 5\n17 5\n14 2\n5 15\n6 2\n8 3\n14 5\n1 8\n7 6\n1 13\n6 9\n4 12\n5 1\n9 13\n14 1\n3 14\n7 12\n6 4\n3 13\n13 16\n11 7\n14 11\n14 8\n11 1\n9 16\n2 3\n13 7\n16 7\n11 6\n15 17\n3 17\n16 6\n4 13\n14 9\n10 1\n6 14\n4 2\n4 10\n16 3\n11 9\n3 10\n17 1\n13 15\n17 4\n12 11\n9 7\n14 12\n2 1\n16 17\n10 16\n2 10\n16 14\n",
    "graph_output": "17 130\n1 4\n1 9\n9 5\n9 8\n9 17\n1 12\n8 11\n9 3\n4 7\n1 6\n7 15\n11 16\n7 14\n5 13\n7 2\n17 10\n17 12\n15 2\n3 1\n9 2\n15 11\n12 2\n2 16\n12 10\n11 10\n15 8\n15 10\n5 3\n16 8\n10 6\n8 7\n3 4\n7 10\n15 1\n4 11\n6 17\n17 2\n14 4\n4 15\n10 8\n2 8\n6 3\n5 8\n12 15\n14 10\n10 5\n2 13\n13 12\n11 17\n12 8\n5 6\n7 1\n4 16\n16 15\n9 12\n7 5\n12 16\n5 12\n8 6\n14 15\n1 16\n17 8\n8 13\n13 17\n5 16\n17 7\n4 9\n11 13\n15 9\n14 13\n14 17\n7 3\n15 6\n6 12\n6 13\n2 5\n3 12\n4 8\n11 5\n17 5\n14 2\n5 15\n6 2\n8 3\n14 5\n1 8\n7 6\n1 13\n6 9\n4 12\n5 1\n9 13\n14 1\n3 14\n7 12\n6 4\n3 13\n13 16\n11 7\n14 11\n14 8\n11 1\n9 16\n2 3\n13 7\n16 7\n11 6\n15 17\n3 17\n16 6\n4 13\n14 9\n10 1\n6 14\n4 2\n4 10\n16 3\n11 9\n3 10\n17 1\n13 15\n17 4\n12 11\n9 7\n14 12\n2 1\n16 17\n10 16\n2 10\n16 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 24 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 11 and vertex 12.\n",
    "graph_output": "16 24\n1 10\n10 8\n8 6\n6 12\n1 13\n8 16\n10 2\n13 4\n13 7\n6 11\n16 14\n2 3\n1 15\n14 5\n3 9\n14 7\n3 15\n16 13\n10 14\n6 3\n6 9\n5 8\n5 16\n11 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 21 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   0   1   1   0   1   0   1   0 \n 2 |  0   0   0   1   1   1   0   0   0   0   1 \n 3 |  0   0   0   0   0   0   0   1   1   0   0 \n 4 |  0   1   0   0   0   1   1   0   1   1   0 \n 5 |  1   1   0   0   0   1   0   0   0   0   1 \n 6 |  1   1   0   1   1   0   1   0   0   0   1 \n 7 |  0   0   0   1   0   1   0   0   0   0   1 \n 8 |  1   0   1   0   0   0   0   0   0   0   1 \n 9 |  0   0   1   1   0   0   0   0   0   1   0 \n10 |  1   0   0   1   0   0   0   0   1   0   0 \n11 |  0   1   0   0   1   1   1   1   0   0   0 \n",
    "graph_output": "11 21\n5 6\n4 2\n11 5\n9 10\n11 7\n1 10\n9 4\n10 4\n8 1\n4 6\n2 11\n9 3\n4 7\n11 6\n6 2\n5 1\n8 11\n5 2\n6 1\n6 7\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 4 and vertex 11.\n",
    "graph_output": "16 28\n1 16\n1 5\n1 13\n1 10\n16 15\n16 6\n16 2\n2 14\n15 8\n15 4\n2 7\n16 11\n15 12\n16 3\n10 9\n4 9\n3 4\n5 7\n7 1\n1 3\n12 8\n11 6\n16 10\n10 14\n5 11\n6 2\n13 9\n4 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 26 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 3 and vertex 10.\n",
    "graph_output": "15 26\n1 13\n1 15\n1 4\n15 12\n1 5\n15 14\n13 3\n14 6\n5 9\n12 7\n14 11\n3 8\n13 10\n10 2\n7 5\n2 13\n2 7\n11 8\n8 7\n5 13\n1 8\n5 15\n5 14\n12 9\n4 3\n3 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 11 (source) to vertex 5 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 16 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 6 (capacity=9), 7 (capacity=1), 5 (capacity=3), 8 (capacity=1), 9 (capacity=9)\nVertex 2: 4 (capacity=2)\nVertex 3: 8 (capacity=9), 6 (capacity=6), 7 (capacity=5)\nVertex 4: 6 (capacity=2), 11 (capacity=9), 2 (capacity=2)\nVertex 5: 1 (capacity=3), 10 (capacity=5), 6 (capacity=3), 8 (capacity=3)\nVertex 6: 1 (capacity=9), 4 (capacity=2), 5 (capacity=3), 3 (capacity=6), 11 (capacity=6)\nVertex 7: 1 (capacity=1), 3 (capacity=5)\nVertex 8: 1 (capacity=1), 3 (capacity=9), 5 (capacity=3)\nVertex 9: 10 (capacity=4), 1 (capacity=9)\nVertex 10: 5 (capacity=5), 9 (capacity=4)\nVertex 11: 4 (capacity=9), 6 (capacity=6)\n",
    "graph_output": "11 16\n1 6 9\n1 7 1\n6 4 2\n1 5 3\n5 10 5\n1 8 1\n8 3 9\n10 9 4\n4 11 9\n4 2 2\n5 6 3\n5 8 3\n9 1 9\n3 6 6\n7 3 5\n11 6 6\n",
    "vertices": [
      11,
      5
    ],
    "answer": 8,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 87 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 9, 4, 3, 10, 11, 5, 6, 13, 8, 2\nVertex 2: 9, 7, 4, 8, 6, 3, 14, 12, 13, 5, 11, 15, 1, 10\nVertex 3: 10, 1, 2, 8, 12, 13, 9, 11, 14, 6, 4\nVertex 4: 1, 10, 9, 11, 2, 12, 8, 14, 15, 6, 13, 5, 3\nVertex 5: 15, 13, 9, 14, 12, 1, 2, 8, 11, 10, 7, 4, 6\nVertex 6: 10, 11, 9, 13, 2, 8, 1, 4, 3, 5\nVertex 7: 2, 10, 14, 12, 9, 13, 5, 15, 11\nVertex 8: 13, 2, 4, 12, 3, 6, 10, 11, 5, 1, 14\nVertex 9: 1, 2, 14, 4, 12, 5, 10, 6, 11, 15, 13, 7, 3\nVertex 10: 15, 3, 6, 12, 14, 4, 1, 9, 11, 7, 8, 5, 2\nVertex 11: 6, 4, 9, 1, 10, 8, 14, 2, 5, 15, 3, 12, 7\nVertex 12: 10, 15, 13, 9, 5, 4, 8, 7, 2, 3, 11\nVertex 13: 15, 8, 5, 12, 6, 14, 2, 9, 3, 7, 1, 4\nVertex 14: 9, 10, 5, 4, 7, 2, 13, 11, 8, 3\nVertex 15: 1, 10, 5, 13, 12, 9, 4, 11, 2, 7\n",
    "graph_output": "15 87\n1 15\n15 10\n1 9\n10 3\n15 5\n10 6\n9 2\n10 12\n9 14\n2 7\n1 4\n6 11\n15 13\n13 8\n14 10\n3 1\n10 4\n5 13\n12 15\n9 4\n12 13\n4 11\n1 10\n9 12\n9 5\n4 2\n8 2\n5 14\n9 10\n9 6\n11 9\n5 12\n1 11\n5 1\n10 11\n4 12\n4 8\n14 4\n6 13\n10 7\n2 6\n3 2\n8 12\n3 8\n14 7\n6 8\n14 2\n7 12\n15 9\n14 13\n8 10\n12 2\n3 12\n6 1\n11 8\n13 2\n11 14\n2 5\n13 9\n13 3\n15 4\n6 4\n9 7\n5 8\n2 11\n7 13\n5 11\n9 3\n10 5\n7 5\n11 15\n1 13\n11 3\n8 1\n4 13\n4 5\n11 12\n2 15\n8 14\n14 3\n7 15\n7 11\n2 1\n3 6\n2 10\n6 5\n3 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 15 vertices and 87 edges\n\nEdges (Format: Node Node):\n1 9\n1 11\n1 5\n1 14\n14 6\n6 15\n6 3\n3 4\n14 8\n8 7\n1 12\n4 2\n2 10\n12 13\n10 15\n10 3\n10 12\n14 4\n10 4\n2 6\n10 5\n5 12\n3 12\n11 14\n3 1\n9 11\n1 7\n14 7\n3 9\n13 4\n10 6\n14 12\n8 13\n13 5\n14 13\n1 13\n1 10\n5 8\n15 4\n5 6\n8 11\n11 6\n11 13\n4 5\n13 2\n14 15\n8 1\n10 7\n11 10\n6 9\n2 14\n5 14\n14 9\n8 2\n3 2\n13 15\n4 9\n9 7\n6 7\n10 14\n10 9\n11 5\n15 12\n5 7\n13 9\n9 15\n7 12\n11 15\n12 4\n10 8\n13 7\n5 2\n15 2\n6 13\n5 9\n15 5\n6 12\n7 4\n2 1\n12 8\n15 7\n2 12\n4 11\n2 9\n13 3\n2 11\n7 11\n",
    "graph_output": "15 87\n1 9\n1 11\n1 5\n1 14\n14 6\n6 15\n6 3\n3 4\n14 8\n8 7\n1 12\n4 2\n2 10\n12 13\n10 15\n10 3\n10 12\n14 4\n10 4\n2 6\n10 5\n5 12\n3 12\n11 14\n3 1\n9 11\n1 7\n14 7\n3 9\n13 4\n10 6\n14 12\n8 13\n13 5\n14 13\n1 13\n1 10\n5 8\n15 4\n5 6\n8 11\n11 6\n11 13\n4 5\n13 2\n14 15\n8 1\n10 7\n11 10\n6 9\n2 14\n5 14\n14 9\n8 2\n3 2\n13 15\n4 9\n9 7\n6 7\n10 14\n10 9\n11 5\n15 12\n5 7\n13 9\n9 15\n7 12\n11 15\n12 4\n10 8\n13 7\n5 2\n15 2\n6 13\n5 9\n15 5\n6 12\n7 4\n2 1\n12 8\n15 7\n2 12\n4 11\n2 9\n13 3\n2 11\n7 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 99 edges\n\nEdges (Format: Node Node):\n1 2\n2 9\n1 6\n1 4\n4 15\n9 8\n15 14\n14 7\n1 16\n14 10\n10 12\n6 5\n10 13\n15 11\n11 3\n8 2\n15 6\n12 13\n2 4\n1 12\n16 11\n16 2\n2 10\n14 3\n12 5\n16 8\n3 10\n4 10\n8 1\n3 7\n2 7\n8 12\n3 1\n8 15\n2 6\n15 16\n15 12\n5 14\n3 16\n13 7\n9 15\n9 14\n9 5\n9 1\n7 10\n14 4\n9 13\n6 7\n7 15\n1 5\n13 1\n10 16\n5 11\n2 15\n12 7\n7 5\n13 4\n11 9\n16 14\n2 13\n11 12\n6 9\n8 3\n16 12\n8 13\n6 3\n6 4\n8 14\n14 12\n12 3\n10 9\n5 4\n5 16\n15 13\n12 6\n4 11\n5 15\n10 5\n4 7\n13 14\n5 2\n2 11\n7 8\n3 5\n1 10\n16 9\n1 14\n8 4\n9 4\n5 13\n3 15\n6 10\n11 7\n7 9\n11 14\n1 7\n16 7\n11 6\n8 11\n",
    "graph_output": "16 99\n1 2\n2 9\n1 6\n1 4\n4 15\n9 8\n15 14\n14 7\n1 16\n14 10\n10 12\n6 5\n10 13\n15 11\n11 3\n8 2\n15 6\n12 13\n2 4\n1 12\n16 11\n16 2\n2 10\n14 3\n12 5\n16 8\n3 10\n4 10\n8 1\n3 7\n2 7\n8 12\n3 1\n8 15\n2 6\n15 16\n15 12\n5 14\n3 16\n13 7\n9 15\n9 14\n9 5\n9 1\n7 10\n14 4\n9 13\n6 7\n7 15\n1 5\n13 1\n10 16\n5 11\n2 15\n12 7\n7 5\n13 4\n11 9\n16 14\n2 13\n11 12\n6 9\n8 3\n16 12\n8 13\n6 3\n6 4\n8 14\n14 12\n12 3\n10 9\n5 4\n5 16\n15 13\n12 6\n4 11\n5 15\n10 5\n4 7\n13 14\n5 2\n2 11\n7 8\n3 5\n1 10\n16 9\n1 14\n8 4\n9 4\n5 13\n3 15\n6 10\n11 7\n7 9\n11 14\n1 7\n16 7\n11 6\n8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 12 vertices and 46 edges\n\nEdges (Format: Node Node Weight):\n1 3 5\n3 10 75\n1 12 22\n10 5 17\n10 4 64\n12 7 87\n12 6 84\n5 9 67\n12 2 12\n1 8 52\n9 11 87\n7 9 19\n8 5 74\n7 10 37\n12 5 75\n12 3 78\n5 6 46\n12 11 26\n4 12 32\n7 5 27\n5 2 19\n11 1 46\n8 7 57\n2 9 28\n4 6 24\n4 9 30\n8 9 100\n7 11 78\n8 2 36\n3 2 57\n4 8 91\n3 7 9\n8 11 8\n5 4 58\n1 9 1\n4 7 49\n7 1 52\n11 6 59\n1 6 46\n3 4 45\n2 6 75\n9 6 27\n1 10 76\n12 9 60\n1 4 68\n2 7 52\n",
    "graph_output": "12 46\n1 3 5\n3 10 75\n1 12 22\n10 5 17\n10 4 64\n12 7 87\n12 6 84\n5 9 67\n12 2 12\n1 8 52\n9 11 87\n7 9 19\n8 5 74\n7 10 37\n12 5 75\n12 3 78\n5 6 46\n12 11 26\n4 12 32\n7 5 27\n5 2 19\n11 1 46\n8 7 57\n2 9 28\n4 6 24\n4 9 30\n8 9 100\n7 11 78\n8 2 36\n3 2 57\n4 8 91\n3 7 9\n8 11 8\n5 4 58\n1 9 1\n4 7 49\n7 1 52\n11 6 59\n1 6 46\n3 4 45\n2 6 75\n9 6 27\n1 10 76\n12 9 60\n1 4 68\n2 7 52\n",
    "vertices": [
      null,
      null
    ],
    "answer": 173,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 17 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 10\n10 11\n10 5\n10 17\n11 8\n10 4\n8 13\n8 15\n15 12\n11 7\n4 16\n17 9\n7 3\n1 6\n11 2\n5 14\n16 12\n9 6\n2 15\n6 3\n8 14\n8 4\n9 15\n13 5\n15 7\n1 3\n7 1\n15 1\n",
    "graph_output": "17 28\n1 10\n10 11\n10 5\n10 17\n11 8\n10 4\n8 13\n8 15\n15 12\n11 7\n4 16\n17 9\n7 3\n1 6\n11 2\n5 14\n16 12\n9 6\n2 15\n6 3\n8 14\n8 4\n9 15\n13 5\n15 7\n1 3\n7 1\n15 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 2 (source) to vertex 4 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 21 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0  65   0   0   0  13  56   0  86   0  93 \n 2 | 65   0   0   0  84   0   0  20   0   0  49 \n 3 |  0   0   0   0   0  45   6   0   0  37   0 \n 4 |  0   0   0   0   0  29   0   0  15  37   0 \n 5 |  0  84   0   0   0  15   0   0   0   0   0 \n 6 | 13   0  45  29  15   0   0   7   0  63   0 \n 7 | 56   0   6   0   0   0   0   0   0   0   0 \n 8 |  0  20   0   0   0   7   0   0  26   4  82 \n 9 | 86   0   0  15   0   0   0  26   0   0   0 \n10 |  0   0  37  37   0  63   0   4   0   0  62 \n11 | 93  49   0   0   0   0   0  82   0  62   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   2   0   0   0   9   2   0  10   0   4 \n 2 |  2   0   0   0   9   0   0   2   0   0   7 \n 3 |  0   0   0   0   0   9   8   0   0   9   0 \n 4 |  0   0   0   0   0   7   0   0  10   2   0 \n 5 |  0   9   0   0   0   5   0   0   0   0   0 \n 6 |  9   0   9   7   5   0   0   7   0   7   0 \n 7 |  2   0   8   0   0   0   0   0   0   0   0 \n 8 |  0   2   0   0   0   7   0   0   9   3   9 \n 9 | 10   0   0  10   0   0   0   9   0   0   0 \n10 |  0   0   9   2   0   7   0   3   0   0   5 \n11 |  4   7   0   0   0   0   0   9   0   5   0 \n",
    "graph_output": "11 21\n1 9 86 10\n1 6 13 9\n6 8 7 7\n8 2 20 2\n6 10 63 7\n10 4 37 2\n1 11 93 4\n6 3 45 9\n6 5 15 5\n1 7 56 2\n9 8 26 9\n8 10 4 3\n11 2 49 7\n4 6 29 7\n3 7 6 8\n2 1 65 2\n10 3 37 9\n11 8 82 9\n9 4 15 10\n10 11 62 5\n5 2 84 9\n",
    "vertices": [
      2,
      4
    ],
    "answer": 2084,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 15 vertices and 30 edges\n\nEdges (Format: Node Node):\n10 13\n13 1\n3 15\n1 9\n4 3\n8 2\n12 14\n5 10\n4 15\n2 5\n1 8\n1 10\n14 10\n6 10\n3 6\n9 14\n10 2\n7 2\n5 11\n10 12\n8 10\n11 9\n3 2\n4 5\n9 13\n10 11\n10 3\n2 14\n12 4\n13 15\n",
    "graph_output": "15 30\n10 13\n13 1\n3 15\n1 9\n4 3\n8 2\n12 14\n5 10\n4 15\n2 5\n1 8\n1 10\n14 10\n6 10\n3 6\n9 14\n10 2\n7 2\n5 11\n10 12\n8 10\n11 9\n3 2\n4 5\n9 13\n10 11\n10 3\n2 14\n12 4\n13 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 3 to vertex 15 in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 113 edges\n\nEdges (Format: Node Node Weight):\n1 2 33\n2 4 30\n2 14 56\n1 15 37\n14 12 26\n2 11 22\n11 6 53\n15 5 60\n4 9 30\n9 16 81\n9 13 5\n1 7 56\n2 10 47\n13 3 87\n2 8 71\n16 3 46\n9 11 44\n1 10 97\n4 14 50\n8 6 79\n3 8 15\n3 6 71\n3 12 30\n5 16 80\n7 13 42\n1 13 82\n9 1 35\n15 11 3\n2 6 78\n10 11 39\n3 1 82\n7 16 83\n5 3 17\n2 12 93\n9 12 80\n1 4 83\n7 11 65\n9 3 74\n14 3 26\n4 15 84\n4 13 75\n3 7 47\n7 14 58\n9 5 88\n12 4 79\n14 1 25\n12 1 14\n10 5 21\n11 14 38\n10 12 39\n10 16 2\n6 14 43\n2 9 26\n4 6 48\n8 7 36\n13 16 1\n11 3 17\n4 3 27\n11 8 13\n2 15 58\n1 16 60\n1 11 8\n15 3 85\n5 11 83\n14 5 29\n2 7 88\n8 15 72\n7 15 84\n7 5 4\n9 7 29\n15 14 13\n13 15 22\n4 8 44\n7 12 99\n16 11 26\n9 10 10\n13 12 99\n12 16 24\n13 5 44\n15 9 47\n9 8 54\n3 2 66\n11 12 97\n8 14 39\n6 10 82\n16 15 78\n12 6 5\n4 5 61\n3 10 24\n12 15 84\n6 15 68\n8 12 94\n6 5 61\n8 5 4\n10 8 45\n10 13 25\n9 14 96\n2 13 27\n16 14 24\n15 10 86\n6 7 3\n14 10 47\n16 6 36\n8 16 28\n8 1 17\n13 11 9\n5 1 66\n2 5 94\n1 6 95\n12 5 95\n4 16 66\n4 10 1\n10 7 80\n",
    "graph_output": "16 113\n1 2 33\n2 4 30\n2 14 56\n1 15 37\n14 12 26\n2 11 22\n11 6 53\n15 5 60\n4 9 30\n9 16 81\n9 13 5\n1 7 56\n2 10 47\n13 3 87\n2 8 71\n16 3 46\n9 11 44\n1 10 97\n4 14 50\n8 6 79\n3 8 15\n3 6 71\n3 12 30\n5 16 80\n7 13 42\n1 13 82\n9 1 35\n15 11 3\n2 6 78\n10 11 39\n3 1 82\n7 16 83\n5 3 17\n2 12 93\n9 12 80\n1 4 83\n7 11 65\n9 3 74\n14 3 26\n4 15 84\n4 13 75\n3 7 47\n7 14 58\n9 5 88\n12 4 79\n14 1 25\n12 1 14\n10 5 21\n11 14 38\n10 12 39\n10 16 2\n6 14 43\n2 9 26\n4 6 48\n8 7 36\n13 16 1\n11 3 17\n4 3 27\n11 8 13\n2 15 58\n1 16 60\n1 11 8\n15 3 85\n5 11 83\n14 5 29\n2 7 88\n8 15 72\n7 15 84\n7 5 4\n9 7 29\n15 14 13\n13 15 22\n4 8 44\n7 12 99\n16 11 26\n9 10 10\n13 12 99\n12 16 24\n13 5 44\n15 9 47\n9 8 54\n3 2 66\n11 12 97\n8 14 39\n6 10 82\n16 15 78\n12 6 5\n4 5 61\n3 10 24\n12 15 84\n6 15 68\n8 12 94\n6 5 61\n8 5 4\n10 8 45\n10 13 25\n9 14 96\n2 13 27\n16 14 24\n15 10 86\n6 7 3\n14 10 47\n16 6 36\n8 16 28\n8 1 17\n13 11 9\n5 1 66\n2 5 94\n1 6 95\n12 5 95\n4 16 66\n4 10 1\n10 7 80\n",
    "vertices": [
      3,
      15
    ],
    "answer": 20,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 103 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 10 (weight=43), 7 (weight=36), 6 (weight=38), 15 (weight=70), 3 (weight=58), 9 (weight=57), 13 (weight=85), 12 (weight=61), 2 (weight=9), 4 (weight=59), 14 (weight=28), 8 (weight=100), 11 (weight=87), 5 (weight=33)\nVertex 2: 14 (weight=92), 9 (weight=9), 15 (weight=50), 1 (weight=9), 8 (weight=45), 10 (weight=58), 11 (weight=68), 5 (weight=100), 7 (weight=2), 3 (weight=2), 13 (weight=35), 12 (weight=29), 4 (weight=37), 6 (weight=82)\nVertex 3: 1 (weight=58), 9 (weight=34), 6 (weight=64), 14 (weight=67), 13 (weight=28), 4 (weight=80), 5 (weight=17), 8 (weight=85), 7 (weight=41), 12 (weight=19), 2 (weight=2), 10 (weight=19), 11 (weight=49)\nVertex 4: 9 (weight=84), 7 (weight=25), 8 (weight=5), 12 (weight=44), 15 (weight=3), 3 (weight=80), 1 (weight=59), 13 (weight=83), 5 (weight=66), 14 (weight=85), 6 (weight=13), 11 (weight=32), 2 (weight=37), 10 (weight=74)\nVertex 5: 10 (weight=90), 8 (weight=33), 6 (weight=40), 3 (weight=17), 4 (weight=66), 12 (weight=21), 15 (weight=37), 2 (weight=100), 1 (weight=33), 9 (weight=42), 13 (weight=32), 11 (weight=26), 7 (weight=85), 14 (weight=92)\nVertex 6: 1 (weight=38), 14 (weight=50), 3 (weight=64), 10 (weight=26), 13 (weight=13), 5 (weight=40), 9 (weight=93), 12 (weight=10), 7 (weight=21), 8 (weight=68), 4 (weight=13), 11 (weight=74), 15 (weight=58), 2 (weight=82)\nVertex 7: 1 (weight=36), 4 (weight=25), 14 (weight=58), 9 (weight=89), 8 (weight=34), 6 (weight=21), 3 (weight=41), 11 (weight=64), 2 (weight=2), 15 (weight=61), 12 (weight=96), 5 (weight=85), 10 (weight=53), 13 (weight=30)\nVertex 8: 5 (weight=33), 12 (weight=43), 4 (weight=5), 7 (weight=34), 9 (weight=16), 2 (weight=45), 3 (weight=85), 1 (weight=100), 6 (weight=68), 11 (weight=53), 13 (weight=94), 10 (weight=39), 14 (weight=50)\nVertex 9: 10 (weight=31), 4 (weight=84), 3 (weight=34), 1 (weight=57), 2 (weight=9), 7 (weight=89), 6 (weight=93), 8 (weight=16), 15 (weight=90), 14 (weight=42), 11 (weight=9), 13 (weight=21), 5 (weight=42), 12 (weight=67)\nVertex 10: 1 (weight=43), 5 (weight=90), 9 (weight=31), 13 (weight=30), 11 (weight=46), 6 (weight=26), 14 (weight=8), 12 (weight=99), 2 (weight=58), 3 (weight=19), 8 (weight=39), 7 (weight=53), 4 (weight=74), 15 (weight=15)\nVertex 11: 10 (weight=46), 13 (weight=18), 2 (weight=68), 7 (weight=64), 8 (weight=53), 12 (weight=18), 9 (weight=9), 1 (weight=87), 4 (weight=32), 6 (weight=74), 14 (weight=52), 5 (weight=26), 15 (weight=8), 3 (weight=49)\nVertex 12: 8 (weight=43), 14 (weight=8), 4 (weight=44), 10 (weight=99), 6 (weight=10), 1 (weight=61), 13 (weight=60), 5 (weight=21), 15 (weight=47), 11 (weight=18), 3 (weight=19), 7 (weight=96), 2 (weight=29), 9 (weight=67)\nVertex 13: 10 (weight=30), 1 (weight=85), 6 (weight=13), 3 (weight=28), 12 (weight=60), 11 (weight=18), 15 (weight=21), 4 (weight=83), 8 (weight=94), 9 (weight=21), 14 (weight=93), 5 (weight=32), 2 (weight=35), 7 (weight=30)\nVertex 14: 6 (weight=50), 2 (weight=92), 7 (weight=58), 3 (weight=67), 12 (weight=8), 10 (weight=8), 1 (weight=28), 4 (weight=85), 9 (weight=42), 11 (weight=52), 13 (weight=93), 5 (weight=92), 15 (weight=15), 8 (weight=50)\nVertex 15: 1 (weight=70), 2 (weight=50), 4 (weight=3), 9 (weight=90), 13 (weight=21), 5 (weight=37), 12 (weight=47), 7 (weight=61), 6 (weight=58), 11 (weight=8), 14 (weight=15), 10 (weight=15)\n",
    "graph_output": "15 103\n1 10 43\n10 5 90\n1 7 36\n1 6 38\n10 9 31\n10 13 30\n5 8 33\n9 4 84\n1 15 70\n10 11 46\n6 14 50\n14 2 92\n1 3 58\n8 12 43\n9 3 34\n6 3 64\n7 4 25\n10 6 26\n4 8 5\n9 1 57\n14 7 58\n9 2 9\n1 13 85\n15 2 50\n6 13 13\n9 7 89\n3 14 67\n14 12 8\n10 14 8\n12 4 44\n15 4 3\n10 12 99\n5 6 40\n9 6 93\n12 6 10\n3 13 28\n1 12 61\n2 1 9\n7 8 34\n8 9 16\n7 6 21\n3 4 80\n12 13 60\n13 11 18\n2 8 45\n9 15 90\n4 1 59\n14 1 28\n3 5 17\n8 3 85\n10 2 58\n15 13 21\n4 13 83\n8 1 100\n11 2 68\n5 4 66\n6 8 68\n4 14 85\n12 5 21\n7 3 41\n5 15 37\n7 11 64\n9 14 42\n8 11 53\n12 15 47\n11 12 18\n5 2 100\n7 2 2\n13 8 94\n11 9 9\n6 4 13\n13 9 21\n3 12 19\n1 11 87\n1 5 33\n2 3 2\n4 11 32\n10 3 19\n7 15 61\n11 6 74\n12 7 96\n11 14 52\n5 9 42\n14 13 93\n13 5 32\n11 5 26\n5 7 85\n5 14 92\n13 2 35\n15 6 58\n8 10 39\n10 7 53\n15 11 8\n12 2 29\n15 14 15\n2 4 37\n4 10 74\n15 10 15\n6 2 82\n12 9 67\n13 7 30\n3 11 49\n8 14 50\n",
    "vertices": [
      null,
      null
    ],
    "answer": 116,
    "description_type": "list"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 17 and 21 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (31\u00d731):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31\n   ----------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   1   0   0   1   0   0   1   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 4 |  1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   1   0   0   0   1   1   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0 \n 7 |  1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0 \n10 |  1   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n14 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1 \n20 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0 \n26 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0 \n30 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0 \n31 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "31 30\n1 30\n30 29\n1 11\n1 4\n1 10\n29 19\n30 25\n4 8\n1 17\n25 28\n10 6\n10 13\n4 26\n6 15\n19 31\n1 7\n7 18\n17 21\n6 14\n28 3\n7 5\n6 20\n14 16\n19 2\n25 9\n13 27\n25 12\n6 24\n24 23\n9 22\n",
    "vertices": [
      17,
      21
    ],
    "answer": 17,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (29\u00d729):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n   --------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   1   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  1   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 4 |  1   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   1   0 \n 7 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n10 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n13 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n20 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   1   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "29 28\n1 3\n3 24\n24 20\n24 21\n1 4\n4 15\n15 17\n24 8\n15 27\n27 6\n4 13\n3 14\n3 7\n8 23\n1 11\n6 28\n6 26\n26 19\n28 9\n17 29\n8 10\n20 5\n11 22\n14 16\n20 18\n7 25\n28 12\n14 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 17,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 9 and vertex 23.\nThere is an edge between vertex 6 and vertex 20.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 6 and vertex 18.\nThere is an edge between vertex 23 and vertex 14.\nThere is an edge between vertex 23 and vertex 5.\nThere is an edge between vertex 9 and vertex 29.\nThere is an edge between vertex 29 and vertex 7.\nThere is an edge between vertex 5 and vertex 19.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 12 and vertex 21.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 20 and vertex 28.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 15 and vertex 25.\nThere is an edge between vertex 13 and vertex 24.\nThere is an edge between vertex 29 and vertex 11.\nThere is an edge between vertex 29 and vertex 27.\nThere is an edge between vertex 3 and vertex 22.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 22 and vertex 26.\n",
    "graph_output": "29 28\n1 6\n6 15\n1 9\n9 23\n6 20\n9 8\n15 2\n9 12\n6 18\n23 14\n23 5\n9 29\n29 7\n5 19\n8 4\n12 21\n12 16\n5 3\n20 28\n12 13\n15 25\n13 24\n29 11\n29 27\n3 22\n16 17\n11 10\n22 26\n",
    "vertices": [
      null,
      null
    ],
    "answer": 16,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 32 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   1 \n 2 |  0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   1 \n 3 |  1   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0 \n 4 |  0   0   0   0   0   1   0   0   1   0   1   1   0   1   1   0 \n 5 |  0   1   0   0   0   1   0   0   0   1   0   0   0   1   1   0 \n 6 |  0   0   1   1   1   0   1   1   0   0   0   1   0   1   1   0 \n 7 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1 \n 8 |  1   0   0   0   0   1   0   0   0   1   0   0   0   0   0   1 \n 9 |  0   1   0   1   0   0   0   0   0   1   0   0   1   0   0   0 \n10 |  0   0   0   0   1   0   0   1   1   0   1   0   0   0   0   0 \n11 |  0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0 \n12 |  0   0   0   1   0   1   0   0   0   0   0   0   0   0   1   1 \n13 |  0   0   1   0   0   0   0   0   1   0   0   0   0   0   1   0 \n14 |  0   0   0   1   1   1   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   1   1   1   0   0   0   0   0   1   1   0   0   0 \n16 |  1   1   0   0   0   0   1   1   0   0   0   1   0   0   0   0 \n",
    "graph_output": "16 32\n1 16\n16 2\n16 12\n12 15\n15 6\n16 8\n8 10\n6 7\n6 5\n6 3\n15 13\n6 4\n10 9\n4 14\n10 11\n10 5\n3 1\n7 16\n9 4\n2 9\n14 6\n6 8\n14 5\n5 2\n6 12\n5 15\n4 15\n12 4\n1 8\n13 9\n3 13\n11 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 9 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 16 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 5 (capacity=7), 10 (capacity=10), 7 (capacity=2), 4 (capacity=2), 3 (capacity=3)\nVertex 2: 12 (capacity=6), 9 (capacity=4), 3 (capacity=4)\nVertex 3: 6 (capacity=9), 1 (capacity=3), 2 (capacity=4), 11 (capacity=5)\nVertex 4: 1 (capacity=2), 13 (capacity=8)\nVertex 5: 1 (capacity=7)\nVertex 6: 12 (capacity=10), 3 (capacity=9), 8 (capacity=4)\nVertex 7: 1 (capacity=2), 12 (capacity=10)\nVertex 8: 6 (capacity=4)\nVertex 9: 2 (capacity=4), 10 (capacity=4)\nVertex 10: 1 (capacity=10), 11 (capacity=6), 9 (capacity=4)\nVertex 11: 10 (capacity=6), 3 (capacity=5)\nVertex 12: 7 (capacity=10), 6 (capacity=10), 2 (capacity=6)\nVertex 13: 4 (capacity=8)\n",
    "graph_output": "13 16\n1 5 7\n1 10 10\n10 11 6\n1 7 2\n7 12 10\n12 6 10\n12 2 6\n6 3 9\n1 4 2\n2 9 4\n4 13 8\n6 8 4\n3 1 3\n2 3 4\n10 9 4\n11 3 5\n",
    "vertices": [
      9,
      10
    ],
    "answer": 8,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 117 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   0   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   0   1   1   0   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   0 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n15 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n16 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   0 \n",
    "graph_output": "16 117\n11 12\n1 13\n8 7\n5 13\n3 12\n15 10\n2 9\n14 4\n15 8\n13 6\n9 16\n8 14\n7 6\n8 2\n13 7\n13 2\n14 2\n5 3\n14 3\n4 11\n15 12\n8 6\n3 4\n14 6\n16 4\n11 3\n16 8\n10 11\n12 16\n1 8\n6 1\n9 14\n13 14\n5 11\n9 4\n9 11\n11 1\n8 11\n14 15\n14 5\n1 14\n9 12\n13 11\n3 13\n9 1\n7 12\n4 6\n16 10\n6 16\n1 3\n15 3\n7 5\n11 6\n5 16\n6 15\n11 14\n15 7\n6 9\n15 13\n8 13\n7 16\n4 2\n5 15\n1 2\n2 7\n9 10\n15 9\n5 10\n16 1\n7 3\n12 8\n1 5\n1 10\n7 10\n4 8\n3 10\n10 14\n9 5\n4 15\n1 4\n14 7\n3 6\n10 12\n15 2\n16 3\n8 9\n10 8\n2 12\n14 12\n16 15\n16 2\n7 1\n9 13\n6 10\n10 4\n12 4\n16 13\n2 10\n2 5\n12 13\n7 9\n6 5\n3 2\n10 13\n1 12\n12 5\n8 3\n6 2\n7 4\n2 11\n13 4\n16 14\n7 11\n15 11\n6 12\n9 3\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 9 (source) to vertex 11 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 13 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6 with a capacity of 5.\nThere is an edge between vertex 6 and vertex 10 with a capacity of 2.\nThere is an edge between vertex 6 and vertex 11 with a capacity of 10.\nThere is an edge between vertex 6 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 2 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 7 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 10 and vertex 5 with a capacity of 8.\nThere is an edge between vertex 5 and vertex 8 with a capacity of 7.\nThere is an edge between vertex 11 and vertex 3 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 9 with a capacity of 7.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 3.\nThere is an edge between vertex 9 and vertex 2 with a capacity of 3.\n",
    "graph_output": "11 13\n1 6 5\n6 10 2\n6 11 10\n6 4 1\n11 2 9\n1 7 10\n1 9 6\n10 5 8\n5 8 7\n11 3 6\n7 9 7\n5 6 3\n9 2 3\n",
    "vertices": [
      9,
      11
    ],
    "answer": 8,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 13 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 5 and vertex 6.\n",
    "graph_output": "7 13\n1 2\n2 3\n2 4\n3 5\n4 7\n4 6\n1 5\n4 1\n7 2\n3 7\n3 4\n7 6\n5 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 644,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 120 edges\n\nEdges (Format: Node Node Weight):\n1 9 3\n1 2 11\n1 5 21\n1 12 43\n12 7 57\n5 16 93\n2 13 13\n16 8 36\n12 14 99\n5 4 3\n1 3 26\n4 15 71\n14 10 74\n14 6 52\n16 11 94\n3 6 17\n15 7 19\n1 14 96\n16 4 53\n16 12 6\n1 13 5\n12 2 14\n8 11 48\n16 1 75\n12 11 54\n14 2 88\n2 11 57\n7 8 51\n3 12 73\n4 1 22\n14 15 22\n13 12 22\n7 4 9\n13 10 63\n10 15 9\n15 12 94\n8 13 85\n3 9 66\n1 7 7\n13 7 65\n12 5 67\n8 14 2\n6 15 79\n14 5 59\n15 13 60\n12 4 9\n11 6 8\n15 8 76\n11 7 38\n8 9 70\n8 5 48\n1 8 49\n4 2 88\n15 9 36\n5 3 59\n10 7 34\n15 16 67\n12 8 77\n2 15 5\n16 13 35\n5 7 87\n9 5 10\n2 16 13\n2 6 9\n2 10 75\n3 14 67\n1 6 25\n16 10 34\n16 14 95\n16 3 70\n11 14 94\n3 7 5\n5 6 16\n12 6 55\n9 7 74\n11 1 23\n11 4 85\n11 13 25\n3 2 60\n11 10 13\n9 12 22\n13 14 89\n10 1 96\n13 5 40\n8 6 83\n7 14 84\n10 6 65\n5 11 17\n13 6 30\n5 10 96\n6 16 50\n13 4 48\n6 7 9\n10 3 17\n2 7 23\n10 9 61\n12 10 60\n8 10 88\n9 2 40\n15 5 31\n9 4 60\n4 14 47\n16 7 38\n15 11 91\n8 4 60\n9 16 25\n4 10 67\n4 6 67\n8 2 59\n9 6 55\n4 3 97\n15 3 6\n8 3 39\n3 13 72\n9 11 44\n15 1 65\n14 9 44\n11 3 6\n2 5 27\n13 9 44\n",
    "graph_output": "16 120\n1 9 3\n1 2 11\n1 5 21\n1 12 43\n12 7 57\n5 16 93\n2 13 13\n16 8 36\n12 14 99\n5 4 3\n1 3 26\n4 15 71\n14 10 74\n14 6 52\n16 11 94\n3 6 17\n15 7 19\n1 14 96\n16 4 53\n16 12 6\n1 13 5\n12 2 14\n8 11 48\n16 1 75\n12 11 54\n14 2 88\n2 11 57\n7 8 51\n3 12 73\n4 1 22\n14 15 22\n13 12 22\n7 4 9\n13 10 63\n10 15 9\n15 12 94\n8 13 85\n3 9 66\n1 7 7\n13 7 65\n12 5 67\n8 14 2\n6 15 79\n14 5 59\n15 13 60\n12 4 9\n11 6 8\n15 8 76\n11 7 38\n8 9 70\n8 5 48\n1 8 49\n4 2 88\n15 9 36\n5 3 59\n10 7 34\n15 16 67\n12 8 77\n2 15 5\n16 13 35\n5 7 87\n9 5 10\n2 16 13\n2 6 9\n2 10 75\n3 14 67\n1 6 25\n16 10 34\n16 14 95\n16 3 70\n11 14 94\n3 7 5\n5 6 16\n12 6 55\n9 7 74\n11 1 23\n11 4 85\n11 13 25\n3 2 60\n11 10 13\n9 12 22\n13 14 89\n10 1 96\n13 5 40\n8 6 83\n7 14 84\n10 6 65\n5 11 17\n13 6 30\n5 10 96\n6 16 50\n13 4 48\n6 7 9\n10 3 17\n2 7 23\n10 9 61\n12 10 60\n8 10 88\n9 2 40\n15 5 31\n9 4 60\n4 14 47\n16 7 38\n15 11 91\n8 4 60\n9 16 25\n4 10 67\n4 6 67\n8 2 59\n9 6 55\n4 3 97\n15 3 6\n8 3 39\n3 13 72\n9 11 44\n15 1 65\n14 9 44\n11 3 6\n2 5 27\n13 9 44\n",
    "vertices": [
      null,
      null
    ],
    "answer": 105,
    "description_type": "structured"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 59 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 7, 6, 5, 4, 10, 2, 11, 12, 3\nVertex 2: 6, 3, 5, 8, 11, 10, 9, 1, 7, 4\nVertex 3: 12, 4, 6, 2, 5, 7, 10, 9, 11, 8, 1\nVertex 4: 3, 10, 9, 6, 1, 11, 7, 8, 2, 5\nVertex 5: 3, 2, 9, 1, 7, 6, 12, 8, 4, 10, 11\nVertex 6: 7, 12, 2, 3, 11, 1, 4, 5, 9, 8\nVertex 7: 6, 9, 1, 3, 8, 10, 5, 11, 4, 2\nVertex 8: 9, 11, 1, 7, 2, 12, 4, 5, 3, 6\nVertex 9: 8, 7, 12, 11, 5, 4, 3, 2, 10, 6\nVertex 10: 4, 12, 3, 11, 7, 2, 9, 1, 5\nVertex 11: 8, 6, 9, 2, 10, 7, 4, 1, 3, 5\nVertex 12: 3, 6, 9, 10, 8, 5, 1\n",
    "graph_output": "12 59\n3 12\n8 9\n7 6\n12 6\n3 4\n8 11\n6 2\n6 3\n1 8\n7 9\n12 9\n2 3\n1 7\n5 3\n10 4\n7 3\n11 6\n1 6\n9 11\n8 7\n5 2\n12 10\n9 5\n9 4\n4 6\n5 1\n1 4\n8 2\n3 10\n2 11\n11 10\n10 7\n7 5\n7 11\n3 9\n4 11\n8 12\n6 5\n2 10\n9 2\n10 9\n10 1\n9 6\n5 12\n7 4\n2 1\n4 8\n1 11\n8 5\n7 2\n2 4\n11 3\n3 8\n12 1\n3 1\n4 5\n8 6\n5 10\n5 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 1 (source) to vertex 9 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 15 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 2 (capacity=8), 5 (capacity=8), 8 (capacity=5)\nVertex 2: 1 (capacity=8), 7 (capacity=8), 9 (capacity=3)\nVertex 3: 7 (capacity=1), 12 (capacity=9), 6 (capacity=2)\nVertex 4: 7 (capacity=1), 5 (capacity=5)\nVertex 5: 1 (capacity=8), 6 (capacity=1), 4 (capacity=5)\nVertex 6: 5 (capacity=1), 11 (capacity=3), 3 (capacity=2)\nVertex 7: 2 (capacity=8), 4 (capacity=1), 3 (capacity=1), 9 (capacity=6)\nVertex 8: 1 (capacity=5), 9 (capacity=9), 10 (capacity=5)\nVertex 9: 8 (capacity=9), 7 (capacity=6), 2 (capacity=3)\nVertex 10: 8 (capacity=5)\nVertex 11: 6 (capacity=3)\nVertex 12: 3 (capacity=9)\n",
    "graph_output": "12 15\n1 2 8\n1 5 8\n1 8 5\n2 7 8\n8 9 9\n7 4 1\n7 3 1\n3 12 9\n5 6 1\n6 11 3\n8 10 5\n6 3 2\n5 4 5\n9 7 6\n2 9 3\n",
    "vertices": [
      1,
      9
    ],
    "answer": 14,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 20 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 7, 3, 8\nVertex 2: 7, 6, 9, 12\nVertex 3: 7, 5, 1, 4\nVertex 4: 9, 3, 11\nVertex 5: 1, 8, 3\nVertex 6: 2, 12, 13, 8, 7\nVertex 7: 2, 11, 3, 1, 6\nVertex 8: 5, 6, 1\nVertex 9: 2, 13, 4\nVertex 10: No connections\nVertex 11: 7, 4\nVertex 12: 6, 2\nVertex 13: 6, 9\n",
    "graph_output": "13 20\n7 2\n1 5\n2 6\n12 6\n11 7\n13 6\n9 2\n8 5\n7 3\n9 13\n3 5\n4 9\n6 8\n1 7\n1 3\n3 4\n12 2\n8 1\n11 4\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 123 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 16, 8, 5, 9, 11, 2, 3, 12, 17, 7, 14, 4, 13, 10\nVertex 2: 16, 12, 10, 4, 14, 1, 9, 7, 11, 3, 13, 6, 17, 8, 5\nVertex 3: 13, 12, 17, 1, 16, 5, 6, 11, 2, 10, 9, 15, 7, 14, 8\nVertex 4: 13, 2, 15, 11, 6, 14, 10, 9, 17, 1, 5, 8, 16\nVertex 5: 8, 6, 1, 9, 16, 11, 17, 14, 3, 13, 4, 7, 15, 2\nVertex 6: 5, 8, 9, 4, 16, 11, 10, 17, 14, 13, 3, 2, 7\nVertex 7: 15, 17, 2, 1, 14, 12, 11, 16, 9, 10, 3, 8, 5, 6\nVertex 8: 1, 5, 11, 6, 17, 13, 10, 9, 15, 4, 7, 16, 12, 2, 3\nVertex 9: 15, 5, 1, 6, 11, 2, 10, 13, 17, 4, 14, 8, 3, 7, 12\nVertex 10: 16, 17, 2, 12, 9, 6, 4, 11, 8, 3, 7, 15, 14, 1, 13\nVertex 11: 8, 14, 4, 9, 1, 6, 16, 5, 12, 10, 2, 3, 7, 13, 17, 15\nVertex 12: 2, 3, 16, 10, 1, 14, 11, 7, 17, 8, 13, 9\nVertex 13: 15, 3, 4, 14, 9, 6, 8, 5, 11, 2, 17, 1, 16, 12, 10\nVertex 14: 15, 13, 11, 16, 17, 2, 4, 12, 6, 5, 1, 9, 7, 10, 3\nVertex 15: 1, 9, 13, 14, 7, 4, 16, 8, 3, 17, 10, 5, 11\nVertex 16: 1, 10, 2, 14, 5, 12, 6, 17, 15, 11, 3, 7, 8, 13, 4\nVertex 17: 10, 7, 14, 3, 8, 16, 6, 9, 4, 1, 5, 13, 12, 15, 2, 11\n",
    "graph_output": "17 123\n1 15\n1 16\n15 9\n15 13\n1 8\n13 3\n16 10\n13 4\n15 14\n15 7\n8 5\n5 6\n8 11\n16 2\n10 17\n2 12\n5 1\n5 9\n17 7\n14 13\n2 10\n9 1\n4 2\n11 14\n3 12\n16 14\n8 6\n15 4\n14 17\n4 11\n16 5\n14 2\n17 3\n12 16\n17 8\n9 6\n6 4\n9 11\n16 6\n17 16\n10 12\n4 14\n1 11\n2 1\n6 11\n16 15\n3 1\n9 2\n12 1\n10 9\n14 12\n10 6\n11 16\n7 2\n10 4\n11 5\n6 17\n9 13\n17 9\n6 14\n9 4\n11 12\n10 11\n4 17\n1 17\n1 7\n13 6\n17 5\n16 3\n8 13\n5 14\n1 14\n3 5\n5 13\n2 11\n14 9\n14 7\n6 3\n12 7\n11 3\n8 10\n9 8\n7 11\n11 13\n2 3\n4 1\n10 3\n7 16\n13 2\n8 15\n4 5\n17 13\n9 3\n9 7\n3 15\n8 4\n10 7\n2 6\n3 7\n8 7\n17 12\n13 1\n15 17\n10 15\n10 14\n17 2\n10 1\n8 16\n11 17\n12 8\n7 5\n8 2\n13 16\n6 7\n3 14\n5 15\n13 12\n8 3\n9 12\n15 11\n5 2\n10 13\n16 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 16 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 10\nVertex 2: 8, 9\nVertex 3: 6, 10, 8\nVertex 4: 8, 11, 6\nVertex 5: 6, 1, 7\nVertex 6: 10, 5, 4, 11, 3\nVertex 7: 10, 5\nVertex 8: 4, 2, 3\nVertex 9: 2, 10\nVertex 10: 6, 7, 1, 3, 9\nVertex 11: 4, 6\n",
    "graph_output": "11 16\n8 4\n6 10\n5 6\n8 2\n4 11\n10 7\n4 6\n5 1\n7 5\n10 1\n11 6\n3 6\n9 2\n3 10\n9 10\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 23 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 4.\n",
    "graph_output": "17 23\n11 1\n14 1\n17 12\n3 2\n3 12\n4 13\n7 15\n8 10\n4 15\n3 13\n7 12\n10 9\n13 9\n12 2\n15 9\n14 13\n7 16\n8 3\n10 12\n8 6\n11 2\n1 7\n1 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 116 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 13, 7, 11, 5, 3, 17, 10, 6, 16, 4, 8, 15, 14\nVertex 2: 9, 7, 3, 4, 6, 5, 12, 16, 13, 14, 15, 11, 8\nVertex 3: 2, 12, 17, 10, 8, 4, 14, 9, 1, 16, 7, 13, 5, 15, 11\nVertex 4: 2, 15, 7, 14, 3, 9, 5, 13, 10, 11, 17, 8, 16, 1, 6, 12\nVertex 5: 10, 17, 15, 11, 2, 12, 1, 7, 8, 4, 16, 9, 3, 14\nVertex 6: 2, 12, 17, 11, 13, 1, 16, 4, 15, 9, 14, 8\nVertex 7: 2, 11, 1, 17, 15, 4, 12, 5, 16, 14, 3, 8, 9, 13, 10\nVertex 8: 13, 3, 10, 5, 12, 14, 15, 4, 7, 1, 9, 2, 11, 6, 16\nVertex 9: 1, 2, 14, 4, 17, 3, 11, 10, 5, 7, 15, 6, 8, 16\nVertex 10: 14, 5, 3, 8, 11, 4, 9, 1, 15, 12, 7, 13\nVertex 11: 13, 5, 7, 1, 10, 6, 17, 9, 4, 12, 14, 15, 2, 8, 3\nVertex 12: 3, 5, 7, 17, 6, 8, 2, 11, 14, 4, 16, 10, 15\nVertex 13: 1, 8, 11, 17, 2, 4, 6, 15, 3, 16, 7, 10\nVertex 14: 9, 10, 4, 3, 8, 7, 11, 12, 2, 5, 6, 1\nVertex 15: 4, 5, 7, 17, 16, 8, 13, 11, 10, 9, 6, 3, 12, 2, 1\nVertex 16: 17, 7, 2, 15, 5, 3, 4, 6, 1, 13, 12, 9, 8\nVertex 17: 5, 16, 13, 3, 7, 15, 9, 12, 1, 6, 11, 4\n",
    "graph_output": "17 116\n1 9\n9 2\n2 7\n2 3\n3 12\n9 14\n2 4\n4 15\n2 6\n1 13\n14 10\n13 8\n10 5\n5 17\n13 11\n17 16\n17 13\n15 5\n11 5\n3 17\n7 11\n7 1\n5 2\n7 17\n5 12\n15 7\n4 7\n3 10\n14 4\n8 3\n11 1\n8 10\n3 4\n9 4\n1 5\n15 17\n12 7\n7 5\n8 5\n3 14\n9 17\n9 3\n12 17\n12 6\n8 12\n10 11\n3 1\n12 2\n4 5\n17 1\n16 7\n16 2\n6 17\n2 13\n16 15\n4 13\n11 6\n17 11\n8 14\n16 5\n3 16\n15 8\n6 13\n10 4\n11 9\n7 14\n9 10\n10 1\n4 11\n12 11\n17 4\n15 13\n7 3\n6 1\n14 11\n9 5\n4 8\n7 8\n11 15\n7 9\n16 4\n16 6\n1 16\n13 3\n15 10\n12 14\n9 15\n5 3\n4 1\n4 6\n15 6\n4 12\n13 16\n15 3\n12 16\n14 2\n7 13\n6 9\n12 10\n12 15\n1 8\n14 5\n14 6\n2 15\n2 11\n8 9\n2 8\n11 8\n15 1\n9 16\n8 6\n7 10\n1 14\n10 13\n16 8\n3 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 4 and vertex 15 are connected.\n\nThis is an undirected graph with 16 vertices and 111 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 2, 4, 8, 11, 5, 7, 3, 12, 16, 10, 6, 15\nVertex 2: 10, 4, 14, 6, 1, 7, 16, 11, 13, 5, 15, 9, 12, 3, 8\nVertex 3: 14, 5, 6, 10, 7, 16, 1, 9, 13, 11, 4, 12, 2, 15\nVertex 4: 2, 12, 1, 8, 7, 16, 10, 6, 15, 13, 5, 3, 9, 14\nVertex 5: 13, 11, 8, 12, 9, 10, 3, 1, 15, 16, 2, 4, 14, 6, 7\nVertex 6: 13, 2, 3, 16, 8, 10, 11, 4, 15, 14, 1, 12, 5, 9, 7\nVertex 7: 2, 15, 3, 4, 10, 12, 1, 8, 9, 14, 11, 6, 5, 16\nVertex 8: 15, 5, 12, 1, 4, 13, 6, 11, 10, 16, 9, 7, 14, 2\nVertex 9: 5, 13, 15, 12, 16, 8, 7, 3, 11, 10, 2, 14, 6, 4\nVertex 10: 2, 5, 3, 7, 14, 11, 6, 4, 8, 15, 9, 13, 1, 16\nVertex 11: 5, 14, 1, 16, 12, 2, 10, 8, 6, 13, 9, 3, 7\nVertex 12: 5, 14, 4, 8, 11, 9, 7, 1, 6, 13, 2, 3\nVertex 13: 16, 5, 1, 6, 9, 15, 8, 2, 11, 14, 4, 3, 10, 12\nVertex 14: 3, 2, 11, 12, 10, 16, 15, 13, 5, 6, 7, 9, 8, 4\nVertex 15: 8, 7, 13, 9, 14, 5, 4, 6, 10, 2, 16, 3, 1\nVertex 16: 13, 2, 11, 3, 6, 9, 4, 14, 8, 5, 1, 15, 10, 7\n",
    "graph_output": "16 111\n2 10\n13 16\n3 14\n5 13\n5 11\n15 8\n4 2\n13 1\n8 5\n12 5\n9 5\n14 2\n6 13\n6 2\n5 10\n14 11\n3 5\n2 1\n13 9\n2 7\n14 12\n3 6\n12 4\n10 3\n8 12\n4 1\n8 1\n11 1\n7 15\n16 2\n8 4\n7 3\n15 13\n11 16\n16 3\n15 9\n11 12\n5 1\n4 7\n2 11\n9 12\n6 16\n13 8\n2 13\n7 10\n10 14\n10 11\n9 16\n8 6\n4 16\n11 8\n6 10\n12 7\n4 10\n16 14\n7 1\n11 6\n10 8\n15 14\n5 15\n1 3\n6 4\n8 16\n4 15\n9 8\n7 8\n6 15\n7 9\n13 11\n9 3\n16 5\n14 13\n2 5\n10 15\n13 4\n11 9\n4 5\n12 1\n14 5\n3 13\n9 10\n16 1\n6 14\n10 13\n10 1\n6 1\n6 12\n2 15\n14 7\n2 9\n6 5\n14 9\n12 13\n3 11\n6 9\n15 16\n7 11\n12 2\n3 4\n9 4\n12 3\n6 7\n3 2\n7 5\n8 14\n8 2\n16 10\n15 3\n7 16\n14 4\n15 1\n",
    "vertices": [
      4,
      15
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   1   0   1   0   1   0   0   1   0   0   1   0   0   1 \n 2 |  0   0   0   0   0   1   1   0   0   0   0   0   0   1   0   1 \n 3 |  1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1 \n 4 |  0   0   1   0   0   0   0   0   1   0   1   0   0   0   1   0 \n 5 |  1   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0 \n 6 |  0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   1 \n 7 |  1   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0 \n 9 |  0   0   0   1   0   0   0   0   0   1   0   0   1   0   0   0 \n10 |  1   0   0   0   0   0   0   0   1   0   0   0   0   1   0   1 \n11 |  0   0   0   1   1   1   0   0   0   0   0   0   0   0   0   1 \n12 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0 \n13 |  1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n14 |  0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n15 |  0   0   0   1   0   0   0   1   0   0   0   1   0   0   0   1 \n16 |  1   1   1   0   0   1   0   0   0   1   1   0   0   0   1   0 \n",
    "graph_output": "16 28\n1 16\n1 5\n1 13\n1 10\n16 15\n16 6\n16 2\n2 14\n15 8\n15 4\n2 7\n16 11\n15 12\n16 3\n10 9\n4 9\n3 4\n5 7\n7 1\n1 3\n12 8\n11 6\n16 10\n10 14\n5 11\n6 2\n13 9\n4 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 8 and vertex 4.\n",
    "graph_output": "16 30\n10 7\n16 6\n15 4\n16 3\n6 8\n11 5\n13 11\n13 12\n3 8\n7 14\n9 5\n9 15\n14 16\n1 12\n10 4\n1 10\n7 1\n11 14\n2 15\n5 13\n16 10\n5 12\n12 10\n1 13\n6 5\n14 13\n7 15\n7 2\n1 11\n8 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 9 (source) to vertex 11 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 13 edges\n\nEdges (Format: Node Node Capacity):\n1 6 5\n6 10 2\n6 11 10\n6 4 1\n11 2 9\n1 7 10\n1 9 6\n10 5 8\n5 8 7\n11 3 6\n7 9 7\n5 6 3\n9 2 3\n",
    "graph_output": "11 13\n1 6 5\n6 10 2\n6 11 10\n6 4 1\n11 2 9\n1 7 10\n1 9 6\n10 5 8\n5 8 7\n11 3 6\n7 9 7\n5 6 3\n9 2 3\n",
    "vertices": [
      9,
      11
    ],
    "answer": 8,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 15 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   0   0   0   1   0   0   0   0   1   0 \n 2 |  0   0   0   0   0   0   0   0   0   1   0   1   0 \n 3 |  0   0   0   1   0   1   0   0   0   0   0   0   0 \n 4 |  0   0   1   0   0   0   0   1   0   0   0   0   1 \n 5 |  0   0   0   0   0   0   0   0   0   0   1   0   0 \n 6 |  0   0   1   0   0   0   0   0   0   0   1   0   1 \n 7 |  1   0   0   0   0   0   0   0   1   0   0   1   1 \n 8 |  0   0   0   1   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   1   0   0   0   0   1   0 \n10 |  0   1   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   1   1   0   0   0   0   0   0   0 \n12 |  1   1   0   0   0   0   1   0   1   0   0   0   0 \n13 |  0   0   0   1   0   1   1   0   0   0   0   0   0 \n",
    "graph_output": "13 15\n1 7\n13 6\n13 7\n6 3\n4 13\n4 3\n9 7\n7 12\n11 5\n10 2\n12 2\n1 12\n9 12\n6 11\n4 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 9 (source) to vertex 12 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 21 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 4 with a capacity of 3.\nThere is an edge between vertex 5 and vertex 12 with a capacity of 10.\nThere is an edge between vertex 5 and vertex 11 with a capacity of 10.\nThere is an edge between vertex 12 and vertex 9 with a capacity of 3.\nThere is an edge between vertex 9 and vertex 2 with a capacity of 3.\nThere is an edge between vertex 2 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 4 and vertex 10 with a capacity of 6.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 7.\nThere is an edge between vertex 7 and vertex 3 with a capacity of 1.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 5 with a capacity of 5.\nThere is an edge between vertex 5 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 11 with a capacity of 4.\nThere is an edge between vertex 1 and vertex 12 with a capacity of 7.\nThere is an edge between vertex 6 and vertex 12 with a capacity of 7.\nThere is an edge between vertex 9 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 3 with a capacity of 2.\nThere is an edge between vertex 9 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 12 and vertex 11 with a capacity of 4.\n",
    "graph_output": "12 21\n1 5 2\n5 4 3\n5 12 10\n5 11 10\n12 9 3\n9 2 3\n2 8 1\n4 10 6\n2 7 7\n7 3 1\n5 6 5\n9 5 5\n5 2 10\n1 11 4\n1 12 7\n6 12 7\n9 3 5\n3 5 2\n4 3 2\n9 4 6\n12 11 4\n",
    "vertices": [
      9,
      12
    ],
    "answer": 17,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 9 and vertex 8 are connected.\n\nThis is an undirected graph with 16 vertices and 19 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   1   0   0   0   1   0   0   0   0   1   0 \n 2 |  0   0   0   1   0   0   1   1   0   1   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   1   0   0   0   0   0   1   0   1   0   1   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   1   1   0   1   0   1   0   0   0 \n 6 |  1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 7 |  0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   1   0   1   1   0   0   0   0   0   0   0   0   1   0   0 \n 9 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n10 |  1   1   0   1   0   0   0   0   0   0   0   0   1   0   0   0 \n11 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   1 \n12 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n15 |  1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n",
    "graph_output": "16 19\n4 2\n1 10\n11 15\n4 12\n14 8\n9 5\n2 7\n10 2\n13 10\n8 5\n2 8\n4 10\n6 7\n13 5\n16 11\n5 11\n6 1\n4 8\n1 15\n",
    "vertices": [
      9,
      8
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 83 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 10, 4, 8, 7, 15, 13, 11, 14, 2, 9, 3, 6\nVertex 2: 12, 8, 3, 11, 7, 15, 9, 14, 1, 4, 13, 5, 10\nVertex 3: 13, 14, 2, 9, 15, 1, 11, 7, 4\nVertex 4: 15, 12, 8, 1, 11, 9, 6, 13, 10, 5, 2, 7, 3\nVertex 5: 1, 12, 15, 10, 14, 4, 11, 8, 2, 13, 9\nVertex 6: 14, 4, 11, 7, 13, 12, 9, 1\nVertex 7: 13, 9, 15, 1, 2, 6, 12, 14, 10, 4, 3\nVertex 8: 4, 14, 9, 2, 1, 12, 10, 13, 5, 11\nVertex 9: 8, 7, 4, 3, 2, 1, 6, 10, 14, 12, 5\nVertex 10: 1, 15, 13, 5, 4, 8, 11, 7, 9, 2\nVertex 11: 4, 6, 12, 2, 13, 1, 5, 14, 10, 3, 8\nVertex 12: 4, 5, 2, 11, 8, 7, 15, 6, 14, 13, 9\nVertex 13: 7, 3, 15, 10, 14, 4, 1, 11, 6, 8, 2, 12, 5\nVertex 14: 8, 6, 3, 15, 13, 5, 2, 7, 1, 11, 12, 9\nVertex 15: 4, 14, 13, 10, 7, 5, 1, 2, 12, 3\n",
    "graph_output": "15 83\n4 15\n5 1\n12 4\n5 12\n10 1\n4 8\n8 14\n7 13\n13 3\n1 4\n8 9\n6 14\n7 9\n14 3\n12 2\n14 15\n8 2\n15 13\n15 10\n11 4\n9 4\n13 10\n15 7\n15 5\n6 4\n6 11\n8 1\n1 7\n3 2\n12 11\n9 3\n14 13\n12 8\n13 4\n15 1\n10 5\n1 13\n11 2\n7 2\n15 2\n4 10\n14 5\n6 7\n13 11\n9 2\n13 6\n14 2\n7 12\n14 7\n1 11\n12 15\n5 4\n11 5\n6 12\n8 10\n8 13\n15 3\n14 1\n1 2\n11 14\n9 1\n11 10\n9 6\n14 12\n4 2\n8 5\n2 13\n12 13\n7 10\n3 1\n1 6\n4 7\n5 2\n10 9\n14 9\n5 13\n10 2\n3 11\n3 7\n12 9\n5 9\n3 4\n8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 11 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 20 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 4 (capacity=1), 11 (capacity=1), 6 (capacity=4)\nVertex 2: 10 (capacity=3), 6 (capacity=8), 4 (capacity=9)\nVertex 3: 8 (capacity=5), 7 (capacity=10), 11 (capacity=9), 10 (capacity=5)\nVertex 4: 1 (capacity=1), 8 (capacity=9), 2 (capacity=9), 11 (capacity=7)\nVertex 5: 9 (capacity=2), 7 (capacity=10)\nVertex 6: 11 (capacity=3), 2 (capacity=8), 1 (capacity=4), 10 (capacity=7), 9 (capacity=9)\nVertex 7: 3 (capacity=10), 9 (capacity=2), 11 (capacity=10), 5 (capacity=10)\nVertex 8: 4 (capacity=9), 3 (capacity=5)\nVertex 9: 7 (capacity=2), 5 (capacity=2), 6 (capacity=9)\nVertex 10: 11 (capacity=10), 2 (capacity=3), 6 (capacity=7), 3 (capacity=5)\nVertex 11: 1 (capacity=1), 6 (capacity=3), 10 (capacity=10), 3 (capacity=9), 7 (capacity=10), 4 (capacity=7)\n",
    "graph_output": "11 20\n1 4 1\n4 8 9\n1 11 1\n11 6 3\n8 3 5\n11 10 10\n10 2 3\n3 7 10\n7 9 2\n9 5 2\n6 2 8\n2 4 9\n6 1 4\n11 3 9\n11 7 10\n7 5 10\n6 10 7\n9 6 9\n4 11 7\n10 3 5\n",
    "vertices": [
      11,
      6
    ],
    "answer": 24,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 100 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 3, 13, 10, 16, 11, 2, 9, 14, 8, 12, 5, 4, 15\nVertex 2: 10, 4, 13, 16, 1, 9, 15, 12, 7, 5, 11, 6\nVertex 3: 1, 15, 6, 14, 8, 16, 13, 7, 9, 4, 5\nVertex 4: 2, 9, 8, 14, 10, 12, 11, 3, 5, 6, 13, 1, 16, 7\nVertex 5: 7, 8, 11, 16, 13, 4, 2, 14, 12, 1, 9, 15, 3\nVertex 6: 3, 9, 16, 4, 11, 14, 13, 12, 10, 15, 2\nVertex 7: 1, 10, 12, 5, 14, 16, 3, 9, 15, 2, 11, 4, 13\nVertex 8: 5, 16, 3, 4, 11, 15, 12, 1, 9, 10, 13\nVertex 9: 4, 10, 11, 16, 2, 6, 1, 7, 3, 8, 5, 15, 14\nVertex 10: 7, 2, 9, 1, 12, 11, 4, 14, 15, 6, 8, 13\nVertex 11: 5, 8, 9, 1, 10, 12, 4, 15, 6, 7, 13, 14, 2\nVertex 12: 7, 15, 10, 14, 4, 2, 11, 8, 1, 5, 6, 13\nVertex 13: 1, 2, 3, 15, 5, 14, 11, 6, 4, 7, 8, 12, 10\nVertex 14: 3, 16, 15, 4, 7, 12, 10, 1, 13, 6, 11, 5, 9\nVertex 15: 3, 12, 14, 8, 2, 13, 7, 11, 16, 10, 5, 1, 6, 9\nVertex 16: 8, 14, 1, 5, 3, 9, 2, 7, 6, 15, 4\n",
    "graph_output": "16 100\n1 7\n7 10\n1 3\n10 2\n7 12\n3 15\n1 13\n7 5\n5 8\n3 6\n5 11\n8 16\n2 4\n3 14\n4 9\n3 8\n15 12\n16 14\n9 10\n1 10\n16 1\n12 10\n8 4\n5 16\n11 8\n9 11\n3 16\n16 9\n15 14\n2 13\n11 1\n14 4\n2 16\n13 3\n1 2\n11 10\n2 9\n14 7\n16 7\n7 3\n14 12\n4 10\n6 9\n9 1\n4 12\n16 6\n15 8\n15 2\n15 13\n12 2\n14 10\n13 5\n11 12\n9 7\n1 14\n11 4\n7 15\n9 3\n2 7\n13 14\n4 3\n5 4\n5 2\n4 6\n15 11\n8 12\n6 11\n6 14\n11 7\n1 8\n11 13\n9 8\n16 15\n12 1\n14 11\n6 13\n5 14\n5 12\n5 1\n12 6\n13 4\n15 10\n4 1\n6 10\n4 16\n5 9\n7 4\n10 8\n7 13\n15 5\n11 2\n1 15\n15 6\n6 2\n8 13\n15 9\n9 14\n13 12\n3 5\n13 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 112 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 13 (weight=54), 16 (weight=56), 12 (weight=22), 11 (weight=52), 2 (weight=61), 5 (weight=10), 8 (weight=90), 10 (weight=6), 4 (weight=80), 15 (weight=26), 7 (weight=67), 14 (weight=36), 9 (weight=13), 6 (weight=75), 3 (weight=92)\nVertex 2: 10 (weight=53), 1 (weight=61), 7 (weight=40), 9 (weight=79), 3 (weight=29), 16 (weight=76), 12 (weight=40), 6 (weight=62), 13 (weight=67), 4 (weight=92), 8 (weight=46), 5 (weight=24), 14 (weight=22), 15 (weight=39), 11 (weight=48)\nVertex 3: 4 (weight=22), 6 (weight=14), 7 (weight=10), 5 (weight=53), 15 (weight=90), 2 (weight=29), 11 (weight=57), 10 (weight=88), 12 (weight=64), 16 (weight=10), 8 (weight=38), 13 (weight=80), 9 (weight=20), 1 (weight=92)\nVertex 4: 10 (weight=15), 9 (weight=14), 3 (weight=22), 14 (weight=35), 6 (weight=99), 2 (weight=92), 1 (weight=80), 11 (weight=10), 13 (weight=65), 8 (weight=54), 5 (weight=71), 12 (weight=29), 16 (weight=31)\nVertex 5: 7 (weight=22), 8 (weight=41), 1 (weight=10), 3 (weight=53), 11 (weight=58), 2 (weight=24), 14 (weight=8), 13 (weight=41), 4 (weight=71), 12 (weight=17), 9 (weight=90), 15 (weight=19), 10 (weight=94), 16 (weight=50), 6 (weight=37)\nVertex 6: 10 (weight=1), 3 (weight=14), 11 (weight=66), 14 (weight=40), 7 (weight=66), 4 (weight=99), 2 (weight=62), 8 (weight=34), 15 (weight=9), 12 (weight=21), 13 (weight=51), 16 (weight=23), 9 (weight=47), 1 (weight=75), 5 (weight=37)\nVertex 7: 10 (weight=11), 5 (weight=22), 2 (weight=40), 3 (weight=10), 6 (weight=66), 16 (weight=2), 15 (weight=16), 11 (weight=67), 1 (weight=67), 14 (weight=58), 8 (weight=14), 9 (weight=23), 13 (weight=42), 12 (weight=82)\nVertex 8: 16 (weight=15), 5 (weight=41), 1 (weight=90), 12 (weight=15), 6 (weight=34), 2 (weight=46), 11 (weight=36), 3 (weight=38), 15 (weight=93), 4 (weight=54), 9 (weight=6), 7 (weight=14), 13 (weight=34), 10 (weight=16)\nVertex 9: 4 (weight=14), 16 (weight=56), 2 (weight=79), 13 (weight=9), 11 (weight=66), 15 (weight=80), 14 (weight=71), 3 (weight=20), 8 (weight=6), 12 (weight=23), 5 (weight=90), 7 (weight=23), 6 (weight=47), 10 (weight=52), 1 (weight=13)\nVertex 10: 15 (weight=6), 4 (weight=15), 7 (weight=11), 2 (weight=53), 6 (weight=1), 11 (weight=77), 13 (weight=58), 1 (weight=6), 3 (weight=88), 8 (weight=16), 5 (weight=94), 9 (weight=52), 12 (weight=2)\nVertex 11: 10 (weight=77), 1 (weight=52), 6 (weight=66), 15 (weight=80), 12 (weight=8), 16 (weight=64), 3 (weight=57), 5 (weight=58), 9 (weight=66), 13 (weight=27), 4 (weight=10), 8 (weight=36), 7 (weight=67), 2 (weight=48)\nVertex 12: 1 (weight=22), 11 (weight=8), 2 (weight=40), 13 (weight=19), 8 (weight=15), 15 (weight=90), 6 (weight=21), 3 (weight=64), 4 (weight=29), 5 (weight=17), 9 (weight=23), 14 (weight=74), 16 (weight=26), 10 (weight=2), 7 (weight=82)\nVertex 13: 1 (weight=54), 15 (weight=91), 10 (weight=58), 16 (weight=40), 9 (weight=9), 12 (weight=19), 2 (weight=67), 11 (weight=27), 4 (weight=65), 3 (weight=80), 14 (weight=31), 6 (weight=51), 5 (weight=41), 8 (weight=34), 7 (weight=42)\nVertex 14: 4 (weight=35), 6 (weight=40), 16 (weight=23), 2 (weight=22), 13 (weight=31), 5 (weight=8), 9 (weight=71), 7 (weight=58), 1 (weight=36), 12 (weight=74)\nVertex 15: 13 (weight=91), 10 (weight=6), 11 (weight=80), 3 (weight=90), 16 (weight=76), 6 (weight=9), 12 (weight=90), 1 (weight=26), 7 (weight=16), 9 (weight=80), 8 (weight=93), 5 (weight=19), 2 (weight=39)\nVertex 16: 1 (weight=56), 8 (weight=15), 9 (weight=56), 11 (weight=64), 15 (weight=76), 13 (weight=40), 2 (weight=76), 14 (weight=23), 7 (weight=2), 3 (weight=10), 6 (weight=23), 4 (weight=31), 5 (weight=50), 12 (weight=26)\n",
    "graph_output": "16 112\n1 13 54\n13 15 91\n15 10 6\n1 16 56\n10 4 15\n10 7 11\n10 2 53\n4 9 14\n1 12 22\n7 5 22\n10 6 1\n16 8 15\n4 3 22\n10 11 77\n4 14 35\n1 11 52\n5 8 41\n3 6 14\n9 16 56\n2 1 61\n7 2 40\n11 6 66\n6 14 40\n11 15 80\n1 5 10\n7 3 10\n5 3 53\n3 15 90\n11 12 8\n9 2 79\n10 13 58\n16 11 64\n3 2 29\n15 16 76\n3 11 57\n16 13 40\n13 9 9\n5 11 58\n1 8 90\n2 16 76\n11 9 66\n2 12 40\n7 6 66\n13 12 19\n6 4 99\n6 2 62\n10 1 6\n2 13 67\n4 2 92\n11 13 27\n16 14 23\n8 12 15\n4 1 80\n6 8 34\n3 10 88\n4 11 10\n6 15 9\n15 12 90\n16 7 2\n15 1 26\n12 6 21\n7 15 16\n3 12 64\n2 8 46\n2 5 24\n11 8 36\n16 3 10\n3 8 38\n14 2 22\n13 4 65\n3 13 80\n13 14 31\n9 15 80\n5 14 8\n7 11 67\n8 15 93\n6 13 51\n13 5 41\n16 6 23\n7 1 67\n4 8 54\n9 14 71\n5 4 71\n3 9 20\n7 14 58\n12 4 29\n9 8 6\n7 8 14\n12 5 17\n9 12 23\n8 13 34\n1 14 36\n9 5 90\n10 8 16\n16 4 31\n7 9 23\n15 5 19\n10 5 94\n6 9 47\n12 14 74\n15 2 39\n5 16 50\n10 9 52\n7 13 42\n9 1 13\n12 16 26\n10 12 2\n6 1 75\n7 12 82\n5 6 37\n1 3 92\n2 11 48\n",
    "vertices": [
      null,
      null
    ],
    "answer": 124,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 19 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 5 and vertex 9.\n",
    "graph_output": "15 19\n12 1\n3 5\n2 8\n11 3\n13 1\n10 12\n7 11\n3 7\n14 9\n15 10\n2 12\n11 12\n7 15\n3 2\n1 10\n9 12\n11 8\n8 5\n5 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 20 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8 with a weight of 58.\nThere is an edge between vertex 8 and vertex 13 with a weight of 94.\nThere is an edge between vertex 13 and vertex 10 with a weight of 14.\nThere is an edge between vertex 1 and vertex 11 with a weight of 70.\nThere is an edge between vertex 11 and vertex 4 with a weight of 93.\nThere is an edge between vertex 4 and vertex 9 with a weight of 54.\nThere is an edge between vertex 9 and vertex 12 with a weight of 52.\nThere is an edge between vertex 4 and vertex 3 with a weight of 25.\nThere is an edge between vertex 10 and vertex 2 with a weight of 44.\nThere is an edge between vertex 1 and vertex 6 with a weight of 45.\nThere is an edge between vertex 8 and vertex 7 with a weight of 33.\nThere is an edge between vertex 2 and vertex 5 with a weight of 61.\nThere is an edge between vertex 10 and vertex 3 with a weight of 31.\nThere is an edge between vertex 13 and vertex 1 with a weight of 13.\nThere is an edge between vertex 5 and vertex 1 with a weight of 97.\nThere is an edge between vertex 11 and vertex 12 with a weight of 64.\nThere is an edge between vertex 2 and vertex 9 with a weight of 17.\nThere is an edge between vertex 9 and vertex 13 with a weight of 9.\nThere is an edge between vertex 13 and vertex 3 with a weight of 16.\nThere is an edge between vertex 11 and vertex 7 with a weight of 19.\n",
    "graph_output": "13 20\n1 8 58\n8 13 94\n13 10 14\n1 11 70\n11 4 93\n4 9 54\n9 12 52\n4 3 25\n10 2 44\n1 6 45\n8 7 33\n2 5 61\n10 3 31\n13 1 13\n5 1 97\n11 12 64\n2 9 17\n9 13 9\n13 3 16\n11 7 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 368,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 12 in the weighted graph.\n\nUndirected, Weighted Graph with 14 vertices and 22 edges\n\nEdges (Format: Node Node Weight):\n1 4 7\n4 10 80\n4 13 17\n4 2 35\n1 14 8\n2 6 28\n4 5 45\n10 3 43\n14 7 20\n4 11 21\n4 9 17\n10 12 6\n10 8 15\n12 4 41\n10 13 74\n8 13 69\n1 7 50\n6 9 21\n9 2 2\n6 7 78\n1 9 3\n6 12 73\n",
    "graph_output": "14 22\n1 4 7\n4 10 80\n4 13 17\n4 2 35\n1 14 8\n2 6 28\n4 5 45\n10 3 43\n14 7 20\n4 11 21\n4 9 17\n10 12 6\n10 8 15\n12 4 41\n10 13 74\n8 13 69\n1 7 50\n6 9 21\n9 2 2\n6 7 78\n1 9 3\n6 12 73\n",
    "vertices": [
      4,
      12
    ],
    "answer": 41,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 18 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 3 and vertex 13.\n",
    "graph_output": "15 18\n13 5\n8 1\n14 9\n12 3\n12 6\n15 1\n1 7\n3 7\n2 6\n4 11\n1 12\n11 14\n12 15\n5 7\n15 2\n13 9\n13 6\n3 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 12 vertices and 53 edges\n\nEdges (Format: Node Node):\n7 2\n1 4\n7 12\n2 4\n4 7\n9 7\n1 2\n11 3\n6 12\n4 5\n9 1\n10 9\n9 3\n7 8\n10 7\n11 4\n2 5\n3 6\n5 9\n9 4\n6 5\n7 11\n7 1\n6 8\n4 3\n6 7\n10 5\n2 8\n6 9\n2 10\n5 1\n12 10\n10 6\n8 1\n8 11\n3 5\n2 3\n12 1\n2 9\n12 2\n11 9\n11 6\n12 9\n10 1\n8 9\n2 6\n10 4\n3 8\n12 4\n1 6\n8 12\n7 3\n4 8\n",
    "graph_output": "12 53\n7 2\n1 4\n7 12\n2 4\n4 7\n9 7\n1 2\n11 3\n6 12\n4 5\n9 1\n10 9\n9 3\n7 8\n10 7\n11 4\n2 5\n3 6\n5 9\n9 4\n6 5\n7 11\n7 1\n6 8\n4 3\n6 7\n10 5\n2 8\n6 9\n2 10\n5 1\n12 10\n10 6\n8 1\n8 11\n3 5\n2 3\n12 1\n2 9\n12 2\n11 9\n11 6\n12 9\n10 1\n8 9\n2 6\n10 4\n3 8\n12 4\n1 6\n8 12\n7 3\n4 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 27 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11\nVertex 2: 13, 5, 4\nVertex 3: 14, 12, 10, 9, 11\nVertex 4: 7, 6, 5, 2\nVertex 5: 2, 12, 4, 11\nVertex 6: 11, 10, 4\nVertex 7: 14, 8, 4\nVertex 8: 7\nVertex 9: 11, 3\nVertex 10: 3, 6, 12, 13, 14\nVertex 11: 1, 14, 6, 15, 9, 5, 3\nVertex 12: 3, 5, 10, 15\nVertex 13: 14, 2, 10, 15\nVertex 14: 11, 7, 13, 3, 10\nVertex 15: 11, 12, 13\n",
    "graph_output": "15 27\n1 11\n11 14\n14 7\n14 13\n11 6\n14 3\n3 12\n11 15\n7 8\n11 9\n13 2\n7 4\n3 10\n2 5\n12 5\n10 6\n12 10\n3 9\n4 6\n5 4\n11 5\n13 10\n4 2\n15 12\n10 14\n3 11\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 40 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 10, 8, 9, 2, 6, 7, 11, 4\nVertex 2: 6, 10, 3, 5, 1, 4, 11\nVertex 3: 7, 2, 5, 10, 8, 11\nVertex 4: 6, 11, 2, 8, 1, 10, 5\nVertex 5: 1, 10, 9, 2, 11, 6, 3, 8, 4\nVertex 6: 2, 4, 8, 10, 1, 5, 11\nVertex 7: 3, 1, 8, 10, 9\nVertex 8: 6, 1, 7, 5, 4, 9, 11, 3\nVertex 9: 5, 1, 10, 11, 8, 7\nVertex 10: 2, 1, 5, 6, 9, 7, 3, 4\nVertex 11: 4, 5, 2, 9, 6, 1, 8, 3\n",
    "graph_output": "11 40\n2 6\n3 7\n6 4\n5 1\n8 6\n10 2\n10 1\n5 10\n10 6\n8 1\n9 5\n3 2\n2 5\n11 4\n1 9\n2 1\n2 4\n10 9\n1 6\n11 5\n1 7\n8 7\n5 6\n3 5\n8 5\n8 4\n7 10\n11 2\n11 9\n3 10\n9 8\n6 11\n1 11\n7 9\n1 4\n4 10\n11 8\n8 3\n3 11\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 62,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 104 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 12, 16, 2, 7, 13, 5, 15, 9, 14, 6, 8, 4, 3\nVertex 2: 14, 9, 16, 8, 1, 7, 4, 6, 12, 15, 5, 3, 10, 11\nVertex 3: 11, 14, 10, 8, 7, 13, 4, 9, 2, 1, 6, 16, 15, 5, 12\nVertex 4: 10, 8, 9, 2, 7, 12, 15, 1, 6, 3, 14, 13, 5, 16, 11\nVertex 5: 7, 1, 11, 12, 9, 2, 4, 8, 6, 14, 3, 10\nVertex 6: 13, 2, 1, 4, 7, 11, 9, 15, 5, 3, 10, 8\nVertex 7: 9, 5, 13, 1, 2, 4, 3, 6, 15, 16, 10, 12, 11\nVertex 8: 16, 11, 9, 2, 10, 4, 3, 13, 1, 12, 15, 5, 6\nVertex 9: 11, 7, 16, 8, 2, 12, 4, 1, 14, 5, 3, 10, 6, 13, 15\nVertex 10: 1, 13, 4, 8, 3, 11, 14, 9, 7, 6, 2, 5\nVertex 11: 12, 15, 9, 3, 8, 10, 5, 13, 6, 14, 16, 7, 2, 4\nVertex 12: 1, 11, 16, 15, 13, 9, 4, 2, 5, 8, 7, 3\nVertex 13: 10, 6, 7, 12, 16, 1, 8, 3, 11, 4, 9, 15\nVertex 14: 15, 2, 3, 1, 9, 10, 4, 11, 16, 5\nVertex 15: 11, 14, 12, 16, 1, 4, 2, 7, 8, 13, 6, 9, 3\nVertex 16: 1, 8, 12, 9, 13, 2, 15, 7, 11, 14, 3, 4\n",
    "graph_output": "16 104\n1 10\n1 12\n12 11\n11 15\n1 16\n10 13\n11 9\n9 7\n15 14\n11 3\n14 2\n13 6\n7 5\n10 4\n16 8\n16 12\n11 8\n16 9\n8 9\n9 2\n13 7\n15 12\n13 12\n16 13\n9 12\n2 16\n8 2\n3 14\n8 10\n3 10\n1 2\n1 7\n7 2\n8 4\n9 4\n15 16\n2 4\n1 13\n3 8\n4 7\n5 1\n13 8\n10 11\n1 15\n5 11\n1 9\n4 12\n7 3\n6 2\n3 13\n2 12\n14 1\n6 1\n14 9\n4 15\n1 8\n1 4\n4 6\n3 4\n13 11\n7 6\n10 14\n15 2\n12 5\n8 12\n9 5\n6 11\n9 3\n15 7\n4 14\n9 10\n2 5\n13 4\n16 7\n2 3\n10 7\n11 14\n12 7\n8 15\n16 11\n16 14\n4 5\n11 7\n9 6\n9 13\n8 5\n3 1\n13 15\n15 6\n6 5\n5 14\n6 3\n9 15\n16 3\n15 3\n3 5\n3 12\n6 10\n2 10\n8 6\n2 11\n4 16\n11 4\n5 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 43 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 11, 10, 3, 5, 6, 4, 9, 12\nVertex 2: 1, 12, 5, 3, 8, 11, 10, 7\nVertex 3: 9, 11, 1, 4, 2, 6, 12, 10\nVertex 4: 6, 11, 9, 3, 1, 5, 8, 7\nVertex 5: 2, 1, 4, 12\nVertex 6: 4, 1, 9, 12, 3\nVertex 7: 11, 9, 4, 12, 2, 8\nVertex 8: 12, 2, 4, 10, 11, 7\nVertex 9: 3, 12, 10, 4, 11, 6, 1, 7\nVertex 10: 1, 9, 12, 2, 8, 3\nVertex 11: 1, 4, 3, 9, 7, 2, 12, 8\nVertex 12: 9, 2, 8, 10, 6, 11, 7, 5, 3, 1\n",
    "graph_output": "12 43\n1 2\n4 6\n11 1\n1 10\n3 9\n9 12\n9 10\n4 11\n3 11\n2 12\n3 1\n9 4\n2 5\n4 3\n12 8\n11 9\n5 1\n12 10\n3 2\n6 1\n9 6\n7 11\n4 1\n2 8\n5 4\n4 8\n2 11\n2 10\n1 9\n6 12\n7 9\n12 11\n4 7\n10 8\n11 8\n12 7\n2 7\n6 3\n12 5\n12 3\n8 7\n12 1\n3 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 61,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 109 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 15, 16, 11, 8, 17, 4, 5, 6, 10, 2, 3, 14, 13\nVertex 2: 6, 16, 4, 9, 14, 3, 5, 12, 7, 17, 1, 15\nVertex 3: 17, 5, 6, 7, 13, 2, 11, 15, 9, 12, 1, 16, 10\nVertex 4: 13, 17, 2, 1, 8, 7, 11, 15, 14, 6, 9, 16\nVertex 5: 7, 15, 3, 14, 1, 2, 13, 10, 11, 8, 12\nVertex 6: 10, 2, 17, 3, 9, 1, 13, 11, 15, 12, 14, 4, 8\nVertex 7: 15, 17, 13, 12, 1, 5, 10, 3, 14, 4, 2, 11, 8, 9\nVertex 8: 16, 12, 1, 4, 14, 10, 15, 11, 13, 17, 9, 5, 7, 6\nVertex 9: 2, 10, 6, 15, 11, 3, 4, 8, 13, 16, 7\nVertex 10: 6, 13, 7, 9, 16, 8, 17, 5, 1, 11, 12, 15, 3\nVertex 11: 15, 1, 3, 14, 4, 9, 8, 6, 17, 7, 12, 10, 5, 13\nVertex 12: 7, 8, 2, 14, 15, 17, 3, 11, 6, 10, 5\nVertex 13: 7, 10, 4, 15, 3, 17, 6, 5, 8, 14, 9, 11, 1\nVertex 14: 5, 2, 17, 7, 11, 12, 16, 8, 4, 6, 13, 15, 1\nVertex 15: 7, 13, 5, 1, 11, 9, 16, 3, 4, 12, 8, 6, 17, 14, 2, 10\nVertex 16: 8, 2, 1, 10, 15, 14, 17, 3, 9, 4\nVertex 17: 3, 7, 4, 6, 1, 14, 13, 12, 10, 16, 11, 2, 15, 8\n",
    "graph_output": "17 109\n7 15\n10 6\n17 3\n17 7\n16 8\n13 7\n13 10\n12 7\n13 4\n7 1\n15 13\n5 7\n7 10\n2 6\n5 15\n2 16\n4 17\n3 5\n1 15\n1 16\n2 4\n11 15\n17 6\n9 2\n9 10\n3 6\n14 5\n3 7\n12 8\n2 14\n1 11\n1 8\n1 17\n13 3\n4 1\n14 17\n14 7\n13 17\n16 10\n2 3\n8 4\n5 1\n11 3\n5 2\n12 2\n11 14\n9 6\n1 6\n15 9\n15 16\n12 14\n16 14\n6 13\n4 7\n8 14\n3 15\n8 10\n4 11\n11 9\n4 15\n15 12\n17 12\n15 8\n17 10\n17 16\n11 8\n9 3\n11 6\n11 17\n13 5\n2 7\n17 2\n15 6\n3 12\n10 5\n7 11\n4 14\n10 1\n12 11\n12 6\n14 6\n13 8\n6 4\n17 15\n1 2\n13 14\n11 10\n4 9\n3 1\n14 15\n15 2\n5 11\n1 14\n17 8\n9 8\n3 16\n13 9\n8 5\n8 7\n12 10\n10 15\n6 8\n13 11\n10 3\n16 9\n1 13\n5 12\n4 16\n7 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 11 vertices and 40 edges\n\nEdges (Format: Node Node):\n10 6\n7 2\n7 5\n4 7\n5 2\n4 8\n11 5\n10 7\n4 9\n3 7\n10 11\n3 9\n2 6\n7 9\n10 2\n1 9\n10 9\n7 11\n3 8\n11 3\n10 8\n11 1\n8 9\n2 9\n5 3\n11 8\n9 5\n3 10\n3 1\n11 4\n4 6\n2 4\n8 6\n4 5\n2 3\n6 3\n1 10\n9 6\n2 1\n11 9\n",
    "graph_output": "11 40\n10 6\n7 2\n7 5\n4 7\n5 2\n4 8\n11 5\n10 7\n4 9\n3 7\n10 11\n3 9\n2 6\n7 9\n10 2\n1 9\n10 9\n7 11\n3 8\n11 3\n10 8\n11 1\n8 9\n2 9\n5 3\n11 8\n9 5\n3 10\n3 1\n11 4\n4 6\n2 4\n8 6\n4 5\n2 3\n6 3\n1 10\n9 6\n2 1\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 6 (source) to vertex 13 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 26 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 8 (capacity=4), 11 (capacity=3), 13 (capacity=2)\nVertex 2: 5 (capacity=10), 7 (capacity=5), 4 (capacity=1), 6 (capacity=3)\nVertex 3: 5 (capacity=2), 4 (capacity=5), 10 (capacity=3)\nVertex 4: 2 (capacity=1), 13 (capacity=6), 8 (capacity=7), 3 (capacity=5)\nVertex 5: 8 (capacity=9), 2 (capacity=10), 10 (capacity=7), 3 (capacity=2), 12 (capacity=9), 9 (capacity=10)\nVertex 6: 10 (capacity=10), 2 (capacity=3), 11 (capacity=8), 8 (capacity=10)\nVertex 7: 2 (capacity=5), 8 (capacity=5), 9 (capacity=3)\nVertex 8: 1 (capacity=4), 5 (capacity=9), 9 (capacity=6), 4 (capacity=7), 6 (capacity=10), 7 (capacity=5), 13 (capacity=6)\nVertex 9: 8 (capacity=6), 12 (capacity=1), 13 (capacity=9), 7 (capacity=3), 5 (capacity=10)\nVertex 10: 5 (capacity=7), 6 (capacity=10), 12 (capacity=5), 3 (capacity=3)\nVertex 11: 1 (capacity=3), 6 (capacity=8)\nVertex 12: 9 (capacity=1), 5 (capacity=9), 10 (capacity=5)\nVertex 13: 9 (capacity=9), 4 (capacity=6), 1 (capacity=2), 8 (capacity=6)\n",
    "graph_output": "13 26\n1 8 4\n8 5 9\n5 2 10\n1 11 3\n5 10 7\n8 9 6\n9 12 1\n10 6 10\n2 7 5\n9 13 9\n5 3 2\n2 4 1\n13 4 6\n1 13 2\n2 6 3\n4 8 7\n6 11 8\n5 12 9\n10 12 5\n6 8 10\n7 8 5\n3 4 5\n7 9 3\n13 8 6\n10 3 3\n5 9 10\n",
    "vertices": [
      6,
      13
    ],
    "answer": 23,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 32 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   1   0   1   0   1   1   0   1   1   1   0   0   0   0 \n 2 |  0   0   0   0   1   0   0   1   0   0   1   1   1   0   0   0 \n 3 |  1   0   0   0   1   0   1   0   0   0   0   0   0   0   1   0 \n 4 |  0   0   0   0   1   0   0   0   0   1   0   0   1   0   0   0 \n 5 |  1   1   1   1   0   0   0   0   0   0   0   0   1   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 7 |  1   0   1   0   0   0   0   0   0   0   0   0   0   1   1   0 \n 8 |  1   1   0   0   0   0   0   0   0   0   1   0   0   0   1   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n10 |  1   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0 \n11 |  1   1   0   0   0   0   0   1   0   1   0   1   1   0   1   1 \n12 |  1   1   0   0   0   0   0   0   0   0   1   0   0   0   0   1 \n13 |  0   1   0   1   1   1   0   0   1   0   1   0   0   0   0   0 \n14 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1 \n15 |  0   0   1   0   0   0   1   1   0   0   1   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   1   1   0   1   0   0 \n",
    "graph_output": "16 32\n1 11\n11 13\n13 2\n1 7\n1 8\n11 16\n7 3\n7 14\n13 6\n3 15\n13 9\n13 5\n11 10\n10 4\n16 12\n5 1\n11 8\n2 5\n3 5\n2 11\n8 15\n2 12\n7 15\n1 10\n5 4\n12 11\n13 4\n14 16\n1 3\n12 1\n15 11\n2 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 16 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 9, 7\nVertex 2: 16, 15\nVertex 3: 5\nVertex 4: 5, 8\nVertex 5: 6, 3, 4, 12\nVertex 6: 1, 5, 16, 11\nVertex 7: 1, 10\nVertex 8: 4, 13, 14\nVertex 9: 1\nVertex 10: 7\nVertex 11: 14, 6\nVertex 12: 5\nVertex 13: 8\nVertex 14: 8, 11\nVertex 15: 2\nVertex 16: 6, 2\n",
    "graph_output": "16 16\n1 6\n6 5\n6 16\n5 3\n1 9\n5 4\n1 7\n16 2\n4 8\n8 13\n5 12\n7 10\n8 14\n2 15\n14 11\n6 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 10 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 8 and vertex 4.\n",
    "graph_output": "11 10\n2 4\n10 8\n7 2\n10 9\n7 8\n5 10\n11 7\n10 1\n3 8\n8 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 69 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 2, 6, 13, 8, 5, 3, 4, 12, 10, 9\nVertex 2: 6, 10, 1, 9, 3, 8, 11, 7, 4, 12\nVertex 3: 12, 1, 5, 2, 7, 6, 13, 11, 10, 4, 8, 9\nVertex 4: 7, 8, 11, 12, 1, 5, 13, 9, 6, 3, 2, 10\nVertex 5: 7, 11, 1, 9, 3, 4, 13, 10, 6\nVertex 6: 2, 7, 1, 3, 5, 4, 8, 10, 11, 12, 13, 9\nVertex 7: 4, 5, 1, 6, 13, 3, 2, 12, 11, 8, 10\nVertex 8: 4, 13, 1, 2, 6, 10, 11, 7, 3, 9\nVertex 9: 5, 13, 2, 10, 4, 1, 3, 6, 8\nVertex 10: 2, 11, 5, 9, 6, 1, 8, 3, 7, 13, 4, 12\nVertex 11: 12, 10, 5, 4, 3, 2, 6, 8, 7, 13\nVertex 12: 11, 3, 4, 1, 13, 7, 6, 10, 2\nVertex 13: 8, 1, 9, 7, 5, 3, 4, 12, 11, 6, 10\n",
    "graph_output": "13 69\n7 4\n7 5\n6 2\n1 7\n11 12\n7 6\n10 2\n2 1\n8 4\n3 12\n13 8\n10 11\n6 1\n1 13\n11 5\n1 8\n1 5\n9 5\n9 13\n1 3\n11 4\n3 5\n2 9\n2 3\n13 7\n3 7\n2 8\n12 4\n3 6\n4 1\n5 4\n13 5\n10 5\n13 3\n9 10\n3 11\n13 4\n1 12\n2 11\n6 5\n4 9\n13 12\n4 6\n2 7\n8 6\n6 10\n1 10\n10 8\n10 3\n6 11\n1 9\n11 8\n7 12\n3 4\n7 11\n6 12\n13 11\n13 6\n7 8\n3 8\n10 7\n13 10\n3 9\n2 4\n9 6\n4 10\n10 12\n9 8\n12 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 198,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 16 vertices and 24 edges\n\nEdges (Format: Node Node):\n1 10\n10 8\n8 6\n6 12\n1 13\n8 16\n10 2\n13 4\n13 7\n6 11\n16 14\n2 3\n1 15\n14 5\n3 9\n14 7\n3 15\n16 13\n10 14\n6 3\n6 9\n5 8\n5 16\n11 12\n",
    "graph_output": "16 24\n1 10\n10 8\n8 6\n6 12\n1 13\n8 16\n10 2\n13 4\n13 7\n6 11\n16 14\n2 3\n1 15\n14 5\n3 9\n14 7\n3 15\n16 13\n10 14\n6 3\n6 9\n5 8\n5 16\n11 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 19 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 1 and vertex 7.\n",
    "graph_output": "16 19\n16 11\n11 10\n14 8\n15 14\n8 1\n14 6\n3 15\n11 7\n4 15\n5 6\n12 3\n3 13\n11 14\n5 14\n3 6\n8 6\n9 15\n13 6\n1 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 3 and vertex 1 are connected.\n\nThis is an undirected graph with 15 vertices and 79 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 5 and vertex 9.\n",
    "graph_output": "15 79\n11 10\n5 3\n4 12\n7 3\n5 13\n13 12\n9 12\n12 14\n12 3\n13 7\n12 1\n13 1\n6 14\n2 9\n6 11\n15 1\n6 15\n13 4\n7 2\n10 12\n15 7\n3 9\n14 8\n5 15\n5 4\n2 15\n6 4\n13 3\n2 10\n11 15\n12 11\n4 9\n14 11\n13 9\n8 5\n10 9\n5 11\n8 1\n15 12\n9 11\n6 9\n4 2\n6 2\n9 1\n14 5\n10 4\n6 5\n14 1\n15 8\n3 15\n11 13\n15 13\n8 3\n10 1\n8 13\n12 2\n10 13\n4 8\n8 10\n7 9\n1 4\n3 11\n12 6\n1 6\n10 7\n8 7\n7 14\n1 7\n5 12\n6 10\n1 2\n5 10\n12 7\n2 14\n1 11\n6 13\n9 8\n2 13\n5 9\n",
    "vertices": [
      3,
      1
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 3 and vertex 10 are connected.\n\nUndirected Graph with 17 vertices and 25 edges\n\nEdges (Format: Node Node):\n7 6\n6 13\n7 14\n17 12\n2 13\n11 2\n3 6\n9 10\n9 6\n10 5\n3 13\n5 4\n14 9\n9 4\n14 17\n14 13\n7 5\n2 5\n2 9\n12 7\n10 2\n11 3\n6 15\n15 13\n3 16\n",
    "graph_output": "17 25\n7 6\n6 13\n7 14\n17 12\n2 13\n11 2\n3 6\n9 10\n9 6\n10 5\n3 13\n5 4\n14 9\n9 4\n14 17\n14 13\n7 5\n2 5\n2 9\n12 7\n10 2\n11 3\n6 15\n15 13\n3 16\n",
    "vertices": [
      3,
      10
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 17 vertices and 130 edges\n\nEdges (Format: Node Node):\n1 2\n2 6\n2 7\n6 15\n7 14\n1 3\n7 8\n3 12\n6 16\n16 11\n14 10\n3 9\n3 17\n10 13\n1 4\n4 5\n8 2\n10 4\n6 14\n5 9\n7 10\n4 6\n7 13\n16 7\n15 7\n13 11\n13 9\n6 12\n3 7\n3 8\n1 12\n14 12\n5 13\n6 10\n7 4\n8 11\n16 15\n12 13\n2 16\n5 12\n11 14\n2 15\n13 2\n11 15\n17 5\n10 3\n14 3\n16 1\n17 10\n17 15\n8 15\n13 17\n10 12\n6 7\n9 12\n9 2\n4 17\n5 8\n16 9\n8 14\n4 15\n12 7\n4 13\n1 9\n6 13\n5 6\n8 6\n11 7\n10 15\n5 1\n7 17\n2 4\n1 15\n12 11\n1 14\n2 5\n2 14\n17 6\n14 13\n11 3\n10 16\n9 11\n8 1\n1 6\n4 12\n9 4\n11 2\n3 15\n15 13\n17 16\n16 3\n13 1\n17 1\n14 9\n15 12\n10 1\n4 3\n7 9\n3 2\n15 14\n17 14\n9 10\n16 5\n5 11\n8 13\n15 5\n13 16\n17 8\n8 4\n6 9\n8 9\n3 6\n8 16\n10 5\n15 9\n16 12\n11 17\n12 8\n8 10\n7 1\n14 5\n2 17\n4 11\n12 2\n13 3\n5 3\n12 17\n11 6\n14 16\n4 14\n",
    "graph_output": "17 130\n1 2\n2 6\n2 7\n6 15\n7 14\n1 3\n7 8\n3 12\n6 16\n16 11\n14 10\n3 9\n3 17\n10 13\n1 4\n4 5\n8 2\n10 4\n6 14\n5 9\n7 10\n4 6\n7 13\n16 7\n15 7\n13 11\n13 9\n6 12\n3 7\n3 8\n1 12\n14 12\n5 13\n6 10\n7 4\n8 11\n16 15\n12 13\n2 16\n5 12\n11 14\n2 15\n13 2\n11 15\n17 5\n10 3\n14 3\n16 1\n17 10\n17 15\n8 15\n13 17\n10 12\n6 7\n9 12\n9 2\n4 17\n5 8\n16 9\n8 14\n4 15\n12 7\n4 13\n1 9\n6 13\n5 6\n8 6\n11 7\n10 15\n5 1\n7 17\n2 4\n1 15\n12 11\n1 14\n2 5\n2 14\n17 6\n14 13\n11 3\n10 16\n9 11\n8 1\n1 6\n4 12\n9 4\n11 2\n3 15\n15 13\n17 16\n16 3\n13 1\n17 1\n14 9\n15 12\n10 1\n4 3\n7 9\n3 2\n15 14\n17 14\n9 10\n16 5\n5 11\n8 13\n15 5\n13 16\n17 8\n8 4\n6 9\n8 9\n3 6\n8 16\n10 5\n15 9\n16 12\n11 17\n12 8\n8 10\n7 1\n14 5\n2 17\n4 11\n12 2\n13 3\n5 3\n12 17\n11 6\n14 16\n4 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 23 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   1   1   0   0   0   0   0 \n 2 |  0   0   1   1   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   1   0   0   0   0   1   0   1   0   1   1   0   1   0 \n 4 |  0   1   0   0   0   0   1   0   0   1   0   1   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   1   0   1   0   0 \n 6 |  0   0   0   0   0   0   1   0   0   0   1   0   0   1   0 \n 7 |  0   0   1   1   0   1   0   0   0   0   0   0   0   1   0 \n 8 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 9 |  1   0   1   0   0   0   0   1   0   0   0   0   0   0   0 \n10 |  1   0   0   1   0   0   0   0   0   0   1   0   0   0   0 \n11 |  0   0   1   0   1   1   0   0   0   1   0   1   0   1   0 \n12 |  0   0   1   1   0   0   0   0   0   0   1   0   0   1   0 \n13 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   1   0   0   1   1   0   0   0   1   1   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "15 23\n14 12\n9 1\n5 11\n11 10\n11 12\n8 9\n2 3\n3 7\n1 10\n13 5\n11 14\n6 7\n14 7\n2 4\n3 12\n10 4\n14 3\n4 7\n3 9\n11 6\n14 6\n12 4\n11 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 93 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 15 and vertex 8.\n",
    "graph_output": "16 93\n1 4\n4 16\n16 14\n16 2\n4 7\n16 12\n1 6\n14 13\n13 5\n7 3\n16 8\n14 15\n7 10\n2 11\n2 9\n7 16\n1 12\n3 4\n16 11\n14 2\n12 11\n6 15\n12 13\n1 7\n15 12\n1 11\n13 7\n11 14\n16 13\n4 10\n8 2\n11 9\n6 14\n10 12\n10 9\n9 14\n11 4\n4 13\n6 5\n4 5\n13 1\n2 6\n1 10\n3 15\n2 1\n6 16\n12 8\n8 3\n13 15\n1 3\n14 7\n5 9\n3 9\n2 4\n2 12\n1 8\n5 8\n6 8\n10 6\n9 16\n5 3\n13 9\n8 11\n5 16\n9 4\n5 11\n9 15\n2 15\n11 7\n9 7\n2 10\n15 4\n6 7\n12 7\n5 12\n13 8\n15 5\n7 2\n15 10\n4 12\n16 1\n1 15\n10 16\n14 8\n12 3\n9 1\n10 11\n11 15\n10 13\n6 11\n15 7\n11 13\n15 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 20 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 12\nVertex 2: 10, 6, 5\nVertex 3: 7, 6, 4\nVertex 4: 11, 3\nVertex 5: 2, 12, 9, 10, 6\nVertex 6: 2, 3, 12, 5, 7\nVertex 7: 3, 11, 12, 6\nVertex 8: 12, 1, 10\nVertex 9: 5\nVertex 10: 2, 12, 8, 5\nVertex 11: 7, 4\nVertex 12: 10, 5, 8, 7, 1, 6\n",
    "graph_output": "12 20\n3 7\n2 10\n6 2\n12 10\n5 2\n7 11\n11 4\n5 12\n12 8\n9 5\n7 12\n3 6\n8 1\n8 10\n12 1\n5 10\n3 4\n12 6\n5 6\n6 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 17 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 2 |  1   0   0   0   0   0   0   0   1   0   0   1   1   1   0   0 \n 3 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0 \n 7 |  0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0 \n 8 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 9 |  0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n11 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   1   0   0   1   0   1   0   0   1   0   0   0   0   0   1 \n13 |  0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n15 |  1   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n",
    "graph_output": "16 17\n1 2\n2 12\n12 7\n12 5\n12 10\n7 8\n1 15\n5 13\n2 14\n15 4\n14 6\n12 16\n2 9\n9 3\n4 11\n13 2\n6 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 16 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   1   1   0   1   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1 \n 3 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0 \n 5 |  0   0   1   1   0   1   0   0   0   0   0   1   0   0   0   0 \n 6 |  1   0   0   0   1   0   0   0   0   0   1   0   0   0   0   1 \n 7 |  1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 8 |  0   0   0   1   0   0   0   0   0   0   0   0   1   1   0   0 \n 9 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0 \n12 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0 \n15 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "16 16\n1 6\n6 5\n6 16\n5 3\n1 9\n5 4\n1 7\n16 2\n4 8\n8 13\n5 12\n7 10\n8 14\n2 15\n14 11\n6 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 11 vertices and 15 edges\n\nEdges (Format: Node Node):\n2 6\n9 2\n4 6\n7 8\n11 6\n1 8\n1 7\n7 11\n9 1\n3 2\n3 8\n5 6\n6 9\n9 10\n11 9\n",
    "graph_output": "11 15\n2 6\n9 2\n4 6\n7 8\n11 6\n1 8\n1 7\n7 11\n9 1\n3 2\n3 8\n5 6\n6 9\n9 10\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 7 vertices and 12 edges\n\nEdges (Format: Node Node):\n1 2\n2 6\n6 3\n2 7\n6 5\n5 4\n3 7\n2 5\n3 1\n4 1\n1 7\n7 6\n",
    "graph_output": "7 12\n1 2\n2 6\n6 3\n2 7\n6 5\n5 4\n3 7\n2 5\n3 1\n4 1\n1 7\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 338,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 12 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 6, 3, 2\nVertex 2: 7, 6, 1\nVertex 3: 7, 1, 5, 6\nVertex 4: 7, 5\nVertex 5: 7, 3, 4\nVertex 6: 1, 2, 3\nVertex 7: 1, 3, 2, 4, 5\n",
    "graph_output": "7 12\n1 7\n7 3\n7 2\n1 6\n7 4\n7 5\n3 1\n6 2\n5 3\n6 3\n1 2\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 297,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 99 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   0   1   1   1   0   1 \n 2 |  1   0   0   1   1   1   1   1   1   1   1   0   1   0   1   1 \n 3 |  1   0   0   0   1   1   1   1   0   1   1   1   0   1   1   1 \n 4 |  1   1   0   0   1   1   1   1   1   1   1   0   1   1   1   0 \n 5 |  1   1   1   1   0   1   1   0   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   0   1   1   1   1   0   0   1   0 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   0   0   1   0   1   0   1   1   1   1   1   1 \n 9 |  1   1   0   1   1   1   1   1   0   1   1   0   1   1   1   1 \n10 |  1   1   1   1   1   1   1   0   1   0   0   1   1   1   0   1 \n11 |  0   1   1   1   1   1   1   1   1   0   0   1   0   1   1   1 \n12 |  1   0   1   0   1   1   1   1   0   1   1   0   1   1   1   1 \n13 |  1   1   0   1   1   0   1   1   1   1   0   1   0   1   1   0 \n14 |  1   0   1   1   1   0   1   1   1   1   1   1   1   0   1   1 \n15 |  0   1   1   1   1   1   1   1   1   0   1   1   1   1   0   1 \n16 |  1   1   1   0   1   0   1   1   1   1   1   1   0   1   1   0 \n",
    "graph_output": "16 99\n1 2\n2 9\n1 6\n1 4\n4 15\n9 8\n15 14\n14 7\n1 16\n14 10\n10 12\n6 5\n10 13\n15 11\n11 3\n8 2\n15 6\n12 13\n2 4\n1 12\n16 11\n16 2\n2 10\n14 3\n12 5\n16 8\n3 10\n4 10\n8 1\n3 7\n2 7\n8 12\n3 1\n8 15\n2 6\n15 16\n15 12\n5 14\n3 16\n13 7\n9 15\n9 14\n9 5\n9 1\n7 10\n14 4\n9 13\n6 7\n7 15\n1 5\n13 1\n10 16\n5 11\n2 15\n12 7\n7 5\n13 4\n11 9\n16 14\n2 13\n11 12\n6 9\n8 3\n16 12\n8 13\n6 3\n6 4\n8 14\n14 12\n12 3\n10 9\n5 4\n5 16\n15 13\n12 6\n4 11\n5 15\n10 5\n4 7\n13 14\n5 2\n2 11\n7 8\n3 5\n1 10\n16 9\n1 14\n8 4\n9 4\n5 13\n3 15\n6 10\n11 7\n7 9\n11 14\n1 7\n16 7\n11 6\n8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   1   1   1   0   0   1   0   0 \n 2 |  0   0   1   0   1   0   1   1   0   1   0   0   0   1   0 \n 3 |  0   1   0   1   0   1   0   0   0   1   0   0   0   0   1 \n 4 |  0   0   1   0   1   0   0   0   0   0   0   1   0   0   1 \n 5 |  0   1   0   1   0   0   0   0   0   1   1   0   0   0   0 \n 6 |  0   0   1   0   0   0   0   0   0   1   0   0   0   0   0 \n 7 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  1   1   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 9 |  1   0   0   0   0   0   0   0   0   0   1   0   1   1   0 \n10 |  1   1   1   0   1   1   0   1   0   0   1   1   1   1   0 \n11 |  0   0   0   0   1   0   0   0   1   1   0   0   0   0   0 \n12 |  0   0   0   1   0   0   0   0   0   1   0   0   0   1   0 \n13 |  1   0   0   0   0   0   0   0   1   1   0   0   0   0   1 \n14 |  0   1   0   0   0   0   0   0   1   1   0   1   0   0   0 \n15 |  0   0   1   1   0   0   0   0   0   0   0   0   1   0   0 \n",
    "graph_output": "15 30\n10 13\n13 1\n3 15\n1 9\n4 3\n8 2\n12 14\n5 10\n4 15\n2 5\n1 8\n1 10\n14 10\n6 10\n3 6\n9 14\n10 2\n7 2\n5 11\n10 12\n8 10\n11 9\n3 2\n4 5\n9 13\n10 11\n10 3\n2 14\n12 4\n13 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 16 vertices and 26 edges\n\nEdges (Format: Node Node):\n1 5\n1 10\n5 12\n10 15\n1 4\n12 11\n10 8\n11 16\n5 6\n4 13\n1 7\n6 2\n2 14\n1 3\n4 9\n10 12\n16 9\n5 11\n15 7\n9 1\n12 4\n13 8\n9 14\n13 6\n2 8\n12 14\n",
    "graph_output": "16 26\n1 5\n1 10\n5 12\n10 15\n1 4\n12 11\n10 8\n11 16\n5 6\n4 13\n1 7\n6 2\n2 14\n1 3\n4 9\n10 12\n16 9\n5 11\n15 7\n9 1\n12 4\n13 8\n9 14\n13 6\n2 8\n12 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 15 to vertex 6 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 119 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 8 (weight=22), 3 (weight=61), 13 (weight=86), 12 (weight=41), 5 (weight=46), 9 (weight=82), 11 (weight=98), 2 (weight=37), 6 (weight=33), 16 (weight=20), 14 (weight=38), 4 (weight=37), 15 (weight=88), 10 (weight=47), 7 (weight=28)\nVertex 2: 5 (weight=25), 14 (weight=96), 12 (weight=31), 8 (weight=22), 4 (weight=49), 11 (weight=46), 3 (weight=39), 9 (weight=16), 6 (weight=89), 7 (weight=95), 1 (weight=37), 10 (weight=24), 16 (weight=64), 15 (weight=4), 13 (weight=73)\nVertex 3: 1 (weight=61), 15 (weight=95), 7 (weight=41), 4 (weight=35), 6 (weight=20), 2 (weight=39), 16 (weight=68), 8 (weight=98), 11 (weight=96), 10 (weight=88), 13 (weight=31), 5 (weight=40), 9 (weight=96), 12 (weight=44), 14 (weight=18)\nVertex 4: 12 (weight=3), 16 (weight=19), 5 (weight=69), 15 (weight=69), 10 (weight=42), 3 (weight=35), 7 (weight=18), 2 (weight=49), 9 (weight=32), 11 (weight=71), 14 (weight=27), 6 (weight=68), 1 (weight=37), 8 (weight=35), 13 (weight=89)\nVertex 5: 8 (weight=79), 2 (weight=25), 4 (weight=69), 16 (weight=21), 1 (weight=46), 6 (weight=43), 15 (weight=54), 14 (weight=6), 12 (weight=6), 11 (weight=45), 9 (weight=76), 3 (weight=40), 10 (weight=19), 7 (weight=16)\nVertex 6: 13 (weight=11), 11 (weight=57), 5 (weight=43), 16 (weight=81), 3 (weight=20), 12 (weight=89), 14 (weight=86), 15 (weight=87), 8 (weight=67), 10 (weight=75), 2 (weight=89), 7 (weight=21), 9 (weight=32), 1 (weight=33), 4 (weight=68)\nVertex 7: 3 (weight=41), 10 (weight=91), 9 (weight=97), 14 (weight=81), 4 (weight=18), 16 (weight=41), 2 (weight=95), 15 (weight=1), 12 (weight=69), 6 (weight=21), 8 (weight=44), 11 (weight=59), 5 (weight=16), 1 (weight=28), 13 (weight=29)\nVertex 8: 1 (weight=22), 9 (weight=38), 12 (weight=26), 5 (weight=79), 10 (weight=53), 2 (weight=22), 3 (weight=98), 6 (weight=67), 11 (weight=39), 15 (weight=73), 16 (weight=23), 13 (weight=10), 14 (weight=66), 4 (weight=35), 7 (weight=44)\nVertex 9: 8 (weight=38), 7 (weight=97), 15 (weight=86), 14 (weight=11), 2 (weight=16), 4 (weight=32), 1 (weight=82), 16 (weight=93), 12 (weight=25), 6 (weight=32), 11 (weight=83), 13 (weight=42), 5 (weight=76), 3 (weight=96), 10 (weight=54)\nVertex 10: 8 (weight=53), 7 (weight=91), 13 (weight=93), 4 (weight=42), 15 (weight=10), 3 (weight=88), 6 (weight=75), 14 (weight=5), 2 (weight=24), 5 (weight=19), 16 (weight=35), 11 (weight=53), 9 (weight=54), 1 (weight=47), 12 (weight=67)\nVertex 11: 12 (weight=37), 6 (weight=57), 15 (weight=86), 2 (weight=46), 3 (weight=96), 8 (weight=39), 1 (weight=98), 4 (weight=71), 16 (weight=65), 9 (weight=83), 5 (weight=45), 14 (weight=41), 10 (weight=53), 13 (weight=2), 7 (weight=59)\nVertex 12: 8 (weight=26), 4 (weight=3), 11 (weight=37), 2 (weight=31), 16 (weight=58), 1 (weight=41), 13 (weight=23), 6 (weight=89), 5 (weight=6), 15 (weight=74), 7 (weight=69), 9 (weight=25), 3 (weight=44), 10 (weight=67), 14 (weight=99)\nVertex 13: 1 (weight=86), 6 (weight=11), 10 (weight=93), 12 (weight=23), 15 (weight=100), 14 (weight=21), 3 (weight=31), 16 (weight=12), 8 (weight=10), 9 (weight=42), 11 (weight=2), 2 (weight=73), 4 (weight=89), 7 (weight=29)\nVertex 14: 2 (weight=96), 7 (weight=81), 5 (weight=6), 9 (weight=11), 15 (weight=86), 13 (weight=21), 6 (weight=86), 10 (weight=5), 4 (weight=27), 8 (weight=66), 1 (weight=38), 11 (weight=41), 16 (weight=90), 3 (weight=18), 12 (weight=99)\nVertex 15: 3 (weight=95), 11 (weight=86), 4 (weight=69), 5 (weight=54), 9 (weight=86), 16 (weight=55), 13 (weight=100), 14 (weight=86), 10 (weight=10), 6 (weight=87), 8 (weight=73), 12 (weight=74), 7 (weight=1), 1 (weight=88), 2 (weight=4)\nVertex 16: 4 (weight=19), 12 (weight=58), 5 (weight=21), 15 (weight=55), 6 (weight=81), 3 (weight=68), 7 (weight=41), 9 (weight=93), 8 (weight=23), 11 (weight=65), 13 (weight=12), 2 (weight=64), 1 (weight=20), 10 (weight=35), 14 (weight=90)\n",
    "graph_output": "16 119\n1 8 22\n1 3 61\n8 9 38\n8 12 26\n8 5 79\n3 15 95\n1 13 86\n5 2 25\n12 4 3\n8 10 53\n12 11 37\n4 16 19\n3 7 41\n2 14 96\n13 6 11\n7 10 91\n12 2 31\n7 9 97\n6 11 57\n5 4 69\n12 16 58\n5 16 21\n1 12 41\n1 5 46\n5 6 43\n13 10 93\n11 15 86\n4 15 69\n10 4 42\n5 15 54\n9 15 86\n15 16 55\n7 14 81\n13 12 23\n16 6 81\n3 4 35\n13 15 100\n5 14 6\n8 2 22\n4 7 18\n9 14 11\n14 15 86\n2 4 49\n14 13 21\n11 2 46\n6 3 20\n12 6 89\n3 2 39\n3 16 68\n16 7 41\n8 3 98\n14 6 86\n10 15 10\n11 3 96\n5 12 6\n3 10 88\n13 3 31\n9 2 16\n6 15 87\n9 4 32\n8 6 67\n1 9 82\n16 9 93\n11 8 39\n15 8 73\n12 15 74\n6 10 75\n1 11 98\n6 2 89\n7 2 95\n4 11 71\n15 7 1\n12 7 69\n14 10 5\n6 7 21\n16 8 23\n2 1 37\n12 9 25\n10 2 24\n11 16 65\n16 13 12\n9 6 32\n4 14 27\n9 11 83\n6 1 33\n2 16 64\n8 13 10\n14 8 66\n4 6 68\n16 1 20\n14 1 38\n9 13 42\n11 5 45\n5 9 76\n4 1 37\n3 5 40\n8 4 35\n1 15 88\n3 9 96\n11 14 41\n10 5 19\n10 16 35\n11 10 53\n7 8 44\n9 10 54\n16 14 90\n15 2 4\n3 12 44\n11 13 2\n13 2 73\n11 7 59\n7 5 16\n1 10 47\n3 14 18\n7 1 28\n4 13 89\n7 13 29\n10 12 67\n14 12 99\n",
    "vertices": [
      15,
      6
    ],
    "answer": 22,
    "description_type": "list"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 5 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 10 vertices and 38 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 8 14 8\n8 4 70 7\n1 6 51 4\n4 10 76 2\n10 3 98 1\n3 5 60 4\n4 2 46 3\n1 9 40 6\n2 7 94 10\n2 8 16 1\n9 7 52 6\n7 3 80 9\n6 8 69 8\n8 10 27 1\n2 9 13 9\n3 9 45 9\n7 5 5 2\n10 6 69 3\n4 5 55 7\n8 9 67 1\n1 2 27 3\n6 2 64 1\n10 7 28 1\n7 4 23 9\n1 10 2 1\n4 9 75 10\n1 5 90 8\n9 10 27 2\n1 7 1 7\n6 4 16 1\n9 5 22 9\n3 8 90 10\n3 6 66 7\n1 3 45 2\n6 7 95 4\n6 5 30 8\n1 4 86 7\n8 7 22 6\n",
    "graph_output": "10 38\n1 8 14 8\n8 4 70 7\n1 6 51 4\n4 10 76 2\n10 3 98 1\n3 5 60 4\n4 2 46 3\n1 9 40 6\n2 7 94 10\n2 8 16 1\n9 7 52 6\n7 3 80 9\n6 8 69 8\n8 10 27 1\n2 9 13 9\n3 9 45 9\n7 5 5 2\n10 6 69 3\n4 5 55 7\n8 9 67 1\n1 2 27 3\n6 2 64 1\n10 7 28 1\n7 4 23 9\n1 10 2 1\n4 9 75 10\n1 5 90 8\n9 10 27 2\n1 7 1 7\n6 4 16 1\n9 5 22 9\n3 8 90 10\n3 6 66 7\n1 3 45 2\n6 7 95 4\n6 5 30 8\n1 4 86 7\n8 7 22 6\n",
    "vertices": [
      4,
      5
    ],
    "answer": 4161,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 18 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   0   1   0   0   0   1   0   0   0   1   0 \n 2 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 7 |  1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 9 |  0   1   0   0   1   1   0   0   0   0   1   0   0   1   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n11 |  1   0   1   0   0   0   1   1   1   0   0   1   1   0   0   1 \n12 |  0   0   0   1   0   0   0   0   0   1   1   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1 \n14 |  0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0 \n15 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0 \n",
    "graph_output": "16 18\n1 15\n1 11\n11 13\n11 9\n9 2\n11 12\n9 6\n9 14\n9 5\n11 3\n12 10\n12 4\n13 16\n11 8\n1 7\n16 11\n14 3\n7 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 15 to vertex 13 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 31 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 12 with a weight of 3.\nThere is an edge between vertex 12 and vertex 10 with a weight of 64.\nThere is an edge between vertex 10 and vertex 8 with a weight of 75.\nThere is an edge between vertex 12 and vertex 7 with a weight of 41.\nThere is an edge between vertex 7 and vertex 15 with a weight of 35.\nThere is an edge between vertex 12 and vertex 5 with a weight of 12.\nThere is an edge between vertex 5 and vertex 3 with a weight of 16.\nThere is an edge between vertex 1 and vertex 4 with a weight of 6.\nThere is an edge between vertex 4 and vertex 13 with a weight of 16.\nThere is an edge between vertex 8 and vertex 14 with a weight of 29.\nThere is an edge between vertex 4 and vertex 2 with a weight of 9.\nThere is an edge between vertex 3 and vertex 9 with a weight of 54.\nThere is an edge between vertex 1 and vertex 6 with a weight of 26.\nThere is an edge between vertex 5 and vertex 16 with a weight of 91.\nThere is an edge between vertex 13 and vertex 11 with a weight of 79.\nThere is an edge between vertex 12 and vertex 13 with a weight of 8.\nThere is an edge between vertex 9 and vertex 6 with a weight of 81.\nThere is an edge between vertex 7 and vertex 11 with a weight of 66.\nThere is an edge between vertex 10 and vertex 5 with a weight of 97.\nThere is an edge between vertex 14 and vertex 13 with a weight of 74.\nThere is an edge between vertex 16 and vertex 14 with a weight of 9.\nThere is an edge between vertex 11 and vertex 3 with a weight of 23.\nThere is an edge between vertex 12 and vertex 14 with a weight of 29.\nThere is an edge between vertex 4 and vertex 15 with a weight of 44.\nThere is an edge between vertex 9 and vertex 15 with a weight of 23.\nThere is an edge between vertex 10 and vertex 6 with a weight of 67.\nThere is an edge between vertex 14 and vertex 4 with a weight of 66.\nThere is an edge between vertex 10 and vertex 11 with a weight of 32.\nThere is an edge between vertex 5 and vertex 7 with a weight of 5.\nThere is an edge between vertex 7 and vertex 10 with a weight of 52.\nThere is an edge between vertex 3 and vertex 4 with a weight of 45.\n",
    "graph_output": "16 31\n1 12 3\n12 10 64\n10 8 75\n12 7 41\n7 15 35\n12 5 12\n5 3 16\n1 4 6\n4 13 16\n8 14 29\n4 2 9\n3 9 54\n1 6 26\n5 16 91\n13 11 79\n12 13 8\n9 6 81\n7 11 66\n10 5 97\n14 13 74\n16 14 9\n11 3 23\n12 14 29\n4 15 44\n9 15 23\n10 6 67\n14 4 66\n10 11 32\n5 7 5\n7 10 52\n3 4 45\n",
    "vertices": [
      15,
      13
    ],
    "answer": 60,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (31\u00d731):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31\n   ----------------------------------------------------------------------------------------------------------------------------\n 1 |  0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 2 |  1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   1 \n 3 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  1   0   1   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   1   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   1 \n17 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n18 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n21 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n22 |  0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n26 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   1   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n30 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n31 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "31 30\n1 18\n1 5\n1 21\n1 2\n2 31\n31 16\n16 27\n5 15\n16 14\n15 12\n15 7\n2 22\n5 4\n18 19\n5 30\n22 9\n2 11\n14 10\n5 3\n16 26\n2 20\n21 23\n11 13\n20 28\n30 29\n28 17\n28 25\n15 24\n26 6\n17 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 14 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 7 and vertex 1.\n",
    "graph_output": "8 14\n1 4\n4 8\n1 5\n5 7\n7 2\n4 6\n1 3\n6 2\n6 1\n6 3\n8 5\n2 1\n4 5\n7 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 755,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 2 and vertex 12 are connected.\n\nThis is an undirected graph with 15 vertices and 20 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   0   0   0   1   0   0   0   1   0   0   0   0 \n 2 |  1   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 3 |  1   0   0   0   0   1   0   0   0   1   0   1   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   1 \n 5 |  0   0   0   0   0   0   0   0   1   0   0   1   1   1   0 \n 6 |  0   0   1   0   0   0   0   0   0   1   0   0   0   0   0 \n 7 |  1   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 9 |  0   1   0   0   1   0   0   0   0   0   0   1   1   0   0 \n10 |  0   0   1   0   0   1   0   0   0   0   0   0   0   1   0 \n11 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   1   0   1   0   0   0   1   0   0   0   0   0   0 \n13 |  0   0   0   0   1   0   1   0   1   0   0   0   0   0   0 \n14 |  0   0   0   1   1   0   0   1   0   1   0   0   0   0   0 \n15 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "15 20\n5 14\n10 14\n2 1\n1 7\n14 4\n9 13\n6 10\n1 11\n4 15\n5 13\n3 6\n5 9\n3 10\n14 8\n2 9\n3 12\n12 9\n1 3\n13 7\n12 5\n",
    "vertices": [
      2,
      12
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 14 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (8\u00d78):\n\n      1   2   3   4   5   6   7   8\n   --------------------------------\n 1 |  0   1   1   1   1   1   1   0 \n 2 |  1   0   0   0   0   1   1   0 \n 3 |  1   0   0   0   0   1   0   0 \n 4 |  1   0   0   0   1   1   0   1 \n 5 |  1   0   0   1   0   0   1   1 \n 6 |  1   1   1   1   0   0   0   0 \n 7 |  1   1   0   0   1   0   0   0 \n 8 |  0   0   0   1   1   0   0   0 \n",
    "graph_output": "8 14\n1 4\n4 8\n1 5\n5 7\n7 2\n4 6\n1 3\n6 2\n6 1\n6 3\n8 5\n2 1\n4 5\n7 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 755,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 1 (source) to vertex 7 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 8 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5 with a weight of 29 and a capacity of 6.\nThere is an edge between vertex 5 and vertex 6 with a weight of 25 and a capacity of 6.\nThere is an edge between vertex 5 and vertex 9 with a weight of 90 and a capacity of 6.\nThere is an edge between vertex 1 and vertex 3 with a weight of 58 and a capacity of 7.\nThere is an edge between vertex 1 and vertex 8 with a weight of 4 and a capacity of 9.\nThere is an edge between vertex 3 and vertex 4 with a weight of 46 and a capacity of 10.\nThere is an edge between vertex 4 and vertex 7 with a weight of 83 and a capacity of 1.\nThere is an edge between vertex 6 and vertex 2 with a weight of 49 and a capacity of 7.\n",
    "graph_output": "9 8\n1 5 29 6\n5 6 25 6\n5 9 90 6\n1 3 58 7\n1 8 4 9\n3 4 46 10\n4 7 83 1\n6 2 49 7\n",
    "vertices": [
      1,
      7
    ],
    "answer": 187,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 11 (source) to vertex 5 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 16 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   0   1   1   1   1   1   0   0 \n 2 |  0   0   0   1   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   1   1   1   0   0   0 \n 4 |  0   1   0   0   0   1   0   0   0   0   1 \n 5 |  1   0   0   0   0   1   0   1   0   1   0 \n 6 |  1   0   1   1   1   0   0   0   0   0   1 \n 7 |  1   0   1   0   0   0   0   0   0   0   0 \n 8 |  1   0   1   0   1   0   0   0   0   0   0 \n 9 |  1   0   0   0   0   0   0   0   0   1   0 \n10 |  0   0   0   0   1   0   0   0   1   0   0 \n11 |  0   0   0   1   0   1   0   0   0   0   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   0   3   9   1   1   9   0   0 \n 2 |  0   0   0   2   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   6   5   9   0   0   0 \n 4 |  0   2   0   0   0   2   0   0   0   0   9 \n 5 |  3   0   0   0   0   3   0   3   0   5   0 \n 6 |  9   0   6   2   3   0   0   0   0   0   6 \n 7 |  1   0   5   0   0   0   0   0   0   0   0 \n 8 |  1   0   9   0   3   0   0   0   0   0   0 \n 9 |  9   0   0   0   0   0   0   0   0   4   0 \n10 |  0   0   0   0   5   0   0   0   4   0   0 \n11 |  0   0   0   9   0   6   0   0   0   0   0 \n",
    "graph_output": "11 16\n1 6 9\n1 7 1\n6 4 2\n1 5 3\n5 10 5\n1 8 1\n8 3 9\n10 9 4\n4 11 9\n4 2 2\n5 6 3\n5 8 3\n9 1 9\n3 6 6\n7 3 5\n11 6 6\n",
    "vertices": [
      11,
      5
    ],
    "answer": 8,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 102 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 15 (weight=46), 4 (weight=97), 5 (weight=59), 13 (weight=5), 6 (weight=65), 9 (weight=36), 8 (weight=76), 7 (weight=55), 12 (weight=79), 11 (weight=58), 14 (weight=84), 10 (weight=33)\nVertex 2: 13 (weight=96), 10 (weight=73), 3 (weight=27), 12 (weight=40), 14 (weight=56), 4 (weight=74), 7 (weight=68), 9 (weight=28), 16 (weight=44), 6 (weight=6), 15 (weight=28), 5 (weight=29)\nVertex 3: 5 (weight=79), 15 (weight=23), 7 (weight=34), 2 (weight=27), 6 (weight=69), 12 (weight=42), 10 (weight=24), 16 (weight=9), 8 (weight=35), 11 (weight=91), 4 (weight=47)\nVertex 4: 1 (weight=97), 16 (weight=42), 14 (weight=79), 12 (weight=73), 9 (weight=69), 5 (weight=48), 10 (weight=32), 2 (weight=74), 11 (weight=50), 13 (weight=61), 15 (weight=77), 6 (weight=5), 8 (weight=20), 7 (weight=9), 3 (weight=47)\nVertex 5: 1 (weight=59), 11 (weight=74), 3 (weight=79), 12 (weight=42), 10 (weight=46), 13 (weight=75), 9 (weight=74), 15 (weight=73), 4 (weight=48), 8 (weight=21), 7 (weight=13), 16 (weight=2), 2 (weight=29)\nVertex 6: 15 (weight=47), 9 (weight=22), 16 (weight=22), 14 (weight=24), 1 (weight=65), 3 (weight=69), 10 (weight=94), 11 (weight=13), 7 (weight=75), 13 (weight=12), 8 (weight=100), 4 (weight=5), 2 (weight=6), 12 (weight=61)\nVertex 7: 13 (weight=62), 3 (weight=34), 9 (weight=24), 15 (weight=15), 12 (weight=69), 1 (weight=55), 6 (weight=75), 10 (weight=73), 2 (weight=68), 14 (weight=9), 16 (weight=19), 8 (weight=84), 5 (weight=13), 4 (weight=9)\nVertex 8: 15 (weight=54), 13 (weight=5), 10 (weight=17), 1 (weight=76), 11 (weight=3), 5 (weight=21), 6 (weight=100), 3 (weight=35), 16 (weight=64), 9 (weight=51), 4 (weight=20), 7 (weight=84)\nVertex 9: 6 (weight=22), 5 (weight=74), 4 (weight=69), 7 (weight=24), 1 (weight=36), 16 (weight=91), 11 (weight=22), 12 (weight=74), 14 (weight=68), 8 (weight=51), 2 (weight=28)\nVertex 10: 2 (weight=73), 5 (weight=46), 8 (weight=17), 11 (weight=85), 6 (weight=94), 4 (weight=32), 3 (weight=24), 13 (weight=99), 7 (weight=73), 12 (weight=17), 16 (weight=88), 15 (weight=32), 1 (weight=33)\nVertex 11: 5 (weight=74), 16 (weight=65), 10 (weight=85), 9 (weight=22), 6 (weight=13), 8 (weight=3), 12 (weight=83), 4 (weight=50), 13 (weight=28), 14 (weight=8), 3 (weight=91), 15 (weight=3), 1 (weight=58)\nVertex 12: 15 (weight=47), 5 (weight=42), 4 (weight=73), 14 (weight=3), 16 (weight=23), 7 (weight=69), 2 (weight=40), 13 (weight=4), 3 (weight=42), 9 (weight=74), 10 (weight=17), 11 (weight=83), 1 (weight=79), 6 (weight=61)\nVertex 13: 8 (weight=5), 2 (weight=96), 7 (weight=62), 5 (weight=75), 16 (weight=52), 1 (weight=5), 12 (weight=4), 10 (weight=99), 6 (weight=12), 4 (weight=61), 11 (weight=28), 15 (weight=73), 14 (weight=90)\nVertex 14: 4 (weight=79), 12 (weight=3), 6 (weight=24), 16 (weight=83), 2 (weight=56), 9 (weight=68), 11 (weight=8), 7 (weight=9), 1 (weight=84), 13 (weight=90)\nVertex 15: 1 (weight=46), 8 (weight=54), 6 (weight=47), 12 (weight=47), 3 (weight=23), 5 (weight=73), 7 (weight=15), 13 (weight=73), 4 (weight=77), 10 (weight=32), 11 (weight=3), 16 (weight=1), 2 (weight=28)\nVertex 16: 4 (weight=42), 6 (weight=22), 13 (weight=52), 14 (weight=83), 12 (weight=23), 11 (weight=65), 9 (weight=91), 3 (weight=9), 10 (weight=88), 8 (weight=64), 2 (weight=44), 7 (weight=19), 15 (weight=1), 5 (weight=2)\n",
    "graph_output": "16 102\n1 15 46\n15 8 54\n15 6 47\n1 4 97\n4 16 42\n1 5 59\n8 13 5\n5 11 74\n13 2 96\n15 12 47\n5 3 79\n2 10 73\n13 7 62\n6 9 22\n4 14 79\n5 12 42\n10 5 46\n3 15 23\n13 5 75\n12 4 73\n6 16 22\n16 13 52\n9 5 74\n14 12 3\n5 15 73\n14 6 24\n3 7 34\n16 14 83\n1 13 5\n8 10 17\n4 9 69\n4 5 48\n7 9 24\n12 16 23\n6 1 65\n1 9 36\n7 15 15\n16 11 65\n12 7 69\n2 3 27\n6 3 69\n2 12 40\n16 9 91\n11 10 85\n1 8 76\n9 11 22\n13 12 4\n10 6 94\n3 12 42\n1 7 55\n4 10 32\n14 2 56\n2 4 74\n11 6 13\n3 10 24\n6 7 75\n11 8 3\n13 10 99\n9 12 74\n7 10 73\n3 16 9\n7 2 68\n12 10 17\n11 12 83\n12 1 79\n8 5 21\n13 6 12\n11 4 50\n13 4 61\n11 13 28\n6 8 100\n3 8 35\n14 9 68\n15 13 73\n10 16 88\n4 15 77\n14 11 8\n16 8 64\n14 7 9\n8 9 51\n9 2 28\n10 15 32\n11 3 91\n4 6 5\n15 11 3\n8 4 20\n1 11 58\n2 16 44\n7 16 19\n6 2 6\n8 7 84\n5 7 13\n1 14 84\n16 15 1\n1 10 33\n2 15 28\n5 16 2\n4 7 9\n3 4 47\n5 2 29\n6 12 61\n14 13 90\n",
    "vertices": [
      null,
      null
    ],
    "answer": 103,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 12 vertices and 15 edges\n\nEdges (Format: Node Node):\n10 7\n11 9\n8 4\n9 5\n7 6\n9 6\n8 9\n5 7\n12 8\n3 10\n4 11\n7 2\n11 3\n10 9\n8 10\n",
    "graph_output": "12 15\n10 7\n11 9\n8 4\n9 5\n7 6\n9 6\n8 9\n5 7\n12 8\n3 10\n4 11\n7 2\n11 3\n10 9\n8 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 43 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 7 (capacity=4), 11 (capacity=4), 4 (capacity=2), 2 (capacity=1), 8 (capacity=10), 5 (capacity=6), 3 (capacity=3), 6 (capacity=9)\nVertex 2: 8 (capacity=7), 9 (capacity=5), 5 (capacity=2), 7 (capacity=5), 10 (capacity=3), 6 (capacity=9), 1 (capacity=1), 4 (capacity=10)\nVertex 3: 8 (capacity=8), 5 (capacity=2), 6 (capacity=9), 7 (capacity=8), 10 (capacity=1), 4 (capacity=3), 11 (capacity=6), 1 (capacity=3)\nVertex 4: 6 (capacity=1), 1 (capacity=2), 9 (capacity=10), 11 (capacity=1), 7 (capacity=4), 3 (capacity=3), 2 (capacity=10), 5 (capacity=6)\nVertex 5: 2 (capacity=2), 3 (capacity=2), 11 (capacity=1), 8 (capacity=1), 7 (capacity=8), 1 (capacity=6), 4 (capacity=6)\nVertex 6: 10 (capacity=9), 4 (capacity=1), 7 (capacity=1), 11 (capacity=7), 8 (capacity=2), 3 (capacity=9), 2 (capacity=9), 9 (capacity=5), 1 (capacity=9)\nVertex 7: 1 (capacity=4), 10 (capacity=10), 8 (capacity=1), 6 (capacity=1), 9 (capacity=1), 2 (capacity=5), 4 (capacity=4), 3 (capacity=8), 11 (capacity=10), 5 (capacity=8)\nVertex 8: 7 (capacity=1), 3 (capacity=8), 11 (capacity=1), 2 (capacity=7), 9 (capacity=7), 6 (capacity=2), 5 (capacity=1), 1 (capacity=10)\nVertex 9: 2 (capacity=5), 7 (capacity=1), 8 (capacity=7), 4 (capacity=10), 10 (capacity=6), 6 (capacity=5)\nVertex 10: 7 (capacity=10), 6 (capacity=9), 11 (capacity=5), 2 (capacity=3), 9 (capacity=6), 3 (capacity=1)\nVertex 11: 8 (capacity=1), 1 (capacity=4), 6 (capacity=7), 10 (capacity=5), 5 (capacity=1), 4 (capacity=1), 7 (capacity=10), 3 (capacity=6)\n",
    "graph_output": "11 43\n1 7 4\n7 10 10\n10 6 9\n7 8 1\n8 3 8\n8 11 1\n8 2 7\n2 9 5\n2 5 2\n6 4 1\n1 11 4\n6 7 1\n9 7 1\n1 4 2\n6 11 7\n5 3 2\n2 7 5\n9 8 7\n9 4 10\n10 11 5\n10 2 3\n5 11 1\n6 8 2\n11 4 1\n6 3 9\n7 4 4\n3 7 8\n2 6 9\n11 7 10\n10 9 6\n2 1 1\n8 5 1\n6 9 5\n10 3 1\n7 5 8\n3 4 3\n3 11 6\n1 8 10\n2 4 10\n1 5 6\n1 3 3\n6 1 9\n5 4 6\n",
    "vertices": [
      3,
      6
    ],
    "answer": 40,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 19 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 5 and vertex 4.\n",
    "graph_output": "7 19\n6 2\n7 2\n5 3\n5 6\n3 7\n3 6\n6 1\n4 6\n7 6\n2 4\n1 2\n7 4\n1 4\n3 4\n2 5\n7 1\n1 5\n5 7\n5 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 587,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 20, 8, 23, 27, 6\nVertex 2: 28, 13\nVertex 3: 20, 25, 21\nVertex 4: 8, 30\nVertex 5: 27, 7\nVertex 6: 1\nVertex 7: 5, 16\nVertex 8: 1, 4\nVertex 9: 16, 29\nVertex 10: 23, 22\nVertex 11: 22\nVertex 12: 22\nVertex 13: 2\nVertex 14: 29\nVertex 15: 26, 28, 31, 18\nVertex 16: 7, 9\nVertex 17: 20, 19\nVertex 18: 15\nVertex 19: 17\nVertex 20: 1, 3, 17\nVertex 21: 3\nVertex 22: 10, 11, 12\nVertex 23: 1, 10\nVertex 24: 28\nVertex 25: 3\nVertex 26: 27, 15\nVertex 27: 1, 5, 26\nVertex 28: 15, 2, 24\nVertex 29: 9, 14\nVertex 30: 4\nVertex 31: 15\n",
    "graph_output": "31 30\n1 20\n1 8\n1 23\n20 3\n1 27\n27 5\n23 10\n27 26\n3 25\n26 15\n8 4\n5 7\n3 21\n15 28\n20 17\n7 16\n16 9\n10 22\n17 19\n4 30\n22 11\n22 12\n1 6\n28 2\n15 31\n9 29\n15 18\n28 24\n29 14\n2 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 11,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 8 vertices and 7 edges\n\nEdges (Format: Node Node):\n5 8\n4 5\n1 6\n8 7\n5 6\n1 7\n6 4\n",
    "graph_output": "8 7\n5 8\n4 5\n1 6\n8 7\n5 6\n1 7\n6 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 118 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 6, 10, 11, 8, 7, 16, 15, 14, 3, 4, 2, 12, 13, 5\nVertex 2: 7, 4, 13, 16, 11, 6, 3, 9, 1, 8, 12, 14, 15, 10, 5\nVertex 3: 9, 14, 12, 4, 7, 15, 8, 2, 1, 13, 11, 16, 5, 6, 10\nVertex 4: 2, 8, 6, 7, 16, 3, 9, 13, 1, 10, 14, 11, 15, 12, 5\nVertex 5: 11, 15, 16, 8, 3, 7, 6, 9, 4, 12, 13, 1, 10, 2\nVertex 6: 1, 4, 9, 8, 12, 7, 2, 10, 3, 16, 5, 11, 14, 13, 15\nVertex 7: 9, 2, 4, 3, 6, 12, 1, 15, 8, 11, 10, 13, 5, 16, 14\nVertex 8: 4, 15, 14, 6, 12, 13, 1, 11, 3, 7, 5, 2, 10, 16\nVertex 9: 1, 7, 12, 3, 6, 4, 2, 16, 11, 10, 14, 5, 13, 15\nVertex 10: 1, 11, 7, 4, 15, 12, 9, 6, 14, 3, 8, 13, 16, 2, 5\nVertex 11: 12, 5, 10, 2, 1, 8, 7, 15, 9, 3, 4, 6, 13, 14, 16\nVertex 12: 9, 11, 3, 8, 6, 7, 16, 15, 10, 1, 14, 2, 13, 4, 5\nVertex 13: 2, 8, 4, 7, 3, 15, 12, 16, 1, 10, 5, 14, 9, 6, 11\nVertex 14: 3, 16, 8, 1, 4, 12, 10, 9, 2, 13, 6, 11, 7, 15\nVertex 15: 8, 5, 3, 7, 1, 12, 11, 16, 10, 4, 13, 2, 9, 6, 14\nVertex 16: 14, 2, 4, 1, 12, 5, 9, 15, 3, 7, 6, 13, 10, 8, 11\n",
    "graph_output": "16 118\n1 9\n9 7\n9 12\n9 3\n12 11\n11 5\n3 14\n7 2\n2 4\n14 16\n2 13\n4 8\n8 15\n1 6\n1 10\n6 4\n16 2\n8 14\n4 7\n3 12\n4 16\n11 10\n4 3\n9 6\n7 3\n8 6\n12 8\n2 11\n12 6\n7 6\n8 13\n15 5\n6 2\n3 15\n11 1\n8 1\n12 7\n7 1\n1 16\n12 16\n5 16\n8 11\n7 15\n15 1\n12 15\n3 8\n2 3\n7 8\n11 7\n14 1\n9 4\n1 3\n9 2\n7 10\n4 13\n7 13\n15 11\n13 3\n4 1\n10 4\n5 8\n16 9\n15 16\n9 11\n15 10\n11 3\n16 3\n12 10\n4 14\n3 5\n9 10\n10 6\n1 2\n7 5\n4 11\n1 12\n7 16\n14 12\n15 4\n14 10\n3 6\n6 16\n13 15\n8 2\n2 12\n13 12\n10 3\n9 14\n16 13\n4 12\n5 6\n13 1\n9 5\n4 5\n12 5\n8 10\n13 10\n2 14\n2 15\n5 13\n10 16\n6 11\n13 14\n6 14\n8 16\n9 13\n9 15\n5 1\n13 6\n15 6\n11 13\n14 11\n7 14\n2 10\n10 5\n5 2\n11 16\n15 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 13 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 5, 4\nVertex 2: 1, 3, 4, 7\nVertex 3: 2, 5, 7, 4\nVertex 4: 2, 7, 6, 1, 3\nVertex 5: 3, 1, 6\nVertex 6: 4, 7, 5\nVertex 7: 4, 2, 3, 6\n",
    "graph_output": "7 13\n1 2\n2 3\n2 4\n3 5\n4 7\n4 6\n1 5\n4 1\n7 2\n3 7\n3 4\n7 6\n5 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 644,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 22 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   1   0   0   0   0   0   0   1   1   0   0   0   1   0 \n 2 |  0   0   0   0   0   0   1   0   1   1   0   0   0   0   0   1 \n 3 |  1   0   0   0   0   0   1   1   0   0   0   0   0   1   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 7 |  0   1   1   0   0   0   0   0   0   0   1   0   0   1   0   0 \n 8 |  0   0   1   0   0   1   0   0   0   0   1   0   0   0   0   0 \n 9 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  1   1   0   0   1   0   0   0   0   0   0   0   1   0   0   0 \n11 |  1   0   0   1   0   0   1   1   0   0   0   0   1   1   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1 \n13 |  0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0 \n14 |  0   0   1   0   0   0   1   0   0   0   1   0   0   0   0   0 \n15 |  1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n16 |  0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n",
    "graph_output": "16 22\n1 11\n11 8\n1 10\n8 3\n11 7\n11 14\n10 2\n11 4\n2 9\n10 13\n2 16\n10 5\n1 15\n15 12\n8 6\n7 14\n3 7\n7 2\n12 16\n13 11\n3 14\n1 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 10 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 11 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a capacity of 9.\nThere is an edge between vertex 3 and vertex 11 with a capacity of 8.\nThere is an edge between vertex 11 and vertex 2 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 11 and vertex 4 with a capacity of 8.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 11 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 8 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 8 and vertex 5 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 6 with a capacity of 9.\n",
    "graph_output": "11 11\n1 3 9\n3 11 8\n11 2 2\n2 10 9\n11 4 8\n2 7 3\n7 8 5\n11 6 10\n8 9 6\n8 5 5\n10 6 9\n",
    "vertices": [
      10,
      2
    ],
    "answer": 11,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 85 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   0   0   1   1   1 \n 2 |  1   0   1   0   1   1   1   1   1   1   0   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   0   0 \n 4 |  1   0   1   0   0   0   1   1   1   1   1   0   1   1   1 \n 5 |  1   1   1   0   0   1   0   1   1   1   1   0   1   1   1 \n 6 |  1   1   1   0   1   0   1   1   0   1   1   1   1   0   1 \n 7 |  1   1   1   1   0   1   0   1   0   1   1   1   0   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   0   1   0   1 \n 9 |  1   1   1   1   1   0   0   1   0   1   0   1   1   1   0 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   0 \n11 |  0   0   1   1   1   1   1   1   0   1   0   1   1   1   1 \n12 |  0   1   1   0   0   1   1   0   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   1   0   1   1   1   1   1   0   1   1 \n14 |  1   1   0   1   1   0   1   0   1   1   1   1   1   0   1 \n15 |  1   1   0   1   1   1   1   1   0   0   1   1   1   1   0 \n",
    "graph_output": "15 85\n1 8\n8 2\n2 6\n8 7\n1 13\n7 14\n8 11\n8 10\n11 15\n6 3\n1 9\n8 4\n9 12\n13 5\n10 4\n11 14\n14 2\n6 8\n13 12\n10 5\n13 4\n1 5\n11 5\n2 1\n1 15\n15 7\n12 7\n2 9\n2 13\n2 15\n12 3\n9 5\n15 14\n5 2\n14 10\n14 1\n4 3\n8 5\n4 7\n15 13\n12 11\n7 2\n10 13\n12 15\n4 1\n3 2\n13 6\n12 14\n12 2\n13 3\n5 6\n15 4\n13 14\n3 1\n4 14\n10 1\n13 11\n3 10\n3 11\n10 12\n13 8\n7 10\n3 7\n10 2\n9 13\n11 6\n3 5\n7 6\n9 10\n5 15\n5 14\n9 8\n3 9\n6 12\n7 11\n10 11\n4 9\n14 9\n6 1\n1 7\n15 8\n15 6\n10 6\n4 11\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 9 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 2, 5\nVertex 2: 4, 1, 5, 6\nVertex 3: 4\nVertex 4: 1, 2, 5, 3\nVertex 5: 8, 4, 2, 1\nVertex 6: 2\nVertex 7: No connections\nVertex 8: 5\n",
    "graph_output": "8 9\n8 5\n4 1\n2 4\n5 4\n3 4\n2 1\n2 5\n1 5\n2 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 13 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0  88   0   0   0  83  15   0  67  21  30 \n 2 |  0   0  66   0   0   0   0   0   0   0   0   0 \n 3 | 88  66   0  18  72   0   0   0   0   0   0   0 \n 4 |  0   0  18   0  91  81   3   0  73   0   0   0 \n 5 |  0   0  72  91   0   0   0   0   0   0   0   0 \n 6 |  0   0   0  81   0   0   0   0   0   0   0   0 \n 7 | 83   0   0   3   0   0   0   0   0   0   0   0 \n 8 | 15   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0  73   0   0   0   0   0   0   0   0 \n10 | 67   0   0   0   0   0   0   0   0   0   0   0 \n11 | 21   0   0   0   0   0   0   0   0   0   0   0 \n12 | 30   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "12 13\n1 8 15\n1 3 88\n1 7 83\n3 4 18\n1 12 30\n1 11 21\n4 9 73\n3 2 66\n3 5 72\n1 10 67\n4 6 81\n4 5 91\n7 4 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 534,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 9 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 6 and vertex 1.\n",
    "graph_output": "7 9\n1 4\n1 3\n4 6\n6 2\n1 5\n2 7\n7 6\n4 2\n6 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 21,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 6 vertices and 8 edges\n\nEdges (Format: Node Node):\n2 4\n5 3\n1 5\n6 1\n5 4\n1 3\n3 6\n2 1\n",
    "graph_output": "6 8\n2 4\n5 3\n1 5\n6 1\n5 4\n1 3\n3 6\n2 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 3 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 37 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   0   1   1   1   0   1   1   1   1 \n 2 |  1   0   1   0   1   1   1   1   0   1   1 \n 3 |  0   1   0   1   1   1   1   1   0   0   1 \n 4 |  1   0   1   0   1   1   1   0   0   1   1 \n 5 |  1   1   1   1   0   1   0   0   1   1   1 \n 6 |  1   1   1   1   1   0   0   1   1   0   1 \n 7 |  0   1   1   1   0   0   0   1   0   0   1 \n 8 |  1   1   1   0   0   1   1   0   0   0   1 \n 9 |  1   0   0   0   1   1   0   0   0   0   1 \n10 |  1   1   0   1   1   0   0   0   0   0   0 \n11 |  1   1   1   1   1   1   1   1   1   0   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0  10   0   3   2  10   0   1   4  10   9 \n 2 | 10   0   3   0  10   2  10   9   0   7   4 \n 3 |  0   3   0   8   4   7   3   2   0   0   9 \n 4 |  3   0   8   0   5   2   4   0   0   9   6 \n 5 |  2  10   4   5   0   2   0   0   9   7   7 \n 6 | 10   2   7   2   2   0   0  10   2   0   3 \n 7 |  0  10   3   4   0   0   0   7   0   0   9 \n 8 |  1   9   2   0   0  10   7   0   0   0   3 \n 9 |  4   0   0   0   9   2   0   0   0   0   4 \n10 | 10   7   0   9   7   0   0   0   0   0   0 \n11 |  9   4   9   6   7   3   9   3   4   0   0 \n",
    "graph_output": "11 37\n1 2 10\n2 7 10\n1 9 4\n2 8 9\n9 11 4\n2 3 3\n11 4 6\n1 10 10\n4 5 5\n9 6 2\n7 11 9\n5 10 7\n1 5 2\n4 6 2\n5 9 9\n3 5 4\n6 1 10\n4 10 9\n11 6 3\n8 3 2\n2 5 10\n8 11 3\n1 8 1\n11 3 9\n11 1 9\n1 4 3\n7 4 4\n7 3 3\n6 3 7\n2 11 4\n2 10 7\n5 6 2\n4 3 8\n7 8 7\n8 6 10\n5 11 7\n6 2 2\n",
    "vertices": [
      3,
      10
    ],
    "answer": 33,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 8 and vertex 1 are connected.\n\nThis is an undirected graph with 16 vertices and 18 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   1   0   0   1   0   0   0   1   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   1   0   0   0   1   0   0   1   0   1 \n 4 |  0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0 \n 5 |  1   0   0   1   0   0   0   0   0   0   0   1   1   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   1   0   0   0   0   1   0   0   0   0   0   1   0   1 \n 8 |  1   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n10 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   1   0   0   0   0   0   1   0   0   0   0   1   0   0 \n12 |  1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   1   0   0   0   1   0   0   0   1   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n16 |  0   0   1   0   0   0   1   0   0   0   0   0   0   0   1   0 \n",
    "graph_output": "16 18\n5 12\n7 16\n5 4\n11 3\n11 9\n16 3\n1 12\n5 1\n7 8\n5 13\n10 4\n15 16\n14 7\n14 3\n8 1\n2 8\n3 7\n14 11\n",
    "vertices": [
      8,
      1
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 13 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 13, 9, 7\nVertex 2: 10, 13\nVertex 3: No connections\nVertex 4: 10\nVertex 5: No connections\nVertex 6: 12, 1, 13\nVertex 7: 10, 1, 8\nVertex 8: 7\nVertex 9: 1\nVertex 10: 2, 12, 4, 7\nVertex 11: 13\nVertex 12: 6, 10\nVertex 13: 1, 6, 11, 2\n",
    "graph_output": "13 13\n6 12\n10 2\n1 6\n10 12\n1 13\n9 1\n4 10\n6 13\n10 7\n11 13\n7 1\n13 2\n8 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "list"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 12, 9, 25, 11, 29\nVertex 2: 31, 7\nVertex 3: 12\nVertex 4: 1, 28\nVertex 5: 26\nVertex 6: 12, 8\nVertex 7: 2\nVertex 8: 6, 24\nVertex 9: 1, 31, 19, 15, 18\nVertex 10: 26\nVertex 11: 1\nVertex 12: 1, 22, 6, 3\nVertex 13: 26\nVertex 14: 31, 21\nVertex 15: 9\nVertex 16: 25\nVertex 17: 23\nVertex 18: 9\nVertex 19: 9, 20\nVertex 20: 19, 23\nVertex 21: 14\nVertex 22: 12, 27\nVertex 23: 20, 17\nVertex 24: 8\nVertex 25: 1, 16\nVertex 26: 27, 30, 13, 10, 5\nVertex 27: 22, 26\nVertex 28: 4\nVertex 29: 1\nVertex 30: 26\nVertex 31: 9, 14, 2\n",
    "graph_output": "31 30\n1 4\n1 12\n1 9\n12 22\n12 6\n22 27\n6 8\n9 31\n9 19\n19 20\n1 25\n27 26\n31 14\n31 2\n4 28\n1 11\n14 21\n9 15\n26 30\n12 3\n9 18\n8 24\n26 13\n20 23\n2 7\n26 10\n25 16\n26 5\n1 29\n23 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 112 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 13 and vertex 6.\n",
    "graph_output": "16 112\n1 11\n1 13\n1 6\n1 5\n5 7\n11 4\n7 10\n10 14\n6 3\n5 2\n4 16\n4 9\n2 8\n10 15\n10 12\n6 4\n9 3\n15 14\n4 8\n9 8\n10 5\n3 15\n4 10\n13 4\n11 6\n12 1\n13 16\n12 13\n2 14\n12 8\n1 8\n9 7\n2 10\n16 5\n10 11\n13 9\n4 12\n16 1\n12 5\n6 12\n16 11\n8 7\n5 4\n2 13\n3 8\n8 5\n12 3\n11 7\n9 16\n11 12\n8 16\n7 3\n6 14\n4 1\n5 9\n2 7\n7 4\n15 8\n14 4\n5 14\n4 3\n15 2\n8 11\n14 12\n15 13\n2 11\n11 9\n3 14\n3 2\n14 13\n7 12\n13 7\n2 1\n3 1\n7 6\n5 3\n16 3\n16 2\n15 1\n6 15\n1 14\n13 8\n10 1\n6 8\n6 10\n11 15\n10 9\n15 4\n7 1\n2 6\n16 10\n16 15\n10 3\n8 10\n7 15\n16 7\n2 9\n5 13\n15 12\n15 5\n6 16\n9 15\n6 9\n5 6\n16 12\n5 11\n4 2\n1 9\n14 8\n12 2\n11 3\n13 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 58 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   1   1   1   1   1   1   1   1   1   1 \n 2 |  0   0   1   1   1   1   1   0   0   1   1   1 \n 3 |  1   1   0   0   1   1   1   1   1   1   1   0 \n 4 |  1   1   0   0   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   0 \n 6 |  1   1   1   1   1   0   1   1   0   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1 \n 8 |  1   0   1   1   1   1   1   0   1   1   1   1 \n 9 |  1   0   1   1   1   0   1   1   0   1   1   0 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1 \n12 |  1   1   0   1   0   1   1   1   0   1   1   0 \n",
    "graph_output": "12 58\n1 8\n8 5\n9 4\n6 4\n4 2\n6 2\n12 4\n11 6\n11 1\n5 3\n6 1\n10 8\n4 10\n9 7\n6 12\n10 5\n7 8\n12 7\n10 2\n2 7\n6 3\n1 12\n6 5\n9 8\n8 4\n7 4\n7 10\n12 11\n7 1\n7 5\n9 10\n1 10\n2 3\n10 6\n9 1\n3 10\n4 5\n3 7\n11 9\n12 10\n2 12\n9 3\n8 6\n1 5\n11 2\n5 9\n2 5\n1 3\n11 5\n11 10\n7 11\n12 8\n11 3\n11 4\n8 3\n7 6\n4 1\n8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 150,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (29\u00d729):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n   --------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   1   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0 \n 5 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 7 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n15 |  1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n17 |  1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1 \n21 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   1   0   0   0   0   0   1   0 \n25 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   1   0   0   0   0   0 \n29 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "29 28\n1 15\n15 24\n24 28\n15 18\n1 17\n28 6\n24 14\n17 20\n18 13\n28 23\n20 12\n28 21\n14 11\n20 29\n17 27\n15 2\n6 10\n17 8\n13 26\n21 7\n1 25\n29 3\n24 22\n21 16\n6 5\n26 4\n7 9\n4 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 16,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 3 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 37 edges\n\nEdges (Format: Node Node Capacity):\n1 2 10\n2 7 10\n1 9 4\n2 8 9\n9 11 4\n2 3 3\n11 4 6\n1 10 10\n4 5 5\n9 6 2\n7 11 9\n5 10 7\n1 5 2\n4 6 2\n5 9 9\n3 5 4\n6 1 10\n4 10 9\n11 6 3\n8 3 2\n2 5 10\n8 11 3\n1 8 1\n11 3 9\n11 1 9\n1 4 3\n7 4 4\n7 3 3\n6 3 7\n2 11 4\n2 10 7\n5 6 2\n4 3 8\n7 8 7\n8 6 10\n5 11 7\n6 2 2\n",
    "graph_output": "11 37\n1 2 10\n2 7 10\n1 9 4\n2 8 9\n9 11 4\n2 3 3\n11 4 6\n1 10 10\n4 5 5\n9 6 2\n7 11 9\n5 10 7\n1 5 2\n4 6 2\n5 9 9\n3 5 4\n6 1 10\n4 10 9\n11 6 3\n8 3 2\n2 5 10\n8 11 3\n1 8 1\n11 3 9\n11 1 9\n1 4 3\n7 4 4\n7 3 3\n6 3 7\n2 11 4\n2 10 7\n5 6 2\n4 3 8\n7 8 7\n8 6 10\n5 11 7\n6 2 2\n",
    "vertices": [
      3,
      10
    ],
    "answer": 33,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 11 vertices and 10 edges\n\nEdges (Format: Node Node):\n1 6\n8 2\n4 1\n4 7\n5 10\n2 3\n3 5\n1 8\n6 10\n7 8\n",
    "graph_output": "11 10\n1 6\n8 2\n4 1\n4 7\n5 10\n2 3\n3 5\n1 8\n6 10\n7 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 15 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 11 and vertex 9.\n",
    "graph_output": "11 15\n2 6\n9 2\n4 6\n7 8\n11 6\n1 8\n1 7\n7 11\n9 1\n3 2\n3 8\n5 6\n6 9\n9 10\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 26 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0 \n 2 |  0   0   1   0   0   0   0   0   0   0   0   0   0   1   1   0 \n 3 |  0   1   0   1   0   1   0   0   1   0   0   1   0   0   0   0 \n 4 |  0   0   1   0   0   1   1   0   0   0   0   0   0   0   1   0 \n 5 |  0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   1 \n 6 |  0   0   1   1   0   0   0   0   1   0   0   0   0   1   0   0 \n 7 |  0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0 \n 8 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   1   0   0   1   0   0   0   1   0   0   0   0   0   1 \n10 |  0   0   0   0   0   0   0   0   1   0   0   0   1   0   1   1 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0 \n12 |  1   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   1   0   0   1   1   0   0   0   0   0 \n14 |  1   1   0   0   0   1   0   0   0   0   0   0   0   0   0   1 \n15 |  0   1   0   1   0   0   0   0   0   1   1   0   0   0   0   0 \n16 |  0   0   0   0   1   0   0   0   1   1   0   0   0   1   0   0 \n",
    "graph_output": "16 26\n7 4\n15 10\n10 13\n2 14\n14 16\n5 16\n16 10\n7 13\n9 10\n1 14\n8 5\n13 11\n3 6\n11 15\n4 3\n12 5\n4 15\n12 3\n3 9\n16 9\n4 6\n2 15\n2 3\n6 9\n14 6\n1 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 16 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10\nVertex 2: 7\nVertex 3: 7\nVertex 4: 7, 15\nVertex 5: 7\nVertex 6: 8\nVertex 7: 10, 4, 2, 3, 9, 5, 13\nVertex 8: 9, 6\nVertex 9: 7, 8, 11\nVertex 10: 1, 7, 14\nVertex 11: 9, 15\nVertex 12: 14\nVertex 13: 7, 15\nVertex 14: 10, 12\nVertex 15: 4, 13, 11\n",
    "graph_output": "15 16\n1 10\n10 7\n7 4\n7 2\n10 14\n7 3\n4 15\n14 12\n7 9\n9 8\n7 5\n7 13\n8 6\n9 11\n15 13\n11 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 92 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 4 and vertex 12.\n",
    "graph_output": "15 92\n4 15\n15 7\n9 10\n15 6\n11 1\n14 3\n6 5\n15 2\n15 14\n14 4\n14 11\n1 3\n13 4\n2 12\n3 11\n2 8\n9 13\n11 15\n9 2\n2 14\n7 13\n9 6\n6 3\n8 6\n3 15\n7 8\n4 1\n10 14\n7 6\n11 2\n14 9\n10 11\n12 8\n12 15\n12 9\n4 3\n15 5\n14 8\n14 1\n15 8\n12 13\n4 2\n11 9\n14 13\n13 1\n2 1\n11 6\n12 5\n9 7\n10 2\n3 5\n1 12\n13 11\n9 5\n11 12\n3 10\n4 11\n15 10\n13 10\n1 6\n8 9\n8 5\n3 7\n2 5\n6 4\n10 5\n11 5\n14 5\n12 10\n4 8\n8 11\n2 3\n10 8\n1 8\n9 4\n3 12\n7 2\n5 4\n11 7\n7 5\n14 7\n12 14\n13 2\n9 3\n12 7\n6 12\n5 1\n13 6\n14 6\n9 15\n10 4\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 2 and vertex 12 are connected.\n\nUndirected Graph with 15 vertices and 20 edges\n\nEdges (Format: Node Node):\n5 14\n10 14\n2 1\n1 7\n14 4\n9 13\n6 10\n1 11\n4 15\n5 13\n3 6\n5 9\n3 10\n14 8\n2 9\n3 12\n12 9\n1 3\n13 7\n12 5\n",
    "graph_output": "15 20\n5 14\n10 14\n2 1\n1 7\n14 4\n9 13\n6 10\n1 11\n4 15\n5 13\n3 6\n5 9\n3 10\n14 8\n2 9\n3 12\n12 9\n1 3\n13 7\n12 5\n",
    "vertices": [
      2,
      12
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 45 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   1   1   1   0   1   1   0   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   0   1   0   1   1 \n 4 |  1   1   1   0   1   0   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   0   0 \n 6 |  1   1   1   0   1   0   1   1   1   0   0 \n 7 |  0   1   0   1   1   1   0   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1 \n 9 |  1   1   0   1   1   1   1   1   0   1   1 \n10 |  0   1   1   1   0   0   1   1   1   0   0 \n11 |  1   1   1   1   0   0   1   1   1   0   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   8   1  10   1   4   0   2   9   0   7 \n 2 |  8   0  10   2   4  10   7   5   8   6   1 \n 3 |  1  10   0  10   2   4   0   1   0   2   4 \n 4 | 10   2  10   0   8   0   2   2   1   7  10 \n 5 |  1   4   2   8   0   6   3   2   9   0   0 \n 6 |  4  10   4   0   6   0   3   1   9   0   0 \n 7 |  0   7   0   2   3   3   0  10  10  10   5 \n 8 |  2   5   1   2   2   1  10   0   2   4   8 \n 9 |  9   8   0   1   9   9  10   2   0   9   7 \n10 |  0   6   2   7   0   0  10   4   9   0   0 \n11 |  7   1   4  10   0   0   5   8   7   0   0 \n",
    "graph_output": "11 45\n1 3 1\n3 2 10\n3 11 4\n2 4 2\n11 7 5\n11 8 8\n11 9 7\n7 6 3\n8 10 4\n8 5 2\n1 11 7\n11 2 1\n2 5 4\n8 2 5\n9 1 9\n6 1 4\n7 2 7\n9 7 10\n5 4 8\n8 9 2\n4 7 2\n5 1 1\n5 9 9\n10 3 2\n7 10 10\n6 3 4\n4 9 1\n6 8 1\n2 1 8\n10 4 7\n9 6 9\n4 3 10\n4 1 10\n1 8 2\n4 8 2\n3 5 2\n5 6 6\n8 3 1\n2 9 8\n9 10 9\n10 2 6\n7 5 3\n7 8 10\n2 6 10\n4 11 10\n",
    "vertices": [
      3,
      4
    ],
    "answer": 34,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 58 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 8 and vertex 11.\n",
    "graph_output": "12 58\n1 8\n8 5\n9 4\n6 4\n4 2\n6 2\n12 4\n11 6\n11 1\n5 3\n6 1\n10 8\n4 10\n9 7\n6 12\n10 5\n7 8\n12 7\n10 2\n2 7\n6 3\n1 12\n6 5\n9 8\n8 4\n7 4\n7 10\n12 11\n7 1\n7 5\n9 10\n1 10\n2 3\n10 6\n9 1\n3 10\n4 5\n3 7\n11 9\n12 10\n2 12\n9 3\n8 6\n1 5\n11 2\n5 9\n2 5\n1 3\n11 5\n11 10\n7 11\n12 8\n11 3\n11 4\n8 3\n7 6\n4 1\n8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 150,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 18 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 7 and vertex 11.\n",
    "graph_output": "16 18\n1 15\n1 11\n11 13\n11 9\n9 2\n11 12\n9 6\n9 14\n9 5\n11 3\n12 10\n12 4\n13 16\n11 8\n1 7\n16 11\n14 3\n7 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 34 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 13 and vertex 17.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 13 and vertex 3.\n",
    "graph_output": "17 34\n6 5\n12 10\n16 15\n17 4\n11 2\n5 1\n8 14\n16 3\n1 10\n5 14\n13 7\n16 13\n12 4\n2 10\n6 7\n1 3\n2 1\n10 4\n14 15\n11 12\n16 10\n4 1\n15 11\n8 3\n9 16\n13 17\n5 16\n3 7\n15 1\n11 4\n12 6\n13 2\n13 8\n13 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 28 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 3 (weight=35), 10 (weight=1), 15 (weight=87), 9 (weight=99)\nVertex 2: 3 (weight=93), 6 (weight=56)\nVertex 3: 1 (weight=35), 15 (weight=5), 4 (weight=67), 2 (weight=93), 6 (weight=14), 10 (weight=95)\nVertex 4: 3 (weight=67), 9 (weight=76), 13 (weight=88)\nVertex 5: 9 (weight=48), 7 (weight=47), 8 (weight=77)\nVertex 6: 9 (weight=75), 7 (weight=28), 11 (weight=60), 3 (weight=14), 2 (weight=56)\nVertex 7: 6 (weight=28), 5 (weight=47), 9 (weight=91), 14 (weight=20)\nVertex 8: 9 (weight=65), 10 (weight=70), 5 (weight=77), 16 (weight=95)\nVertex 9: 4 (weight=76), 5 (weight=48), 6 (weight=75), 8 (weight=65), 7 (weight=91), 1 (weight=99)\nVertex 10: 1 (weight=1), 8 (weight=70), 14 (weight=96), 3 (weight=95)\nVertex 11: 6 (weight=60)\nVertex 12: 13 (weight=77)\nVertex 13: 4 (weight=88), 12 (weight=77), 14 (weight=3), 15 (weight=88)\nVertex 14: 13 (weight=3), 10 (weight=96), 7 (weight=20)\nVertex 15: 3 (weight=5), 16 (weight=79), 1 (weight=87), 13 (weight=88)\nVertex 16: 15 (weight=79), 8 (weight=95)\n",
    "graph_output": "16 28\n1 3 35\n3 15 5\n3 4 67\n4 9 76\n4 13 88\n9 5 48\n3 2 93\n9 6 75\n13 12 77\n9 8 65\n15 16 79\n13 14 3\n1 10 1\n6 7 28\n6 11 60\n10 8 70\n6 3 14\n15 1 87\n10 14 96\n5 7 47\n5 8 77\n7 9 91\n6 2 56\n15 13 88\n16 8 95\n1 9 99\n10 3 95\n14 7 20\n",
    "vertices": [
      null,
      null
    ],
    "answer": 605,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 9 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 17 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   1   1   1   0   0   0   0   1   0   0   1 \n 2 |  1   0   0   0   0   0   0   0   0   0   1   0 \n 3 |  1   0   0   0   1   0   1   0   0   0   0   0 \n 4 |  1   0   0   0   0   0   0   0   0   1   0   1 \n 5 |  0   0   1   0   0   0   0   0   0   0   1   0 \n 6 |  0   0   0   0   0   0   0   0   0   1   0   0 \n 7 |  0   0   1   0   0   0   0   1   1   0   0   0 \n 8 |  0   0   0   0   0   0   1   0   1   1   0   0 \n 9 |  1   0   0   0   0   0   1   1   0   0   0   0 \n10 |  0   0   0   1   0   1   0   1   0   0   0   1 \n11 |  0   1   0   0   1   0   0   0   0   0   0   0 \n12 |  1   0   0   1   0   0   0   0   0   1   0   0 \n\nCapacity Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   2   6   9   0   0   0   0  10   0   0   2 \n 2 |  2   0   0   0   0   0   0   0   0   0   2   0 \n 3 |  6   0   0   0   2   0   7   0   0   0   0   0 \n 4 |  9   0   0   0   0   0   0   0   0   3   0   3 \n 5 |  0   0   2   0   0   0   0   0   0   0   7   0 \n 6 |  0   0   0   0   0   0   0   0   0   8   0   0 \n 7 |  0   0   7   0   0   0   0   4   8   0   0   0 \n 8 |  0   0   0   0   0   0   4   0   9   6   0   0 \n 9 | 10   0   0   0   0   0   8   9   0   0   0   0 \n10 |  0   0   0   3   0   8   0   6   0   0   0   1 \n11 |  0   2   0   0   7   0   0   0   0   0   0   0 \n12 |  2   0   0   3   0   0   0   0   0   1   0   0 \n",
    "graph_output": "12 17\n1 12 2\n1 9 10\n12 10 1\n9 8 9\n10 6 8\n10 4 3\n1 3 6\n3 7 7\n1 2 2\n3 5 2\n2 11 2\n5 11 7\n8 7 4\n9 7 8\n12 4 3\n10 8 6\n1 4 9\n",
    "vertices": [
      3,
      9
    ],
    "answer": 15,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 16 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 4 and vertex 10.\n",
    "graph_output": "12 16\n9 7\n3 9\n3 1\n4 2\n8 4\n2 11\n10 5\n2 7\n2 8\n4 3\n10 3\n10 2\n6 10\n8 11\n10 12\n4 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 5,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 99 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 6, 4, 16, 12, 8, 3, 9, 5, 13, 10, 14, 7\nVertex 2: 1, 9, 8, 4, 16, 10, 7, 6, 15, 13, 5, 11\nVertex 3: 11, 14, 10, 7, 1, 16, 8, 6, 12, 5, 15\nVertex 4: 1, 15, 2, 10, 14, 13, 6, 5, 11, 7, 8, 9\nVertex 5: 6, 12, 14, 9, 1, 11, 7, 4, 16, 15, 10, 2, 3, 13\nVertex 6: 1, 5, 15, 2, 7, 9, 3, 4, 12, 10, 11\nVertex 7: 14, 3, 2, 13, 10, 6, 15, 12, 5, 4, 8, 11, 9, 1, 16\nVertex 8: 9, 2, 16, 1, 12, 15, 3, 13, 14, 7, 4, 11\nVertex 9: 2, 8, 15, 14, 5, 1, 13, 11, 6, 10, 16, 4, 7\nVertex 10: 14, 12, 13, 2, 3, 4, 7, 16, 9, 5, 1, 6\nVertex 11: 15, 3, 16, 5, 9, 12, 4, 2, 7, 14, 6, 8\nVertex 12: 10, 13, 1, 5, 8, 15, 7, 11, 16, 14, 3, 6\nVertex 13: 10, 12, 7, 9, 1, 4, 2, 8, 15, 14, 5\nVertex 14: 15, 7, 10, 3, 5, 9, 4, 16, 8, 12, 13, 1, 11\nVertex 15: 4, 14, 11, 6, 8, 16, 12, 9, 7, 2, 13, 5, 3\nVertex 16: 1, 11, 2, 8, 15, 3, 10, 14, 12, 5, 9, 7\n",
    "graph_output": "16 99\n1 2\n2 9\n1 6\n1 4\n4 15\n9 8\n15 14\n14 7\n1 16\n14 10\n10 12\n6 5\n10 13\n15 11\n11 3\n8 2\n15 6\n12 13\n2 4\n1 12\n16 11\n16 2\n2 10\n14 3\n12 5\n16 8\n3 10\n4 10\n8 1\n3 7\n2 7\n8 12\n3 1\n8 15\n2 6\n15 16\n15 12\n5 14\n3 16\n13 7\n9 15\n9 14\n9 5\n9 1\n7 10\n14 4\n9 13\n6 7\n7 15\n1 5\n13 1\n10 16\n5 11\n2 15\n12 7\n7 5\n13 4\n11 9\n16 14\n2 13\n11 12\n6 9\n8 3\n16 12\n8 13\n6 3\n6 4\n8 14\n14 12\n12 3\n10 9\n5 4\n5 16\n15 13\n12 6\n4 11\n5 15\n10 5\n4 7\n13 14\n5 2\n2 11\n7 8\n3 5\n1 10\n16 9\n1 14\n8 4\n9 4\n5 13\n3 15\n6 10\n11 7\n7 9\n11 14\n1 7\n16 7\n11 6\n8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 105 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 4, 2, 7, 5, 14, 3, 9, 11, 8, 12, 13, 6, 10\nVertex 2: 8, 5, 3, 14, 12, 1, 13, 4, 7, 11, 10, 6, 9, 15\nVertex 3: 2, 12, 4, 9, 6, 10, 11, 15, 8, 13, 5, 7, 1, 14\nVertex 4: 13, 1, 3, 5, 14, 12, 2, 7, 8, 15, 10, 9, 6, 11\nVertex 5: 2, 4, 7, 10, 1, 9, 13, 3, 15, 6, 8, 14, 11, 12\nVertex 6: 11, 7, 14, 3, 9, 8, 15, 13, 10, 5, 4, 12, 2, 1\nVertex 7: 8, 6, 1, 13, 5, 12, 14, 15, 9, 4, 2, 3, 10, 11\nVertex 8: 15, 2, 13, 7, 14, 9, 6, 3, 4, 11, 10, 1, 5, 12\nVertex 9: 12, 3, 13, 14, 10, 8, 6, 11, 7, 5, 1, 4, 15, 2\nVertex 10: 13, 11, 5, 9, 3, 14, 7, 6, 8, 4, 15, 2, 12, 1\nVertex 11: 15, 6, 10, 9, 14, 3, 12, 13, 2, 8, 7, 1, 5, 4\nVertex 12: 3, 9, 2, 15, 7, 13, 4, 11, 14, 10, 6, 1, 8, 5\nVertex 13: 8, 10, 4, 7, 9, 12, 14, 2, 3, 5, 6, 11, 15, 1\nVertex 14: 2, 8, 6, 15, 7, 4, 9, 10, 11, 13, 1, 12, 3, 5\nVertex 15: 1, 8, 11, 12, 14, 7, 6, 3, 4, 13, 10, 5, 9, 2\n",
    "graph_output": "15 105\n1 15\n15 8\n8 2\n15 11\n2 5\n2 3\n3 12\n12 9\n2 14\n11 6\n8 13\n8 7\n13 10\n13 4\n12 2\n6 7\n1 4\n4 3\n11 10\n2 1\n14 8\n9 3\n1 7\n5 4\n13 7\n7 5\n14 6\n12 15\n13 9\n7 12\n15 14\n3 6\n14 7\n10 5\n4 14\n14 9\n10 9\n12 13\n9 8\n3 10\n10 14\n7 15\n9 6\n9 11\n6 8\n14 11\n13 14\n13 2\n7 9\n11 3\n6 15\n1 5\n12 4\n15 3\n2 4\n14 1\n5 9\n3 8\n3 13\n4 7\n2 7\n8 4\n5 13\n11 12\n3 5\n6 13\n7 3\n13 11\n12 14\n4 15\n10 7\n10 6\n1 3\n11 2\n8 11\n10 8\n1 9\n15 13\n11 7\n10 4\n11 1\n10 15\n1 8\n2 10\n4 9\n5 15\n6 5\n10 12\n6 4\n6 12\n5 8\n9 15\n2 6\n1 12\n3 14\n13 1\n6 1\n5 14\n10 1\n9 2\n15 2\n5 11\n11 4\n12 8\n5 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 15,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 55 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "11 55\n4 5\n2 3\n11 6\n7 9\n3 4\n3 7\n4 7\n10 4\n8 9\n8 11\n5 8\n2 7\n10 9\n4 1\n8 2\n3 10\n6 2\n11 7\n1 5\n1 3\n8 1\n3 9\n6 10\n6 8\n7 10\n7 6\n2 9\n11 10\n3 5\n11 5\n1 10\n1 6\n8 7\n9 6\n11 2\n5 7\n11 3\n1 7\n9 5\n6 3\n10 5\n4 6\n10 8\n4 11\n2 1\n5 2\n8 4\n9 4\n9 1\n2 10\n8 3\n1 11\n2 4\n11 9\n6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 22, 21, 15, 11, 13, 23, 27\nVertex 2: 29, 24, 17\nVertex 3: 22, 8\nVertex 4: 25\nVertex 5: 29\nVertex 6: 11\nVertex 7: 21, 26\nVertex 8: 3\nVertex 9: 19\nVertex 10: 12\nVertex 11: 1, 6\nVertex 12: 22, 28, 10, 30, 31\nVertex 13: 1\nVertex 14: 24\nVertex 15: 1, 25\nVertex 16: 22\nVertex 17: 2\nVertex 18: 29\nVertex 19: 26, 9\nVertex 20: 28\nVertex 21: 1, 7, 29\nVertex 22: 1, 12, 3, 16\nVertex 23: 1\nVertex 24: 2, 14\nVertex 25: 15, 4\nVertex 26: 7, 19\nVertex 27: 1\nVertex 28: 12, 20\nVertex 29: 21, 18, 5, 2\nVertex 30: 12\nVertex 31: 12\n",
    "graph_output": "31 30\n1 22\n22 12\n1 21\n21 7\n12 28\n22 3\n1 15\n1 11\n1 13\n21 29\n1 23\n29 18\n12 10\n29 5\n28 20\n15 25\n1 27\n7 26\n25 4\n12 30\n29 2\n26 19\n2 24\n11 6\n2 17\n3 8\n12 31\n22 16\n24 14\n19 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 107 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 11 and vertex 9.\n",
    "graph_output": "16 107\n9 14\n16 1\n12 2\n9 1\n8 14\n10 13\n13 4\n6 11\n5 1\n9 7\n5 2\n1 4\n3 1\n4 15\n7 14\n4 2\n10 9\n6 16\n6 14\n6 2\n12 9\n16 5\n3 12\n16 3\n1 14\n15 6\n6 7\n11 10\n7 5\n4 16\n1 13\n12 11\n12 1\n8 13\n7 2\n8 6\n4 12\n13 2\n1 7\n14 3\n11 2\n5 11\n12 10\n16 7\n10 15\n2 10\n8 7\n4 6\n15 9\n1 15\n13 3\n4 7\n5 9\n6 9\n16 15\n13 5\n3 7\n15 2\n5 10\n14 4\n16 12\n12 7\n9 2\n13 15\n4 5\n10 1\n16 10\n3 9\n11 15\n3 2\n9 16\n7 13\n5 6\n15 5\n11 7\n8 11\n10 4\n7 10\n3 8\n16 13\n16 14\n9 4\n13 6\n14 5\n13 9\n1 2\n13 12\n5 8\n3 5\n2 8\n13 11\n6 12\n14 2\n11 3\n12 14\n8 15\n3 4\n11 1\n8 4\n15 7\n14 13\n6 3\n3 15\n14 10\n11 14\n8 10\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 15 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 30 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0  70   0   0   2  54   0   9  79   0   0  37  28  31   0 \n 2 |  0   0   0   0   0  52   0   0   0  75   0   0   0  90  60   0 \n 3 | 70   0   0   0   0   0   0   0   0   0   0   0  42   0   0   0 \n 4 |  0   0   0   0   0   0   0  47   0   0   0   0   0   0   0  60 \n 5 |  0   0   0   0   0   0   0   0  18   0   0   0   0   0   0  18 \n 6 |  2  52   0   0   0   0  58   0   0   0   0  73   0   0  75   0 \n 7 | 54   0   0   0   0  58   0   0   0  25   0   0  73  24   0  33 \n 8 |  0   0   0  47   0   0   0   0   0   0   0   0  20   0   0   0 \n 9 |  9   0   0   0  18   0   0   0   0   0   0   0  95   0   0   0 \n10 | 79  75   0   0   0   0  25   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0  76   0  75   0  93 \n12 |  0   0   0   0   0  73   0   0   0   0  76   0   0   0   0   0 \n13 | 37   0  42   0   0   0  73  20  95   0   0   0   0   0   0   0 \n14 | 28  90   0   0   0   0  24   0   0   0  75   0   0   0  36   0 \n15 | 31  60   0   0   0  75   0   0   0   0   0   0   0  36   0   0 \n16 |  0   0   0  60  18   0  33   0   0   0  93   0   0   0   0   0 \n",
    "graph_output": "16 30\n1 3 70\n1 14 28\n14 7 24\n7 10 25\n7 16 33\n3 13 42\n13 8 20\n16 4 60\n1 6 2\n14 15 36\n15 2 60\n16 11 93\n16 5 18\n13 9 95\n11 12 76\n1 15 31\n1 10 79\n14 11 75\n2 14 90\n8 4 47\n13 1 37\n9 5 18\n2 10 75\n7 13 73\n1 7 54\n2 6 52\n15 6 75\n7 6 58\n9 1 9\n12 6 73\n",
    "vertices": [
      4,
      15
    ],
    "answer": 135,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 102 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 1 and vertex 15.\n",
    "graph_output": "15 102\n1 3\n3 2\n3 5\n5 13\n1 4\n4 7\n1 6\n2 15\n5 12\n3 9\n15 10\n15 11\n7 8\n9 14\n12 4\n7 12\n6 4\n3 13\n15 7\n9 12\n11 8\n3 12\n14 13\n3 11\n9 7\n9 1\n14 4\n15 14\n7 6\n13 4\n7 5\n14 6\n9 5\n4 5\n14 7\n3 15\n4 10\n2 9\n10 2\n13 2\n5 10\n4 11\n11 7\n10 3\n15 9\n13 1\n13 11\n13 10\n1 10\n6 3\n3 7\n11 2\n2 5\n1 12\n1 5\n9 11\n15 5\n8 10\n8 12\n6 9\n6 13\n2 4\n14 8\n8 1\n9 13\n8 5\n8 6\n4 9\n11 14\n6 15\n1 7\n12 2\n5 6\n12 15\n6 12\n1 11\n2 14\n12 11\n2 1\n11 10\n6 2\n1 14\n7 10\n7 13\n15 4\n3 14\n8 15\n8 3\n15 13\n13 8\n2 8\n4 3\n8 9\n14 12\n5 11\n13 12\n6 11\n10 12\n10 14\n4 8\n10 9\n1 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 11 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 104 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0  51  41  38  27  96  91  61  92  62  33   0   0  62  89   0 \n 2 | 51   0  57  42  44  67  78  91   5  87  68   2   0   0  44  22 \n 3 | 41  57   0   8  62   0  14  61  17  20  51  79  91  91  56  10 \n 4 | 38  42   8   0   0  92   2  54  62  37  75  26  75  21  76  45 \n 5 | 27  44  62   0   0  57  36   0  24  73  98  28   0  32  73  11 \n 6 | 96  67   0  92  57   0  98   0  73  62  48  48  50  99   0  48 \n 7 | 91  78  14   2  36  98   0  47  48  22  21  29  37  37  41   0 \n 8 | 61  91  61  54   0   0  47   0   0  39  78  79  84  56  25   0 \n 9 | 92   5  17  62  24  73  48   0   0   5   8  58  28   3  73  86 \n10 | 62  87  20  37  73  62  22  39   5   0  92  16  24   0  86   1 \n11 | 33  68  51  75  98  48  21  78   8  92   0  20  18  44  16  66 \n12 |  0   2  79  26  28  48  29  79  58  16  20   0  56  90  13  26 \n13 |  0   0  91  75   0  50  37  84  28  24  18  56   0  34  23  20 \n14 | 62   0  91  21  32  99  37  56   3   0  44  90  34   0  51  38 \n15 | 89  44  56  76  73   0  41  25  73  86  16  13  23  51   0   0 \n16 |  0  22  10  45  11  48   0   0  86   1  66  26  20  38   0   0 \n",
    "graph_output": "16 104\n1 3 41\n3 10 20\n3 13 91\n1 15 89\n1 6 96\n6 4 92\n10 5 73\n10 7 22\n4 8 54\n4 2 42\n10 16 1\n5 11 98\n3 12 79\n13 9 28\n15 14 51\n1 4 38\n11 15 16\n3 7 14\n2 16 22\n12 13 56\n11 8 78\n11 9 8\n9 6 73\n5 3 62\n14 11 44\n2 5 44\n15 10 86\n7 1 91\n10 4 37\n12 11 20\n9 1 92\n11 13 18\n3 15 56\n5 9 24\n14 7 37\n12 2 2\n1 2 51\n14 1 62\n2 7 78\n6 14 99\n11 10 92\n1 5 27\n2 10 87\n6 12 48\n13 14 34\n7 15 41\n3 14 91\n7 12 29\n11 6 48\n2 6 67\n3 4 8\n7 9 48\n9 10 5\n1 11 33\n11 7 21\n9 16 86\n15 5 73\n7 8 47\n8 2 91\n5 7 36\n15 8 25\n14 12 90\n16 12 26\n1 10 62\n9 15 73\n11 2 68\n12 8 79\n4 13 75\n7 6 98\n9 2 5\n8 1 61\n15 4 76\n16 6 48\n6 10 62\n9 12 58\n13 7 37\n12 5 28\n14 5 32\n13 16 20\n15 12 13\n10 8 39\n14 4 21\n9 3 17\n16 4 45\n13 6 50\n4 9 62\n16 3 10\n11 3 51\n5 6 57\n13 10 24\n12 4 26\n12 10 16\n13 15 23\n14 9 3\n8 14 56\n5 16 11\n8 13 84\n4 7 2\n2 3 57\n14 16 38\n11 4 75\n15 2 44\n11 16 66\n8 3 61\n",
    "vertices": [
      4,
      11
    ],
    "answer": 23,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 21 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 10 and vertex 6.\n",
    "graph_output": "12 21\n7 11\n6 5\n12 7\n8 12\n2 11\n11 3\n7 10\n12 11\n4 10\n8 3\n8 10\n12 2\n4 1\n4 7\n4 3\n5 7\n3 1\n2 5\n3 9\n9 12\n10 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "natural"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 11 and 7 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 2, 7\nVertex 2: 1, 15, 29, 17\nVertex 3: 15, 25\nVertex 4: 21, 22, 20, 27\nVertex 5: 21\nVertex 6: 8, 14, 23\nVertex 7: 1\nVertex 8: 1, 21, 6\nVertex 9: 10\nVertex 10: 21, 9\nVertex 11: 20, 26\nVertex 12: 14, 19\nVertex 13: 22\nVertex 14: 6, 12\nVertex 15: 2, 24, 3, 28\nVertex 16: 18\nVertex 17: 2\nVertex 18: 25, 16\nVertex 19: 12\nVertex 20: 4, 11\nVertex 21: 8, 4, 10, 5\nVertex 22: 4, 13\nVertex 23: 6\nVertex 24: 15\nVertex 25: 3, 18\nVertex 26: 11\nVertex 27: 4\nVertex 28: 15\nVertex 29: 2\n",
    "graph_output": "29 28\n1 8\n8 21\n1 2\n21 4\n2 15\n8 6\n21 10\n2 29\n2 17\n4 22\n15 24\n4 20\n4 27\n15 3\n3 25\n21 5\n10 9\n25 18\n18 16\n6 14\n14 12\n15 28\n6 23\n12 19\n1 7\n20 11\n22 13\n11 26\n",
    "vertices": [
      11,
      7
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 20 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   0   0   0   1   0   0   0   0   1   0   1   0 \n 2 |  0   0   0   0   0   0   0   0   1   1   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   1 \n 4 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   1   0   1   1   0   0   0   0   0   1   0   0 \n 6 |  0   0   0   0   1   0   0   1   0   0   0   0   0   1   0 \n 7 |  1   0   0   0   1   0   0   1   1   0   1   0   0   0   0 \n 8 |  0   0   0   0   0   1   1   0   0   0   0   0   1   0   1 \n 9 |  0   1   0   0   0   0   1   0   0   1   0   0   0   1   0 \n10 |  0   1   0   0   0   0   0   0   1   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n12 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   1   0   1   0   0   1   0   0   0   0   0   0   0 \n14 |  1   0   0   0   0   1   0   0   1   0   0   0   0   0   0 \n15 |  0   0   1   0   0   0   0   1   0   0   0   0   0   0   0 \n",
    "graph_output": "15 20\n3 15\n10 9\n14 9\n8 7\n1 14\n11 7\n15 8\n13 8\n1 7\n1 12\n9 7\n8 6\n2 9\n6 5\n13 5\n5 4\n14 6\n2 10\n7 5\n3 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 17 vertices and 115 edges\n\nEdges (Format: Node Node):\n14 10\n16 15\n15 10\n12 17\n7 12\n17 7\n13 4\n1 11\n9 1\n11 4\n16 5\n17 4\n4 3\n2 9\n14 6\n2 13\n14 2\n10 1\n7 13\n8 5\n8 13\n15 3\n8 6\n5 15\n16 3\n11 12\n16 14\n13 15\n9 14\n5 9\n10 13\n9 17\n2 5\n12 14\n14 1\n15 8\n5 3\n1 17\n7 2\n7 14\n3 17\n11 8\n3 10\n11 7\n17 2\n4 9\n13 11\n16 10\n17 6\n7 9\n10 4\n10 17\n5 14\n13 6\n10 7\n1 4\n17 16\n7 16\n10 11\n17 8\n6 9\n4 8\n15 14\n9 11\n12 10\n4 16\n8 7\n8 12\n10 6\n7 15\n3 1\n4 5\n1 2\n13 5\n2 8\n16 9\n3 8\n2 4\n16 13\n4 6\n2 6\n8 10\n13 9\n16 11\n5 1\n4 12\n17 11\n14 8\n8 16\n11 15\n9 12\n14 13\n4 7\n15 12\n7 6\n17 5\n12 1\n15 4\n11 2\n17 13\n17 15\n2 3\n9 3\n12 13\n12 6\n10 9\n3 11\n14 11\n1 7\n9 8\n13 1\n7 5\n6 5\n3 14\n2 10\n",
    "graph_output": "17 115\n14 10\n16 15\n15 10\n12 17\n7 12\n17 7\n13 4\n1 11\n9 1\n11 4\n16 5\n17 4\n4 3\n2 9\n14 6\n2 13\n14 2\n10 1\n7 13\n8 5\n8 13\n15 3\n8 6\n5 15\n16 3\n11 12\n16 14\n13 15\n9 14\n5 9\n10 13\n9 17\n2 5\n12 14\n14 1\n15 8\n5 3\n1 17\n7 2\n7 14\n3 17\n11 8\n3 10\n11 7\n17 2\n4 9\n13 11\n16 10\n17 6\n7 9\n10 4\n10 17\n5 14\n13 6\n10 7\n1 4\n17 16\n7 16\n10 11\n17 8\n6 9\n4 8\n15 14\n9 11\n12 10\n4 16\n8 7\n8 12\n10 6\n7 15\n3 1\n4 5\n1 2\n13 5\n2 8\n16 9\n3 8\n2 4\n16 13\n4 6\n2 6\n8 10\n13 9\n16 11\n5 1\n4 12\n17 11\n14 8\n8 16\n11 15\n9 12\n14 13\n4 7\n15 12\n7 6\n17 5\n12 1\n15 4\n11 2\n17 13\n17 15\n2 3\n9 3\n12 13\n12 6\n10 9\n3 11\n14 11\n1 7\n9 8\n13 1\n7 5\n6 5\n3 14\n2 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 17 edges\n\nEdges (Format: Node Node):\n1 11\n11 16\n11 4\n11 13\n16 12\n12 5\n13 15\n16 7\n7 8\n4 6\n6 14\n7 2\n13 10\n14 3\n6 9\n7 6\n6 8\n",
    "graph_output": "16 17\n1 11\n11 16\n11 4\n11 13\n16 12\n12 5\n13 15\n16 7\n7 8\n4 6\n6 14\n7 2\n13 10\n14 3\n6 9\n7 6\n6 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 29 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 15\n15 10\n15 6\n6 18\n1 29\n18 4\n6 25\n6 9\n4 27\n29 3\n10 2\n4 24\n24 19\n25 16\n16 17\n1 5\n25 28\n15 21\n6 26\n16 12\n4 23\n19 11\n15 7\n1 8\n25 20\n28 14\n23 22\n11 13\n",
    "graph_output": "29 28\n1 15\n15 10\n15 6\n6 18\n1 29\n18 4\n6 25\n6 9\n4 27\n29 3\n10 2\n4 24\n24 19\n25 16\n16 17\n1 5\n25 28\n15 21\n6 26\n16 12\n4 23\n19 11\n15 7\n1 8\n25 20\n28 14\n23 22\n11 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 17,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 13 vertices and 61 edges\n\nEdges (Format: Node Node):\n1 3\n6 13\n7 6\n10 12\n5 11\n11 10\n5 1\n7 10\n12 11\n12 13\n3 12\n9 4\n4 12\n1 11\n6 8\n13 7\n2 3\n9 5\n11 6\n4 2\n5 13\n11 8\n8 1\n9 8\n1 9\n8 5\n2 6\n10 9\n7 4\n12 2\n9 11\n1 2\n1 4\n1 7\n13 1\n10 2\n9 13\n11 3\n13 11\n5 4\n9 2\n7 12\n4 8\n5 2\n6 9\n7 5\n7 8\n11 7\n7 2\n1 6\n12 5\n3 9\n10 1\n13 3\n4 13\n6 3\n3 4\n3 8\n2 11\n5 6\n9 12\n",
    "graph_output": "13 61\n1 3\n6 13\n7 6\n10 12\n5 11\n11 10\n5 1\n7 10\n12 11\n12 13\n3 12\n9 4\n4 12\n1 11\n6 8\n13 7\n2 3\n9 5\n11 6\n4 2\n5 13\n11 8\n8 1\n9 8\n1 9\n8 5\n2 6\n10 9\n7 4\n12 2\n9 11\n1 2\n1 4\n1 7\n13 1\n10 2\n9 13\n11 3\n13 11\n5 4\n9 2\n7 12\n4 8\n5 2\n6 9\n7 5\n7 8\n11 7\n7 2\n1 6\n12 5\n3 9\n10 1\n13 3\n4 13\n6 3\n3 4\n3 8\n2 11\n5 6\n9 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 134,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 54 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 11 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 11 and vertex 12 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 6 with a capacity of 8.\nThere is an edge between vertex 12 and vertex 7 with a capacity of 8.\nThere is an edge between vertex 12 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 10 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 2 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 4 with a capacity of 4.\nThere is an edge between vertex 2 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 8 with a capacity of 3.\nThere is an edge between vertex 12 and vertex 1 with a capacity of 4.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 4 and vertex 2 with a capacity of 6.\nThere is an edge between vertex 5 and vertex 13 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 6 with a capacity of 4.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 7.\nThere is an edge between vertex 13 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 8.\nThere is an edge between vertex 7 and vertex 2 with a capacity of 3.\nThere is an edge between vertex 5 and vertex 11 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 4 with a capacity of 8.\nThere is an edge between vertex 9 and vertex 3 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 13 with a capacity of 8.\nThere is an edge between vertex 10 and vertex 6 with a capacity of 1.\nThere is an edge between vertex 10 and vertex 12 with a capacity of 8.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 3 and vertex 11 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 11 with a capacity of 9.\nThere is an edge between vertex 11 and vertex 13 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 8 and vertex 7 with a capacity of 7.\nThere is an edge between vertex 3 and vertex 12 with a capacity of 7.\nThere is an edge between vertex 5 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 8 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 8 and vertex 13 with a capacity of 6.\nThere is an edge between vertex 1 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 4 with a capacity of 5.\nThere is an edge between vertex 5 and vertex 2 with a capacity of 9.\nThere is an edge between vertex 8 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 12 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 3.\nThere is an edge between vertex 10 and vertex 7 with a capacity of 7.\nThere is an edge between vertex 12 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 13 and vertex 6 with a capacity of 3.\nThere is an edge between vertex 11 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 12 and vertex 13 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 6 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 9 with a capacity of 1.\n",
    "graph_output": "13 54\n1 13 3\n1 11 10\n1 10 9\n11 12 3\n1 6 8\n12 7 8\n12 2 1\n10 9 9\n2 3 5\n10 4 4\n2 8 2\n3 5 9\n4 8 3\n12 1 4\n1 4 6\n4 2 6\n5 13 4\n4 6 4\n1 9 7\n13 10 4\n3 7 8\n7 2 3\n5 11 9\n5 4 8\n9 3 6\n7 13 8\n10 6 1\n10 12 8\n9 7 6\n3 11 8\n1 5 9\n4 11 9\n11 13 2\n5 10 4\n4 9 6\n8 7 7\n3 12 7\n5 7 5\n8 10 9\n8 13 6\n1 7 5\n7 4 5\n5 2 9\n8 3 8\n12 8 4\n6 8 3\n10 7 7\n12 9 9\n13 6 3\n11 8 5\n6 3 8\n12 13 9\n7 6 1\n6 9 1\n",
    "vertices": [
      3,
      2
    ],
    "answer": 26,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 23 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 2 and vertex 17.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 17 and vertex 6.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 2 and vertex 14.\n",
    "graph_output": "17 23\n12 17\n4 10\n3 13\n12 1\n16 17\n5 11\n9 7\n3 6\n2 8\n3 12\n16 15\n13 4\n7 6\n2 17\n14 7\n9 5\n1 14\n17 6\n3 17\n10 12\n2 16\n12 13\n2 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 126 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 13 and vertex 17.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 7 and vertex 17.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 8 and vertex 17.\nThere is an edge between vertex 17 and vertex 15.\nThere is an edge between vertex 17 and vertex 14.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 2 and vertex 17.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 17 and vertex 16.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 10 and vertex 17.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 3 and vertex 17.\n",
    "graph_output": "17 126\n6 9\n4 13\n12 11\n6 16\n11 7\n12 3\n8 16\n4 15\n6 10\n8 6\n16 14\n6 7\n8 11\n11 5\n7 8\n13 17\n7 3\n9 10\n8 13\n1 4\n3 10\n11 13\n15 6\n1 17\n14 7\n5 4\n14 10\n9 15\n17 4\n14 15\n12 5\n9 4\n14 11\n8 2\n1 11\n6 2\n3 8\n6 13\n2 16\n16 1\n5 10\n17 5\n9 12\n3 5\n17 12\n2 11\n10 7\n8 10\n7 17\n10 16\n8 17\n17 15\n17 14\n1 2\n16 11\n12 16\n13 10\n2 17\n3 4\n15 10\n17 9\n1 13\n16 13\n15 5\n5 14\n4 11\n15 1\n17 16\n2 3\n4 12\n13 5\n8 12\n10 2\n12 15\n1 12\n9 13\n13 7\n11 17\n4 8\n14 3\n16 15\n14 2\n3 6\n8 9\n1 5\n8 5\n7 16\n5 2\n12 6\n15 11\n4 2\n13 3\n3 9\n9 2\n10 12\n3 11\n13 2\n1 3\n7 5\n2 15\n12 7\n14 8\n6 5\n14 12\n6 14\n15 13\n10 1\n1 8\n7 4\n3 15\n10 4\n14 4\n8 15\n6 4\n10 17\n7 1\n2 12\n6 17\n1 14\n16 3\n13 14\n13 12\n16 9\n9 5\n5 16\n3 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 116 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   0   1   0   1   1   1   1   0   0   1   1 \n 4 |  1   1   1   0   1   1   0   1   1   0   1   1   0   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   0   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   0   1   0   1   1   1   1   1   1   1   1 \n 7 |  1   1   0   0   1   0   0   0   1   1   0   0   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   0   0   1   1   1   1   1   1   0   1   1 \n 9 |  1   1   0   1   1   0   1   1   0   1   1   1   1   1   1   1   1 \n10 |  0   1   1   0   1   1   1   1   1   0   1   0   1   1   1   1   1 \n11 |  1   1   1   1   1   1   0   1   1   1   0   1   1   0   0   1   1 \n12 |  1   1   1   1   0   1   0   1   1   0   1   0   1   1   0   1   1 \n13 |  1   1   1   0   1   1   1   1   1   1   1   1   0   1   1   1   1 \n14 |  1   1   0   1   1   1   1   1   1   1   0   1   1   0   1   0   1 \n15 |  1   1   0   1   1   1   1   0   1   1   0   0   1   1   0   1   1 \n16 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   0   1 \n17 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "17 116\n6 8\n10 5\n4 17\n17 7\n6 17\n2 9\n17 5\n3 4\n1 16\n3 16\n16 13\n14 4\n1 2\n13 2\n10 8\n11 8\n5 13\n9 7\n3 8\n6 14\n7 16\n9 4\n9 8\n12 8\n17 12\n5 11\n12 3\n5 1\n3 17\n3 13\n14 13\n15 2\n14 5\n6 2\n1 17\n16 4\n10 17\n4 11\n11 1\n16 17\n12 13\n6 5\n12 14\n15 1\n16 10\n11 9\n5 8\n6 3\n10 2\n7 10\n2 11\n15 9\n1 3\n4 6\n1 4\n16 5\n5 4\n14 10\n15 5\n2 5\n10 11\n12 9\n13 9\n6 15\n16 12\n5 9\n13 17\n13 15\n8 4\n14 9\n5 3\n1 9\n1 14\n4 2\n1 7\n7 13\n2 14\n7 2\n14 15\n8 1\n8 13\n16 9\n11 16\n14 17\n6 16\n2 3\n12 11\n6 1\n14 8\n11 3\n1 12\n14 7\n4 12\n2 16\n13 10\n6 10\n17 2\n13 11\n10 3\n9 10\n15 16\n13 6\n10 15\n11 17\n5 7\n2 12\n11 6\n17 9\n6 12\n8 16\n7 15\n1 13\n17 15\n17 8\n8 2\n15 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 15 vertices and 25 edges\n\nEdges (Format: Node Node):\n1 15\n15 5\n5 12\n5 13\n1 10\n15 2\n1 7\n13 3\n5 9\n13 4\n12 8\n12 14\n7 6\n1 11\n15 6\n3 7\n11 13\n8 2\n11 9\n6 8\n7 2\n6 11\n15 14\n8 7\n2 12\n",
    "graph_output": "15 25\n1 15\n15 5\n5 12\n5 13\n1 10\n15 2\n1 7\n13 3\n5 9\n13 4\n12 8\n12 14\n7 6\n1 11\n15 6\n3 7\n11 13\n8 2\n11 9\n6 8\n7 2\n6 11\n15 14\n8 7\n2 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 1 to vertex 8 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 100 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0  94  98  18  18  50  20  12  30   0  57  48 100  90  93 \n 2 | 94   0  32  70  24  87  87  72  10  88  25  33  52  61  32 \n 3 | 98  32   0  74  42  85  38   0  15  11   3  30   2  75  13 \n 4 | 18  70  74   0   1  36  81  79  47  71  29  75  11  31  39 \n 5 | 18  24  42   1   0  35  50  61  90  56  32   7  23  99  81 \n 6 | 50  87  85  36  35   0  77   0  34  52  48  85  99  27  76 \n 7 | 20  87  38  81  50  77   0  43  48  35  55  17  94  48  35 \n 8 | 12  72   0  79  61   0  43   0  36  58  88   3  19  82  98 \n 9 | 30  10  15  47  90  34  48  36   0  58  44  93  80  54   0 \n10 |  0  88  11  71  56  52  35  58  58   0  51   4   3  47  57 \n11 | 57  25   3  29  32  48  55  88  44  51   0   7  17  13  59 \n12 | 48  33  30  75   7  85  17   3  93   4   7   0  53  66  50 \n13 |100  52   2  11  23  99  94  19  80   3  17  53   0   0  36 \n14 | 90  61  75  31  99  27  48  82  54  47  13  66   0   0  68 \n15 | 93  32  13  39  81  76  35  98   0  57  59  50  36  68   0 \n",
    "graph_output": "15 100\n1 14 90\n14 10 47\n1 11 57\n14 2 61\n11 15 59\n10 12 4\n12 4 75\n4 6 36\n6 9 34\n15 8 98\n11 13 17\n6 5 35\n11 3 3\n10 7 35\n14 6 27\n7 12 17\n13 1 100\n5 15 81\n14 3 75\n9 3 15\n6 1 50\n11 7 55\n15 7 35\n14 12 66\n4 5 1\n13 6 99\n13 2 52\n4 3 74\n1 7 20\n14 4 31\n2 9 10\n4 1 18\n2 4 70\n5 14 99\n15 6 76\n7 14 48\n10 5 56\n9 4 47\n5 8 61\n12 6 85\n10 3 11\n1 15 93\n10 15 57\n15 3 13\n11 6 48\n14 11 13\n5 13 23\n12 2 33\n8 4 79\n7 9 48\n3 2 32\n4 11 29\n12 3 30\n9 12 93\n9 8 36\n3 13 2\n3 6 85\n11 2 25\n13 8 19\n15 12 50\n1 8 12\n9 1 30\n7 4 81\n1 12 48\n2 6 87\n13 12 53\n11 5 32\n2 15 32\n7 8 43\n10 2 88\n13 4 11\n10 13 3\n11 10 51\n2 1 94\n2 7 87\n7 13 94\n8 10 58\n3 1 98\n8 12 3\n10 4 71\n7 3 38\n7 6 77\n9 11 44\n5 1 18\n11 12 7\n9 10 58\n5 9 90\n7 5 50\n13 15 36\n15 14 68\n5 3 42\n10 6 52\n9 14 54\n13 9 80\n12 5 7\n15 4 39\n2 8 72\n14 8 82\n5 2 24\n11 8 88\n",
    "vertices": [
      1,
      8
    ],
    "answer": 12,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 17 and vertex 14 are connected.\n\nThis is an undirected graph with 17 vertices and 115 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 3, 5, 6, 15, 14, 13, 16, 7, 4, 2, 10, 12, 11\nVertex 2: 4, 13, 17, 8, 14, 12, 11, 7, 16, 6, 15, 1, 5, 3, 9\nVertex 3: 1, 13, 8, 9, 17, 6, 14, 11, 15, 5, 12, 2, 10, 7\nVertex 4: 2, 16, 6, 10, 7, 17, 5, 1, 11, 13, 12, 15\nVertex 5: 17, 1, 13, 16, 7, 4, 14, 10, 12, 3, 2, 15, 6\nVertex 6: 15, 1, 4, 12, 13, 17, 7, 16, 3, 2, 9, 10, 11, 5\nVertex 7: 5, 15, 17, 16, 9, 13, 4, 6, 1, 2, 11, 12, 8, 3\nVertex 8: 17, 1, 15, 11, 3, 2, 9, 14, 13, 10, 16, 7, 12\nVertex 9: 11, 14, 3, 7, 8, 12, 16, 10, 17, 15, 6, 2, 13\nVertex 10: 13, 4, 14, 11, 8, 5, 9, 15, 6, 1, 3, 17\nVertex 11: 13, 9, 14, 8, 2, 10, 15, 7, 4, 17, 3, 16, 6, 1\nVertex 12: 15, 6, 17, 2, 9, 16, 5, 4, 7, 3, 13, 1, 8, 14\nVertex 13: 11, 10, 3, 5, 16, 2, 6, 1, 7, 8, 4, 12, 9, 14\nVertex 14: 15, 9, 11, 1, 2, 10, 8, 5, 3, 12, 17, 13\nVertex 15: 12, 6, 8, 14, 1, 7, 16, 11, 2, 9, 10, 3, 17, 5, 4\nVertex 16: 4, 5, 13, 7, 15, 6, 1, 9, 2, 12, 8, 11, 17\nVertex 17: 5, 8, 2, 7, 6, 12, 3, 4, 9, 11, 15, 10, 14, 16\n",
    "graph_output": "17 115\n17 5\n8 17\n2 4\n4 16\n12 15\n13 11\n1 8\n3 1\n1 5\n13 10\n15 6\n6 1\n15 8\n13 3\n13 5\n11 9\n5 16\n13 16\n15 14\n14 9\n1 15\n11 14\n14 1\n8 11\n2 13\n2 17\n7 5\n6 4\n3 8\n15 7\n7 17\n8 2\n3 9\n6 12\n7 16\n9 7\n13 6\n9 8\n2 14\n17 6\n17 12\n16 15\n13 1\n12 2\n4 10\n3 17\n2 11\n10 14\n7 13\n7 4\n6 7\n17 4\n14 8\n5 4\n11 10\n8 13\n6 16\n14 5\n8 10\n5 10\n15 11\n16 1\n1 7\n7 2\n12 9\n9 16\n6 3\n11 7\n1 4\n16 2\n12 16\n10 9\n12 5\n4 11\n3 14\n17 9\n6 2\n17 11\n4 13\n15 2\n15 9\n10 15\n9 6\n4 12\n6 10\n2 1\n12 7\n1 10\n11 3\n3 15\n5 3\n3 12\n13 12\n8 16\n11 16\n8 7\n5 2\n15 17\n2 3\n9 2\n1 12\n5 15\n3 10\n7 3\n4 15\n10 17\n8 12\n14 12\n17 14\n16 17\n11 6\n11 1\n13 9\n13 14\n5 6\n",
    "vertices": [
      17,
      14
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 99 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   0 \n 3 |  1   1   0   1   1   0   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   0   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   0   1   1   0   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   0   1   1   1   0   1   1   1   1   0   1   0 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   0   1   1 \n13 |  1   1   1   1   1   1   1   0   1   1   1   0   0   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n15 |  1   0   1   1   1   1   1   0   1   1   1   1   1   1   0 \n",
    "graph_output": "15 99\n1 13\n1 4\n4 2\n2 6\n1 8\n1 3\n3 11\n3 7\n1 12\n6 15\n13 10\n6 14\n14 9\n10 5\n2 5\n10 4\n15 4\n15 7\n3 4\n11 8\n12 2\n10 9\n6 11\n6 13\n14 1\n5 1\n5 8\n11 7\n14 5\n6 5\n7 10\n6 8\n10 8\n14 15\n11 14\n4 7\n7 1\n10 11\n3 5\n7 9\n13 2\n5 12\n2 9\n9 6\n15 10\n14 3\n3 13\n3 12\n2 3\n14 8\n15 5\n10 3\n12 8\n15 3\n2 1\n9 5\n3 8\n14 4\n14 7\n1 10\n1 9\n2 14\n14 13\n14 12\n9 3\n11 13\n10 12\n12 9\n7 2\n7 13\n15 1\n5 4\n10 6\n12 4\n10 14\n15 12\n9 4\n13 9\n9 15\n12 11\n5 11\n7 8\n2 10\n1 11\n11 9\n13 5\n15 13\n2 11\n7 12\n5 7\n8 2\n11 15\n13 4\n11 4\n9 8\n6 4\n6 12\n1 6\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 15 vertices and 14 edges\n\nEdges (Format: Node Node):\n8 2\n3 12\n11 13\n1 4\n7 12\n9 15\n3 8\n9 2\n7 5\n5 13\n6 12\n8 1\n3 6\n14 9\n",
    "graph_output": "15 14\n8 2\n3 12\n11 13\n1 4\n7 12\n9 15\n3 8\n9 2\n7 5\n5 13\n6 12\n8 1\n3 6\n14 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 15 and vertex 13 are connected.\n\nUndirected Graph with 15 vertices and 98 edges\n\nEdges (Format: Node Node):\n9 1\n11 3\n10 4\n8 12\n7 15\n13 3\n8 4\n14 10\n4 3\n5 12\n8 10\n4 2\n5 15\n8 7\n11 12\n1 13\n8 14\n3 14\n13 8\n15 2\n10 3\n3 5\n9 13\n1 14\n10 1\n7 4\n9 11\n1 7\n5 8\n10 6\n4 1\n9 3\n12 3\n10 15\n5 14\n9 7\n4 12\n6 12\n13 6\n1 8\n5 1\n2 10\n10 9\n9 2\n9 6\n11 7\n2 8\n3 15\n15 1\n10 11\n6 4\n15 14\n14 12\n13 14\n12 15\n11 15\n9 5\n11 14\n4 11\n7 3\n2 5\n7 12\n10 12\n6 5\n2 1\n7 14\n8 15\n12 2\n3 8\n2 14\n1 12\n15 13\n12 13\n14 6\n14 9\n1 11\n5 7\n4 14\n7 10\n15 4\n9 12\n11 13\n9 15\n7 2\n5 4\n3 2\n11 8\n10 13\n1 6\n2 6\n15 6\n13 4\n11 5\n13 2\n6 3\n13 7\n9 8\n5 10\n",
    "graph_output": "15 98\n9 1\n11 3\n10 4\n8 12\n7 15\n13 3\n8 4\n14 10\n4 3\n5 12\n8 10\n4 2\n5 15\n8 7\n11 12\n1 13\n8 14\n3 14\n13 8\n15 2\n10 3\n3 5\n9 13\n1 14\n10 1\n7 4\n9 11\n1 7\n5 8\n10 6\n4 1\n9 3\n12 3\n10 15\n5 14\n9 7\n4 12\n6 12\n13 6\n1 8\n5 1\n2 10\n10 9\n9 2\n9 6\n11 7\n2 8\n3 15\n15 1\n10 11\n6 4\n15 14\n14 12\n13 14\n12 15\n11 15\n9 5\n11 14\n4 11\n7 3\n2 5\n7 12\n10 12\n6 5\n2 1\n7 14\n8 15\n12 2\n3 8\n2 14\n1 12\n15 13\n12 13\n14 6\n14 9\n1 11\n5 7\n4 14\n7 10\n15 4\n9 12\n11 13\n9 15\n7 2\n5 4\n3 2\n11 8\n10 13\n1 6\n2 6\n15 6\n13 4\n11 5\n13 2\n6 3\n13 7\n9 8\n5 10\n",
    "vertices": [
      15,
      13
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 23 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 12, 11\nVertex 2: 6\nVertex 3: 4\nVertex 4: 1, 6, 15, 3, 10, 17, 5, 7\nVertex 5: 4\nVertex 6: 4, 13, 2, 9, 12\nVertex 7: 10, 14, 16, 4\nVertex 8: 13, 12\nVertex 9: 6\nVertex 10: 4, 7\nVertex 11: 12, 1\nVertex 12: 6, 11, 1, 8\nVertex 13: 6, 8, 15\nVertex 14: 7, 16, 15\nVertex 15: 4, 13, 14\nVertex 16: 7, 14\nVertex 17: 4\n",
    "graph_output": "17 23\n1 4\n4 6\n6 13\n4 15\n6 2\n4 3\n4 10\n13 8\n6 9\n4 17\n10 7\n6 12\n7 14\n12 11\n7 16\n4 5\n7 4\n1 12\n16 14\n15 13\n8 12\n11 1\n15 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 15 vertices and 18 edges\n\nEdges (Format: Node Node):\n1 11\n1 2\n2 4\n11 5\n2 9\n1 7\n5 3\n11 10\n3 15\n2 12\n2 14\n7 8\n2 6\n9 13\n8 10\n4 5\n4 13\n14 13\n",
    "graph_output": "15 18\n1 11\n1 2\n2 4\n11 5\n2 9\n1 7\n5 3\n11 10\n3 15\n2 12\n2 14\n7 8\n2 6\n9 13\n8 10\n4 5\n4 13\n14 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 22 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 2 and vertex 4.\n",
    "graph_output": "16 22\n1 4\n4 5\n4 16\n4 3\n5 15\n1 2\n1 7\n2 12\n2 8\n5 10\n7 9\n8 6\n5 11\n11 13\n16 14\n16 1\n9 8\n11 9\n15 16\n4 12\n8 13\n2 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nUndirected Graph with 30 vertices and 29 edges\n\nEdges (Format: Node Node):\n1 17\n17 18\n1 23\n17 20\n17 12\n12 28\n12 27\n27 19\n23 2\n17 8\n8 26\n19 5\n28 14\n14 7\n27 25\n17 24\n28 21\n21 29\n29 4\n5 3\n28 15\n26 22\n18 6\n3 10\n10 16\n5 13\n27 9\n28 11\n19 30\n",
    "graph_output": "30 29\n1 17\n17 18\n1 23\n17 20\n17 12\n12 28\n12 27\n27 19\n23 2\n17 8\n8 26\n19 5\n28 14\n14 7\n27 25\n17 24\n28 21\n21 29\n29 4\n5 3\n28 15\n26 22\n18 6\n3 10\n10 16\n5 13\n27 9\n28 11\n19 30\n",
    "vertices": [
      null,
      null
    ],
    "answer": 12,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 104 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   0   1   0   0 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   0   1   0   1   0 \n 7 |  1   1   1   1   1   1   0   0   1   1   1   1   1   0   1   1 \n 8 |  1   1   1   1   1   1   0   0   1   1   1   1   1   0   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   0   1   1   0   0 \n11 |  0   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n12 |  1   1   1   1   1   0   1   1   1   0   1   0   1   0   1   1 \n13 |  1   0   1   1   0   1   1   1   1   1   1   1   0   0   1   1 \n14 |  1   1   1   1   1   0   0   0   1   1   1   0   0   0   1   1 \n15 |  1   1   1   1   0   1   1   1   1   0   1   1   1   1   0   1 \n16 |  1   1   1   1   0   0   1   1   1   0   1   1   1   1   1   0 \n",
    "graph_output": "16 104\n1 10\n1 12\n12 11\n11 15\n1 16\n10 13\n11 9\n9 7\n15 14\n11 3\n14 2\n13 6\n7 5\n10 4\n16 8\n16 12\n11 8\n16 9\n8 9\n9 2\n13 7\n15 12\n13 12\n16 13\n9 12\n2 16\n8 2\n3 14\n8 10\n3 10\n1 2\n1 7\n7 2\n8 4\n9 4\n15 16\n2 4\n1 13\n3 8\n4 7\n5 1\n13 8\n10 11\n1 15\n5 11\n1 9\n4 12\n7 3\n6 2\n3 13\n2 12\n14 1\n6 1\n14 9\n4 15\n1 8\n1 4\n4 6\n3 4\n13 11\n7 6\n10 14\n15 2\n12 5\n8 12\n9 5\n6 11\n9 3\n15 7\n4 14\n9 10\n2 5\n13 4\n16 7\n2 3\n10 7\n11 14\n12 7\n8 15\n16 11\n16 14\n4 5\n11 7\n9 6\n9 13\n8 5\n3 1\n13 15\n15 6\n6 5\n5 14\n6 3\n9 15\n16 3\n15 3\n3 5\n3 12\n6 10\n2 10\n8 6\n2 11\n4 16\n11 4\n5 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 13 vertices and 69 edges\n\nEdges (Format: Node Node):\n7 4\n7 5\n6 2\n1 7\n11 12\n7 6\n10 2\n2 1\n8 4\n3 12\n13 8\n10 11\n6 1\n1 13\n11 5\n1 8\n1 5\n9 5\n9 13\n1 3\n11 4\n3 5\n2 9\n2 3\n13 7\n3 7\n2 8\n12 4\n3 6\n4 1\n5 4\n13 5\n10 5\n13 3\n9 10\n3 11\n13 4\n1 12\n2 11\n6 5\n4 9\n13 12\n4 6\n2 7\n8 6\n6 10\n1 10\n10 8\n10 3\n6 11\n1 9\n11 8\n7 12\n3 4\n7 11\n6 12\n13 11\n13 6\n7 8\n3 8\n10 7\n13 10\n3 9\n2 4\n9 6\n4 10\n10 12\n9 8\n12 2\n",
    "graph_output": "13 69\n7 4\n7 5\n6 2\n1 7\n11 12\n7 6\n10 2\n2 1\n8 4\n3 12\n13 8\n10 11\n6 1\n1 13\n11 5\n1 8\n1 5\n9 5\n9 13\n1 3\n11 4\n3 5\n2 9\n2 3\n13 7\n3 7\n2 8\n12 4\n3 6\n4 1\n5 4\n13 5\n10 5\n13 3\n9 10\n3 11\n13 4\n1 12\n2 11\n6 5\n4 9\n13 12\n4 6\n2 7\n8 6\n6 10\n1 10\n10 8\n10 3\n6 11\n1 9\n11 8\n7 12\n3 4\n7 11\n6 12\n13 11\n13 6\n7 8\n3 8\n10 7\n13 10\n3 9\n2 4\n9 6\n4 10\n10 12\n9 8\n12 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 198,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 17 vertices and 130 edges\n\nEdges (Format: Node Node):\n15 8\n9 14\n17 13\n10 4\n2 3\n5 9\n12 9\n13 15\n2 7\n8 7\n3 1\n6 8\n14 12\n11 14\n1 5\n1 2\n4 13\n2 8\n14 4\n5 7\n2 13\n6 14\n12 4\n14 7\n10 17\n16 8\n7 6\n15 5\n11 1\n4 2\n16 1\n4 9\n5 3\n11 15\n10 6\n1 15\n10 1\n12 1\n7 13\n13 10\n15 3\n16 5\n17 7\n12 8\n12 17\n8 3\n1 14\n1 6\n17 8\n14 8\n11 5\n5 8\n3 9\n9 1\n15 2\n6 3\n15 16\n3 10\n15 7\n14 13\n3 12\n16 7\n16 9\n4 6\n10 12\n16 2\n12 13\n2 9\n10 11\n1 7\n15 12\n13 11\n10 5\n17 6\n3 17\n12 11\n11 17\n14 2\n14 16\n6 16\n7 4\n17 4\n5 4\n4 16\n14 17\n2 5\n9 10\n3 11\n9 6\n5 6\n6 2\n8 11\n11 4\n3 7\n10 8\n15 10\n7 9\n6 13\n13 9\n15 17\n9 11\n3 4\n1 13\n5 13\n10 16\n15 4\n9 8\n8 13\n1 17\n12 2\n15 14\n7 10\n2 11\n12 7\n5 14\n16 13\n5 17\n17 9\n11 6\n8 1\n12 16\n13 3\n12 5\n14 10\n12 6\n11 16\n1 4\n14 3\n16 3\n8 4\n",
    "graph_output": "17 130\n15 8\n9 14\n17 13\n10 4\n2 3\n5 9\n12 9\n13 15\n2 7\n8 7\n3 1\n6 8\n14 12\n11 14\n1 5\n1 2\n4 13\n2 8\n14 4\n5 7\n2 13\n6 14\n12 4\n14 7\n10 17\n16 8\n7 6\n15 5\n11 1\n4 2\n16 1\n4 9\n5 3\n11 15\n10 6\n1 15\n10 1\n12 1\n7 13\n13 10\n15 3\n16 5\n17 7\n12 8\n12 17\n8 3\n1 14\n1 6\n17 8\n14 8\n11 5\n5 8\n3 9\n9 1\n15 2\n6 3\n15 16\n3 10\n15 7\n14 13\n3 12\n16 7\n16 9\n4 6\n10 12\n16 2\n12 13\n2 9\n10 11\n1 7\n15 12\n13 11\n10 5\n17 6\n3 17\n12 11\n11 17\n14 2\n14 16\n6 16\n7 4\n17 4\n5 4\n4 16\n14 17\n2 5\n9 10\n3 11\n9 6\n5 6\n6 2\n8 11\n11 4\n3 7\n10 8\n15 10\n7 9\n6 13\n13 9\n15 17\n9 11\n3 4\n1 13\n5 13\n10 16\n15 4\n9 8\n8 13\n1 17\n12 2\n15 14\n7 10\n2 11\n12 7\n5 14\n16 13\n5 17\n17 9\n11 6\n8 1\n12 16\n13 3\n12 5\n14 10\n12 6\n11 16\n1 4\n14 3\n16 3\n8 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 88 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   0   0   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   0   0   1 \n 3 |  1   1   0   1   1   0   0   1   1   1   1   1   0   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   0 \n 5 |  1   1   1   1   0   1   1   1   0   1   0   1   1   1   1 \n 6 |  0   1   0   1   1   0   0   1   1   1   1   1   1   1   1 \n 7 |  0   1   0   1   1   0   0   0   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   0   0   1   1   1   0   1   1   1 \n 9 |  1   1   1   1   0   1   1   1   0   0   1   1   1   1   0 \n10 |  1   1   1   1   1   1   1   1   0   0   1   1   1   1   1 \n11 |  1   1   1   1   0   1   1   1   1   1   0   0   1   1   1 \n12 |  1   1   1   1   1   1   1   0   1   1   0   0   1   1   1 \n13 |  1   0   0   1   1   1   1   1   1   1   1   1   0   1   0 \n14 |  1   0   1   1   1   1   1   1   1   1   1   1   1   0   1 \n15 |  1   1   1   0   1   1   1   1   0   1   1   1   0   1   0 \n",
    "graph_output": "15 88\n1 11\n11 13\n1 2\n11 7\n11 6\n7 15\n6 9\n9 3\n13 5\n7 12\n6 14\n1 8\n8 10\n9 4\n9 11\n8 5\n5 10\n14 15\n15 10\n5 1\n12 13\n14 3\n5 7\n1 10\n8 14\n4 11\n4 1\n12 4\n9 14\n3 4\n6 15\n4 6\n9 2\n13 4\n7 10\n6 10\n11 10\n6 8\n3 10\n2 10\n6 13\n15 2\n9 1\n6 2\n7 4\n1 14\n1 15\n12 3\n7 13\n2 12\n3 11\n5 15\n10 14\n13 10\n1 3\n12 1\n3 2\n15 11\n6 5\n2 5\n14 12\n8 2\n8 11\n12 15\n14 7\n11 2\n9 13\n7 9\n8 4\n4 10\n13 14\n5 4\n12 6\n15 8\n13 8\n12 10\n5 14\n13 1\n5 12\n14 11\n3 8\n14 4\n3 15\n9 12\n2 7\n2 4\n5 3\n9 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 9, 8, 10\nVertex 2: 8, 5, 10, 7, 3, 14\nVertex 3: 15, 4, 6, 2, 10\nVertex 4: 3, 15, 5, 12\nVertex 5: 10, 2, 11, 4\nVertex 6: 10, 3\nVertex 7: 2\nVertex 8: 2, 1, 10\nVertex 9: 1, 14, 11, 13\nVertex 10: 13, 5, 1, 14, 6, 2, 12, 8, 11, 3\nVertex 11: 5, 9, 10\nVertex 12: 14, 10, 4\nVertex 13: 10, 1, 9, 15\nVertex 14: 12, 10, 9, 2\nVertex 15: 3, 4, 13\n",
    "graph_output": "15 30\n10 13\n13 1\n3 15\n1 9\n4 3\n8 2\n12 14\n5 10\n4 15\n2 5\n1 8\n1 10\n14 10\n6 10\n3 6\n9 14\n10 2\n7 2\n5 11\n10 12\n8 10\n11 9\n3 2\n4 5\n9 13\n10 11\n10 3\n2 14\n12 4\n13 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 16 vertices and 100 edges\n\nEdges (Format: Node Node):\n1 14\n1 3\n1 13\n3 8\n14 6\n13 16\n6 5\n8 7\n1 11\n3 12\n16 4\n16 15\n4 2\n8 9\n12 10\n8 1\n9 16\n14 9\n5 16\n10 1\n15 10\n13 11\n12 14\n2 13\n11 15\n5 15\n12 15\n8 2\n10 7\n4 12\n11 2\n6 3\n5 7\n10 11\n8 13\n9 12\n9 11\n4 5\n14 11\n6 8\n1 4\n5 8\n15 1\n3 16\n11 3\n7 12\n6 1\n6 2\n1 2\n12 16\n14 8\n15 6\n3 5\n5 13\n4 10\n7 3\n1 5\n2 14\n4 15\n3 13\n14 4\n12 5\n15 14\n6 7\n9 13\n10 9\n9 7\n9 1\n6 10\n6 4\n10 16\n9 5\n2 7\n2 15\n8 11\n16 14\n2 3\n4 3\n12 1\n4 8\n12 8\n8 10\n5 10\n14 5\n12 11\n9 6\n11 16\n13 12\n10 3\n15 13\n6 11\n13 6\n13 7\n6 16\n15 9\n12 2\n7 1\n11 5\n16 7\n8 15\n",
    "graph_output": "16 100\n1 14\n1 3\n1 13\n3 8\n14 6\n13 16\n6 5\n8 7\n1 11\n3 12\n16 4\n16 15\n4 2\n8 9\n12 10\n8 1\n9 16\n14 9\n5 16\n10 1\n15 10\n13 11\n12 14\n2 13\n11 15\n5 15\n12 15\n8 2\n10 7\n4 12\n11 2\n6 3\n5 7\n10 11\n8 13\n9 12\n9 11\n4 5\n14 11\n6 8\n1 4\n5 8\n15 1\n3 16\n11 3\n7 12\n6 1\n6 2\n1 2\n12 16\n14 8\n15 6\n3 5\n5 13\n4 10\n7 3\n1 5\n2 14\n4 15\n3 13\n14 4\n12 5\n15 14\n6 7\n9 13\n10 9\n9 7\n9 1\n6 10\n6 4\n10 16\n9 5\n2 7\n2 15\n8 11\n16 14\n2 3\n4 3\n12 1\n4 8\n12 8\n8 10\n5 10\n14 5\n12 11\n9 6\n11 16\n13 12\n10 3\n15 13\n6 11\n13 6\n13 7\n6 16\n15 9\n12 2\n7 1\n11 5\n16 7\n8 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 6 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 2 and vertex 5.\n",
    "graph_output": "6 6\n1 5\n6 4\n2 1\n2 6\n5 4\n2 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (30\u00d730):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n   ------------------------------------------------------------------------------------------------------------------------\n 1 |  0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 2 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0 \n 5 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 6 |  0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0 \n 9 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   1   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   1   0   0   1   1   0   0   0   0 \n16 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n23 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n26 |  0   0   0   1   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n30 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "30 29\n1 2\n2 20\n2 15\n15 26\n15 13\n15 25\n26 8\n26 21\n26 4\n8 9\n25 27\n20 6\n6 3\n6 5\n21 11\n2 23\n1 10\n15 22\n27 12\n21 24\n3 16\n4 29\n21 7\n15 14\n8 28\n5 30\n22 18\n12 17\n17 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 15,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 15 vertices and 100 edges\n\nEdges (Format: Node Node):\n11 13\n11 2\n5 11\n5 4\n12 11\n4 2\n10 6\n7 6\n3 7\n1 13\n8 9\n2 13\n1 15\n10 4\n9 14\n11 8\n12 1\n14 10\n12 10\n10 3\n5 9\n14 11\n4 14\n6 14\n15 7\n1 9\n7 5\n9 2\n12 13\n6 12\n7 1\n4 9\n10 13\n1 10\n4 6\n6 2\n5 8\n2 8\n2 10\n15 12\n5 10\n4 3\n13 15\n7 11\n13 4\n14 13\n12 8\n1 3\n8 7\n6 13\n15 4\n5 2\n11 1\n12 14\n13 7\n13 8\n3 8\n5 15\n7 12\n9 3\n4 8\n15 2\n1 6\n12 5\n4 11\n3 14\n11 9\n3 12\n8 1\n8 14\n10 9\n12 9\n13 3\n1 14\n15 11\n13 9\n10 8\n8 15\n7 9\n3 2\n1 4\n10 11\n11 6\n15 10\n6 5\n3 11\n4 12\n14 15\n9 15\n5 14\n5 3\n12 2\n9 6\n4 7\n15 6\n7 2\n5 1\n6 8\n2 14\n1 2\n",
    "graph_output": "15 100\n11 13\n11 2\n5 11\n5 4\n12 11\n4 2\n10 6\n7 6\n3 7\n1 13\n8 9\n2 13\n1 15\n10 4\n9 14\n11 8\n12 1\n14 10\n12 10\n10 3\n5 9\n14 11\n4 14\n6 14\n15 7\n1 9\n7 5\n9 2\n12 13\n6 12\n7 1\n4 9\n10 13\n1 10\n4 6\n6 2\n5 8\n2 8\n2 10\n15 12\n5 10\n4 3\n13 15\n7 11\n13 4\n14 13\n12 8\n1 3\n8 7\n6 13\n15 4\n5 2\n11 1\n12 14\n13 7\n13 8\n3 8\n5 15\n7 12\n9 3\n4 8\n15 2\n1 6\n12 5\n4 11\n3 14\n11 9\n3 12\n8 1\n8 14\n10 9\n12 9\n13 3\n1 14\n15 11\n13 9\n10 8\n8 15\n7 9\n3 2\n1 4\n10 11\n11 6\n15 10\n6 5\n3 11\n4 12\n14 15\n9 15\n5 14\n5 3\n12 2\n9 6\n4 7\n15 6\n7 2\n5 1\n6 8\n2 14\n1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 20 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2 with a weight of 22.\nThere is an edge between vertex 1 and vertex 3 with a weight of 69.\nThere is an edge between vertex 2 and vertex 13 with a weight of 13.\nThere is an edge between vertex 1 and vertex 7 with a weight of 58.\nThere is an edge between vertex 1 and vertex 14 with a weight of 89.\nThere is an edge between vertex 1 and vertex 16 with a weight of 91.\nThere is an edge between vertex 13 and vertex 12 with a weight of 47.\nThere is an edge between vertex 13 and vertex 5 with a weight of 88.\nThere is an edge between vertex 2 and vertex 10 with a weight of 62.\nThere is an edge between vertex 10 and vertex 9 with a weight of 98.\nThere is an edge between vertex 1 and vertex 6 with a weight of 51.\nThere is an edge between vertex 10 and vertex 8 with a weight of 48.\nThere is an edge between vertex 14 and vertex 4 with a weight of 10.\nThere is an edge between vertex 4 and vertex 15 with a weight of 29.\nThere is an edge between vertex 15 and vertex 11 with a weight of 52.\nThere is an edge between vertex 9 and vertex 1 with a weight of 32.\nThere is an edge between vertex 15 and vertex 10 with a weight of 9.\nThere is an edge between vertex 11 and vertex 7 with a weight of 71.\nThere is an edge between vertex 8 and vertex 11 with a weight of 35.\nThere is an edge between vertex 14 and vertex 11 with a weight of 77.\n",
    "graph_output": "16 20\n1 2 22\n1 3 69\n2 13 13\n1 7 58\n1 14 89\n1 16 91\n13 12 47\n13 5 88\n2 10 62\n10 9 98\n1 6 51\n10 8 48\n14 4 10\n4 15 29\n15 11 52\n9 1 32\n15 10 9\n11 7 71\n8 11 35\n14 11 77\n",
    "vertices": [
      null,
      null
    ],
    "answer": 664,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 22 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (8\u00d78):\n\n      1   2   3   4   5   6   7   8\n   --------------------------------\n 1 |  0   1   1   1   0   1   1   1 \n 2 |  1   0   1   1   1   1   0   1 \n 3 |  1   1   0   1   1   0   1   1 \n 4 |  1   1   1   0   0   1   1   0 \n 5 |  0   1   1   0   0   1   0   1 \n 6 |  1   1   0   1   1   0   1   1 \n 7 |  1   0   1   1   0   1   0   1 \n 8 |  1   1   1   0   1   1   1   0 \n",
    "graph_output": "8 22\n1 2\n1 7\n1 8\n1 4\n1 3\n2 6\n3 5\n2 3\n6 4\n7 6\n8 5\n6 1\n2 5\n2 4\n4 3\n4 7\n8 2\n8 3\n6 8\n7 3\n8 7\n6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 39852,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 17 vertices and 31 edges\n\nEdges (Format: Node Node):\n1 7\n1 14\n1 11\n11 4\n11 17\n17 12\n17 8\n14 6\n4 2\n2 15\n8 5\n6 13\n4 16\n11 10\n10 9\n14 3\n7 15\n10 14\n6 8\n6 12\n6 15\n8 13\n4 12\n16 2\n17 1\n4 6\n8 2\n3 6\n14 2\n13 10\n12 10\n",
    "graph_output": "17 31\n1 7\n1 14\n1 11\n11 4\n11 17\n17 12\n17 8\n14 6\n4 2\n2 15\n8 5\n6 13\n4 16\n11 10\n10 9\n14 3\n7 15\n10 14\n6 8\n6 12\n6 15\n8 13\n4 12\n16 2\n17 1\n4 6\n8 2\n3 6\n14 2\n13 10\n12 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 8 vertices and 25 edges\n\nEdges (Format: Node Node):\n4 6\n4 7\n1 8\n6 3\n5 4\n2 8\n7 5\n7 6\n1 2\n5 6\n3 8\n1 6\n2 7\n3 7\n7 8\n5 2\n3 5\n2 6\n3 1\n3 2\n3 4\n1 7\n8 4\n4 2\n5 8\n",
    "graph_output": "8 25\n4 6\n4 7\n1 8\n6 3\n5 4\n2 8\n7 5\n7 6\n1 2\n5 6\n3 8\n1 6\n2 7\n3 7\n7 8\n5 2\n3 5\n2 6\n3 1\n3 2\n3 4\n1 7\n8 4\n4 2\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3422,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (29\u00d729):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n   --------------------------------------------------------------------------------------------------------------------\n 1 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0 \n 2 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   1 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   1   0 \n 8 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n10 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n17 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1 \n20 |  1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   1   0 \n24 |  0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  1   0   0   0   0   1   1   0   0   0   0   0   0   1   1   0   0   1   0   0   0   0   1   0   0   0   0   0   0 \n29 |  0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "29 28\n1 28\n28 6\n1 20\n20 25\n28 23\n25 10\n6 17\n23 22\n25 9\n10 4\n6 29\n29 19\n1 2\n22 21\n20 5\n28 7\n6 3\n28 18\n23 16\n9 8\n28 14\n29 11\n7 24\n28 15\n7 27\n19 26\n22 13\n24 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 20 and 18 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 22, 10, 24, 15\nVertex 2: 16, 20, 25, 9, 8\nVertex 3: 29\nVertex 4: 10, 13\nVertex 5: 26, 12\nVertex 6: 26, 28\nVertex 7: 8\nVertex 8: 2, 7\nVertex 9: 2\nVertex 10: 1, 18, 4\nVertex 11: 16, 14\nVertex 12: 5, 29\nVertex 13: 4\nVertex 14: 11, 21\nVertex 15: 1\nVertex 16: 22, 2, 11\nVertex 17: 27, 23\nVertex 18: 10\nVertex 19: 24\nVertex 20: 2, 27\nVertex 21: 14\nVertex 22: 1, 16, 26\nVertex 23: 17\nVertex 24: 1, 19\nVertex 25: 2\nVertex 26: 22, 5, 6\nVertex 27: 20, 17\nVertex 28: 6\nVertex 29: 12, 3\n",
    "graph_output": "29 28\n1 22\n22 16\n16 2\n1 10\n1 24\n2 20\n16 11\n10 18\n24 19\n10 4\n22 26\n11 14\n26 5\n20 27\n27 17\n1 15\n2 25\n5 12\n26 6\n6 28\n12 29\n2 9\n17 23\n2 8\n14 21\n29 3\n8 7\n4 13\n",
    "vertices": [
      20,
      18
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 20, 25, 3, 13, 4\nVertex 2: 18, 23, 27\nVertex 3: 1\nVertex 4: 1\nVertex 5: 8, 30\nVertex 6: 26\nVertex 7: 16, 24, 15\nVertex 8: 21, 5, 10\nVertex 9: 1, 16, 18\nVertex 10: 8\nVertex 11: 29\nVertex 12: 16, 19\nVertex 13: 1\nVertex 14: 25, 28\nVertex 15: 7\nVertex 16: 9, 21, 12, 7\nVertex 17: 23\nVertex 18: 9, 22, 29, 2\nVertex 19: 12\nVertex 20: 1\nVertex 21: 16, 8\nVertex 22: 18\nVertex 23: 2, 17\nVertex 24: 7\nVertex 25: 1, 14, 26\nVertex 26: 25, 6\nVertex 27: 2\nVertex 28: 14\nVertex 29: 18, 11\nVertex 30: 5\n",
    "graph_output": "30 29\n1 9\n9 16\n9 18\n16 21\n16 12\n18 22\n1 20\n21 8\n18 29\n1 25\n25 14\n8 5\n8 10\n1 3\n16 7\n12 19\n25 26\n26 6\n1 13\n18 2\n2 23\n14 28\n5 30\n23 17\n1 4\n7 24\n7 15\n29 11\n2 27\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 9 and vertex 8 are connected.\n\nThis is an undirected graph with 15 vertices and 98 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 7 and vertex 4.\n",
    "graph_output": "15 98\n5 11\n14 12\n6 13\n10 15\n7 10\n6 2\n8 3\n11 3\n3 12\n5 14\n11 1\n5 3\n15 8\n4 13\n11 13\n5 1\n10 6\n7 14\n13 1\n13 12\n15 1\n9 5\n8 4\n15 13\n4 14\n4 12\n8 7\n14 11\n7 12\n6 8\n7 6\n10 4\n3 10\n5 6\n2 12\n7 3\n8 13\n3 6\n10 9\n3 9\n1 10\n10 13\n2 4\n12 8\n9 4\n9 11\n5 12\n1 3\n9 7\n5 4\n15 9\n9 12\n10 14\n5 10\n2 13\n7 11\n15 6\n2 10\n3 2\n2 15\n10 11\n1 6\n2 8\n14 3\n11 4\n8 11\n3 13\n6 9\n5 13\n12 1\n1 2\n13 7\n13 14\n7 15\n8 9\n2 7\n2 11\n10 8\n15 5\n2 14\n9 1\n1 4\n14 1\n15 11\n6 4\n9 13\n15 12\n5 7\n11 6\n14 15\n1 7\n2 9\n5 2\n4 3\n9 14\n8 14\n14 6\n7 4\n",
    "vertices": [
      9,
      8
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 14 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 14 and vertex 9.\n",
    "graph_output": "15 14\n8 2\n3 12\n11 13\n1 4\n7 12\n9 15\n3 8\n9 2\n7 5\n5 13\n6 12\n8 1\n3 6\n14 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 2 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 15 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 3 (weight=60), 11 (weight=34), 10 (weight=66), 8 (weight=49)\nVertex 2: 8 (weight=15)\nVertex 3: 1 (weight=60), 4 (weight=89), 7 (weight=96), 14 (weight=33)\nVertex 4: 3 (weight=89), 6 (weight=38)\nVertex 5: 14 (weight=77)\nVertex 6: 4 (weight=38)\nVertex 7: 3 (weight=96)\nVertex 8: 1 (weight=49), 2 (weight=15), 13 (weight=4)\nVertex 9: 10 (weight=74)\nVertex 10: 1 (weight=66), 12 (weight=87), 9 (weight=74), 13 (weight=9)\nVertex 11: 1 (weight=34), 13 (weight=95)\nVertex 12: 10 (weight=87)\nVertex 13: 11 (weight=95), 10 (weight=9), 8 (weight=4)\nVertex 14: 3 (weight=33), 5 (weight=77)\n",
    "graph_output": "14 15\n1 3 60\n3 4 89\n1 11 34\n1 10 66\n3 7 96\n10 12 87\n11 13 95\n3 14 33\n14 5 77\n1 8 49\n10 9 74\n8 2 15\n4 6 38\n13 10 9\n13 8 4\n",
    "vertices": [
      8,
      2
    ],
    "answer": 15,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 16 vertices and 112 edges\n\nEdges (Format: Node Node):\n1 11\n1 13\n1 6\n1 5\n5 7\n11 4\n7 10\n10 14\n6 3\n5 2\n4 16\n4 9\n2 8\n10 15\n10 12\n6 4\n9 3\n15 14\n4 8\n9 8\n10 5\n3 15\n4 10\n13 4\n11 6\n12 1\n13 16\n12 13\n2 14\n12 8\n1 8\n9 7\n2 10\n16 5\n10 11\n13 9\n4 12\n16 1\n12 5\n6 12\n16 11\n8 7\n5 4\n2 13\n3 8\n8 5\n12 3\n11 7\n9 16\n11 12\n8 16\n7 3\n6 14\n4 1\n5 9\n2 7\n7 4\n15 8\n14 4\n5 14\n4 3\n15 2\n8 11\n14 12\n15 13\n2 11\n11 9\n3 14\n3 2\n14 13\n7 12\n13 7\n2 1\n3 1\n7 6\n5 3\n16 3\n16 2\n15 1\n6 15\n1 14\n13 8\n10 1\n6 8\n6 10\n11 15\n10 9\n15 4\n7 1\n2 6\n16 10\n16 15\n10 3\n8 10\n7 15\n16 7\n2 9\n5 13\n15 12\n15 5\n6 16\n9 15\n6 9\n5 6\n16 12\n5 11\n4 2\n1 9\n14 8\n12 2\n11 3\n13 6\n",
    "graph_output": "16 112\n1 11\n1 13\n1 6\n1 5\n5 7\n11 4\n7 10\n10 14\n6 3\n5 2\n4 16\n4 9\n2 8\n10 15\n10 12\n6 4\n9 3\n15 14\n4 8\n9 8\n10 5\n3 15\n4 10\n13 4\n11 6\n12 1\n13 16\n12 13\n2 14\n12 8\n1 8\n9 7\n2 10\n16 5\n10 11\n13 9\n4 12\n16 1\n12 5\n6 12\n16 11\n8 7\n5 4\n2 13\n3 8\n8 5\n12 3\n11 7\n9 16\n11 12\n8 16\n7 3\n6 14\n4 1\n5 9\n2 7\n7 4\n15 8\n14 4\n5 14\n4 3\n15 2\n8 11\n14 12\n15 13\n2 11\n11 9\n3 14\n3 2\n14 13\n7 12\n13 7\n2 1\n3 1\n7 6\n5 3\n16 3\n16 2\n15 1\n6 15\n1 14\n13 8\n10 1\n6 8\n6 10\n11 15\n10 9\n15 4\n7 1\n2 6\n16 10\n16 15\n10 3\n8 10\n7 15\n16 7\n2 9\n5 13\n15 12\n15 5\n6 16\n9 15\n6 9\n5 6\n16 12\n5 11\n4 2\n1 9\n14 8\n12 2\n11 3\n13 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 17 vertices and 113 edges\n\nEdges (Format: Node Node):\n7 13\n11 16\n8 9\n17 9\n4 15\n7 9\n15 10\n1 4\n7 3\n4 16\n3 17\n11 6\n9 3\n10 6\n3 4\n5 6\n4 5\n5 8\n5 7\n13 6\n4 9\n4 6\n8 10\n6 17\n8 13\n9 11\n16 8\n11 1\n17 4\n1 3\n2 9\n5 15\n14 16\n16 6\n9 10\n13 17\n11 5\n11 8\n4 8\n9 14\n4 13\n5 16\n14 15\n5 14\n5 13\n4 12\n7 12\n8 3\n12 15\n3 6\n16 1\n9 5\n2 16\n14 6\n17 15\n8 17\n1 14\n16 15\n14 7\n13 10\n13 1\n2 13\n4 2\n16 17\n2 8\n14 12\n8 12\n10 2\n2 11\n7 1\n11 7\n2 12\n6 15\n12 11\n3 13\n10 11\n6 7\n13 16\n12 10\n11 15\n9 6\n6 8\n2 7\n16 9\n10 14\n2 15\n11 3\n12 3\n6 1\n8 14\n17 1\n14 3\n13 9\n10 1\n1 2\n3 5\n15 1\n7 17\n2 3\n6 2\n12 5\n10 5\n1 8\n15 3\n10 16\n7 16\n6 12\n15 9\n8 15\n17 2\n12 1\n9 1\n13 14\n",
    "graph_output": "17 113\n7 13\n11 16\n8 9\n17 9\n4 15\n7 9\n15 10\n1 4\n7 3\n4 16\n3 17\n11 6\n9 3\n10 6\n3 4\n5 6\n4 5\n5 8\n5 7\n13 6\n4 9\n4 6\n8 10\n6 17\n8 13\n9 11\n16 8\n11 1\n17 4\n1 3\n2 9\n5 15\n14 16\n16 6\n9 10\n13 17\n11 5\n11 8\n4 8\n9 14\n4 13\n5 16\n14 15\n5 14\n5 13\n4 12\n7 12\n8 3\n12 15\n3 6\n16 1\n9 5\n2 16\n14 6\n17 15\n8 17\n1 14\n16 15\n14 7\n13 10\n13 1\n2 13\n4 2\n16 17\n2 8\n14 12\n8 12\n10 2\n2 11\n7 1\n11 7\n2 12\n6 15\n12 11\n3 13\n10 11\n6 7\n13 16\n12 10\n11 15\n9 6\n6 8\n2 7\n16 9\n10 14\n2 15\n11 3\n12 3\n6 1\n8 14\n17 1\n14 3\n13 9\n10 1\n1 2\n3 5\n15 1\n7 17\n2 3\n6 2\n12 5\n10 5\n1 8\n15 3\n10 16\n7 16\n6 12\n15 9\n8 15\n17 2\n12 1\n9 1\n13 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 22 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 3, 11, 5, 7, 6, 15\nVertex 2: 6, 12\nVertex 3: 1, 16, 6\nVertex 4: 12, 15, 7\nVertex 5: 1, 9, 10\nVertex 6: 3, 2, 1\nVertex 7: 1, 4\nVertex 8: 15, 11\nVertex 9: 5, 15\nVertex 10: 11, 5\nVertex 11: 1, 10, 8\nVertex 12: 2, 4\nVertex 13: 14\nVertex 14: 1, 15, 13\nVertex 15: 14, 8, 9, 4, 1\nVertex 16: 3\n",
    "graph_output": "16 22\n1 14\n14 15\n1 3\n3 16\n1 11\n3 6\n1 5\n15 8\n14 13\n5 9\n1 7\n6 2\n11 10\n2 12\n12 4\n9 15\n6 1\n10 5\n15 4\n1 15\n8 11\n4 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 5 and vertex 14 are connected.\n\nThis is an undirected graph with 15 vertices and 25 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 4, 10, 5, 15, 6\nVertex 2: 7, 5, 4, 3\nVertex 3: 11, 14, 2, 5\nVertex 4: 1, 14, 2, 9\nVertex 5: 2, 8, 1, 3\nVertex 6: 9, 10, 1\nVertex 7: 2, 1, 8, 9\nVertex 8: 14, 7, 5\nVertex 9: 6, 14, 7, 4\nVertex 10: 6, 15, 1\nVertex 11: 3, 13\nVertex 12: 14\nVertex 13: 11\nVertex 14: 8, 4, 3, 12, 9\nVertex 15: 10, 1\n",
    "graph_output": "15 25\n2 7\n9 6\n1 7\n2 5\n4 1\n8 14\n14 4\n3 11\n2 4\n11 13\n14 3\n12 14\n6 10\n7 8\n10 15\n10 1\n5 8\n14 9\n3 2\n9 7\n4 9\n5 1\n15 1\n3 5\n1 6\n",
    "vertices": [
      5,
      14
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 13 vertices and 68 edges\n\nEdges (Format: Node Node):\n1 3\n6 1\n12 3\n11 2\n10 5\n3 11\n12 4\n7 12\n8 6\n2 13\n2 5\n1 11\n8 7\n2 12\n11 4\n10 2\n7 2\n5 8\n5 1\n10 7\n9 10\n4 1\n9 8\n1 7\n3 7\n6 9\n3 13\n10 3\n12 13\n4 2\n6 13\n1 9\n5 9\n11 9\n11 10\n4 5\n4 10\n6 10\n6 11\n12 5\n11 8\n2 6\n12 1\n3 8\n12 10\n13 7\n5 6\n1 13\n1 2\n13 8\n3 6\n5 3\n7 9\n8 1\n8 10\n12 11\n2 3\n12 6\n4 13\n4 7\n9 13\n4 3\n3 9\n11 7\n5 7\n8 12\n11 5\n5 13\n",
    "graph_output": "13 68\n1 3\n6 1\n12 3\n11 2\n10 5\n3 11\n12 4\n7 12\n8 6\n2 13\n2 5\n1 11\n8 7\n2 12\n11 4\n10 2\n7 2\n5 8\n5 1\n10 7\n9 10\n4 1\n9 8\n1 7\n3 7\n6 9\n3 13\n10 3\n12 13\n4 2\n6 13\n1 9\n5 9\n11 9\n11 10\n4 5\n4 10\n6 10\n6 11\n12 5\n11 8\n2 6\n12 1\n3 8\n12 10\n13 7\n5 6\n1 13\n1 2\n13 8\n3 6\n5 3\n7 9\n8 1\n8 10\n12 11\n2 3\n12 6\n4 13\n4 7\n9 13\n4 3\n3 9\n11 7\n5 7\n8 12\n11 5\n5 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 81 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 8 and vertex 3.\n",
    "graph_output": "15 81\n1 5\n5 12\n12 2\n5 4\n5 3\n3 14\n14 9\n1 13\n5 15\n1 8\n9 7\n14 11\n5 6\n12 10\n3 4\n12 14\n4 9\n15 1\n14 15\n1 12\n6 7\n8 10\n6 2\n10 5\n15 3\n2 13\n9 3\n14 4\n7 11\n3 13\n6 4\n5 2\n15 8\n13 6\n5 13\n2 10\n15 7\n3 6\n2 14\n12 6\n11 12\n13 10\n12 9\n1 2\n11 1\n10 9\n4 8\n11 6\n11 2\n2 7\n15 10\n7 10\n4 15\n6 15\n13 7\n10 1\n11 8\n10 3\n1 6\n8 7\n10 14\n14 5\n8 14\n13 12\n15 9\n4 13\n6 14\n1 7\n11 3\n10 4\n9 13\n3 1\n8 2\n14 1\n7 12\n5 7\n2 4\n3 7\n9 6\n15 12\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 9 and vertex 8 are connected.\n\nThis is an undirected graph with 16 vertices and 19 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 1 and vertex 15.\n",
    "graph_output": "16 19\n4 2\n1 10\n11 15\n4 12\n14 8\n9 5\n2 7\n10 2\n13 10\n8 5\n2 8\n4 10\n6 7\n13 5\n16 11\n5 11\n6 1\n4 8\n1 15\n",
    "vertices": [
      9,
      8
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 19 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 9 (weight=61), 5 (weight=23), 3 (weight=17), 10 (weight=29), 4 (weight=32), 12 (weight=69)\nVertex 2: 8 (weight=84), 3 (weight=35)\nVertex 3: 1 (weight=17), 11 (weight=75), 2 (weight=35)\nVertex 4: 1 (weight=32)\nVertex 5: 1 (weight=23)\nVertex 6: 7 (weight=57), 10 (weight=28), 12 (weight=56)\nVertex 7: 10 (weight=96), 12 (weight=14), 6 (weight=57), 11 (weight=35)\nVertex 8: 9 (weight=74), 2 (weight=84), 11 (weight=53)\nVertex 9: 1 (weight=61), 8 (weight=74)\nVertex 10: 1 (weight=29), 7 (weight=96), 11 (weight=82), 6 (weight=28), 12 (weight=45)\nVertex 11: 10 (weight=82), 3 (weight=75), 8 (weight=53), 7 (weight=35)\nVertex 12: 7 (weight=14), 1 (weight=69), 10 (weight=45), 6 (weight=56)\n",
    "graph_output": "12 19\n1 9 61\n1 5 23\n1 3 17\n1 10 29\n10 7 96\n9 8 74\n8 2 84\n7 12 14\n10 11 82\n7 6 57\n1 4 32\n11 3 75\n3 2 35\n6 10 28\n1 12 69\n10 12 45\n12 6 56\n8 11 53\n7 11 35\n",
    "vertices": [
      null,
      null
    ],
    "answer": 383,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 64 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 1 and vertex 11.\n",
    "graph_output": "12 64\n11 12\n3 5\n9 10\n7 6\n3 1\n10 6\n10 2\n3 4\n4 7\n5 10\n4 8\n2 12\n6 8\n10 4\n12 9\n4 6\n9 1\n4 1\n1 6\n2 3\n12 8\n12 1\n10 3\n5 6\n11 8\n2 5\n4 12\n7 11\n1 2\n7 3\n3 9\n9 11\n11 4\n12 5\n4 2\n5 4\n7 10\n2 7\n9 8\n3 11\n10 11\n5 9\n1 5\n7 12\n11 5\n4 9\n11 2\n6 2\n3 12\n1 8\n6 12\n9 7\n3 8\n5 7\n2 9\n1 10\n9 6\n5 8\n6 11\n7 1\n2 8\n8 10\n7 8\n1 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 19 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (7\u00d77):\n\n      1   2   3   4   5   6   7\n   ----------------------------\n 1 |  0   1   1   0   1   1   1 \n 2 |  1   0   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1 \n 4 |  0   1   1   0   1   1   0 \n 5 |  1   1   1   1   0   1   1 \n 6 |  1   1   1   1   1   0   1 \n 7 |  1   1   1   0   1   1   0 \n",
    "graph_output": "7 19\n1 6\n1 7\n1 2\n6 5\n1 3\n3 4\n5 2\n2 6\n5 1\n6 4\n4 2\n3 7\n7 6\n7 2\n3 2\n5 7\n3 5\n6 3\n5 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8232,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 11 vertices and 11 edges\n\nEdges (Format: Node Node):\n4 9\n10 1\n10 2\n3 10\n4 10\n5 9\n11 1\n10 6\n5 8\n11 3\n11 6\n",
    "graph_output": "11 11\n4 9\n10 1\n10 2\n3 10\n4 10\n5 9\n11 1\n10 6\n5 8\n11 3\n11 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 12 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   1   0   0 \n 2 |  0   0   0   1   0   0   0   0   0   1   0 \n 3 |  0   0   0   0   0   0   0   1   0   0   1 \n 4 |  0   1   0   0   0   1   0   0   1   1   0 \n 5 |  0   0   0   0   0   0   0   0   0   1   1 \n 6 |  0   0   0   1   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   1 \n 8 |  0   0   1   0   0   0   0   0   0   0   1 \n 9 |  1   0   0   1   0   0   0   0   0   0   0 \n10 |  0   1   0   1   1   0   0   0   0   0   0 \n11 |  0   0   1   0   1   0   1   1   0   0   0 \n",
    "graph_output": "11 12\n2 10\n4 2\n10 4\n4 9\n8 11\n5 10\n5 11\n9 1\n11 7\n11 3\n8 3\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 113 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 15 and vertex 13.\n",
    "graph_output": "16 113\n8 12\n6 7\n5 11\n10 2\n8 14\n14 2\n7 12\n2 7\n1 2\n16 6\n8 2\n15 11\n13 2\n8 4\n11 16\n10 9\n7 1\n15 10\n3 7\n5 2\n8 16\n13 7\n9 2\n5 16\n15 3\n15 9\n6 8\n3 13\n14 1\n14 12\n14 9\n11 2\n9 13\n3 14\n7 10\n15 16\n5 13\n16 12\n11 9\n13 10\n2 15\n16 7\n16 10\n12 4\n11 13\n3 11\n12 13\n5 6\n6 11\n7 4\n12 6\n6 1\n5 1\n11 8\n5 3\n12 11\n14 10\n8 10\n1 9\n4 14\n6 13\n4 15\n14 6\n4 9\n14 5\n16 9\n9 5\n3 8\n7 9\n3 4\n2 16\n11 7\n5 7\n15 14\n1 10\n4 11\n11 14\n12 1\n6 9\n3 1\n11 1\n12 2\n15 5\n10 6\n2 4\n12 5\n15 8\n9 8\n14 16\n2 3\n15 6\n4 5\n3 6\n6 2\n1 16\n10 11\n1 13\n14 7\n12 9\n12 15\n4 6\n16 13\n4 13\n12 3\n16 3\n3 9\n7 15\n13 14\n4 1\n10 12\n8 7\n13 8\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 64 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   0   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1 \n 6 |  1   1   0   1   1   0   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   0 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1 \n12 |  1   1   1   1   1   1   1   1   1   0   1   0 \n",
    "graph_output": "12 64\n11 12\n3 5\n9 10\n7 6\n3 1\n10 6\n10 2\n3 4\n4 7\n5 10\n4 8\n2 12\n6 8\n10 4\n12 9\n4 6\n9 1\n4 1\n1 6\n2 3\n12 8\n12 1\n10 3\n5 6\n11 8\n2 5\n4 12\n7 11\n1 2\n7 3\n3 9\n9 11\n11 4\n12 5\n4 2\n5 4\n7 10\n2 7\n9 8\n3 11\n10 11\n5 9\n1 5\n7 12\n11 5\n4 9\n11 2\n6 2\n3 12\n1 8\n6 12\n9 7\n3 8\n5 7\n2 9\n1 10\n9 6\n5 8\n6 11\n7 1\n2 8\n8 10\n7 8\n1 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 24 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   1   0   0   1   0   1   0 \n 2 |  0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 3 |  0   1   0   0   0   1   0   0   1   0   0   0   0   0   1   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 5 |  0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   1 \n 6 |  0   0   1   0   0   0   0   1   1   0   1   1   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0 \n 8 |  0   0   0   0   1   1   0   0   0   1   0   0   0   0   0   1 \n 9 |  0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0 \n10 |  1   1   0   0   0   0   0   1   0   0   0   0   0   1   0   0 \n11 |  0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0 \n12 |  0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0 \n13 |  1   0   0   1   0   0   1   0   0   0   0   0   0   0   0   1 \n14 |  0   0   0   0   1   0   1   0   0   1   0   0   0   0   0   1 \n15 |  1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   1   0   0   1   0   0   0   0   1   1   0   0 \n",
    "graph_output": "16 24\n1 10\n10 8\n8 6\n6 12\n1 13\n8 16\n10 2\n13 4\n13 7\n6 11\n16 14\n2 3\n1 15\n14 5\n3 9\n14 7\n3 15\n16 13\n10 14\n6 3\n6 9\n5 8\n5 16\n11 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 8 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 3, 4, 2\nVertex 2: 3, 4, 1\nVertex 3: 2, 4, 1\nVertex 4: 3, 1, 2, 5\nVertex 5: 4\nVertex 6: 1\n",
    "graph_output": "6 8\n6 1\n3 2\n3 4\n3 1\n1 4\n2 4\n4 5\n1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 9 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 12 vertices and 17 edges\n\nEdges (Format: Node Node Capacity):\n1 12 2\n1 9 10\n12 10 1\n9 8 9\n10 6 8\n10 4 3\n1 3 6\n3 7 7\n1 2 2\n3 5 2\n2 11 2\n5 11 7\n8 7 4\n9 7 8\n12 4 3\n10 8 6\n1 4 9\n",
    "graph_output": "12 17\n1 12 2\n1 9 10\n12 10 1\n9 8 9\n10 6 8\n10 4 3\n1 3 6\n3 7 7\n1 2 2\n3 5 2\n2 11 2\n5 11 7\n8 7 4\n9 7 8\n12 4 3\n10 8 6\n1 4 9\n",
    "vertices": [
      3,
      9
    ],
    "answer": 15,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 31 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 18.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 1 and vertex 21.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 31.\nThere is an edge between vertex 31 and vertex 16.\nThere is an edge between vertex 16 and vertex 27.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 2 and vertex 22.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 18 and vertex 19.\nThere is an edge between vertex 5 and vertex 30.\nThere is an edge between vertex 22 and vertex 9.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 16 and vertex 26.\nThere is an edge between vertex 2 and vertex 20.\nThere is an edge between vertex 21 and vertex 23.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 20 and vertex 28.\nThere is an edge between vertex 30 and vertex 29.\nThere is an edge between vertex 28 and vertex 17.\nThere is an edge between vertex 28 and vertex 25.\nThere is an edge between vertex 15 and vertex 24.\nThere is an edge between vertex 26 and vertex 6.\nThere is an edge between vertex 17 and vertex 8.\n",
    "graph_output": "31 30\n1 18\n1 5\n1 21\n1 2\n2 31\n31 16\n16 27\n5 15\n16 14\n15 12\n15 7\n2 22\n5 4\n18 19\n5 30\n22 9\n2 11\n14 10\n5 3\n16 26\n2 20\n21 23\n11 13\n20 28\n30 29\n28 17\n28 25\n15 24\n26 6\n17 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 17 vertices and 109 edges\n\nEdges (Format: Node Node):\n7 15\n10 6\n17 3\n17 7\n16 8\n13 7\n13 10\n12 7\n13 4\n7 1\n15 13\n5 7\n7 10\n2 6\n5 15\n2 16\n4 17\n3 5\n1 15\n1 16\n2 4\n11 15\n17 6\n9 2\n9 10\n3 6\n14 5\n3 7\n12 8\n2 14\n1 11\n1 8\n1 17\n13 3\n4 1\n14 17\n14 7\n13 17\n16 10\n2 3\n8 4\n5 1\n11 3\n5 2\n12 2\n11 14\n9 6\n1 6\n15 9\n15 16\n12 14\n16 14\n6 13\n4 7\n8 14\n3 15\n8 10\n4 11\n11 9\n4 15\n15 12\n17 12\n15 8\n17 10\n17 16\n11 8\n9 3\n11 6\n11 17\n13 5\n2 7\n17 2\n15 6\n3 12\n10 5\n7 11\n4 14\n10 1\n12 11\n12 6\n14 6\n13 8\n6 4\n17 15\n1 2\n13 14\n11 10\n4 9\n3 1\n14 15\n15 2\n5 11\n1 14\n17 8\n9 8\n3 16\n13 9\n8 5\n8 7\n12 10\n10 15\n6 8\n13 11\n10 3\n16 9\n1 13\n5 12\n4 16\n7 9\n",
    "graph_output": "17 109\n7 15\n10 6\n17 3\n17 7\n16 8\n13 7\n13 10\n12 7\n13 4\n7 1\n15 13\n5 7\n7 10\n2 6\n5 15\n2 16\n4 17\n3 5\n1 15\n1 16\n2 4\n11 15\n17 6\n9 2\n9 10\n3 6\n14 5\n3 7\n12 8\n2 14\n1 11\n1 8\n1 17\n13 3\n4 1\n14 17\n14 7\n13 17\n16 10\n2 3\n8 4\n5 1\n11 3\n5 2\n12 2\n11 14\n9 6\n1 6\n15 9\n15 16\n12 14\n16 14\n6 13\n4 7\n8 14\n3 15\n8 10\n4 11\n11 9\n4 15\n15 12\n17 12\n15 8\n17 10\n17 16\n11 8\n9 3\n11 6\n11 17\n13 5\n2 7\n17 2\n15 6\n3 12\n10 5\n7 11\n4 14\n10 1\n12 11\n12 6\n14 6\n13 8\n6 4\n17 15\n1 2\n13 14\n11 10\n4 9\n3 1\n14 15\n15 2\n5 11\n1 14\n17 8\n9 8\n3 16\n13 9\n8 5\n8 7\n12 10\n10 15\n6 8\n13 11\n10 3\n16 9\n1 13\n5 12\n4 16\n7 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 23 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 15 and vertex 14.\n",
    "graph_output": "17 23\n1 4\n4 6\n6 13\n4 15\n6 2\n4 3\n4 10\n13 8\n6 9\n4 17\n10 7\n6 12\n7 14\n12 11\n7 16\n4 5\n7 4\n1 12\n16 14\n15 13\n8 12\n11 1\n15 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 7 vertices and 8 edges\n\nEdges (Format: Node Node):\n1 5\n5 7\n1 2\n1 3\n3 4\n3 6\n7 4\n7 2\n",
    "graph_output": "7 8\n1 5\n5 7\n1 2\n1 3\n3 4\n3 6\n7 4\n7 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 16,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 27 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 5 and vertex 15.\n",
    "graph_output": "16 27\n1 3\n1 8\n3 14\n14 2\n14 7\n3 10\n7 11\n2 15\n3 6\n6 5\n14 9\n10 12\n12 13\n10 16\n6 4\n16 11\n2 12\n15 12\n1 9\n11 6\n13 5\n1 16\n16 6\n16 3\n11 15\n1 2\n5 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 15 vertices and 27 edges\n\nEdges (Format: Node Node):\n1 11\n11 14\n14 7\n14 13\n11 6\n14 3\n3 12\n11 15\n7 8\n11 9\n13 2\n7 4\n3 10\n2 5\n12 5\n10 6\n12 10\n3 9\n4 6\n5 4\n11 5\n13 10\n4 2\n15 12\n10 14\n3 11\n15 13\n",
    "graph_output": "15 27\n1 11\n11 14\n14 7\n14 13\n11 6\n14 3\n3 12\n11 15\n7 8\n11 9\n13 2\n7 4\n3 10\n2 5\n12 5\n10 6\n12 10\n3 9\n4 6\n5 4\n11 5\n13 10\n4 2\n15 12\n10 14\n3 11\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 20 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0  22  69   0   0  51  58   0  32   0   0   0   0  89   0  91 \n 2 | 22   0   0   0   0   0   0   0   0  62   0   0  13   0   0   0 \n 3 | 69   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0  10  29   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0  88   0   0   0 \n 6 | 51   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 | 58   0   0   0   0   0   0   0   0   0  71   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0  48  35   0   0   0   0   0 \n 9 | 32   0   0   0   0   0   0   0   0  98   0   0   0   0   0   0 \n10 |  0  62   0   0   0   0   0  48  98   0   0   0   0   0   9   0 \n11 |  0   0   0   0   0   0  71  35   0   0   0   0   0  77  52   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0  47   0   0   0 \n13 |  0  13   0   0  88   0   0   0   0   0   0  47   0   0   0   0 \n14 | 89   0   0  10   0   0   0   0   0   0  77   0   0   0   0   0 \n15 |  0   0   0  29   0   0   0   0   0   9  52   0   0   0   0   0 \n16 | 91   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "16 20\n1 2 22\n1 3 69\n2 13 13\n1 7 58\n1 14 89\n1 16 91\n13 12 47\n13 5 88\n2 10 62\n10 9 98\n1 6 51\n10 8 48\n14 4 10\n4 15 29\n15 11 52\n9 1 32\n15 10 9\n11 7 71\n8 11 35\n14 11 77\n",
    "vertices": [
      null,
      null
    ],
    "answer": 664,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 16 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 9 (weight=84), 6 (weight=32), 11 (weight=51), 12 (weight=1)\nVertex 2: 7 (weight=28), 6 (weight=99)\nVertex 3: 7 (weight=12)\nVertex 4: 7 (weight=20)\nVertex 5: 6 (weight=59), 10 (weight=42)\nVertex 6: 1 (weight=32), 5 (weight=59), 2 (weight=99)\nVertex 7: 9 (weight=82), 3 (weight=12), 2 (weight=28), 4 (weight=20)\nVertex 8: 11 (weight=39)\nVertex 9: 1 (weight=84), 7 (weight=82), 12 (weight=29)\nVertex 10: 5 (weight=42), 13 (weight=94)\nVertex 11: 1 (weight=51), 8 (weight=39), 13 (weight=20), 12 (weight=59)\nVertex 12: 9 (weight=29), 11 (weight=59), 1 (weight=1)\nVertex 13: 10 (weight=94), 11 (weight=20)\n",
    "graph_output": "13 16\n1 9 84\n9 7 82\n7 3 12\n1 6 32\n6 5 59\n7 2 28\n5 10 42\n7 4 20\n10 13 94\n1 11 51\n11 8 39\n9 12 29\n11 13 20\n11 12 59\n6 2 99\n1 12 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 423,
    "description_type": "list"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 4, 11\nVertex 2: 14\nVertex 3: 1, 24, 14, 7\nVertex 4: 1, 15, 13\nVertex 5: 20\nVertex 6: 27, 28, 26\nVertex 7: 3, 25\nVertex 8: 24, 23, 10\nVertex 9: 28\nVertex 10: 8\nVertex 11: 1, 22\nVertex 12: 28\nVertex 13: 4\nVertex 14: 3, 16, 2\nVertex 15: 4, 17, 27\nVertex 16: 14\nVertex 17: 15, 29\nVertex 18: 20\nVertex 19: 26\nVertex 20: 24, 5, 18\nVertex 21: 24\nVertex 22: 11\nVertex 23: 8\nVertex 24: 3, 20, 21, 8\nVertex 25: 7\nVertex 26: 6, 19\nVertex 27: 15, 6\nVertex 28: 6, 9, 12\nVertex 29: 17\n",
    "graph_output": "29 28\n1 3\n3 24\n24 20\n24 21\n1 4\n4 15\n15 17\n24 8\n15 27\n27 6\n4 13\n3 14\n3 7\n8 23\n1 11\n6 28\n6 26\n26 19\n28 9\n17 29\n8 10\n20 5\n11 22\n14 16\n20 18\n7 25\n28 12\n14 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 17,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 11 vertices and 16 edges\n\nEdges (Format: Node Node):\n7 10\n11 9\n1 11\n5 11\n10 3\n2 10\n1 2\n1 4\n1 6\n3 1\n10 9\n11 4\n9 6\n6 11\n5 4\n9 3\n",
    "graph_output": "11 16\n7 10\n11 9\n1 11\n5 11\n10 3\n2 10\n1 2\n1 4\n1 6\n3 1\n10 9\n11 4\n9 6\n6 11\n5 4\n9 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 1 (source) to vertex 7 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 8 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 5 (weight=29, capacity=6), 3 (weight=58, capacity=7), 8 (weight=4, capacity=9)\nVertex 2: 6 (weight=49, capacity=7)\nVertex 3: 1 (weight=58, capacity=7), 4 (weight=46, capacity=10)\nVertex 4: 3 (weight=46, capacity=10), 7 (weight=83, capacity=1)\nVertex 5: 1 (weight=29, capacity=6), 6 (weight=25, capacity=6), 9 (weight=90, capacity=6)\nVertex 6: 5 (weight=25, capacity=6), 2 (weight=49, capacity=7)\nVertex 7: 4 (weight=83, capacity=1)\nVertex 8: 1 (weight=4, capacity=9)\nVertex 9: 5 (weight=90, capacity=6)\n",
    "graph_output": "9 8\n1 5 29 6\n5 6 25 6\n5 9 90 6\n1 3 58 7\n1 8 4 9\n3 4 46 10\n4 7 83 1\n6 2 49 7\n",
    "vertices": [
      1,
      7
    ],
    "answer": 187,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 17 and vertex 11.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 4 and vertex 12.\n",
    "graph_output": "17 30\n12 8\n17 11\n16 12\n13 2\n3 2\n14 3\n4 11\n11 14\n15 9\n2 1\n16 17\n8 7\n1 11\n16 14\n5 3\n6 12\n4 6\n9 8\n12 2\n16 3\n14 7\n13 15\n7 1\n7 15\n2 6\n10 8\n8 3\n5 4\n6 15\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 113 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 7, 14, 6, 5, 9, 10, 12, 3, 11, 16, 13, 4\nVertex 2: 10, 14, 7, 1, 8, 13, 5, 9, 11, 15, 16, 12, 4, 3, 6\nVertex 3: 7, 15, 13, 14, 11, 5, 8, 4, 1, 2, 6, 12, 16, 9\nVertex 4: 8, 12, 7, 14, 15, 9, 3, 11, 2, 5, 6, 13, 1\nVertex 5: 11, 2, 16, 13, 6, 1, 3, 14, 9, 7, 15, 12, 4\nVertex 6: 7, 16, 8, 5, 11, 12, 1, 13, 14, 9, 10, 15, 3, 2, 4\nVertex 7: 6, 12, 2, 1, 3, 13, 10, 16, 4, 9, 11, 5, 14, 15, 8\nVertex 8: 12, 14, 2, 4, 16, 6, 11, 10, 3, 15, 9, 7, 13\nVertex 9: 10, 2, 15, 14, 13, 11, 1, 4, 16, 5, 7, 6, 8, 12, 3\nVertex 10: 2, 9, 15, 7, 13, 16, 14, 8, 1, 6, 11, 12\nVertex 11: 5, 15, 16, 2, 9, 13, 3, 6, 8, 12, 7, 4, 14, 1, 10\nVertex 12: 8, 7, 14, 16, 4, 13, 6, 11, 1, 2, 5, 9, 15, 3, 10\nVertex 13: 2, 7, 3, 9, 5, 10, 11, 12, 6, 1, 16, 4, 14, 8, 15\nVertex 14: 8, 2, 1, 12, 9, 3, 10, 4, 6, 5, 15, 11, 16, 7, 13\nVertex 15: 11, 10, 3, 9, 16, 2, 4, 14, 5, 8, 6, 12, 7, 13\nVertex 16: 6, 11, 8, 5, 15, 12, 7, 10, 9, 2, 14, 1, 13, 3\n",
    "graph_output": "16 113\n8 12\n6 7\n5 11\n10 2\n8 14\n14 2\n7 12\n2 7\n1 2\n16 6\n8 2\n15 11\n13 2\n8 4\n11 16\n10 9\n7 1\n15 10\n3 7\n5 2\n8 16\n13 7\n9 2\n5 16\n15 3\n15 9\n6 8\n3 13\n14 1\n14 12\n14 9\n11 2\n9 13\n3 14\n7 10\n15 16\n5 13\n16 12\n11 9\n13 10\n2 15\n16 7\n16 10\n12 4\n11 13\n3 11\n12 13\n5 6\n6 11\n7 4\n12 6\n6 1\n5 1\n11 8\n5 3\n12 11\n14 10\n8 10\n1 9\n4 14\n6 13\n4 15\n14 6\n4 9\n14 5\n16 9\n9 5\n3 8\n7 9\n3 4\n2 16\n11 7\n5 7\n15 14\n1 10\n4 11\n11 14\n12 1\n6 9\n3 1\n11 1\n12 2\n15 5\n10 6\n2 4\n12 5\n15 8\n9 8\n14 16\n2 3\n15 6\n4 5\n3 6\n6 2\n1 16\n10 11\n1 13\n14 7\n12 9\n12 15\n4 6\n16 13\n4 13\n12 3\n16 3\n3 9\n7 15\n13 14\n4 1\n10 12\n8 7\n13 8\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 23 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 10\nVertex 2: 3, 4\nVertex 3: 2, 7, 12, 14, 9, 11\nVertex 4: 2, 10, 7, 12\nVertex 5: 11, 13\nVertex 6: 7, 11, 14\nVertex 7: 3, 6, 14, 4\nVertex 8: 9\nVertex 9: 1, 8, 3\nVertex 10: 11, 1, 4\nVertex 11: 5, 10, 12, 14, 6, 3\nVertex 12: 14, 11, 3, 4\nVertex 13: 5\nVertex 14: 12, 11, 7, 3, 6\nVertex 15: No connections\n",
    "graph_output": "15 23\n14 12\n9 1\n5 11\n11 10\n11 12\n8 9\n2 3\n3 7\n1 10\n13 5\n11 14\n6 7\n14 7\n2 4\n3 12\n10 4\n14 3\n4 7\n3 9\n11 6\n14 6\n12 4\n11 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 83 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 1 and vertex 9.\n",
    "graph_output": "15 83\n8 13\n9 8\n2 10\n9 13\n9 12\n10 5\n11 8\n15 11\n7 3\n12 11\n8 12\n7 8\n6 1\n3 12\n7 11\n14 2\n14 12\n8 5\n6 14\n13 12\n4 13\n6 8\n8 2\n10 11\n14 7\n11 4\n1 7\n9 14\n3 15\n5 12\n7 5\n15 5\n11 14\n3 8\n8 1\n12 10\n6 2\n10 6\n8 15\n9 4\n2 9\n2 1\n3 9\n15 4\n14 1\n13 5\n12 1\n3 10\n6 9\n13 15\n12 15\n5 14\n3 14\n8 4\n15 7\n5 9\n7 4\n2 4\n1 5\n14 13\n8 14\n7 6\n13 11\n11 9\n4 12\n14 10\n6 13\n14 15\n13 2\n10 4\n10 15\n6 4\n10 9\n3 13\n1 13\n3 2\n5 6\n10 13\n2 12\n11 1\n13 7\n15 9\n1 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 15 vertices and 99 edges\n\nEdges (Format: Node Node):\n1 13\n1 4\n4 2\n2 6\n1 8\n1 3\n3 11\n3 7\n1 12\n6 15\n13 10\n6 14\n14 9\n10 5\n2 5\n10 4\n15 4\n15 7\n3 4\n11 8\n12 2\n10 9\n6 11\n6 13\n14 1\n5 1\n5 8\n11 7\n14 5\n6 5\n7 10\n6 8\n10 8\n14 15\n11 14\n4 7\n7 1\n10 11\n3 5\n7 9\n13 2\n5 12\n2 9\n9 6\n15 10\n14 3\n3 13\n3 12\n2 3\n14 8\n15 5\n10 3\n12 8\n15 3\n2 1\n9 5\n3 8\n14 4\n14 7\n1 10\n1 9\n2 14\n14 13\n14 12\n9 3\n11 13\n10 12\n12 9\n7 2\n7 13\n15 1\n5 4\n10 6\n12 4\n10 14\n15 12\n9 4\n13 9\n9 15\n12 11\n5 11\n7 8\n2 10\n1 11\n11 9\n13 5\n15 13\n2 11\n7 12\n5 7\n8 2\n11 15\n13 4\n11 4\n9 8\n6 4\n6 12\n1 6\n7 6\n",
    "graph_output": "15 99\n1 13\n1 4\n4 2\n2 6\n1 8\n1 3\n3 11\n3 7\n1 12\n6 15\n13 10\n6 14\n14 9\n10 5\n2 5\n10 4\n15 4\n15 7\n3 4\n11 8\n12 2\n10 9\n6 11\n6 13\n14 1\n5 1\n5 8\n11 7\n14 5\n6 5\n7 10\n6 8\n10 8\n14 15\n11 14\n4 7\n7 1\n10 11\n3 5\n7 9\n13 2\n5 12\n2 9\n9 6\n15 10\n14 3\n3 13\n3 12\n2 3\n14 8\n15 5\n10 3\n12 8\n15 3\n2 1\n9 5\n3 8\n14 4\n14 7\n1 10\n1 9\n2 14\n14 13\n14 12\n9 3\n11 13\n10 12\n12 9\n7 2\n7 13\n15 1\n5 4\n10 6\n12 4\n10 14\n15 12\n9 4\n13 9\n9 15\n12 11\n5 11\n7 8\n2 10\n1 11\n11 9\n13 5\n15 13\n2 11\n7 12\n5 7\n8 2\n11 15\n13 4\n11 4\n9 8\n6 4\n6 12\n1 6\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 17 vertices and 23 edges\n\nEdges (Format: Node Node):\n1 4\n4 6\n6 13\n4 15\n6 2\n4 3\n4 10\n13 8\n6 9\n4 17\n10 7\n6 12\n7 14\n12 11\n7 16\n4 5\n7 4\n1 12\n16 14\n15 13\n8 12\n11 1\n15 14\n",
    "graph_output": "17 23\n1 4\n4 6\n6 13\n4 15\n6 2\n4 3\n4 10\n13 8\n6 9\n4 17\n10 7\n6 12\n7 14\n12 11\n7 16\n4 5\n7 4\n1 12\n16 14\n15 13\n8 12\n11 1\n15 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 55 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 5, 3, 8, 10, 6, 7, 2, 9, 11\nVertex 2: 3, 7, 8, 6, 9, 11, 1, 5, 10, 4\nVertex 3: 2, 4, 7, 10, 1, 9, 5, 11, 6, 8\nVertex 4: 5, 3, 7, 10, 1, 6, 11, 8, 9, 2\nVertex 5: 4, 8, 1, 3, 11, 7, 9, 10, 2, 6\nVertex 6: 11, 2, 10, 8, 7, 1, 9, 3, 4, 5\nVertex 7: 9, 3, 4, 2, 11, 10, 6, 8, 5, 1\nVertex 8: 9, 11, 5, 2, 1, 6, 7, 10, 4, 3\nVertex 9: 7, 8, 10, 3, 2, 6, 5, 4, 1, 11\nVertex 10: 4, 9, 3, 6, 7, 11, 1, 5, 8, 2\nVertex 11: 6, 8, 7, 10, 5, 2, 3, 4, 1, 9\n",
    "graph_output": "11 55\n4 5\n2 3\n11 6\n7 9\n3 4\n3 7\n4 7\n10 4\n8 9\n8 11\n5 8\n2 7\n10 9\n4 1\n8 2\n3 10\n6 2\n11 7\n1 5\n1 3\n8 1\n3 9\n6 10\n6 8\n7 10\n7 6\n2 9\n11 10\n3 5\n11 5\n1 10\n1 6\n8 7\n9 6\n11 2\n5 7\n11 3\n1 7\n9 5\n6 3\n10 5\n4 6\n10 8\n4 11\n2 1\n5 2\n8 4\n9 4\n9 1\n2 10\n8 3\n1 11\n2 4\n11 9\n6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 7 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 2 and vertex 7.\n",
    "graph_output": "8 7\n3 4\n4 1\n8 6\n1 2\n2 4\n2 8\n2 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 8, 5, 20, 6, 9, 4\nVertex 2: 21\nVertex 3: 19\nVertex 4: 1, 11\nVertex 5: 1, 29\nVertex 6: 1\nVertex 7: 1, 31, 15, 18\nVertex 8: 1, 22, 13, 28\nVertex 9: 1\nVertex 10: 28, 25, 30\nVertex 11: 4\nVertex 12: 23\nVertex 13: 8\nVertex 14: 21\nVertex 15: 7, 26\nVertex 16: 20, 24\nVertex 17: 20\nVertex 18: 7\nVertex 19: 31, 3\nVertex 20: 1, 17, 16\nVertex 21: 29, 14, 23, 2\nVertex 22: 8\nVertex 23: 21, 12\nVertex 24: 16\nVertex 25: 10\nVertex 26: 15\nVertex 27: 31\nVertex 28: 8, 10\nVertex 29: 5, 21\nVertex 30: 10\nVertex 31: 7, 19, 27\n",
    "graph_output": "31 30\n1 7\n1 8\n1 5\n8 22\n8 13\n1 20\n1 6\n20 17\n20 16\n5 29\n7 31\n29 21\n1 9\n31 19\n8 28\n16 24\n28 10\n10 25\n7 15\n21 14\n21 23\n10 30\n15 26\n31 27\n23 12\n19 3\n21 2\n1 4\n4 11\n7 18\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "list"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 7 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 8 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0   0   7   0   0   0   0  80   0 \n 2 |  0   0  32   0   0   0   0   0   0 \n 3 |  7  32   0  98   0   0   0   0   0 \n 4 |  0   0  98   0   0   0   0   0   0 \n 5 |  0   0   0   0   0  36  42   0   0 \n 6 |  0   0   0   0  36   0   0  97   0 \n 7 |  0   0   0   0  42   0   0   0  36 \n 8 | 80   0   0   0   0  97   0   0   0 \n 9 |  0   0   0   0   0   0  36   0   0 \n\nCapacity Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0   0   2   0   0   0   0   4   0 \n 2 |  0   0   6   0   0   0   0   0   0 \n 3 |  2   6   0   1   0   0   0   0   0 \n 4 |  0   0   1   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   6   3   0   0 \n 6 |  0   0   0   0   6   0   0   5   0 \n 7 |  0   0   0   0   3   0   0   0   1 \n 8 |  4   0   0   0   0   5   0   0   0 \n 9 |  0   0   0   0   0   0   1   0   0 \n",
    "graph_output": "9 8\n1 8 80 4\n8 6 97 5\n1 3 7 2\n6 5 36 6\n5 7 42 3\n7 9 36 1\n3 4 98 1\n3 2 32 6\n",
    "vertices": [
      4,
      7
    ],
    "answer": 360,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 24 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0  14  53  27   0  42  78   0   0   0   0   0 \n 2 |  0   0   0   0   0   0  56   0   0   0   0   0   0   0   0  45 \n 3 |  0   0   0  55   0   0  39  91   0   0   0   0   0   0   0   0 \n 4 |  0   0  55   0   0   0   0  43   0   0   0   0  85   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   3   0   0   0   0   0 \n 6 | 14   0   0   0   0   0   0   0   0   0   0   0   7   0   0   0 \n 7 | 53  56  39   0   0   0   0   0   0   0   0   0   0  97  76   0 \n 8 | 27   0  91  43   0   0   0   0   0   0  10   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0  47  71  20  47   0   0   0 \n10 | 42   0   0   0   0   0   0   0  47   0   0 100  81   0   0   0 \n11 | 78   0   0   0   3   0   0  10  71   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0  20 100   0   0   0   0   0   0 \n13 |  0   0   0  85   0   7   0   0  47  81   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0  97   0   0   0   0   0   0   0  64   0 \n15 |  0   0   0   0   0   0  76   0   0   0   0   0   0  64   0   0 \n16 |  0  45   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "16 24\n1 7 53\n1 11 78\n7 2 56\n11 9 71\n9 13 47\n7 3 39\n7 14 97\n9 10 47\n14 15 64\n11 5 3\n11 8 10\n1 6 14\n9 12 20\n13 4 85\n2 16 45\n6 13 7\n12 10 100\n7 15 76\n1 8 27\n10 1 42\n4 3 55\n8 3 91\n10 13 81\n8 4 43\n",
    "vertices": [
      null,
      null
    ],
    "answer": 546,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 22 edges\n\nEdges (Format: Node Node):\n1 4\n4 5\n4 16\n4 3\n5 15\n1 2\n1 7\n2 12\n2 8\n5 10\n7 9\n8 6\n5 11\n11 13\n16 14\n16 1\n9 8\n11 9\n15 16\n4 12\n8 13\n2 4\n",
    "graph_output": "16 22\n1 4\n4 5\n4 16\n4 3\n5 15\n1 2\n1 7\n2 12\n2 8\n5 10\n7 9\n8 6\n5 11\n11 13\n16 14\n16 1\n9 8\n11 9\n15 16\n4 12\n8 13\n2 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 15 vertices and 18 edges\n\nEdges (Format: Node Node):\n1 6\n1 2\n2 7\n2 15\n15 13\n13 10\n1 5\n7 12\n6 11\n13 9\n9 8\n8 3\n13 14\n5 4\n1 10\n14 3\n2 4\n13 7\n",
    "graph_output": "15 18\n1 6\n1 2\n2 7\n2 15\n15 13\n13 10\n1 5\n7 12\n6 11\n13 9\n9 8\n8 3\n13 14\n5 4\n1 10\n14 3\n2 4\n13 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 17 vertices and 112 edges\n\nEdges (Format: Node Node):\n1 2\n2 6\n6 14\n2 8\n6 3\n2 10\n1 7\n1 9\n14 17\n9 4\n14 16\n1 11\n8 15\n17 5\n2 12\n7 13\n7 9\n2 4\n17 1\n9 6\n4 15\n14 7\n9 12\n5 1\n15 11\n15 10\n14 2\n8 14\n16 5\n13 9\n9 10\n11 4\n1 6\n8 7\n14 11\n7 4\n14 4\n11 2\n7 15\n13 4\n16 12\n4 17\n11 13\n13 3\n1 3\n6 7\n14 12\n3 12\n14 13\n2 3\n15 9\n15 17\n15 1\n6 11\n15 5\n12 10\n10 6\n5 11\n3 7\n14 15\n14 1\n10 8\n16 11\n8 1\n17 3\n13 5\n11 12\n16 6\n12 5\n11 7\n16 3\n11 3\n17 11\n1 12\n13 6\n2 17\n12 4\n16 15\n7 17\n14 5\n17 6\n3 9\n9 5\n16 7\n3 15\n8 13\n16 2\n13 10\n4 6\n16 9\n13 2\n12 17\n8 16\n10 14\n10 1\n4 3\n13 15\n5 2\n4 8\n16 4\n10 11\n9 17\n5 8\n15 12\n7 10\n17 16\n14 3\n2 9\n8 17\n12 7\n10 16\n2 7\n",
    "graph_output": "17 112\n1 2\n2 6\n6 14\n2 8\n6 3\n2 10\n1 7\n1 9\n14 17\n9 4\n14 16\n1 11\n8 15\n17 5\n2 12\n7 13\n7 9\n2 4\n17 1\n9 6\n4 15\n14 7\n9 12\n5 1\n15 11\n15 10\n14 2\n8 14\n16 5\n13 9\n9 10\n11 4\n1 6\n8 7\n14 11\n7 4\n14 4\n11 2\n7 15\n13 4\n16 12\n4 17\n11 13\n13 3\n1 3\n6 7\n14 12\n3 12\n14 13\n2 3\n15 9\n15 17\n15 1\n6 11\n15 5\n12 10\n10 6\n5 11\n3 7\n14 15\n14 1\n10 8\n16 11\n8 1\n17 3\n13 5\n11 12\n16 6\n12 5\n11 7\n16 3\n11 3\n17 11\n1 12\n13 6\n2 17\n12 4\n16 15\n7 17\n14 5\n17 6\n3 9\n9 5\n16 7\n3 15\n8 13\n16 2\n13 10\n4 6\n16 9\n13 2\n12 17\n8 16\n10 14\n10 1\n4 3\n13 15\n5 2\n4 8\n16 4\n10 11\n9 17\n5 8\n15 12\n7 10\n17 16\n14 3\n2 9\n8 17\n12 7\n10 16\n2 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 24 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 11 and vertex 10.\n",
    "graph_output": "13 24\n3 8\n13 4\n3 13\n2 6\n7 12\n7 11\n7 2\n11 5\n7 9\n4 5\n11 13\n10 3\n8 11\n9 5\n1 12\n3 5\n3 12\n2 9\n6 9\n1 5\n10 5\n1 6\n8 6\n11 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 9 (source) to vertex 7 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 38 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9 with a weight of 92 and a capacity of 3.\nThere is an edge between vertex 1 and vertex 4 with a weight of 64 and a capacity of 7.\nThere is an edge between vertex 1 and vertex 10 with a weight of 10 and a capacity of 4.\nThere is an edge between vertex 9 and vertex 7 with a weight of 34 and a capacity of 6.\nThere is an edge between vertex 4 and vertex 6 with a weight of 52 and a capacity of 9.\nThere is an edge between vertex 10 and vertex 5 with a weight of 72 and a capacity of 9.\nThere is an edge between vertex 4 and vertex 8 with a weight of 16 and a capacity of 4.\nThere is an edge between vertex 6 and vertex 2 with a weight of 8 and a capacity of 7.\nThere is an edge between vertex 1 and vertex 3 with a weight of 50 and a capacity of 3.\nThere is an edge between vertex 9 and vertex 8 with a weight of 3 and a capacity of 4.\nThere is an edge between vertex 5 and vertex 7 with a weight of 35 and a capacity of 4.\nThere is an edge between vertex 4 and vertex 5 with a weight of 67 and a capacity of 4.\nThere is an edge between vertex 9 and vertex 3 with a weight of 28 and a capacity of 2.\nThere is an edge between vertex 10 and vertex 9 with a weight of 15 and a capacity of 1.\nThere is an edge between vertex 1 and vertex 5 with a weight of 71 and a capacity of 1.\nThere is an edge between vertex 3 and vertex 7 with a weight of 98 and a capacity of 4.\nThere is an edge between vertex 2 and vertex 1 with a weight of 70 and a capacity of 9.\nThere is an edge between vertex 3 and vertex 6 with a weight of 28 and a capacity of 9.\nThere is an edge between vertex 6 and vertex 10 with a weight of 65 and a capacity of 4.\nThere is an edge between vertex 8 and vertex 10 with a weight of 14 and a capacity of 7.\nThere is an edge between vertex 2 and vertex 3 with a weight of 32 and a capacity of 10.\nThere is an edge between vertex 6 and vertex 8 with a weight of 58 and a capacity of 8.\nThere is an edge between vertex 3 and vertex 4 with a weight of 85 and a capacity of 4.\nThere is an edge between vertex 10 and vertex 2 with a weight of 55 and a capacity of 2.\nThere is an edge between vertex 8 and vertex 5 with a weight of 13 and a capacity of 8.\nThere is an edge between vertex 2 and vertex 4 with a weight of 7 and a capacity of 7.\nThere is an edge between vertex 8 and vertex 1 with a weight of 29 and a capacity of 3.\nThere is an edge between vertex 1 and vertex 7 with a weight of 70 and a capacity of 7.\nThere is an edge between vertex 10 and vertex 4 with a weight of 35 and a capacity of 2.\nThere is an edge between vertex 8 and vertex 7 with a weight of 61 and a capacity of 3.\nThere is an edge between vertex 7 and vertex 2 with a weight of 29 and a capacity of 2.\nThere is an edge between vertex 7 and vertex 4 with a weight of 48 and a capacity of 4.\nThere is an edge between vertex 6 and vertex 9 with a weight of 41 and a capacity of 10.\nThere is an edge between vertex 10 and vertex 3 with a weight of 30 and a capacity of 3.\nThere is an edge between vertex 5 and vertex 3 with a weight of 40 and a capacity of 4.\nThere is an edge between vertex 3 and vertex 8 with a weight of 64 and a capacity of 10.\nThere is an edge between vertex 6 and vertex 7 with a weight of 26 and a capacity of 8.\nThere is an edge between vertex 9 and vertex 5 with a weight of 95 and a capacity of 5.\n",
    "graph_output": "10 38\n1 9 92 3\n1 4 64 7\n1 10 10 4\n9 7 34 6\n4 6 52 9\n10 5 72 9\n4 8 16 4\n6 2 8 7\n1 3 50 3\n9 8 3 4\n5 7 35 4\n4 5 67 4\n9 3 28 2\n10 9 15 1\n1 5 71 1\n3 7 98 4\n2 1 70 9\n3 6 28 9\n6 10 65 4\n8 10 14 7\n2 3 32 10\n6 8 58 8\n3 4 85 4\n10 2 55 2\n8 5 13 8\n2 4 7 7\n8 1 29 3\n1 7 70 7\n10 4 35 2\n8 7 61 3\n7 2 29 2\n7 4 48 4\n6 9 41 10\n10 3 30 3\n5 3 40 4\n3 8 64 10\n6 7 26 8\n9 5 95 5\n",
    "vertices": [
      9,
      7
    ],
    "answer": 2658,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 10 (source) to vertex 3 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 11 vertices and 34 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 4 93 8\n1 3 13 5\n3 10 2 4\n1 5 46 4\n1 2 27 6\n3 9 98 10\n3 6 100 8\n6 11 72 7\n9 8 11 2\n10 7 32 3\n11 10 72 1\n9 11 68 10\n10 8 22 9\n8 6 76 8\n2 11 15 4\n8 1 82 4\n1 6 46 5\n9 2 70 1\n8 3 98 1\n3 5 73 8\n2 8 86 9\n4 2 90 6\n9 6 29 2\n10 9 98 5\n10 4 14 9\n6 7 92 3\n7 2 83 4\n5 2 6 2\n6 4 51 2\n7 3 31 2\n10 6 30 1\n5 4 12 2\n7 5 66 3\n4 11 9 5\n",
    "graph_output": "11 34\n1 4 93 8\n1 3 13 5\n3 10 2 4\n1 5 46 4\n1 2 27 6\n3 9 98 10\n3 6 100 8\n6 11 72 7\n9 8 11 2\n10 7 32 3\n11 10 72 1\n9 11 68 10\n10 8 22 9\n8 6 76 8\n2 11 15 4\n8 1 82 4\n1 6 46 5\n9 2 70 1\n8 3 98 1\n3 5 73 8\n2 8 86 9\n4 2 90 6\n9 6 29 2\n10 9 98 5\n10 4 14 9\n6 7 92 3\n7 2 83 4\n5 2 6 2\n6 4 51 2\n7 3 31 2\n10 6 30 1\n5 4 12 2\n7 5 66 3\n4 11 9 5\n",
    "vertices": [
      10,
      3
    ],
    "answer": 4087,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 11 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 2 and vertex 4.\n",
    "graph_output": "6 11\n1 2\n1 6\n6 3\n1 4\n1 5\n6 5\n5 3\n6 4\n3 1\n4 3\n2 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 185,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 6 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6\nVertex 2: 4, 5\nVertex 3: 6, 4\nVertex 4: 6, 2, 3\nVertex 5: 2\nVertex 6: 1, 3, 4\n",
    "graph_output": "6 6\n1 6\n6 3\n6 4\n4 2\n2 5\n4 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 24 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 4 (weight=31), 3 (weight=63), 8 (weight=79), 10 (weight=95)\nVertex 2: 7 (weight=69), 6 (weight=10)\nVertex 3: 1 (weight=63), 7 (weight=66)\nVertex 4: 1 (weight=31), 7 (weight=40), 8 (weight=90)\nVertex 5: 7 (weight=39), 11 (weight=76)\nVertex 6: 13 (weight=45), 11 (weight=97), 2 (weight=10)\nVertex 7: 4 (weight=40), 13 (weight=65), 10 (weight=93), 5 (weight=39), 2 (weight=69), 3 (weight=66)\nVertex 8: 1 (weight=79), 10 (weight=99), 4 (weight=90), 12 (weight=89)\nVertex 9: 13 (weight=39)\nVertex 10: 7 (weight=93), 13 (weight=95), 8 (weight=99), 1 (weight=95), 12 (weight=50)\nVertex 11: 6 (weight=97), 12 (weight=41), 5 (weight=76)\nVertex 12: 11 (weight=41), 10 (weight=50), 15 (weight=61), 8 (weight=89)\nVertex 13: 7 (weight=65), 15 (weight=63), 6 (weight=45), 9 (weight=39), 10 (weight=95)\nVertex 14: 15 (weight=54)\nVertex 15: 13 (weight=63), 14 (weight=54), 12 (weight=61)\n",
    "graph_output": "15 24\n1 4 31\n4 7 40\n7 13 65\n7 10 93\n7 5 39\n13 15 63\n1 3 63\n7 2 69\n13 6 45\n1 8 79\n6 11 97\n15 14 54\n13 9 39\n11 12 41\n13 10 95\n10 8 99\n10 1 95\n12 10 50\n6 2 10\n3 7 66\n5 11 76\n4 8 90\n12 15 61\n12 8 89\n",
    "vertices": [
      null,
      null
    ],
    "answer": 680,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 37 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 8 and vertex 9.\n",
    "graph_output": "11 37\n1 4\n9 10\n3 7\n1 6\n6 7\n1 2\n3 1\n10 6\n11 5\n2 9\n11 8\n10 1\n9 1\n5 6\n2 7\n3 4\n11 10\n5 1\n3 9\n2 4\n2 3\n8 1\n11 1\n2 10\n3 8\n2 6\n9 5\n6 11\n10 4\n4 8\n10 3\n9 4\n9 7\n7 5\n11 9\n4 7\n8 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 50,
    "description_type": "natural"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 14 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4\nVertex 2: 12\nVertex 3: 12\nVertex 4: 6, 1\nVertex 5: 11, 7\nVertex 6: 4, 7\nVertex 7: 10, 6, 5\nVertex 8: 13\nVertex 9: 12, 11, 13, 10\nVertex 10: 11, 7, 9\nVertex 11: 10, 9, 5\nVertex 12: 9, 2, 3\nVertex 13: 8, 9\n",
    "graph_output": "13 14\n13 8\n9 12\n11 10\n10 7\n6 4\n9 11\n9 13\n5 11\n7 6\n1 4\n2 12\n12 3\n7 5\n9 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 3 and vertex 10 are connected.\n\nThis is an undirected graph with 17 vertices and 25 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   1   0   0   0   1   1   1   0   1   0   0   0   0 \n 3 |  0   0   0   0   0   1   0   0   0   0   1   0   1   0   0   1   0 \n 4 |  0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0 \n 5 |  0   1   0   1   0   0   1   0   0   1   0   0   0   0   0   0   0 \n 6 |  0   0   1   0   0   0   1   0   1   0   0   0   1   0   1   0   0 \n 7 |  0   0   0   0   1   1   0   0   0   0   0   1   0   1   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   1   0   1   0   1   0   0   0   1   0   0   0   1   0   0   0 \n10 |  0   1   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0 \n11 |  0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1 \n13 |  0   1   1   0   0   1   0   0   0   0   0   0   0   1   1   0   0 \n14 |  0   0   0   0   0   0   1   0   1   0   0   0   1   0   0   0   1 \n15 |  0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0 \n16 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0 \n",
    "graph_output": "17 25\n7 6\n6 13\n7 14\n17 12\n2 13\n11 2\n3 6\n9 10\n9 6\n10 5\n3 13\n5 4\n14 9\n9 4\n14 17\n14 13\n7 5\n2 5\n2 9\n12 7\n10 2\n11 3\n6 15\n15 13\n3 16\n",
    "vertices": [
      3,
      10
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 24 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 11, 12, 5, 7, 8\nVertex 2: 3, 8\nVertex 3: 6, 2\nVertex 4: 9, 6, 11, 7, 12\nVertex 5: 10, 1, 12\nVertex 6: 3, 4\nVertex 7: 10, 1, 4\nVertex 8: 12, 9, 2, 13, 1\nVertex 9: 4, 13, 8\nVertex 10: 11, 1, 5, 7\nVertex 11: 10, 13, 1, 4, 12\nVertex 12: 8, 1, 5, 11, 4\nVertex 13: 9, 11, 8\n",
    "graph_output": "13 24\n3 6\n9 4\n9 13\n11 10\n10 1\n13 11\n12 8\n8 9\n5 10\n10 7\n11 1\n4 6\n4 11\n1 12\n3 2\n5 1\n2 8\n1 7\n12 5\n4 7\n8 13\n1 8\n11 12\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 9 to vertex 5 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 22 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 12 with a weight of 33.\nThere is an edge between vertex 1 and vertex 14 with a weight of 20.\nThere is an edge between vertex 12 and vertex 8 with a weight of 86.\nThere is an edge between vertex 14 and vertex 9 with a weight of 6.\nThere is an edge between vertex 8 and vertex 5 with a weight of 37.\nThere is an edge between vertex 14 and vertex 7 with a weight of 24.\nThere is an edge between vertex 1 and vertex 6 with a weight of 27.\nThere is an edge between vertex 9 and vertex 2 with a weight of 27.\nThere is an edge between vertex 14 and vertex 3 with a weight of 57.\nThere is an edge between vertex 14 and vertex 4 with a weight of 77.\nThere is an edge between vertex 4 and vertex 10 with a weight of 34.\nThere is an edge between vertex 14 and vertex 11 with a weight of 42.\nThere is an edge between vertex 7 and vertex 13 with a weight of 92.\nThere is an edge between vertex 6 and vertex 10 with a weight of 1.\nThere is an edge between vertex 4 and vertex 5 with a weight of 21.\nThere is an edge between vertex 5 and vertex 7 with a weight of 56.\nThere is an edge between vertex 4 and vertex 2 with a weight of 21.\nThere is an edge between vertex 6 and vertex 4 with a weight of 46.\nThere is an edge between vertex 1 and vertex 5 with a weight of 71.\nThere is an edge between vertex 7 and vertex 1 with a weight of 54.\nThere is an edge between vertex 12 and vertex 7 with a weight of 6.\nThere is an edge between vertex 3 and vertex 11 with a weight of 6.\n",
    "graph_output": "14 22\n1 12 33\n1 14 20\n12 8 86\n14 9 6\n8 5 37\n14 7 24\n1 6 27\n9 2 27\n14 3 57\n14 4 77\n4 10 34\n14 11 42\n7 13 92\n6 10 1\n4 5 21\n5 7 56\n4 2 21\n6 4 46\n1 5 71\n7 1 54\n12 7 6\n3 11 6\n",
    "vertices": [
      9,
      5
    ],
    "answer": 69,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 15 vertices and 24 edges\n\nEdges (Format: Node Node Weight):\n1 4 31\n4 7 40\n7 13 65\n7 10 93\n7 5 39\n13 15 63\n1 3 63\n7 2 69\n13 6 45\n1 8 79\n6 11 97\n15 14 54\n13 9 39\n11 12 41\n13 10 95\n10 8 99\n10 1 95\n12 10 50\n6 2 10\n3 7 66\n5 11 76\n4 8 90\n12 15 61\n12 8 89\n",
    "graph_output": "15 24\n1 4 31\n4 7 40\n7 13 65\n7 10 93\n7 5 39\n13 15 63\n1 3 63\n7 2 69\n13 6 45\n1 8 79\n6 11 97\n15 14 54\n13 9 39\n11 12 41\n13 10 95\n10 8 99\n10 1 95\n12 10 50\n6 2 10\n3 7 66\n5 11 76\n4 8 90\n12 15 61\n12 8 89\n",
    "vertices": [
      null,
      null
    ],
    "answer": 680,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 6 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (6\u00d76):\n\n      1   2   3   4   5   6\n   ------------------------\n 1 |  0   0   1   0   1   0 \n 2 |  0   0   0   1   0   0 \n 3 |  1   0   0   1   1   0 \n 4 |  0   1   1   0   0   1 \n 5 |  1   0   1   0   0   0 \n 6 |  0   0   0   1   0   0 \n",
    "graph_output": "6 6\n4 3\n5 3\n4 6\n5 1\n3 1\n4 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 13 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 10, 4\nVertex 2: No connections\nVertex 3: 9\nVertex 4: 8, 10, 1, 5\nVertex 5: 1, 11, 4\nVertex 6: 8, 9\nVertex 7: 9\nVertex 8: 6, 11, 4, 10\nVertex 9: 7, 6, 3\nVertex 10: 1, 4, 8\nVertex 11: 8, 5\nVertex 12: No connections\n",
    "graph_output": "12 13\n9 7\n5 1\n6 8\n8 11\n4 8\n10 1\n10 4\n4 1\n8 10\n6 9\n3 9\n5 11\n5 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 45 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   1   1   0   1   1   1   0   1   1   0   1 \n 2 |  1   0   1   0   1   1   0   1   1   1   1   1 \n 3 |  1   1   0   0   1   0   0   0   1   1   0   1 \n 4 |  0   0   0   0   0   1   0   1   0   0   1   1 \n 5 |  1   1   1   0   0   1   1   0   1   1   0   1 \n 6 |  1   1   0   1   1   0   0   1   1   1   1   1 \n 7 |  1   0   0   0   1   0   0   1   1   0   1   1 \n 8 |  0   1   0   1   0   1   1   0   1   0   1   0 \n 9 |  1   1   1   0   1   1   1   1   0   1   1   1 \n10 |  1   1   1   0   1   1   0   0   1   0   0   1 \n11 |  0   1   0   1   0   1   1   1   1   0   0   1 \n12 |  1   1   1   1   1   1   1   0   1   1   1   0 \n",
    "graph_output": "12 45\n6 5\n2 12\n8 11\n1 10\n9 2\n11 4\n12 9\n8 6\n9 1\n5 1\n5 9\n12 1\n10 2\n5 7\n5 2\n8 2\n2 3\n12 4\n7 9\n2 11\n5 12\n5 10\n8 4\n7 1\n7 11\n8 9\n10 3\n11 12\n6 1\n6 10\n6 2\n7 8\n10 9\n9 6\n6 11\n12 7\n1 2\n6 4\n6 12\n3 1\n3 5\n3 12\n10 12\n11 9\n3 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 13 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   0   1   1   0   0   0   0   1   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   1   0   0   0 \n 4 |  1   0   0   0   1   0   0   1   0   1   0   0 \n 5 |  1   0   0   1   0   0   0   0   0   0   1   0 \n 6 |  0   0   0   0   0   0   0   1   1   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   1   0   0   0 \n 8 |  0   0   0   1   0   1   0   0   0   1   1   0 \n 9 |  0   0   1   0   0   1   1   0   0   0   0   0 \n10 |  1   0   0   1   0   0   0   1   0   0   0   0 \n11 |  0   0   0   0   1   0   0   1   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "12 13\n9 7\n5 1\n6 8\n8 11\n4 8\n10 1\n10 4\n4 1\n8 10\n6 9\n3 9\n5 11\n5 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 17 and 21 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 30, 11, 4, 10, 17, 7\nVertex 2: 19\nVertex 3: 28\nVertex 4: 1, 8, 26\nVertex 5: 7\nVertex 6: 10, 15, 14, 20, 24\nVertex 7: 1, 18, 5\nVertex 8: 4\nVertex 9: 25, 22\nVertex 10: 1, 6, 13\nVertex 11: 1\nVertex 12: 25\nVertex 13: 10, 27\nVertex 14: 6, 16\nVertex 15: 6\nVertex 16: 14\nVertex 17: 1, 21\nVertex 18: 7\nVertex 19: 29, 31, 2\nVertex 20: 6\nVertex 21: 17\nVertex 22: 9\nVertex 23: 24\nVertex 24: 6, 23\nVertex 25: 30, 28, 9, 12\nVertex 26: 4\nVertex 27: 13\nVertex 28: 25, 3\nVertex 29: 30, 19\nVertex 30: 1, 29, 25\nVertex 31: 19\n",
    "graph_output": "31 30\n1 30\n30 29\n1 11\n1 4\n1 10\n29 19\n30 25\n4 8\n1 17\n25 28\n10 6\n10 13\n4 26\n6 15\n19 31\n1 7\n7 18\n17 21\n6 14\n28 3\n7 5\n6 20\n14 16\n19 2\n25 9\n13 27\n25 12\n6 24\n24 23\n9 22\n",
    "vertices": [
      17,
      21
    ],
    "answer": 17,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 105 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 105\n1 15\n15 8\n8 2\n15 11\n2 5\n2 3\n3 12\n12 9\n2 14\n11 6\n8 13\n8 7\n13 10\n13 4\n12 2\n6 7\n1 4\n4 3\n11 10\n2 1\n14 8\n9 3\n1 7\n5 4\n13 7\n7 5\n14 6\n12 15\n13 9\n7 12\n15 14\n3 6\n14 7\n10 5\n4 14\n14 9\n10 9\n12 13\n9 8\n3 10\n10 14\n7 15\n9 6\n9 11\n6 8\n14 11\n13 14\n13 2\n7 9\n11 3\n6 15\n1 5\n12 4\n15 3\n2 4\n14 1\n5 9\n3 8\n3 13\n4 7\n2 7\n8 4\n5 13\n11 12\n3 5\n6 13\n7 3\n13 11\n12 14\n4 15\n10 7\n10 6\n1 3\n11 2\n8 11\n10 8\n1 9\n15 13\n11 7\n10 4\n11 1\n10 15\n1 8\n2 10\n4 9\n5 15\n6 5\n10 12\n6 4\n6 12\n5 8\n9 15\n2 6\n1 12\n3 14\n13 1\n6 1\n5 14\n10 1\n9 2\n15 2\n5 11\n11 4\n12 8\n5 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 15,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 5 (source) to vertex 3 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 17 edges\n\nEdges (Format: Node Node Capacity):\n1 5 4\n5 6 10\n5 2 4\n6 11 8\n1 7 6\n6 4 3\n7 10 7\n4 8 8\n4 3 2\n5 9 4\n4 1 2\n2 7 1\n7 4 2\n3 10 2\n10 4 1\n2 3 6\n7 11 4\n",
    "graph_output": "11 17\n1 5 4\n5 6 10\n5 2 4\n6 11 8\n1 7 6\n6 4 3\n7 10 7\n4 8 8\n4 3 2\n5 9 4\n4 1 2\n2 7 1\n7 4 2\n3 10 2\n10 4 1\n2 3 6\n7 11 4\n",
    "vertices": [
      5,
      3
    ],
    "answer": 9,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 16 and vertex 1 are connected.\n\nThis is an undirected graph with 16 vertices and 89 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 13, 4, 10, 14, 15, 5, 2, 7, 11\nVertex 2: 16, 12, 11, 10, 8, 1, 15, 9, 4, 5, 3, 14\nVertex 3: 7, 10, 6, 4, 16, 12, 9, 5, 8, 2\nVertex 4: 8, 1, 10, 3, 9, 11, 14, 6, 2, 7, 15, 12\nVertex 5: 6, 7, 8, 16, 1, 9, 10, 3, 13, 2, 12, 11\nVertex 6: 5, 3, 8, 14, 12, 4, 15, 9, 11, 10, 16, 7\nVertex 7: 3, 5, 14, 8, 13, 4, 11, 1, 9, 6\nVertex 8: 1, 4, 16, 5, 6, 2, 7, 12, 11, 3, 9\nVertex 9: 10, 16, 4, 12, 11, 13, 3, 2, 5, 6, 7, 8\nVertex 10: 16, 9, 3, 4, 12, 1, 2, 5, 6, 15, 14\nVertex 11: 14, 13, 2, 4, 9, 12, 6, 7, 8, 1, 5, 16\nVertex 12: 2, 14, 10, 13, 9, 15, 6, 11, 3, 16, 8, 5, 4\nVertex 13: 14, 1, 11, 16, 12, 15, 9, 7, 5\nVertex 14: 16, 13, 11, 12, 1, 6, 4, 15, 7, 10, 2\nVertex 15: 1, 14, 12, 13, 2, 6, 10, 4, 16\nVertex 16: 10, 14, 2, 8, 9, 13, 5, 3, 12, 6, 15, 11\n",
    "graph_output": "16 89\n8 1\n16 10\n14 16\n3 7\n14 13\n4 8\n11 14\n10 9\n2 16\n5 6\n3 10\n13 1\n13 11\n8 16\n12 2\n11 2\n3 6\n9 16\n4 1\n4 10\n14 12\n5 7\n12 10\n1 10\n16 13\n13 12\n3 4\n8 5\n1 14\n1 15\n4 9\n10 2\n9 12\n6 8\n11 4\n5 16\n6 14\n14 4\n15 14\n12 15\n13 15\n16 3\n9 11\n1 5\n6 12\n7 14\n8 2\n2 1\n12 11\n13 9\n3 12\n7 8\n3 9\n2 15\n16 12\n7 13\n6 4\n2 9\n6 15\n4 2\n7 4\n5 9\n8 12\n9 6\n11 6\n11 7\n10 5\n8 11\n10 6\n15 10\n15 4\n7 1\n14 10\n7 9\n3 5\n13 5\n8 3\n5 2\n12 5\n16 6\n11 1\n11 5\n9 8\n16 15\n4 12\n3 2\n11 16\n2 14\n7 6\n",
    "vertices": [
      16,
      1
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 15 vertices and 25 edges\n\nEdges (Format: Node Node):\n1 5\n1 2\n1 8\n1 13\n2 10\n2 6\n13 15\n10 9\n6 7\n2 14\n14 3\n3 12\n14 4\n7 11\n13 6\n1 3\n13 10\n7 15\n5 8\n9 4\n6 9\n1 11\n6 1\n3 9\n4 7\n",
    "graph_output": "15 25\n1 5\n1 2\n1 8\n1 13\n2 10\n2 6\n13 15\n10 9\n6 7\n2 14\n14 3\n3 12\n14 4\n7 11\n13 6\n1 3\n13 10\n7 15\n5 8\n9 4\n6 9\n1 11\n6 1\n3 9\n4 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 11 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 104 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 3 (weight=41), 15 (weight=89), 6 (weight=96), 4 (weight=38), 7 (weight=91), 9 (weight=92), 2 (weight=51), 14 (weight=62), 5 (weight=27), 11 (weight=33), 10 (weight=62), 8 (weight=61)\nVertex 2: 4 (weight=42), 16 (weight=22), 5 (weight=44), 12 (weight=2), 1 (weight=51), 7 (weight=78), 10 (weight=87), 6 (weight=67), 8 (weight=91), 11 (weight=68), 9 (weight=5), 3 (weight=57), 15 (weight=44)\nVertex 3: 1 (weight=41), 10 (weight=20), 13 (weight=91), 12 (weight=79), 7 (weight=14), 5 (weight=62), 15 (weight=56), 14 (weight=91), 4 (weight=8), 9 (weight=17), 16 (weight=10), 11 (weight=51), 2 (weight=57), 8 (weight=61)\nVertex 4: 6 (weight=92), 8 (weight=54), 2 (weight=42), 1 (weight=38), 10 (weight=37), 3 (weight=8), 13 (weight=75), 15 (weight=76), 14 (weight=21), 16 (weight=45), 9 (weight=62), 12 (weight=26), 7 (weight=2), 11 (weight=75)\nVertex 5: 10 (weight=73), 11 (weight=98), 3 (weight=62), 2 (weight=44), 9 (weight=24), 1 (weight=27), 15 (weight=73), 7 (weight=36), 12 (weight=28), 14 (weight=32), 6 (weight=57), 16 (weight=11)\nVertex 6: 1 (weight=96), 4 (weight=92), 9 (weight=73), 14 (weight=99), 12 (weight=48), 11 (weight=48), 2 (weight=67), 7 (weight=98), 16 (weight=48), 10 (weight=62), 13 (weight=50), 5 (weight=57)\nVertex 7: 10 (weight=22), 3 (weight=14), 1 (weight=91), 14 (weight=37), 2 (weight=78), 15 (weight=41), 12 (weight=29), 9 (weight=48), 11 (weight=21), 8 (weight=47), 5 (weight=36), 6 (weight=98), 13 (weight=37), 4 (weight=2)\nVertex 8: 4 (weight=54), 11 (weight=78), 7 (weight=47), 2 (weight=91), 15 (weight=25), 12 (weight=79), 1 (weight=61), 10 (weight=39), 14 (weight=56), 13 (weight=84), 3 (weight=61)\nVertex 9: 13 (weight=28), 11 (weight=8), 6 (weight=73), 1 (weight=92), 5 (weight=24), 7 (weight=48), 10 (weight=5), 16 (weight=86), 15 (weight=73), 2 (weight=5), 12 (weight=58), 3 (weight=17), 4 (weight=62), 14 (weight=3)\nVertex 10: 3 (weight=20), 5 (weight=73), 7 (weight=22), 16 (weight=1), 15 (weight=86), 4 (weight=37), 11 (weight=92), 2 (weight=87), 9 (weight=5), 1 (weight=62), 6 (weight=62), 8 (weight=39), 13 (weight=24), 12 (weight=16)\nVertex 11: 5 (weight=98), 15 (weight=16), 8 (weight=78), 9 (weight=8), 14 (weight=44), 12 (weight=20), 13 (weight=18), 10 (weight=92), 6 (weight=48), 1 (weight=33), 7 (weight=21), 2 (weight=68), 3 (weight=51), 4 (weight=75), 16 (weight=66)\nVertex 12: 3 (weight=79), 13 (weight=56), 11 (weight=20), 2 (weight=2), 6 (weight=48), 7 (weight=29), 14 (weight=90), 16 (weight=26), 8 (weight=79), 9 (weight=58), 5 (weight=28), 15 (weight=13), 4 (weight=26), 10 (weight=16)\nVertex 13: 3 (weight=91), 9 (weight=28), 12 (weight=56), 11 (weight=18), 14 (weight=34), 4 (weight=75), 7 (weight=37), 16 (weight=20), 6 (weight=50), 10 (weight=24), 15 (weight=23), 8 (weight=84)\nVertex 14: 15 (weight=51), 11 (weight=44), 7 (weight=37), 1 (weight=62), 6 (weight=99), 13 (weight=34), 3 (weight=91), 12 (weight=90), 5 (weight=32), 4 (weight=21), 9 (weight=3), 8 (weight=56), 16 (weight=38)\nVertex 15: 1 (weight=89), 14 (weight=51), 11 (weight=16), 10 (weight=86), 3 (weight=56), 7 (weight=41), 5 (weight=73), 8 (weight=25), 9 (weight=73), 4 (weight=76), 12 (weight=13), 13 (weight=23), 2 (weight=44)\nVertex 16: 10 (weight=1), 2 (weight=22), 9 (weight=86), 12 (weight=26), 6 (weight=48), 13 (weight=20), 4 (weight=45), 3 (weight=10), 5 (weight=11), 14 (weight=38), 11 (weight=66)\n",
    "graph_output": "16 104\n1 3 41\n3 10 20\n3 13 91\n1 15 89\n1 6 96\n6 4 92\n10 5 73\n10 7 22\n4 8 54\n4 2 42\n10 16 1\n5 11 98\n3 12 79\n13 9 28\n15 14 51\n1 4 38\n11 15 16\n3 7 14\n2 16 22\n12 13 56\n11 8 78\n11 9 8\n9 6 73\n5 3 62\n14 11 44\n2 5 44\n15 10 86\n7 1 91\n10 4 37\n12 11 20\n9 1 92\n11 13 18\n3 15 56\n5 9 24\n14 7 37\n12 2 2\n1 2 51\n14 1 62\n2 7 78\n6 14 99\n11 10 92\n1 5 27\n2 10 87\n6 12 48\n13 14 34\n7 15 41\n3 14 91\n7 12 29\n11 6 48\n2 6 67\n3 4 8\n7 9 48\n9 10 5\n1 11 33\n11 7 21\n9 16 86\n15 5 73\n7 8 47\n8 2 91\n5 7 36\n15 8 25\n14 12 90\n16 12 26\n1 10 62\n9 15 73\n11 2 68\n12 8 79\n4 13 75\n7 6 98\n9 2 5\n8 1 61\n15 4 76\n16 6 48\n6 10 62\n9 12 58\n13 7 37\n12 5 28\n14 5 32\n13 16 20\n15 12 13\n10 8 39\n14 4 21\n9 3 17\n16 4 45\n13 6 50\n4 9 62\n16 3 10\n11 3 51\n5 6 57\n13 10 24\n12 4 26\n12 10 16\n13 15 23\n14 9 3\n8 14 56\n5 16 11\n8 13 84\n4 7 2\n2 3 57\n14 16 38\n11 4 75\n15 2 44\n11 16 66\n8 3 61\n",
    "vertices": [
      4,
      11
    ],
    "answer": 23,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 1 to vertex 8 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 100 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 14 (weight=90), 11 (weight=57), 13 (weight=100), 6 (weight=50), 7 (weight=20), 4 (weight=18), 15 (weight=93), 8 (weight=12), 9 (weight=30), 12 (weight=48), 2 (weight=94), 3 (weight=98), 5 (weight=18)\nVertex 2: 14 (weight=61), 13 (weight=52), 9 (weight=10), 4 (weight=70), 12 (weight=33), 3 (weight=32), 11 (weight=25), 6 (weight=87), 15 (weight=32), 10 (weight=88), 1 (weight=94), 7 (weight=87), 8 (weight=72), 5 (weight=24)\nVertex 3: 11 (weight=3), 14 (weight=75), 9 (weight=15), 4 (weight=74), 10 (weight=11), 15 (weight=13), 2 (weight=32), 12 (weight=30), 13 (weight=2), 6 (weight=85), 1 (weight=98), 7 (weight=38), 5 (weight=42)\nVertex 4: 12 (weight=75), 6 (weight=36), 5 (weight=1), 3 (weight=74), 14 (weight=31), 1 (weight=18), 2 (weight=70), 9 (weight=47), 8 (weight=79), 11 (weight=29), 7 (weight=81), 13 (weight=11), 10 (weight=71), 15 (weight=39)\nVertex 5: 6 (weight=35), 15 (weight=81), 4 (weight=1), 14 (weight=99), 10 (weight=56), 8 (weight=61), 13 (weight=23), 11 (weight=32), 1 (weight=18), 9 (weight=90), 7 (weight=50), 3 (weight=42), 12 (weight=7), 2 (weight=24)\nVertex 6: 4 (weight=36), 9 (weight=34), 5 (weight=35), 14 (weight=27), 1 (weight=50), 13 (weight=99), 15 (weight=76), 12 (weight=85), 11 (weight=48), 3 (weight=85), 2 (weight=87), 7 (weight=77), 10 (weight=52)\nVertex 7: 10 (weight=35), 12 (weight=17), 11 (weight=55), 15 (weight=35), 1 (weight=20), 14 (weight=48), 9 (weight=48), 4 (weight=81), 8 (weight=43), 2 (weight=87), 13 (weight=94), 3 (weight=38), 6 (weight=77), 5 (weight=50)\nVertex 8: 15 (weight=98), 5 (weight=61), 4 (weight=79), 9 (weight=36), 13 (weight=19), 1 (weight=12), 7 (weight=43), 10 (weight=58), 12 (weight=3), 2 (weight=72), 14 (weight=82), 11 (weight=88)\nVertex 9: 6 (weight=34), 3 (weight=15), 2 (weight=10), 4 (weight=47), 7 (weight=48), 12 (weight=93), 8 (weight=36), 1 (weight=30), 11 (weight=44), 10 (weight=58), 5 (weight=90), 14 (weight=54), 13 (weight=80)\nVertex 10: 14 (weight=47), 12 (weight=4), 7 (weight=35), 5 (weight=56), 3 (weight=11), 15 (weight=57), 2 (weight=88), 13 (weight=3), 11 (weight=51), 8 (weight=58), 4 (weight=71), 9 (weight=58), 6 (weight=52)\nVertex 11: 1 (weight=57), 15 (weight=59), 13 (weight=17), 3 (weight=3), 7 (weight=55), 6 (weight=48), 14 (weight=13), 4 (weight=29), 2 (weight=25), 5 (weight=32), 10 (weight=51), 9 (weight=44), 12 (weight=7), 8 (weight=88)\nVertex 12: 10 (weight=4), 4 (weight=75), 7 (weight=17), 14 (weight=66), 6 (weight=85), 2 (weight=33), 3 (weight=30), 9 (weight=93), 15 (weight=50), 1 (weight=48), 13 (weight=53), 8 (weight=3), 11 (weight=7), 5 (weight=7)\nVertex 13: 11 (weight=17), 1 (weight=100), 6 (weight=99), 2 (weight=52), 5 (weight=23), 3 (weight=2), 8 (weight=19), 12 (weight=53), 4 (weight=11), 10 (weight=3), 7 (weight=94), 15 (weight=36), 9 (weight=80)\nVertex 14: 1 (weight=90), 10 (weight=47), 2 (weight=61), 6 (weight=27), 3 (weight=75), 12 (weight=66), 4 (weight=31), 5 (weight=99), 7 (weight=48), 11 (weight=13), 15 (weight=68), 9 (weight=54), 8 (weight=82)\nVertex 15: 11 (weight=59), 8 (weight=98), 5 (weight=81), 7 (weight=35), 6 (weight=76), 1 (weight=93), 10 (weight=57), 3 (weight=13), 12 (weight=50), 2 (weight=32), 13 (weight=36), 14 (weight=68), 4 (weight=39)\n",
    "graph_output": "15 100\n1 14 90\n14 10 47\n1 11 57\n14 2 61\n11 15 59\n10 12 4\n12 4 75\n4 6 36\n6 9 34\n15 8 98\n11 13 17\n6 5 35\n11 3 3\n10 7 35\n14 6 27\n7 12 17\n13 1 100\n5 15 81\n14 3 75\n9 3 15\n6 1 50\n11 7 55\n15 7 35\n14 12 66\n4 5 1\n13 6 99\n13 2 52\n4 3 74\n1 7 20\n14 4 31\n2 9 10\n4 1 18\n2 4 70\n5 14 99\n15 6 76\n7 14 48\n10 5 56\n9 4 47\n5 8 61\n12 6 85\n10 3 11\n1 15 93\n10 15 57\n15 3 13\n11 6 48\n14 11 13\n5 13 23\n12 2 33\n8 4 79\n7 9 48\n3 2 32\n4 11 29\n12 3 30\n9 12 93\n9 8 36\n3 13 2\n3 6 85\n11 2 25\n13 8 19\n15 12 50\n1 8 12\n9 1 30\n7 4 81\n1 12 48\n2 6 87\n13 12 53\n11 5 32\n2 15 32\n7 8 43\n10 2 88\n13 4 11\n10 13 3\n11 10 51\n2 1 94\n2 7 87\n7 13 94\n8 10 58\n3 1 98\n8 12 3\n10 4 71\n7 3 38\n7 6 77\n9 11 44\n5 1 18\n11 12 7\n9 10 58\n5 9 90\n7 5 50\n13 15 36\n15 14 68\n5 3 42\n10 6 52\n9 14 54\n13 9 80\n12 5 7\n15 4 39\n2 8 72\n14 8 82\n5 2 24\n11 8 88\n",
    "vertices": [
      1,
      8
    ],
    "answer": 12,
    "description_type": "list"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 15 and 8 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 19, 18, 28\nVertex 2: 19, 3\nVertex 3: 2, 25, 6, 20, 13\nVertex 4: 10\nVertex 5: 17\nVertex 6: 3\nVertex 7: 18, 11\nVertex 8: 17, 15\nVertex 9: 25\nVertex 10: 19, 4\nVertex 11: 7\nVertex 12: 24, 26\nVertex 13: 3\nVertex 14: 27\nVertex 15: 8\nVertex 16: 19, 17\nVertex 17: 16, 8, 5\nVertex 18: 1, 7\nVertex 19: 1, 27, 2, 16, 10\nVertex 20: 3\nVertex 21: 27, 29\nVertex 22: 26\nVertex 23: 29\nVertex 24: 25, 12\nVertex 25: 3, 9, 24\nVertex 26: 12, 22\nVertex 27: 19, 21, 14\nVertex 28: 1\nVertex 29: 21, 23\n",
    "graph_output": "29 28\n1 19\n19 27\n19 2\n27 21\n19 16\n21 29\n1 18\n2 3\n29 23\n27 14\n3 25\n25 9\n3 6\n18 7\n25 24\n16 17\n19 10\n17 8\n1 28\n17 5\n8 15\n24 12\n12 26\n7 11\n3 20\n3 13\n10 4\n26 22\n",
    "vertices": [
      15,
      8
    ],
    "answer": 8,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 21 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 2 and vertex 5.\n",
    "graph_output": "12 21\n12 10\n6 1\n1 12\n9 8\n1 7\n7 10\n11 12\n3 8\n2 12\n2 7\n4 3\n2 3\n12 6\n1 5\n3 9\n9 12\n2 9\n4 8\n9 7\n10 2\n2 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 8 (source) to vertex 2 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 9 vertices and 36 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 9 47 1\n1 6 99 8\n9 2 93 7\n6 8 82 2\n9 7 54 8\n9 5 47 5\n7 3 85 6\n6 4 8 6\n6 5 63 7\n8 9 70 5\n2 5 47 4\n2 1 22 10\n2 8 78 7\n7 1 23 7\n7 5 11 4\n5 4 21 1\n5 8 86 3\n3 9 80 7\n6 3 18 1\n6 2 3 8\n2 7 37 8\n4 7 66 8\n3 4 73 10\n3 1 67 8\n3 2 100 7\n5 1 80 5\n8 7 9 5\n5 3 99 4\n1 4 84 3\n8 4 26 8\n3 8 23 3\n8 1 62 3\n6 7 74 1\n4 9 91 2\n2 4 61 6\n9 6 51 4\n",
    "graph_output": "9 36\n1 9 47 1\n1 6 99 8\n9 2 93 7\n6 8 82 2\n9 7 54 8\n9 5 47 5\n7 3 85 6\n6 4 8 6\n6 5 63 7\n8 9 70 5\n2 5 47 4\n2 1 22 10\n2 8 78 7\n7 1 23 7\n7 5 11 4\n5 4 21 1\n5 8 86 3\n3 9 80 7\n6 3 18 1\n6 2 3 8\n2 7 37 8\n4 7 66 8\n3 4 73 10\n3 1 67 8\n3 2 100 7\n5 1 80 5\n8 7 9 5\n5 3 99 4\n1 4 84 3\n8 4 26 8\n3 8 23 3\n8 1 62 3\n6 7 74 1\n4 9 91 2\n2 4 61 6\n9 6 51 4\n",
    "vertices": [
      8,
      2
    ],
    "answer": 3096,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 15 and vertex 13 are connected.\n\nThis is an undirected graph with 15 vertices and 98 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 13, 14, 10, 7, 4, 8, 5, 15, 2, 12, 11, 6\nVertex 2: 4, 15, 10, 9, 8, 5, 1, 12, 14, 7, 3, 6, 13\nVertex 3: 11, 13, 4, 14, 10, 5, 9, 12, 15, 7, 8, 2, 6\nVertex 4: 10, 8, 3, 2, 7, 1, 12, 6, 11, 14, 15, 5, 13\nVertex 5: 12, 15, 3, 8, 14, 1, 9, 2, 6, 7, 4, 11, 10\nVertex 6: 10, 12, 13, 9, 4, 5, 14, 1, 2, 15, 3\nVertex 7: 15, 8, 4, 1, 9, 11, 3, 12, 14, 5, 10, 2, 13\nVertex 8: 12, 4, 10, 7, 14, 13, 5, 1, 2, 15, 3, 11, 9\nVertex 9: 1, 13, 11, 3, 7, 10, 2, 6, 5, 14, 12, 15, 8\nVertex 10: 4, 14, 8, 3, 1, 6, 15, 2, 9, 11, 12, 7, 13, 5\nVertex 11: 3, 12, 9, 7, 10, 15, 14, 4, 1, 13, 8, 5\nVertex 12: 8, 5, 11, 3, 4, 6, 14, 15, 7, 10, 2, 1, 13, 9\nVertex 13: 3, 1, 8, 9, 6, 14, 15, 12, 11, 10, 4, 2, 7\nVertex 14: 10, 8, 3, 1, 5, 15, 12, 13, 11, 7, 2, 6, 9, 4\nVertex 15: 7, 5, 2, 10, 3, 1, 14, 12, 11, 8, 13, 4, 9, 6\n",
    "graph_output": "15 98\n9 1\n11 3\n10 4\n8 12\n7 15\n13 3\n8 4\n14 10\n4 3\n5 12\n8 10\n4 2\n5 15\n8 7\n11 12\n1 13\n8 14\n3 14\n13 8\n15 2\n10 3\n3 5\n9 13\n1 14\n10 1\n7 4\n9 11\n1 7\n5 8\n10 6\n4 1\n9 3\n12 3\n10 15\n5 14\n9 7\n4 12\n6 12\n13 6\n1 8\n5 1\n2 10\n10 9\n9 2\n9 6\n11 7\n2 8\n3 15\n15 1\n10 11\n6 4\n15 14\n14 12\n13 14\n12 15\n11 15\n9 5\n11 14\n4 11\n7 3\n2 5\n7 12\n10 12\n6 5\n2 1\n7 14\n8 15\n12 2\n3 8\n2 14\n1 12\n15 13\n12 13\n14 6\n14 9\n1 11\n5 7\n4 14\n7 10\n15 4\n9 12\n11 13\n9 15\n7 2\n5 4\n3 2\n11 8\n10 13\n1 6\n2 6\n15 6\n13 4\n11 5\n13 2\n6 3\n13 7\n9 8\n5 10\n",
    "vertices": [
      15,
      13
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 107 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 16, 9, 5, 4, 3, 14, 13, 12, 7, 15, 10, 2, 11\nVertex 2: 12, 5, 4, 6, 7, 13, 11, 10, 15, 9, 3, 1, 8, 14\nVertex 3: 1, 12, 16, 14, 13, 7, 9, 2, 8, 5, 11, 4, 6, 15\nVertex 4: 13, 1, 15, 2, 16, 12, 6, 7, 14, 5, 10, 9, 3, 8\nVertex 5: 1, 2, 16, 7, 11, 9, 13, 10, 4, 6, 15, 14, 8, 3\nVertex 6: 11, 16, 14, 2, 15, 7, 8, 4, 9, 5, 13, 12, 3\nVertex 7: 9, 14, 6, 5, 2, 1, 16, 8, 4, 3, 12, 13, 11, 10, 15\nVertex 8: 14, 13, 6, 7, 11, 3, 5, 2, 15, 4, 10\nVertex 9: 14, 1, 7, 10, 12, 15, 5, 6, 2, 3, 16, 4, 13, 11\nVertex 10: 13, 9, 11, 12, 15, 2, 5, 1, 16, 4, 7, 14, 8\nVertex 11: 6, 10, 12, 2, 5, 15, 7, 8, 13, 3, 1, 14, 9\nVertex 12: 2, 9, 3, 11, 1, 4, 10, 16, 7, 13, 6, 14\nVertex 13: 10, 4, 1, 8, 2, 3, 5, 15, 7, 16, 6, 9, 12, 11, 14\nVertex 14: 9, 8, 7, 6, 1, 3, 4, 16, 5, 2, 12, 13, 10, 11\nVertex 15: 4, 6, 10, 9, 1, 16, 2, 13, 11, 5, 8, 7, 3\nVertex 16: 1, 6, 5, 3, 4, 7, 15, 12, 10, 9, 13, 14\n",
    "graph_output": "16 107\n9 14\n16 1\n12 2\n9 1\n8 14\n10 13\n13 4\n6 11\n5 1\n9 7\n5 2\n1 4\n3 1\n4 15\n7 14\n4 2\n10 9\n6 16\n6 14\n6 2\n12 9\n16 5\n3 12\n16 3\n1 14\n15 6\n6 7\n11 10\n7 5\n4 16\n1 13\n12 11\n12 1\n8 13\n7 2\n8 6\n4 12\n13 2\n1 7\n14 3\n11 2\n5 11\n12 10\n16 7\n10 15\n2 10\n8 7\n4 6\n15 9\n1 15\n13 3\n4 7\n5 9\n6 9\n16 15\n13 5\n3 7\n15 2\n5 10\n14 4\n16 12\n12 7\n9 2\n13 15\n4 5\n10 1\n16 10\n3 9\n11 15\n3 2\n9 16\n7 13\n5 6\n15 5\n11 7\n8 11\n10 4\n7 10\n3 8\n16 13\n16 14\n9 4\n13 6\n14 5\n13 9\n1 2\n13 12\n5 8\n3 5\n2 8\n13 11\n6 12\n14 2\n11 3\n12 14\n8 15\n3 4\n11 1\n8 4\n15 7\n14 13\n6 3\n3 15\n14 10\n11 14\n8 10\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 105 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 105\n1 8\n1 7\n7 6\n1 11\n7 13\n13 3\n13 5\n7 12\n7 15\n5 9\n5 14\n15 2\n1 4\n13 10\n8 3\n15 12\n1 13\n14 1\n3 15\n9 13\n2 1\n14 8\n2 14\n7 11\n12 14\n5 3\n4 9\n10 7\n7 2\n2 4\n11 9\n14 7\n14 6\n12 4\n7 4\n8 15\n11 10\n4 10\n2 13\n2 12\n8 12\n12 5\n2 6\n1 10\n12 6\n10 15\n7 9\n5 11\n15 4\n2 10\n10 6\n6 8\n9 2\n1 5\n13 8\n11 14\n6 15\n11 15\n6 13\n6 4\n7 3\n9 14\n15 1\n8 9\n13 15\n2 5\n10 9\n6 5\n6 1\n11 12\n2 11\n3 6\n12 3\n11 8\n3 10\n5 15\n13 12\n3 4\n3 2\n1 3\n8 2\n3 11\n9 3\n14 4\n10 14\n11 4\n12 10\n7 8\n5 7\n1 9\n14 3\n1 12\n15 9\n12 9\n5 8\n4 5\n13 11\n13 14\n8 10\n4 8\n15 14\n9 6\n6 11\n10 5\n13 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 15,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 88 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   0   1   1   1   0   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   0   1   0   0   1   1   1   1   0   1   1   1   1   1 \n 5 |  0   1   1   0   0   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   0   0   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   0   1   1   1   1   1   0   1 \n 8 |  1   0   1   1   1   1   0   0   1   1   1   1   1   0   1 \n 9 |  1   1   1   1   1   0   1   1   0   1   0   1   1   0   0 \n10 |  1   1   1   0   1   0   1   1   1   0   1   1   1   0   0 \n11 |  1   1   1   1   1   1   1   1   0   1   0   1   0   1   0 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   0   1   0   1   1 \n14 |  1   1   1   1   1   1   0   0   0   0   1   1   1   0   1 \n15 |  1   1   1   1   1   1   1   1   0   0   0   1   1   1   0 \n",
    "graph_output": "15 88\n1 14\n1 11\n14 4\n1 15\n4 9\n9 3\n3 6\n9 7\n9 8\n1 12\n15 5\n7 10\n10 13\n10 2\n13 15\n4 3\n8 5\n2 12\n7 12\n5 13\n4 7\n4 13\n10 5\n2 13\n7 13\n15 8\n3 13\n6 4\n4 8\n13 6\n12 8\n8 1\n13 8\n15 7\n4 12\n12 14\n6 7\n3 7\n5 6\n11 7\n12 5\n2 1\n14 6\n3 11\n4 11\n12 10\n5 11\n11 2\n1 3\n2 15\n1 7\n14 5\n11 6\n1 13\n10 3\n10 11\n6 15\n2 6\n2 3\n8 10\n4 1\n7 5\n3 14\n7 2\n9 5\n9 12\n3 15\n14 11\n13 12\n11 12\n15 12\n4 15\n2 14\n14 15\n6 1\n10 9\n5 2\n8 11\n12 3\n12 6\n13 9\n8 6\n14 13\n9 1\n3 8\n2 9\n1 10\n5 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 17 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 6, 12, 3\nVertex 2: 14, 10\nVertex 3: 1, 16, 15\nVertex 4: 6\nVertex 5: 7\nVertex 6: 1, 14, 4\nVertex 7: 1, 9, 5\nVertex 8: 15\nVertex 9: 7\nVertex 10: 12, 2\nVertex 11: 15\nVertex 12: 1, 10\nVertex 13: 16, 14\nVertex 14: 6, 2, 13\nVertex 15: 3, 11, 8\nVertex 16: 3, 13\n",
    "graph_output": "16 17\n1 7\n7 9\n1 6\n1 12\n1 3\n3 16\n3 15\n6 14\n16 13\n15 11\n15 8\n6 4\n7 5\n12 10\n14 2\n10 2\n13 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 29 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 6\n6 15\n1 9\n9 23\n6 20\n9 8\n15 2\n9 12\n6 18\n23 14\n23 5\n9 29\n29 7\n5 19\n8 4\n12 21\n12 16\n5 3\n20 28\n12 13\n15 25\n13 24\n29 11\n29 27\n3 22\n16 17\n11 10\n22 26\n",
    "graph_output": "29 28\n1 6\n6 15\n1 9\n9 23\n6 20\n9 8\n15 2\n9 12\n6 18\n23 14\n23 5\n9 29\n29 7\n5 19\n8 4\n12 21\n12 16\n5 3\n20 28\n12 13\n15 25\n13 24\n29 11\n29 27\n3 22\n16 17\n11 10\n22 26\n",
    "vertices": [
      null,
      null
    ],
    "answer": 16,
    "description_type": "structured"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 12 vertices and 45 edges\n\nEdges (Format: Node Node):\n6 5\n2 12\n8 11\n1 10\n9 2\n11 4\n12 9\n8 6\n9 1\n5 1\n5 9\n12 1\n10 2\n5 7\n5 2\n8 2\n2 3\n12 4\n7 9\n2 11\n5 12\n5 10\n8 4\n7 1\n7 11\n8 9\n10 3\n11 12\n6 1\n6 10\n6 2\n7 8\n10 9\n9 6\n6 11\n12 7\n1 2\n6 4\n6 12\n3 1\n3 5\n3 12\n10 12\n11 9\n3 9\n",
    "graph_output": "12 45\n6 5\n2 12\n8 11\n1 10\n9 2\n11 4\n12 9\n8 6\n9 1\n5 1\n5 9\n12 1\n10 2\n5 7\n5 2\n8 2\n2 3\n12 4\n7 9\n2 11\n5 12\n5 10\n8 4\n7 1\n7 11\n8 9\n10 3\n11 12\n6 1\n6 10\n6 2\n7 8\n10 9\n9 6\n6 11\n12 7\n1 2\n6 4\n6 12\n3 1\n3 5\n3 12\n10 12\n11 9\n3 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 37 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   1   1   1   0   1   1   1   1 \n 2 |  1   0   1   1   0   1   1   0   1   1   0 \n 3 |  1   1   0   1   0   0   1   1   1   1   0 \n 4 |  1   1   1   0   0   0   1   1   1   1   0 \n 5 |  1   0   0   0   0   1   1   0   1   0   1 \n 6 |  1   1   0   0   1   0   1   0   0   1   1 \n 7 |  0   1   1   1   1   1   0   0   1   0   0 \n 8 |  1   0   1   1   0   0   0   0   1   0   1 \n 9 |  1   1   1   1   1   0   1   1   0   1   1 \n10 |  1   1   1   1   0   1   0   0   1   0   1 \n11 |  1   0   0   0   1   1   0   1   1   1   0 \n",
    "graph_output": "11 37\n1 4\n9 10\n3 7\n1 6\n6 7\n1 2\n3 1\n10 6\n11 5\n2 9\n11 8\n10 1\n9 1\n5 6\n2 7\n3 4\n11 10\n5 1\n3 9\n2 4\n2 3\n8 1\n11 1\n2 10\n3 8\n2 6\n9 5\n6 11\n10 4\n4 8\n10 3\n9 4\n9 7\n7 5\n11 9\n4 7\n8 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 50,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 46 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 3 (weight=5), 12 (weight=22), 8 (weight=52), 11 (weight=46), 9 (weight=1), 7 (weight=52), 6 (weight=46), 10 (weight=76), 4 (weight=68)\nVertex 2: 12 (weight=12), 5 (weight=19), 9 (weight=28), 8 (weight=36), 3 (weight=57), 6 (weight=75), 7 (weight=52)\nVertex 3: 1 (weight=5), 10 (weight=75), 12 (weight=78), 2 (weight=57), 7 (weight=9), 4 (weight=45)\nVertex 4: 10 (weight=64), 12 (weight=32), 6 (weight=24), 9 (weight=30), 8 (weight=91), 5 (weight=58), 7 (weight=49), 3 (weight=45), 1 (weight=68)\nVertex 5: 10 (weight=17), 9 (weight=67), 8 (weight=74), 12 (weight=75), 6 (weight=46), 7 (weight=27), 2 (weight=19), 4 (weight=58)\nVertex 6: 12 (weight=84), 5 (weight=46), 4 (weight=24), 11 (weight=59), 1 (weight=46), 2 (weight=75), 9 (weight=27)\nVertex 7: 12 (weight=87), 9 (weight=19), 10 (weight=37), 5 (weight=27), 8 (weight=57), 11 (weight=78), 3 (weight=9), 4 (weight=49), 1 (weight=52), 2 (weight=52)\nVertex 8: 1 (weight=52), 5 (weight=74), 7 (weight=57), 9 (weight=100), 2 (weight=36), 4 (weight=91), 11 (weight=8)\nVertex 9: 5 (weight=67), 11 (weight=87), 7 (weight=19), 2 (weight=28), 4 (weight=30), 8 (weight=100), 1 (weight=1), 6 (weight=27), 12 (weight=60)\nVertex 10: 3 (weight=75), 5 (weight=17), 4 (weight=64), 7 (weight=37), 1 (weight=76)\nVertex 11: 9 (weight=87), 12 (weight=26), 1 (weight=46), 7 (weight=78), 8 (weight=8), 6 (weight=59)\nVertex 12: 1 (weight=22), 7 (weight=87), 6 (weight=84), 2 (weight=12), 5 (weight=75), 3 (weight=78), 11 (weight=26), 4 (weight=32), 9 (weight=60)\n",
    "graph_output": "12 46\n1 3 5\n3 10 75\n1 12 22\n10 5 17\n10 4 64\n12 7 87\n12 6 84\n5 9 67\n12 2 12\n1 8 52\n9 11 87\n7 9 19\n8 5 74\n7 10 37\n12 5 75\n12 3 78\n5 6 46\n12 11 26\n4 12 32\n7 5 27\n5 2 19\n11 1 46\n8 7 57\n2 9 28\n4 6 24\n4 9 30\n8 9 100\n7 11 78\n8 2 36\n3 2 57\n4 8 91\n3 7 9\n8 11 8\n5 4 58\n1 9 1\n4 7 49\n7 1 52\n11 6 59\n1 6 46\n3 4 45\n2 6 75\n9 6 27\n1 10 76\n12 9 60\n1 4 68\n2 7 52\n",
    "vertices": [
      null,
      null
    ],
    "answer": 173,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 11 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 20 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   1   0   1   0   0   0   0   1 \n 2 |  0   0   0   1   0   1   0   0   0   1   0 \n 3 |  0   0   0   0   0   0   1   1   0   1   1 \n 4 |  1   1   0   0   0   0   0   1   0   0   1 \n 5 |  0   0   0   0   0   0   1   0   1   0   0 \n 6 |  1   1   0   0   0   0   0   0   1   1   1 \n 7 |  0   0   1   0   1   0   0   0   1   0   1 \n 8 |  0   0   1   1   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   1   1   1   0   0   0   0 \n10 |  0   1   1   0   0   1   0   0   0   0   1 \n11 |  1   0   1   1   0   1   1   0   0   1   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   1   0   4   0   0   0   0   1 \n 2 |  0   0   0   9   0   8   0   0   0   3   0 \n 3 |  0   0   0   0   0   0  10   5   0   5   9 \n 4 |  1   9   0   0   0   0   0   9   0   0   7 \n 5 |  0   0   0   0   0   0  10   0   2   0   0 \n 6 |  4   8   0   0   0   0   0   0   9   7   3 \n 7 |  0   0  10   0  10   0   0   0   2   0  10 \n 8 |  0   0   5   9   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   2   9   2   0   0   0   0 \n10 |  0   3   5   0   0   7   0   0   0   0  10 \n11 |  1   0   9   7   0   3  10   0   0  10   0 \n",
    "graph_output": "11 20\n1 4 1\n4 8 9\n1 11 1\n11 6 3\n8 3 5\n11 10 10\n10 2 3\n3 7 10\n7 9 2\n9 5 2\n6 2 8\n2 4 9\n6 1 4\n11 3 9\n11 7 10\n7 5 10\n6 10 7\n9 6 9\n4 11 7\n10 3 5\n",
    "vertices": [
      11,
      6
    ],
    "answer": 24,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 83 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 8 and vertex 11.\n",
    "graph_output": "15 83\n4 15\n5 1\n12 4\n5 12\n10 1\n4 8\n8 14\n7 13\n13 3\n1 4\n8 9\n6 14\n7 9\n14 3\n12 2\n14 15\n8 2\n15 13\n15 10\n11 4\n9 4\n13 10\n15 7\n15 5\n6 4\n6 11\n8 1\n1 7\n3 2\n12 11\n9 3\n14 13\n12 8\n13 4\n15 1\n10 5\n1 13\n11 2\n7 2\n15 2\n4 10\n14 5\n6 7\n13 11\n9 2\n13 6\n14 2\n7 12\n14 7\n1 11\n12 15\n5 4\n11 5\n6 12\n8 10\n8 13\n15 3\n14 1\n1 2\n11 14\n9 1\n11 10\n9 6\n14 12\n4 2\n8 5\n2 13\n12 13\n7 10\n3 1\n1 6\n4 7\n5 2\n10 9\n14 9\n5 13\n10 2\n3 11\n3 7\n12 9\n5 9\n3 4\n8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 23 and 3 in the given tree, with node 1 as the root.\n\nUndirected Graph with 30 vertices and 29 edges\n\nEdges (Format: Node Node):\n1 22\n1 11\n22 17\n22 18\n17 26\n1 29\n18 25\n26 4\n25 28\n22 23\n23 14\n29 3\n14 2\n14 5\n18 19\n19 10\n11 6\n25 16\n16 7\n29 8\n16 21\n8 12\n3 27\n14 20\n1 13\n28 30\n5 24\n27 15\n26 9\n",
    "graph_output": "30 29\n1 22\n1 11\n22 17\n22 18\n17 26\n1 29\n18 25\n26 4\n25 28\n22 23\n23 14\n29 3\n14 2\n14 5\n18 19\n19 10\n11 6\n25 16\n16 7\n29 8\n16 21\n8 12\n3 27\n14 20\n1 13\n28 30\n5 24\n27 15\n26 9\n",
    "vertices": [
      23,
      3
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 12 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 22 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4 with a weight of 7.\nThere is an edge between vertex 4 and vertex 10 with a weight of 80.\nThere is an edge between vertex 4 and vertex 13 with a weight of 17.\nThere is an edge between vertex 4 and vertex 2 with a weight of 35.\nThere is an edge between vertex 1 and vertex 14 with a weight of 8.\nThere is an edge between vertex 2 and vertex 6 with a weight of 28.\nThere is an edge between vertex 4 and vertex 5 with a weight of 45.\nThere is an edge between vertex 10 and vertex 3 with a weight of 43.\nThere is an edge between vertex 14 and vertex 7 with a weight of 20.\nThere is an edge between vertex 4 and vertex 11 with a weight of 21.\nThere is an edge between vertex 4 and vertex 9 with a weight of 17.\nThere is an edge between vertex 10 and vertex 12 with a weight of 6.\nThere is an edge between vertex 10 and vertex 8 with a weight of 15.\nThere is an edge between vertex 12 and vertex 4 with a weight of 41.\nThere is an edge between vertex 10 and vertex 13 with a weight of 74.\nThere is an edge between vertex 8 and vertex 13 with a weight of 69.\nThere is an edge between vertex 1 and vertex 7 with a weight of 50.\nThere is an edge between vertex 6 and vertex 9 with a weight of 21.\nThere is an edge between vertex 9 and vertex 2 with a weight of 2.\nThere is an edge between vertex 6 and vertex 7 with a weight of 78.\nThere is an edge between vertex 1 and vertex 9 with a weight of 3.\nThere is an edge between vertex 6 and vertex 12 with a weight of 73.\n",
    "graph_output": "14 22\n1 4 7\n4 10 80\n4 13 17\n4 2 35\n1 14 8\n2 6 28\n4 5 45\n10 3 43\n14 7 20\n4 11 21\n4 9 17\n10 12 6\n10 8 15\n12 4 41\n10 13 74\n8 13 69\n1 7 50\n6 9 21\n9 2 2\n6 7 78\n1 9 3\n6 12 73\n",
    "vertices": [
      4,
      12
    ],
    "answer": 41,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 6 (source) to vertex 3 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 11 vertices and 45 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 10 38 6\n10 6 3 6\n10 4 47 7\n10 3 71 9\n4 2 16 5\n3 7 9 2\n6 11 97 2\n10 8 35 1\n4 5 82 6\n11 9 64 10\n2 6 16 6\n4 1 85 5\n2 9 46 8\n5 9 98 3\n5 2 81 7\n11 3 89 7\n3 1 40 5\n5 1 94 4\n7 1 28 9\n11 8 70 1\n6 3 95 3\n1 2 21 3\n8 2 84 2\n5 6 80 5\n10 2 59 8\n2 7 15 8\n2 3 69 9\n1 6 14 2\n3 9 22 2\n10 11 9 6\n2 11 20 3\n11 7 26 5\n4 3 96 10\n6 7 94 2\n5 10 20 5\n9 7 67 4\n8 4 87 6\n1 8 100 2\n9 8 40 7\n1 9 86 7\n5 7 21 9\n11 5 27 5\n4 7 65 4\n8 5 13 3\n10 9 31 6\n",
    "graph_output": "11 45\n1 10 38 6\n10 6 3 6\n10 4 47 7\n10 3 71 9\n4 2 16 5\n3 7 9 2\n6 11 97 2\n10 8 35 1\n4 5 82 6\n11 9 64 10\n2 6 16 6\n4 1 85 5\n2 9 46 8\n5 9 98 3\n5 2 81 7\n11 3 89 7\n3 1 40 5\n5 1 94 4\n7 1 28 9\n11 8 70 1\n6 3 95 3\n1 2 21 3\n8 2 84 2\n5 6 80 5\n10 2 59 8\n2 7 15 8\n2 3 69 9\n1 6 14 2\n3 9 22 2\n10 11 9 6\n2 11 20 3\n11 7 26 5\n4 3 96 10\n6 7 94 2\n5 10 20 5\n9 7 67 4\n8 4 87 6\n1 8 100 2\n9 8 40 7\n1 9 86 7\n5 7 21 9\n11 5 27 5\n4 7 65 4\n8 5 13 3\n10 9 31 6\n",
    "vertices": [
      6,
      3
    ],
    "answer": 2714,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 11 (source) to vertex 9 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 47 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 10 (capacity=1), 8 (capacity=3), 6 (capacity=5), 5 (capacity=1), 3 (capacity=4), 9 (capacity=4), 4 (capacity=1), 11 (capacity=10), 2 (capacity=5), 7 (capacity=5)\nVertex 2: 7 (capacity=2), 4 (capacity=10), 11 (capacity=6), 10 (capacity=10), 5 (capacity=2), 1 (capacity=5), 8 (capacity=8)\nVertex 3: 4 (capacity=3), 11 (capacity=1), 1 (capacity=4), 6 (capacity=3), 7 (capacity=5), 10 (capacity=5), 8 (capacity=9), 9 (capacity=6), 5 (capacity=4)\nVertex 4: 8 (capacity=2), 3 (capacity=3), 2 (capacity=10), 1 (capacity=1), 10 (capacity=9), 6 (capacity=2)\nVertex 5: 1 (capacity=1), 2 (capacity=2), 11 (capacity=1), 8 (capacity=7), 6 (capacity=6), 10 (capacity=7), 9 (capacity=2), 7 (capacity=4), 3 (capacity=4)\nVertex 6: 1 (capacity=5), 7 (capacity=1), 3 (capacity=3), 10 (capacity=2), 5 (capacity=6), 9 (capacity=7), 11 (capacity=9), 4 (capacity=2)\nVertex 7: 6 (capacity=1), 2 (capacity=2), 10 (capacity=5), 8 (capacity=7), 11 (capacity=6), 3 (capacity=5), 1 (capacity=5), 9 (capacity=3), 5 (capacity=4)\nVertex 8: 1 (capacity=3), 4 (capacity=2), 7 (capacity=7), 9 (capacity=3), 11 (capacity=8), 5 (capacity=7), 10 (capacity=8), 3 (capacity=9), 2 (capacity=8)\nVertex 9: 11 (capacity=7), 10 (capacity=9), 8 (capacity=3), 1 (capacity=4), 7 (capacity=3), 6 (capacity=7), 5 (capacity=2), 3 (capacity=6)\nVertex 10: 1 (capacity=1), 11 (capacity=3), 7 (capacity=5), 2 (capacity=10), 9 (capacity=9), 3 (capacity=5), 4 (capacity=9), 6 (capacity=2), 8 (capacity=8), 5 (capacity=7)\nVertex 11: 10 (capacity=3), 9 (capacity=7), 2 (capacity=6), 3 (capacity=1), 7 (capacity=6), 5 (capacity=1), 1 (capacity=10), 8 (capacity=8), 6 (capacity=9)\n",
    "graph_output": "11 47\n1 10 1\n10 11 3\n1 8 3\n8 4 2\n4 3 3\n1 6 5\n6 7 1\n7 2 2\n1 5 1\n11 9 7\n4 2 10\n2 11 6\n10 7 5\n10 2 10\n9 10 9\n7 8 7\n11 3 1\n1 3 4\n11 7 6\n5 2 2\n5 11 1\n3 6 3\n3 7 5\n8 9 3\n1 9 4\n3 10 5\n1 4 1\n11 1 10\n11 8 8\n1 2 5\n7 1 5\n9 7 3\n4 10 9\n8 5 7\n6 10 2\n5 6 6\n9 6 7\n10 8 8\n10 5 7\n6 11 9\n9 5 2\n3 8 9\n5 7 4\n9 3 6\n5 3 4\n6 4 2\n2 8 8\n",
    "vertices": [
      11,
      9
    ],
    "answer": 41,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 128 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 7, 5, 12, 15, 8, 14, 11, 17, 16, 9, 13, 10, 2\nVertex 2: 6, 14, 12, 4, 3, 9, 15, 10, 17, 5, 8, 16, 1, 7, 13\nVertex 3: 1, 6, 14, 10, 4, 8, 2, 12, 11, 16, 13, 5, 9, 7, 17, 15\nVertex 4: 9, 3, 12, 11, 7, 2, 15, 13, 6, 5, 10, 8\nVertex 5: 13, 11, 14, 1, 8, 10, 15, 6, 9, 7, 12, 4, 17, 3, 2, 16\nVertex 6: 3, 13, 2, 15, 9, 12, 5, 8, 16, 14, 4, 11, 10, 17, 7\nVertex 7: 1, 14, 13, 17, 12, 4, 16, 5, 10, 11, 15, 9, 8, 3, 6, 2\nVertex 8: 13, 17, 5, 15, 3, 6, 9, 12, 1, 14, 16, 10, 7, 2, 11, 4\nVertex 9: 11, 4, 16, 6, 8, 5, 2, 10, 13, 17, 1, 7, 3, 12, 15, 14\nVertex 10: 13, 3, 5, 11, 17, 9, 2, 7, 8, 6, 4, 12, 1, 15\nVertex 11: 5, 9, 4, 10, 13, 12, 3, 1, 15, 6, 7, 17, 8, 14, 16\nVertex 12: 13, 4, 14, 6, 1, 16, 7, 2, 8, 11, 17, 3, 5, 10, 9, 15\nVertex 13: 6, 5, 10, 17, 15, 12, 16, 8, 7, 11, 4, 9, 1, 3, 14, 2\nVertex 14: 7, 3, 5, 17, 2, 12, 1, 6, 16, 8, 15, 11, 13, 9\nVertex 15: 13, 6, 8, 5, 1, 4, 2, 17, 14, 11, 7, 16, 10, 12, 3, 9\nVertex 16: 13, 9, 12, 6, 17, 7, 14, 8, 3, 1, 15, 2, 11, 5\nVertex 17: 13, 14, 8, 7, 10, 16, 12, 15, 1, 5, 9, 2, 11, 6, 3\n",
    "graph_output": "17 128\n1 3\n3 6\n6 13\n13 5\n1 7\n7 14\n13 10\n5 11\n13 17\n6 2\n11 9\n13 15\n9 4\n13 12\n13 16\n13 8\n14 3\n14 5\n1 5\n3 10\n14 17\n14 2\n8 17\n4 3\n8 5\n7 13\n4 12\n7 17\n6 15\n9 16\n10 5\n12 14\n15 8\n4 11\n11 10\n5 15\n9 6\n6 12\n1 12\n16 12\n12 7\n6 5\n3 8\n7 4\n8 6\n8 9\n2 12\n1 15\n8 12\n11 13\n1 8\n2 4\n6 16\n1 14\n14 6\n17 10\n16 17\n16 7\n2 3\n11 12\n12 17\n9 5\n9 2\n3 12\n16 14\n5 7\n14 8\n4 15\n12 5\n2 15\n9 10\n13 4\n11 3\n1 11\n8 16\n9 13\n10 2\n4 6\n15 17\n15 14\n10 7\n15 11\n6 11\n7 11\n17 1\n10 8\n4 5\n17 5\n3 16\n6 10\n10 4\n7 15\n9 17\n16 1\n1 9\n1 13\n2 17\n11 17\n7 9\n7 8\n3 13\n5 3\n2 5\n10 12\n3 9\n17 6\n16 15\n7 3\n8 2\n1 10\n17 3\n12 9\n8 11\n15 10\n14 11\n12 15\n16 2\n13 14\n3 15\n11 16\n1 2\n15 9\n8 4\n6 7\n2 7\n14 9\n2 13\n5 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 16 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 4 and vertex 5.\n",
    "graph_output": "16 16\n1 9\n9 7\n1 5\n5 2\n9 10\n10 15\n9 8\n1 3\n5 13\n1 14\n8 12\n13 4\n10 11\n4 16\n13 6\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 2 and vertex 17.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 7 and vertex 17.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 1 and vertex 16.\n",
    "graph_output": "17 30\n1 6\n6 14\n14 8\n14 16\n8 9\n14 5\n5 4\n1 7\n6 11\n14 12\n12 13\n1 3\n1 10\n10 2\n13 15\n2 17\n6 16\n7 17\n6 13\n10 4\n10 5\n12 16\n12 6\n16 13\n15 1\n9 15\n6 17\n3 11\n8 12\n1 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 12 vertices and 42 edges\n\nEdges (Format: Node Node):\n6 11\n11 10\n10 8\n10 3\n5 2\n5 3\n9 10\n3 8\n12 2\n10 2\n7 8\n11 2\n3 1\n11 12\n1 6\n3 7\n12 5\n5 1\n11 9\n11 7\n12 4\n12 1\n2 7\n8 4\n5 11\n4 2\n2 1\n7 5\n9 2\n1 8\n3 4\n4 9\n7 10\n2 8\n6 10\n6 8\n5 8\n3 9\n4 6\n3 11\n6 7\n3 12\n",
    "graph_output": "12 42\n6 11\n11 10\n10 8\n10 3\n5 2\n5 3\n9 10\n3 8\n12 2\n10 2\n7 8\n11 2\n3 1\n11 12\n1 6\n3 7\n12 5\n5 1\n11 9\n11 7\n12 4\n12 1\n2 7\n8 4\n5 11\n4 2\n2 1\n7 5\n9 2\n1 8\n3 4\n4 9\n7 10\n2 8\n6 10\n6 8\n5 8\n3 9\n4 6\n3 11\n6 7\n3 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 30 vertices and 29 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 1 and vertex 24.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 10 and vertex 25.\nThere is an edge between vertex 25 and vertex 18.\nThere is an edge between vertex 13 and vertex 21.\nThere is an edge between vertex 21 and vertex 9.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 10 and vertex 20.\nThere is an edge between vertex 24 and vertex 11.\nThere is an edge between vertex 16 and vertex 26.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 20 and vertex 29.\nThere is an edge between vertex 21 and vertex 8.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 25 and vertex 3.\nThere is an edge between vertex 18 and vertex 23.\nThere is an edge between vertex 13 and vertex 27.\nThere is an edge between vertex 24 and vertex 6.\nThere is an edge between vertex 16 and vertex 22.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 15 and vertex 28.\nThere is an edge between vertex 29 and vertex 30.\nThere is an edge between vertex 14 and vertex 19.\nThere is an edge between vertex 8 and vertex 17.\nThere is an edge between vertex 25 and vertex 12.\n",
    "graph_output": "30 29\n1 10\n1 16\n1 24\n1 13\n10 25\n25 18\n13 21\n21 9\n13 2\n10 20\n24 11\n16 26\n13 15\n2 4\n11 14\n20 29\n21 8\n2 5\n25 3\n18 23\n13 27\n24 6\n16 22\n4 7\n15 28\n29 30\n14 19\n8 17\n25 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 85 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (14\u00d714):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14\n   --------------------------------------------------------\n 1 |  0   0  63  70   7  75  92  28   0  12  62  52  47  38 \n 2 |  0   0  21   6  12  79   0  94  83  55  68  28  42  96 \n 3 | 63  21   0  11  90  44  60   3   8  11  76  88  89  23 \n 4 | 70   6  11   0   5  97  30  36   3  30   7  65  45  58 \n 5 |  7  12  90   5   0  22  67  75  18  78  84  49   0  49 \n 6 | 75  79  44  97  22   0  66   4   8   8  39  54  95  97 \n 7 | 92   0  60  30  67  66   0  11  84  23  33  33  23  79 \n 8 | 28  94   3  36  75   4  11   0  22  90  24  56  53  83 \n 9 |  0  83   8   3  18   8  84  22   0   1  84  80  80   0 \n10 | 12  55  11  30  78   8  23  90   1   0  69  20  21   0 \n11 | 62  68  76   7  84  39  33  24  84  69   0  87  34  80 \n12 | 52  28  88  65  49  54  33  56  80  20  87   0  24   2 \n13 | 47  42  89  45   0  95  23  53  80  21  34  24   0  80 \n14 | 38  96  23  58  49  97  79  83   0   0  80   2  80   0 \n",
    "graph_output": "14 85\n1 7 92\n1 3 63\n7 9 84\n9 10 1\n10 2 55\n3 12 88\n12 4 65\n7 5 67\n9 13 80\n9 6 8\n3 14 23\n7 8 11\n10 11 69\n6 10 8\n10 8 90\n5 6 22\n4 9 3\n12 13 24\n11 2 68\n2 14 96\n8 2 94\n14 7 79\n1 13 47\n8 6 4\n3 6 44\n7 6 66\n11 9 84\n5 4 5\n11 3 76\n2 6 79\n6 13 95\n13 14 80\n7 12 33\n4 1 70\n12 10 20\n12 1 52\n14 5 49\n12 14 2\n5 10 78\n8 12 56\n3 9 8\n10 7 23\n3 8 3\n2 4 6\n12 2 28\n7 4 30\n1 11 62\n1 10 12\n13 2 42\n9 2 83\n5 9 18\n4 11 7\n4 3 11\n12 6 54\n5 11 84\n5 3 90\n8 5 75\n8 1 28\n9 12 80\n3 2 21\n13 4 45\n13 8 53\n4 6 97\n10 3 11\n6 14 97\n7 13 23\n12 5 49\n1 5 7\n3 7 60\n8 4 36\n11 14 80\n5 2 12\n14 4 58\n10 13 21\n1 14 38\n13 3 89\n6 11 39\n11 13 34\n9 8 22\n8 14 83\n11 12 87\n7 11 33\n8 11 24\n6 1 75\n10 4 30\n",
    "vertices": [
      null,
      null
    ],
    "answer": 98,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 22 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   0   0  84   0  72   0   0  47   0   0 \n 2 |  0   0   0   0  89   2   3  36   1   0   0   0 \n 3 |  0   0   0  17   0   0   0   0  75   0   0   0 \n 4 |  0   0  17   0  68   0   0   0   0   0   0   0 \n 5 | 84  89   0  68   0   0  60  46   0  35  66   0 \n 6 |  0   2   0   0   0   0   0   0   0  61   0  73 \n 7 | 72   3   0   0  60   0   0   0  72   0  15   0 \n 8 |  0  36   0   0  46   0   0   0   0   0  35  19 \n 9 |  0   1  75   0   0   0  72   0   0   0   0   0 \n10 | 47   0   0   0  35  61   0   0   0   0   0   0 \n11 |  0   0   0   0  66   0  15  35   0   0   0  87 \n12 |  0   0   0   0   0  73   0  19   0   0  87   0 \n",
    "graph_output": "12 22\n1 7 72\n7 2 3\n1 10 47\n7 9 72\n9 3 75\n1 5 84\n5 8 46\n10 6 61\n5 11 66\n5 4 68\n6 12 73\n10 5 35\n2 8 36\n2 6 2\n5 7 60\n2 5 89\n7 11 15\n8 12 19\n9 2 1\n8 11 35\n12 11 87\n3 4 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": 289,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 37 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 6, 2, 3, 10, 9, 5, 8, 11\nVertex 2: 1, 9, 7, 4, 3, 10, 6\nVertex 3: 7, 1, 4, 9, 2, 8, 10\nVertex 4: 1, 3, 2, 10, 8, 9, 7\nVertex 5: 11, 6, 1, 9, 7\nVertex 6: 1, 7, 10, 5, 2, 11\nVertex 7: 3, 6, 2, 9, 5, 4\nVertex 8: 11, 1, 3, 4, 9\nVertex 9: 10, 2, 1, 3, 5, 4, 7, 11, 8\nVertex 10: 9, 6, 1, 11, 2, 4, 3\nVertex 11: 5, 8, 10, 1, 6, 9\n",
    "graph_output": "11 37\n1 4\n9 10\n3 7\n1 6\n6 7\n1 2\n3 1\n10 6\n11 5\n2 9\n11 8\n10 1\n9 1\n5 6\n2 7\n3 4\n11 10\n5 1\n3 9\n2 4\n2 3\n8 1\n11 1\n2 10\n3 8\n2 6\n9 5\n6 11\n10 4\n4 8\n10 3\n9 4\n9 7\n7 5\n11 9\n4 7\n8 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 50,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 15 vertices and 87 edges\n\nEdges (Format: Node Node):\n1 15\n15 10\n1 9\n10 3\n15 5\n10 6\n9 2\n10 12\n9 14\n2 7\n1 4\n6 11\n15 13\n13 8\n14 10\n3 1\n10 4\n5 13\n12 15\n9 4\n12 13\n4 11\n1 10\n9 12\n9 5\n4 2\n8 2\n5 14\n9 10\n9 6\n11 9\n5 12\n1 11\n5 1\n10 11\n4 12\n4 8\n14 4\n6 13\n10 7\n2 6\n3 2\n8 12\n3 8\n14 7\n6 8\n14 2\n7 12\n15 9\n14 13\n8 10\n12 2\n3 12\n6 1\n11 8\n13 2\n11 14\n2 5\n13 9\n13 3\n15 4\n6 4\n9 7\n5 8\n2 11\n7 13\n5 11\n9 3\n10 5\n7 5\n11 15\n1 13\n11 3\n8 1\n4 13\n4 5\n11 12\n2 15\n8 14\n14 3\n7 15\n7 11\n2 1\n3 6\n2 10\n6 5\n3 4\n",
    "graph_output": "15 87\n1 15\n15 10\n1 9\n10 3\n15 5\n10 6\n9 2\n10 12\n9 14\n2 7\n1 4\n6 11\n15 13\n13 8\n14 10\n3 1\n10 4\n5 13\n12 15\n9 4\n12 13\n4 11\n1 10\n9 12\n9 5\n4 2\n8 2\n5 14\n9 10\n9 6\n11 9\n5 12\n1 11\n5 1\n10 11\n4 12\n4 8\n14 4\n6 13\n10 7\n2 6\n3 2\n8 12\n3 8\n14 7\n6 8\n14 2\n7 12\n15 9\n14 13\n8 10\n12 2\n3 12\n6 1\n11 8\n13 2\n11 14\n2 5\n13 9\n13 3\n15 4\n6 4\n9 7\n5 8\n2 11\n7 13\n5 11\n9 3\n10 5\n7 5\n11 15\n1 13\n11 3\n8 1\n4 13\n4 5\n11 12\n2 15\n8 14\n14 3\n7 15\n7 11\n2 1\n3 6\n2 10\n6 5\n3 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 5 (source) to vertex 8 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 21 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 8 and vertex 11 with a capacity of 9.\nThere is an edge between vertex 11 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 5 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 11 and vertex 6 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 10 and vertex 12 with a capacity of 8.\nThere is an edge between vertex 10 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 12 and vertex 4 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 3 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 2 with a capacity of 8.\nThere is an edge between vertex 12 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 3 and vertex 8 with a capacity of 8.\nThere is an edge between vertex 3 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 7 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 8 and vertex 6 with a capacity of 8.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 10.\nThere is an edge between vertex 4 and vertex 5 with a capacity of 3.\n",
    "graph_output": "12 21\n1 8 9\n8 11 9\n11 2 1\n11 5 10\n1 10 4\n11 6 8\n1 9 9\n10 12 8\n10 7 6\n12 4 9\n4 3 3\n7 2 8\n12 8 4\n3 8 8\n3 10 10\n9 10 10\n7 11 2\n8 6 8\n9 7 10\n1 5 10\n4 5 3\n",
    "vertices": [
      5,
      8
    ],
    "answer": 23,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 6 (source) to vertex 3 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 45 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0  21  40  85  94  14  28 100  86  38   0 \n 2 | 21   0  69  16  81  16  15  84  46  59  20 \n 3 | 40  69   0  96   0  95   9   0  22  71  89 \n 4 | 85  16  96   0  82   0  65  87   0  47   0 \n 5 | 94  81   0  82   0  80  21  13  98  20  27 \n 6 | 14  16  95   0  80   0  94   0   0   3  97 \n 7 | 28  15   9  65  21  94   0   0  67   0  26 \n 8 |100  84   0  87  13   0   0   0  40  35  70 \n 9 | 86  46  22   0  98   0  67  40   0  31  64 \n10 | 38  59  71  47  20   3   0  35  31   0   9 \n11 |  0  20  89   0  27  97  26  70  64   9   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   3   5   5   4   2   9   2   7   6   0 \n 2 |  3   0   9   5   7   6   8   2   8   8   3 \n 3 |  5   9   0  10   0   3   2   0   2   9   7 \n 4 |  5   5  10   0   6   0   4   6   0   7   0 \n 5 |  4   7   0   6   0   5   9   3   3   5   5 \n 6 |  2   6   3   0   5   0   2   0   0   6   2 \n 7 |  9   8   2   4   9   2   0   0   4   0   5 \n 8 |  2   2   0   6   3   0   0   0   7   1   1 \n 9 |  7   8   2   0   3   0   4   7   0   6  10 \n10 |  6   8   9   7   5   6   0   1   6   0   6 \n11 |  0   3   7   0   5   2   5   1  10   6   0 \n",
    "graph_output": "11 45\n1 10 38 6\n10 6 3 6\n10 4 47 7\n10 3 71 9\n4 2 16 5\n3 7 9 2\n6 11 97 2\n10 8 35 1\n4 5 82 6\n11 9 64 10\n2 6 16 6\n4 1 85 5\n2 9 46 8\n5 9 98 3\n5 2 81 7\n11 3 89 7\n3 1 40 5\n5 1 94 4\n7 1 28 9\n11 8 70 1\n6 3 95 3\n1 2 21 3\n8 2 84 2\n5 6 80 5\n10 2 59 8\n2 7 15 8\n2 3 69 9\n1 6 14 2\n3 9 22 2\n10 11 9 6\n2 11 20 3\n11 7 26 5\n4 3 96 10\n6 7 94 2\n5 10 20 5\n9 7 67 4\n8 4 87 6\n1 8 100 2\n9 8 40 7\n1 9 86 7\n5 7 21 9\n11 5 27 5\n4 7 65 4\n8 5 13 3\n10 9 31 6\n",
    "vertices": [
      6,
      3
    ],
    "answer": 2714,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 8 vertices and 19 edges\n\nEdges (Format: Node Node):\n2 4\n6 7\n8 1\n7 2\n1 5\n3 6\n7 1\n7 3\n5 3\n3 4\n4 1\n5 7\n8 2\n6 1\n4 8\n5 2\n7 8\n6 2\n6 5\n",
    "graph_output": "8 19\n2 4\n6 7\n8 1\n7 2\n1 5\n3 6\n7 1\n7 3\n5 3\n3 4\n4 1\n5 7\n8 2\n6 1\n4 8\n5 2\n7 8\n6 2\n6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 522,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   0   1   0   0   1   1   1   1   0   0   0 \n 2 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0 \n 3 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1 \n 4 |  0   0   0   0   0   0   0   1   0   1   0   0   0   0   1   0 \n 5 |  0   0   0   0   0   1   0   0   1   0   1   1   1   0   0   0 \n 6 |  0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   1 \n 7 |  1   1   0   0   0   0   0   0   0   1   0   0   0   1   1   0 \n 8 |  0   0   1   1   0   1   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0 \n10 |  1   0   0   1   0   0   1   0   0   0   0   1   0   0   0   1 \n11 |  1   0   0   0   1   0   0   0   0   0   0   0   1   1   0   0 \n12 |  1   0   0   0   1   0   0   0   0   1   0   0   1   0   0   0 \n13 |  1   0   0   0   1   0   0   0   0   0   1   1   0   1   0   0 \n14 |  0   0   0   0   0   0   1   0   0   0   1   0   1   0   0   1 \n15 |  0   1   0   1   0   0   1   0   1   0   0   0   0   0   0   0 \n16 |  0   0   1   0   0   1   0   0   0   1   0   0   0   1   0   0 \n",
    "graph_output": "16 30\n10 7\n16 6\n15 4\n16 3\n6 8\n11 5\n13 11\n13 12\n3 8\n7 14\n9 5\n9 15\n14 16\n1 12\n10 4\n1 10\n7 1\n11 14\n2 15\n5 13\n16 10\n5 12\n12 10\n1 13\n6 5\n14 13\n7 15\n7 2\n1 11\n8 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 132 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 8, 16, 4, 2, 12, 6, 11, 14, 13, 15, 3, 10, 17\nVertex 2: 11, 6, 14, 17, 5, 1, 16, 12, 15, 7, 3, 13, 9, 10, 4, 8\nVertex 3: 15, 8, 13, 17, 16, 9, 12, 14, 2, 7, 5, 6, 1, 10, 11\nVertex 4: 5, 10, 1, 9, 17, 13, 16, 14, 12, 8, 15, 7, 6, 2, 11\nVertex 5: 8, 4, 2, 13, 15, 16, 17, 11, 14, 12, 6, 7, 3, 10, 9\nVertex 6: 2, 17, 12, 14, 9, 8, 16, 1, 5, 11, 3, 7, 10, 15, 4, 13\nVertex 7: 11, 17, 10, 8, 2, 12, 15, 5, 3, 16, 6, 14, 9, 4, 13\nVertex 8: 1, 5, 11, 10, 3, 6, 9, 17, 7, 12, 14, 13, 15, 4, 2, 16\nVertex 9: 1, 16, 13, 17, 14, 3, 6, 8, 4, 10, 7, 11, 2, 12, 15, 5\nVertex 10: 8, 4, 16, 11, 15, 7, 14, 12, 17, 13, 9, 6, 2, 5, 3, 1\nVertex 11: 8, 2, 15, 7, 10, 12, 13, 14, 5, 17, 16, 6, 1, 9, 4, 3\nVertex 12: 13, 6, 11, 15, 1, 5, 3, 17, 10, 2, 8, 14, 7, 4, 9, 16\nVertex 13: 9, 12, 17, 3, 15, 5, 16, 11, 14, 4, 2, 10, 8, 1, 6, 7\nVertex 14: 15, 17, 2, 9, 6, 10, 11, 5, 3, 13, 12, 8, 4, 1, 7, 16\nVertex 15: 11, 14, 3, 13, 5, 10, 12, 2, 7, 8, 6, 4, 1, 9, 16\nVertex 16: 9, 1, 10, 3, 13, 5, 6, 2, 11, 4, 7, 14, 17, 12, 15, 8\nVertex 17: 9, 13, 14, 6, 2, 7, 3, 5, 11, 8, 12, 4, 10, 16, 1\n",
    "graph_output": "17 132\n1 9\n1 8\n8 5\n9 16\n8 11\n9 13\n5 4\n11 2\n11 15\n9 17\n2 6\n13 12\n11 7\n8 10\n15 14\n15 3\n17 13\n17 14\n14 2\n17 6\n4 10\n2 17\n17 7\n3 8\n3 13\n3 17\n16 1\n4 1\n16 10\n2 5\n14 9\n6 12\n15 13\n3 16\n5 13\n15 5\n3 9\n6 14\n6 9\n16 13\n10 11\n11 12\n6 8\n10 15\n8 9\n2 1\n7 10\n12 15\n12 1\n13 11\n5 16\n6 16\n14 10\n11 14\n17 5\n11 5\n6 1\n11 17\n5 14\n5 12\n16 2\n8 17\n3 12\n7 8\n17 12\n9 4\n12 10\n17 4\n3 14\n12 2\n13 14\n8 12\n14 12\n2 15\n7 2\n6 5\n7 12\n11 16\n4 13\n8 14\n7 15\n10 17\n3 2\n4 16\n11 6\n5 7\n3 7\n2 13\n14 4\n1 11\n13 10\n7 16\n10 9\n3 5\n14 1\n3 6\n4 12\n7 6\n7 14\n14 16\n8 13\n10 6\n15 8\n9 7\n15 6\n9 11\n16 17\n2 9\n12 9\n10 2\n10 5\n12 16\n13 1\n8 4\n15 4\n1 15\n9 15\n3 1\n10 3\n7 4\n6 4\n4 2\n9 5\n10 1\n4 11\n15 16\n1 17\n2 8\n13 6\n11 3\n7 13\n16 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 22 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 5, 3, 11, 10\nVertex 2: 1, 6, 11\nVertex 3: 1, 6, 10\nVertex 4: 10, 9, 11, 7\nVertex 5: 10, 1, 6, 7, 9, 11\nVertex 6: 5, 2, 3, 7\nVertex 7: 10, 5, 6, 4, 9\nVertex 8: No connections\nVertex 9: 5, 4, 10, 7\nVertex 10: 5, 4, 7, 3, 9, 1\nVertex 11: 1, 2, 4, 5\n",
    "graph_output": "11 22\n1 2\n5 10\n10 4\n5 1\n10 7\n3 1\n6 5\n6 2\n5 7\n11 1\n6 3\n3 10\n2 11\n5 9\n9 4\n6 7\n10 9\n11 4\n7 4\n7 9\n11 5\n1 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 53 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8 with a weight of 78.\nThere is an edge between vertex 1 and vertex 9 with a weight of 46.\nThere is an edge between vertex 8 and vertex 5 with a weight of 38.\nThere is an edge between vertex 8 and vertex 13 with a weight of 63.\nThere is an edge between vertex 1 and vertex 11 with a weight of 17.\nThere is an edge between vertex 5 and vertex 7 with a weight of 77.\nThere is an edge between vertex 9 and vertex 3 with a weight of 66.\nThere is an edge between vertex 3 and vertex 12 with a weight of 55.\nThere is an edge between vertex 12 and vertex 10 with a weight of 17.\nThere is an edge between vertex 3 and vertex 2 with a weight of 92.\nThere is an edge between vertex 11 and vertex 6 with a weight of 7.\nThere is an edge between vertex 3 and vertex 4 with a weight of 84.\nThere is an edge between vertex 2 and vertex 10 with a weight of 73.\nThere is an edge between vertex 3 and vertex 5 with a weight of 82.\nThere is an edge between vertex 11 and vertex 12 with a weight of 73.\nThere is an edge between vertex 6 and vertex 9 with a weight of 98.\nThere is an edge between vertex 1 and vertex 12 with a weight of 100.\nThere is an edge between vertex 11 and vertex 8 with a weight of 40.\nThere is an edge between vertex 7 and vertex 2 with a weight of 2.\nThere is an edge between vertex 13 and vertex 10 with a weight of 71.\nThere is an edge between vertex 6 and vertex 2 with a weight of 95.\nThere is an edge between vertex 7 and vertex 4 with a weight of 91.\nThere is an edge between vertex 12 and vertex 8 with a weight of 74.\nThere is an edge between vertex 1 and vertex 10 with a weight of 18.\nThere is an edge between vertex 12 and vertex 13 with a weight of 21.\nThere is an edge between vertex 6 and vertex 4 with a weight of 64.\nThere is an edge between vertex 3 and vertex 13 with a weight of 86.\nThere is an edge between vertex 3 and vertex 7 with a weight of 18.\nThere is an edge between vertex 12 and vertex 2 with a weight of 2.\nThere is an edge between vertex 8 and vertex 2 with a weight of 2.\nThere is an edge between vertex 13 and vertex 1 with a weight of 15.\nThere is an edge between vertex 7 and vertex 12 with a weight of 60.\nThere is an edge between vertex 7 and vertex 6 with a weight of 20.\nThere is an edge between vertex 5 and vertex 2 with a weight of 65.\nThere is an edge between vertex 8 and vertex 6 with a weight of 92.\nThere is an edge between vertex 4 and vertex 2 with a weight of 76.\nThere is an edge between vertex 5 and vertex 12 with a weight of 62.\nThere is an edge between vertex 10 and vertex 11 with a weight of 53.\nThere is an edge between vertex 13 and vertex 7 with a weight of 24.\nThere is an edge between vertex 8 and vertex 7 with a weight of 15.\nThere is an edge between vertex 5 and vertex 9 with a weight of 38.\nThere is an edge between vertex 13 and vertex 4 with a weight of 48.\nThere is an edge between vertex 7 and vertex 9 with a weight of 23.\nThere is an edge between vertex 9 and vertex 10 with a weight of 3.\nThere is an edge between vertex 11 and vertex 13 with a weight of 3.\nThere is an edge between vertex 5 and vertex 11 with a weight of 74.\nThere is an edge between vertex 4 and vertex 10 with a weight of 56.\nThere is an edge between vertex 4 and vertex 1 with a weight of 7.\nThere is an edge between vertex 4 and vertex 11 with a weight of 4.\nThere is an edge between vertex 10 and vertex 6 with a weight of 28.\nThere is an edge between vertex 1 and vertex 7 with a weight of 30.\nThere is an edge between vertex 8 and vertex 10 with a weight of 68.\nThere is an edge between vertex 2 and vertex 9 with a weight of 67.\n",
    "graph_output": "13 53\n1 8 78\n1 9 46\n8 5 38\n8 13 63\n1 11 17\n5 7 77\n9 3 66\n3 12 55\n12 10 17\n3 2 92\n11 6 7\n3 4 84\n2 10 73\n3 5 82\n11 12 73\n6 9 98\n1 12 100\n11 8 40\n7 2 2\n13 10 71\n6 2 95\n7 4 91\n12 8 74\n1 10 18\n12 13 21\n6 4 64\n3 13 86\n3 7 18\n12 2 2\n8 2 2\n13 1 15\n7 12 60\n7 6 20\n5 2 65\n8 6 92\n4 2 76\n5 12 62\n10 11 53\n13 7 24\n8 7 15\n5 9 38\n13 4 48\n7 9 23\n9 10 3\n11 13 3\n5 11 74\n4 10 56\n4 1 7\n4 11 4\n10 6 28\n1 7 30\n8 10 68\n2 9 67\n",
    "vertices": [
      null,
      null
    ],
    "answer": 123,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 24 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 7 (weight=53), 11 (weight=78), 6 (weight=14), 8 (weight=27), 10 (weight=42)\nVertex 2: 7 (weight=56), 16 (weight=45)\nVertex 3: 7 (weight=39), 4 (weight=55), 8 (weight=91)\nVertex 4: 13 (weight=85), 3 (weight=55), 8 (weight=43)\nVertex 5: 11 (weight=3)\nVertex 6: 1 (weight=14), 13 (weight=7)\nVertex 7: 1 (weight=53), 2 (weight=56), 3 (weight=39), 14 (weight=97), 15 (weight=76)\nVertex 8: 11 (weight=10), 1 (weight=27), 3 (weight=91), 4 (weight=43)\nVertex 9: 11 (weight=71), 13 (weight=47), 10 (weight=47), 12 (weight=20)\nVertex 10: 9 (weight=47), 12 (weight=100), 1 (weight=42), 13 (weight=81)\nVertex 11: 1 (weight=78), 9 (weight=71), 5 (weight=3), 8 (weight=10)\nVertex 12: 9 (weight=20), 10 (weight=100)\nVertex 13: 9 (weight=47), 4 (weight=85), 6 (weight=7), 10 (weight=81)\nVertex 14: 7 (weight=97), 15 (weight=64)\nVertex 15: 14 (weight=64), 7 (weight=76)\nVertex 16: 2 (weight=45)\n",
    "graph_output": "16 24\n1 7 53\n1 11 78\n7 2 56\n11 9 71\n9 13 47\n7 3 39\n7 14 97\n9 10 47\n14 15 64\n11 5 3\n11 8 10\n1 6 14\n9 12 20\n13 4 85\n2 16 45\n6 13 7\n12 10 100\n7 15 76\n1 8 27\n10 1 42\n4 3 55\n8 3 91\n10 13 81\n8 4 43\n",
    "vertices": [
      null,
      null
    ],
    "answer": 546,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 11 vertices and 10 edges\n\nEdges (Format: Node Node):\n2 4\n10 8\n7 2\n10 9\n7 8\n5 10\n11 7\n10 1\n3 8\n8 4\n",
    "graph_output": "11 10\n2 4\n10 8\n7 2\n10 9\n7 8\n5 10\n11 7\n10 1\n3 8\n8 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 16 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   1   0   1   0   0   0   1   0   0   0   0   1   0   0 \n 2 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   1 \n 5 |  1   1   0   1   0   0   0   0   0   0   0   0   1   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0 \n 9 |  1   0   0   0   0   0   1   1   0   1   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   1   0   1   0   0   0   1   0 \n11 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n13 |  0   0   0   1   1   1   0   0   0   0   0   0   0   0   0   0 \n14 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n16 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "16 16\n1 9\n9 7\n1 5\n5 2\n9 10\n10 15\n9 8\n1 3\n5 13\n1 14\n8 12\n13 4\n10 11\n4 16\n13 6\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 81 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   0   1   1   0   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   0   0   0   1   1   1   1   1 \n 3 |  1   1   0   0   0   1   1   1   0   0   1   1   1   1   0 \n 4 |  1   1   0   0   1   1   1   1   1   1   1   0   1   1   1 \n 5 |  0   1   0   1   0   0   0   1   1   1   0   0   0   1   1 \n 6 |  1   1   1   1   0   0   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   0   1   0   1   1   1   0   1   0   1   1 \n 8 |  0   0   1   1   1   1   1   0   0   1   1   1   0   1   1 \n 9 |  1   0   0   1   1   1   1   0   0   1   1   1   1   0   1 \n10 |  1   0   0   1   1   1   1   1   1   0   1   1   1   1   0 \n11 |  1   1   1   1   0   1   0   1   1   1   0   1   1   1   1 \n12 |  1   1   1   0   0   1   1   1   1   1   1   0   1   0   0 \n13 |  1   1   1   1   0   1   0   0   1   1   1   1   0   1   1 \n14 |  1   1   1   1   1   1   1   1   0   1   1   0   1   0   1 \n15 |  1   1   0   1   1   1   1   1   1   0   1   0   1   1   0 \n",
    "graph_output": "15 81\n1 7\n1 12\n12 6\n6 8\n1 15\n1 9\n7 10\n7 3\n15 2\n12 11\n3 14\n1 13\n15 5\n8 4\n6 10\n14 13\n2 13\n8 15\n11 15\n14 5\n8 5\n1 11\n7 6\n2 5\n15 14\n4 5\n4 13\n2 1\n9 5\n10 11\n4 2\n7 14\n13 3\n5 10\n4 11\n9 6\n10 14\n9 4\n11 3\n9 11\n15 7\n12 7\n15 6\n15 9\n6 1\n13 11\n12 10\n14 11\n10 8\n1 14\n12 13\n4 15\n7 4\n10 13\n12 9\n7 9\n13 9\n11 2\n6 13\n11 6\n2 12\n1 10\n10 9\n8 3\n8 11\n6 4\n10 4\n8 14\n14 4\n1 3\n8 7\n14 2\n12 8\n2 7\n3 2\n4 1\n3 12\n3 6\n6 14\n2 6\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 5 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 22 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13 with a weight of 95.\nThere is an edge between vertex 1 and vertex 11 with a weight of 15.\nThere is an edge between vertex 13 and vertex 14 with a weight of 1.\nThere is an edge between vertex 11 and vertex 12 with a weight of 65.\nThere is an edge between vertex 11 and vertex 4 with a weight of 9.\nThere is an edge between vertex 12 and vertex 7 with a weight of 14.\nThere is an edge between vertex 11 and vertex 9 with a weight of 23.\nThere is an edge between vertex 12 and vertex 3 with a weight of 40.\nThere is an edge between vertex 12 and vertex 8 with a weight of 7.\nThere is an edge between vertex 7 and vertex 2 with a weight of 55.\nThere is an edge between vertex 11 and vertex 6 with a weight of 91.\nThere is an edge between vertex 11 and vertex 15 with a weight of 24.\nThere is an edge between vertex 8 and vertex 5 with a weight of 51.\nThere is an edge between vertex 8 and vertex 10 with a weight of 61.\nThere is an edge between vertex 12 and vertex 14 with a weight of 72.\nThere is an edge between vertex 14 and vertex 15 with a weight of 89.\nThere is an edge between vertex 10 and vertex 13 with a weight of 44.\nThere is an edge between vertex 3 and vertex 9 with a weight of 34.\nThere is an edge between vertex 7 and vertex 4 with a weight of 28.\nThere is an edge between vertex 7 and vertex 15 with a weight of 81.\nThere is an edge between vertex 7 and vertex 8 with a weight of 84.\nThere is an edge between vertex 14 and vertex 9 with a weight of 76.\n",
    "graph_output": "15 22\n1 13 95\n1 11 15\n13 14 1\n11 12 65\n11 4 9\n12 7 14\n11 9 23\n12 3 40\n12 8 7\n7 2 55\n11 6 91\n11 15 24\n8 5 51\n8 10 61\n12 14 72\n14 15 89\n10 13 44\n3 9 34\n7 4 28\n7 15 81\n7 8 84\n14 9 76\n",
    "vertices": [
      4,
      5
    ],
    "answer": 100,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 9 and vertex 8 are connected.\n\nThis is an undirected graph with 15 vertices and 98 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 5, 13, 15, 10, 3, 6, 12, 2, 9, 4, 14, 7\nVertex 2: 6, 12, 4, 13, 10, 3, 15, 8, 1, 7, 11, 14, 9, 5\nVertex 3: 8, 11, 12, 5, 10, 7, 6, 9, 1, 2, 14, 13, 4\nVertex 4: 13, 8, 14, 12, 10, 2, 9, 5, 11, 1, 6, 3, 7\nVertex 5: 11, 14, 3, 1, 9, 6, 12, 4, 10, 13, 15, 7, 2\nVertex 6: 13, 2, 10, 8, 7, 5, 3, 15, 1, 9, 4, 11, 14\nVertex 7: 10, 14, 8, 12, 6, 3, 9, 11, 13, 15, 2, 5, 1, 4\nVertex 8: 3, 15, 4, 7, 6, 13, 12, 2, 11, 9, 10, 14\nVertex 9: 5, 10, 3, 4, 11, 7, 15, 12, 6, 8, 1, 13, 2, 14\nVertex 10: 15, 7, 6, 4, 3, 9, 1, 13, 14, 5, 2, 11, 8\nVertex 11: 5, 3, 1, 13, 14, 9, 7, 10, 4, 8, 2, 15, 6\nVertex 12: 14, 3, 13, 4, 7, 2, 8, 5, 9, 1, 15\nVertex 13: 6, 4, 11, 1, 12, 15, 8, 10, 2, 3, 5, 7, 14, 9\nVertex 14: 12, 5, 7, 4, 11, 10, 3, 13, 2, 1, 15, 9, 8, 6\nVertex 15: 10, 8, 1, 13, 9, 6, 2, 7, 5, 11, 12, 14\n",
    "graph_output": "15 98\n5 11\n14 12\n6 13\n10 15\n7 10\n6 2\n8 3\n11 3\n3 12\n5 14\n11 1\n5 3\n15 8\n4 13\n11 13\n5 1\n10 6\n7 14\n13 1\n13 12\n15 1\n9 5\n8 4\n15 13\n4 14\n4 12\n8 7\n14 11\n7 12\n6 8\n7 6\n10 4\n3 10\n5 6\n2 12\n7 3\n8 13\n3 6\n10 9\n3 9\n1 10\n10 13\n2 4\n12 8\n9 4\n9 11\n5 12\n1 3\n9 7\n5 4\n15 9\n9 12\n10 14\n5 10\n2 13\n7 11\n15 6\n2 10\n3 2\n2 15\n10 11\n1 6\n2 8\n14 3\n11 4\n8 11\n3 13\n6 9\n5 13\n12 1\n1 2\n13 7\n13 14\n7 15\n8 9\n2 7\n2 11\n10 8\n15 5\n2 14\n9 1\n1 4\n14 1\n15 11\n6 4\n9 13\n15 12\n5 7\n11 6\n14 15\n1 7\n2 9\n5 2\n4 3\n9 14\n8 14\n14 6\n7 4\n",
    "vertices": [
      9,
      8
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 13 vertices and 19 edges\n\nEdges (Format: Node Node):\n2 13\n7 1\n7 6\n7 8\n9 10\n2 5\n5 6\n1 4\n11 7\n5 7\n3 11\n10 1\n5 11\n2 11\n7 10\n13 8\n13 3\n11 12\n4 6\n",
    "graph_output": "13 19\n2 13\n7 1\n7 6\n7 8\n9 10\n2 5\n5 6\n1 4\n11 7\n5 7\n3 11\n10 1\n5 11\n2 11\n7 10\n13 8\n13 3\n11 12\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nUndirected Graph with 30 vertices and 29 edges\n\nEdges (Format: Node Node):\n1 20\n1 4\n4 30\n1 3\n30 11\n1 8\n30 21\n4 24\n21 2\n24 5\n30 27\n4 6\n30 13\n24 12\n5 28\n11 7\n1 15\n24 17\n4 14\n30 26\n7 9\n6 19\n5 16\n20 23\n3 18\n4 10\n30 29\n8 25\n7 22\n",
    "graph_output": "30 29\n1 20\n1 4\n4 30\n1 3\n30 11\n1 8\n30 21\n4 24\n21 2\n24 5\n30 27\n4 6\n30 13\n24 12\n5 28\n11 7\n1 15\n24 17\n4 14\n30 26\n7 9\n6 19\n5 16\n20 23\n3 18\n4 10\n30 29\n8 25\n7 22\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 16 vertices and 22 edges\n\nEdges (Format: Node Node):\n1 14\n14 15\n1 3\n3 16\n1 11\n3 6\n1 5\n15 8\n14 13\n5 9\n1 7\n6 2\n11 10\n2 12\n12 4\n9 15\n6 1\n10 5\n15 4\n1 15\n8 11\n4 7\n",
    "graph_output": "16 22\n1 14\n14 15\n1 3\n3 16\n1 11\n3 6\n1 5\n15 8\n14 13\n5 9\n1 7\n6 2\n11 10\n2 12\n12 4\n9 15\n6 1\n10 5\n15 4\n1 15\n8 11\n4 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 13 vertices and 55 edges\n\nEdges (Format: Node Node Capacity):\n1 11 6\n1 10 10\n11 4 3\n1 9 3\n11 12 4\n4 5 5\n9 6 10\n11 2 4\n6 13 2\n4 7 5\n13 3 5\n1 8 9\n4 12 4\n9 7 1\n1 12 7\n1 4 7\n12 5 9\n4 13 2\n8 2 5\n6 3 1\n11 8 4\n7 8 1\n9 10 1\n4 6 3\n8 10 5\n9 2 8\n13 8 9\n3 4 9\n9 4 1\n2 10 9\n4 10 2\n1 5 5\n3 5 6\n12 3 4\n8 5 3\n2 13 4\n4 8 8\n8 9 9\n5 10 4\n13 10 1\n3 7 3\n2 12 3\n12 8 7\n3 10 5\n1 2 10\n6 11 3\n11 10 10\n9 12 2\n1 13 7\n5 13 9\n5 2 4\n12 7 3\n13 9 7\n7 10 1\n11 5 10\n",
    "graph_output": "13 55\n1 11 6\n1 10 10\n11 4 3\n1 9 3\n11 12 4\n4 5 5\n9 6 10\n11 2 4\n6 13 2\n4 7 5\n13 3 5\n1 8 9\n4 12 4\n9 7 1\n1 12 7\n1 4 7\n12 5 9\n4 13 2\n8 2 5\n6 3 1\n11 8 4\n7 8 1\n9 10 1\n4 6 3\n8 10 5\n9 2 8\n13 8 9\n3 4 9\n9 4 1\n2 10 9\n4 10 2\n1 5 5\n3 5 6\n12 3 4\n8 5 3\n2 13 4\n4 8 8\n8 9 9\n5 10 4\n13 10 1\n3 7 3\n2 12 3\n12 8 7\n3 10 5\n1 2 10\n6 11 3\n11 10 10\n9 12 2\n1 13 7\n5 13 9\n5 2 4\n12 7 3\n13 9 7\n7 10 1\n11 5 10\n",
    "vertices": [
      3,
      10
    ],
    "answer": 33,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 8 (source) to vertex 6 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 10 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 8 (weight=29, capacity=5)\nVertex 2: 4 (weight=53, capacity=4)\nVertex 3: 9 (weight=7, capacity=6)\nVertex 4: 10 (weight=9, capacity=10), 7 (weight=16, capacity=5), 5 (weight=74, capacity=5), 2 (weight=53, capacity=4)\nVertex 5: 4 (weight=74, capacity=5)\nVertex 6: 10 (weight=6, capacity=7), 8 (weight=34, capacity=9)\nVertex 7: 4 (weight=16, capacity=5)\nVertex 8: 1 (weight=29, capacity=5), 10 (weight=97, capacity=5), 9 (weight=35, capacity=5), 6 (weight=34, capacity=9)\nVertex 9: 8 (weight=35, capacity=5), 3 (weight=7, capacity=6)\nVertex 10: 8 (weight=97, capacity=5), 4 (weight=9, capacity=10), 6 (weight=6, capacity=7)\n",
    "graph_output": "10 10\n1 8 29 5\n8 10 97 5\n8 9 35 5\n10 4 9 10\n4 7 16 5\n4 5 74 5\n9 3 7 6\n4 2 53 4\n10 6 6 7\n6 8 34 9\n",
    "vertices": [
      8,
      6
    ],
    "answer": 821,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 12 vertices and 20 edges\n\nEdges (Format: Node Node):\n3 7\n2 10\n6 2\n12 10\n5 2\n7 11\n11 4\n5 12\n12 8\n9 5\n7 12\n3 6\n8 1\n8 10\n12 1\n5 10\n3 4\n12 6\n5 6\n6 7\n",
    "graph_output": "12 20\n3 7\n2 10\n6 2\n12 10\n5 2\n7 11\n11 4\n5 12\n12 8\n9 5\n7 12\n3 6\n8 1\n8 10\n12 1\n5 10\n3 4\n12 6\n5 6\n6 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 17 vertices and 111 edges\n\nEdges (Format: Node Node):\n1 15\n1 2\n2 14\n15 4\n2 5\n2 13\n5 6\n5 16\n5 10\n15 9\n2 17\n14 8\n1 11\n1 3\n16 12\n16 7\n2 4\n14 16\n10 4\n6 17\n1 9\n2 11\n6 12\n4 8\n11 14\n7 8\n17 15\n6 15\n13 6\n6 2\n12 1\n10 8\n6 4\n13 5\n9 16\n6 10\n11 12\n9 8\n12 7\n14 3\n9 3\n6 11\n16 3\n5 17\n5 11\n3 6\n1 4\n3 8\n4 14\n11 9\n16 8\n11 10\n1 8\n2 8\n10 7\n14 10\n9 13\n15 8\n12 15\n10 12\n1 5\n12 5\n12 17\n17 11\n10 15\n7 11\n3 2\n16 13\n15 2\n3 17\n16 1\n9 14\n2 12\n7 2\n16 10\n1 6\n17 16\n14 1\n15 14\n7 15\n13 11\n11 15\n14 7\n10 2\n7 6\n2 9\n3 13\n12 4\n9 6\n17 4\n14 17\n8 13\n2 16\n14 5\n9 12\n9 17\n15 13\n12 3\n10 9\n3 4\n5 4\n7 13\n17 13\n10 1\n1 7\n11 3\n16 15\n7 5\n3 15\n5 9\n17 1\n",
    "graph_output": "17 111\n1 15\n1 2\n2 14\n15 4\n2 5\n2 13\n5 6\n5 16\n5 10\n15 9\n2 17\n14 8\n1 11\n1 3\n16 12\n16 7\n2 4\n14 16\n10 4\n6 17\n1 9\n2 11\n6 12\n4 8\n11 14\n7 8\n17 15\n6 15\n13 6\n6 2\n12 1\n10 8\n6 4\n13 5\n9 16\n6 10\n11 12\n9 8\n12 7\n14 3\n9 3\n6 11\n16 3\n5 17\n5 11\n3 6\n1 4\n3 8\n4 14\n11 9\n16 8\n11 10\n1 8\n2 8\n10 7\n14 10\n9 13\n15 8\n12 15\n10 12\n1 5\n12 5\n12 17\n17 11\n10 15\n7 11\n3 2\n16 13\n15 2\n3 17\n16 1\n9 14\n2 12\n7 2\n16 10\n1 6\n17 16\n14 1\n15 14\n7 15\n13 11\n11 15\n14 7\n10 2\n7 6\n2 9\n3 13\n12 4\n9 6\n17 4\n14 17\n8 13\n2 16\n14 5\n9 12\n9 17\n15 13\n12 3\n10 9\n3 4\n5 4\n7 13\n17 13\n10 1\n1 7\n11 3\n16 15\n7 5\n3 15\n5 9\n17 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 13 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8 with a weight of 15.\nThere is an edge between vertex 1 and vertex 3 with a weight of 88.\nThere is an edge between vertex 1 and vertex 7 with a weight of 83.\nThere is an edge between vertex 3 and vertex 4 with a weight of 18.\nThere is an edge between vertex 1 and vertex 12 with a weight of 30.\nThere is an edge between vertex 1 and vertex 11 with a weight of 21.\nThere is an edge between vertex 4 and vertex 9 with a weight of 73.\nThere is an edge between vertex 3 and vertex 2 with a weight of 66.\nThere is an edge between vertex 3 and vertex 5 with a weight of 72.\nThere is an edge between vertex 1 and vertex 10 with a weight of 67.\nThere is an edge between vertex 4 and vertex 6 with a weight of 81.\nThere is an edge between vertex 4 and vertex 5 with a weight of 91.\nThere is an edge between vertex 7 and vertex 4 with a weight of 3.\n",
    "graph_output": "12 13\n1 8 15\n1 3 88\n1 7 83\n3 4 18\n1 12 30\n1 11 21\n4 9 73\n3 2 66\n3 5 72\n1 10 67\n4 6 81\n4 5 91\n7 4 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 534,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 31 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 12 and vertex 22.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 22 and vertex 27.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 9 and vertex 31.\nThere is an edge between vertex 9 and vertex 19.\nThere is an edge between vertex 19 and vertex 20.\nThere is an edge between vertex 1 and vertex 25.\nThere is an edge between vertex 27 and vertex 26.\nThere is an edge between vertex 31 and vertex 14.\nThere is an edge between vertex 31 and vertex 2.\nThere is an edge between vertex 4 and vertex 28.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 14 and vertex 21.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 26 and vertex 30.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 9 and vertex 18.\nThere is an edge between vertex 8 and vertex 24.\nThere is an edge between vertex 26 and vertex 13.\nThere is an edge between vertex 20 and vertex 23.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 26 and vertex 10.\nThere is an edge between vertex 25 and vertex 16.\nThere is an edge between vertex 26 and vertex 5.\nThere is an edge between vertex 1 and vertex 29.\nThere is an edge between vertex 23 and vertex 17.\n",
    "graph_output": "31 30\n1 4\n1 12\n1 9\n12 22\n12 6\n22 27\n6 8\n9 31\n9 19\n19 20\n1 25\n27 26\n31 14\n31 2\n4 28\n1 11\n14 21\n9 15\n26 30\n12 3\n9 18\n8 24\n26 13\n20 23\n2 7\n26 10\n25 16\n26 5\n1 29\n23 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 14 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   0   0   1   0   0   0   0   0   1   0 \n 2 |  0   0   0   1   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   1   0   0   0   0   0   0   0 \n 4 |  0   1   0   0   1   0   0   0   0   1   1   0 \n 5 |  1   0   1   1   0   0   1   0   0   1   0   0 \n 6 |  0   0   0   0   0   0   1   0   1   0   0   0 \n 7 |  0   0   0   0   1   1   0   0   0   1   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   1   0   0   0   0   1   0 \n10 |  0   0   0   1   1   0   1   0   0   0   0   0 \n11 |  1   0   0   1   0   0   0   0   1   0   0   1 \n12 |  0   0   0   0   0   0   0   0   0   0   1   0 \n",
    "graph_output": "12 14\n5 10\n4 5\n11 1\n11 4\n9 6\n7 6\n7 10\n1 5\n4 2\n7 5\n5 3\n10 4\n9 11\n11 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 5,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 46 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 3 (weight=68), 8 (weight=94), 11 (weight=25), 9 (weight=39), 2 (weight=12), 5 (weight=99), 10 (weight=45), 12 (weight=65), 7 (weight=93)\nVertex 2: 11 (weight=70), 8 (weight=33), 1 (weight=12), 12 (weight=56), 6 (weight=14), 3 (weight=75), 10 (weight=20), 4 (weight=2), 5 (weight=26)\nVertex 3: 1 (weight=68), 7 (weight=1), 6 (weight=33), 9 (weight=60), 4 (weight=63), 11 (weight=28), 10 (weight=54), 2 (weight=75), 5 (weight=21)\nVertex 4: 6 (weight=97), 5 (weight=58), 11 (weight=56), 3 (weight=63), 8 (weight=83), 7 (weight=19), 12 (weight=89), 2 (weight=2)\nVertex 5: 4 (weight=58), 7 (weight=78), 6 (weight=21), 11 (weight=49), 1 (weight=99), 10 (weight=7), 3 (weight=21), 2 (weight=26)\nVertex 6: 3 (weight=33), 4 (weight=97), 5 (weight=21), 7 (weight=83), 10 (weight=76), 2 (weight=14)\nVertex 7: 3 (weight=1), 5 (weight=78), 8 (weight=96), 4 (weight=19), 6 (weight=83), 12 (weight=99), 1 (weight=93)\nVertex 8: 1 (weight=94), 10 (weight=100), 12 (weight=70), 2 (weight=33), 4 (weight=83), 7 (weight=96), 9 (weight=32), 11 (weight=70)\nVertex 9: 3 (weight=60), 1 (weight=39), 11 (weight=15), 8 (weight=32), 10 (weight=27), 12 (weight=49)\nVertex 10: 8 (weight=100), 6 (weight=76), 3 (weight=54), 1 (weight=45), 2 (weight=20), 5 (weight=7), 9 (weight=27)\nVertex 11: 1 (weight=25), 2 (weight=70), 4 (weight=56), 5 (weight=49), 9 (weight=15), 3 (weight=28), 8 (weight=70), 12 (weight=53)\nVertex 12: 8 (weight=70), 2 (weight=56), 7 (weight=99), 4 (weight=89), 1 (weight=65), 9 (weight=49), 11 (weight=53)\n",
    "graph_output": "12 46\n1 3 68\n1 8 94\n3 7 1\n1 11 25\n3 6 33\n11 2 70\n6 4 97\n4 5 58\n8 10 100\n3 9 60\n8 12 70\n8 2 33\n7 5 78\n5 6 21\n11 4 56\n3 4 63\n11 5 49\n1 9 39\n1 2 12\n12 2 56\n4 8 83\n7 8 96\n11 9 15\n5 1 99\n7 4 19\n7 6 83\n3 11 28\n10 6 76\n3 10 54\n10 1 45\n6 2 14\n8 9 32\n2 3 75\n7 12 99\n11 8 70\n10 2 20\n12 4 89\n12 1 65\n2 4 2\n10 5 7\n9 10 27\n9 12 49\n3 5 21\n12 11 53\n1 7 93\n2 5 26\n",
    "vertices": [
      null,
      null
    ],
    "answer": 197,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 9 and vertex 8 are connected.\n\nThis is an undirected graph with 16 vertices and 19 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 6, 15\nVertex 2: 4, 7, 10, 8\nVertex 3: No connections\nVertex 4: 2, 12, 10, 8\nVertex 5: 9, 8, 13, 11\nVertex 6: 7, 1\nVertex 7: 2, 6\nVertex 8: 14, 5, 2, 4\nVertex 9: 5\nVertex 10: 1, 2, 13, 4\nVertex 11: 15, 16, 5\nVertex 12: 4\nVertex 13: 10, 5\nVertex 14: 8\nVertex 15: 11, 1\nVertex 16: 11\n",
    "graph_output": "16 19\n4 2\n1 10\n11 15\n4 12\n14 8\n9 5\n2 7\n10 2\n13 10\n8 5\n2 8\n4 10\n6 7\n13 5\n16 11\n5 11\n6 1\n4 8\n1 15\n",
    "vertices": [
      9,
      8
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 50 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 2, 5, 10, 9, 11, 4, 7, 8\nVertex 2: 1, 9, 10, 4, 8, 7, 6, 11, 3\nVertex 3: 7, 1, 6, 9, 5, 4, 10, 2\nVertex 4: 9, 7, 10, 2, 3, 11, 1, 5, 6, 8\nVertex 5: 11, 1, 10, 3, 8, 7, 4, 6\nVertex 6: 3, 8, 7, 10, 11, 9, 2, 4, 5\nVertex 7: 3, 8, 10, 4, 9, 6, 11, 2, 5, 1\nVertex 8: 11, 7, 9, 6, 10, 5, 2, 1, 4\nVertex 9: 8, 4, 2, 3, 7, 10, 1, 11, 6\nVertex 10: 8, 7, 2, 5, 4, 1, 9, 11, 6, 3\nVertex 11: 8, 5, 10, 4, 9, 6, 1, 7, 2\n",
    "graph_output": "11 50\n7 3\n8 11\n11 5\n8 7\n3 1\n6 3\n9 8\n4 9\n2 1\n6 8\n10 8\n7 10\n9 2\n3 9\n7 4\n10 2\n9 7\n5 1\n10 5\n6 7\n5 3\n4 10\n1 10\n10 9\n4 2\n10 11\n9 1\n10 6\n3 4\n4 11\n8 5\n11 9\n11 6\n1 11\n2 8\n10 3\n11 7\n2 7\n7 5\n9 6\n4 1\n2 6\n5 4\n2 11\n4 6\n7 1\n1 8\n2 3\n5 6\n4 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 1 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 77 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 7 (capacity=4), 6 (capacity=3), 3 (capacity=6), 8 (capacity=4), 12 (capacity=7), 4 (capacity=8), 9 (capacity=1), 13 (capacity=6), 10 (capacity=4), 2 (capacity=4), 11 (capacity=9), 5 (capacity=3)\nVertex 2: 9 (capacity=7), 4 (capacity=3), 10 (capacity=5), 7 (capacity=4), 8 (capacity=9), 13 (capacity=6), 12 (capacity=9), 11 (capacity=10), 3 (capacity=9), 1 (capacity=4), 5 (capacity=8), 6 (capacity=10)\nVertex 3: 1 (capacity=6), 9 (capacity=2), 10 (capacity=5), 6 (capacity=4), 12 (capacity=8), 5 (capacity=4), 8 (capacity=6), 11 (capacity=6), 13 (capacity=8), 4 (capacity=7), 7 (capacity=1), 2 (capacity=9)\nVertex 4: 12 (capacity=7), 11 (capacity=6), 1 (capacity=8), 2 (capacity=3), 5 (capacity=9), 7 (capacity=1), 3 (capacity=7), 10 (capacity=5), 13 (capacity=8), 9 (capacity=6), 6 (capacity=6)\nVertex 5: 6 (capacity=10), 9 (capacity=10), 8 (capacity=2), 4 (capacity=9), 3 (capacity=4), 7 (capacity=2), 10 (capacity=9), 11 (capacity=5), 13 (capacity=6), 2 (capacity=8), 12 (capacity=1), 1 (capacity=3)\nVertex 6: 1 (capacity=3), 13 (capacity=7), 5 (capacity=10), 10 (capacity=5), 3 (capacity=4), 9 (capacity=9), 8 (capacity=5), 12 (capacity=2), 11 (capacity=9), 4 (capacity=6), 7 (capacity=6), 2 (capacity=10)\nVertex 7: 1 (capacity=4), 12 (capacity=4), 10 (capacity=4), 8 (capacity=5), 11 (capacity=3), 5 (capacity=2), 2 (capacity=4), 4 (capacity=1), 3 (capacity=1), 13 (capacity=4), 6 (capacity=6), 9 (capacity=2)\nVertex 8: 1 (capacity=4), 11 (capacity=6), 7 (capacity=5), 9 (capacity=3), 5 (capacity=2), 2 (capacity=9), 6 (capacity=5), 13 (capacity=3), 3 (capacity=6), 10 (capacity=7), 12 (capacity=5)\nVertex 9: 3 (capacity=2), 2 (capacity=7), 5 (capacity=10), 1 (capacity=1), 6 (capacity=9), 8 (capacity=3), 12 (capacity=2), 13 (capacity=10), 10 (capacity=9), 11 (capacity=7), 4 (capacity=6), 7 (capacity=2)\nVertex 10: 3 (capacity=5), 6 (capacity=5), 7 (capacity=4), 2 (capacity=5), 11 (capacity=8), 9 (capacity=9), 5 (capacity=9), 4 (capacity=5), 1 (capacity=4), 12 (capacity=1), 8 (capacity=7), 13 (capacity=9)\nVertex 11: 4 (capacity=6), 8 (capacity=6), 12 (capacity=8), 7 (capacity=3), 10 (capacity=8), 9 (capacity=7), 13 (capacity=10), 3 (capacity=6), 5 (capacity=5), 2 (capacity=10), 6 (capacity=9), 1 (capacity=9)\nVertex 12: 7 (capacity=4), 4 (capacity=7), 1 (capacity=7), 11 (capacity=8), 9 (capacity=2), 3 (capacity=8), 6 (capacity=2), 2 (capacity=9), 10 (capacity=1), 13 (capacity=7), 8 (capacity=5), 5 (capacity=1)\nVertex 13: 6 (capacity=7), 9 (capacity=10), 8 (capacity=3), 11 (capacity=10), 2 (capacity=6), 3 (capacity=8), 1 (capacity=6), 12 (capacity=7), 5 (capacity=6), 7 (capacity=4), 4 (capacity=8), 10 (capacity=9)\n",
    "graph_output": "13 77\n1 7 4\n1 6 3\n1 3 6\n7 12 4\n12 4 7\n6 13 7\n3 9 2\n3 10 5\n9 2 7\n6 5 10\n4 11 6\n1 8 4\n1 12 7\n11 8 6\n10 6 5\n7 10 4\n1 4 8\n9 5 10\n1 9 1\n6 3 4\n9 6 9\n4 2 3\n8 7 5\n2 10 5\n9 8 3\n11 12 8\n9 12 2\n9 13 10\n7 11 3\n5 8 2\n11 10 8\n3 12 8\n4 5 9\n5 3 4\n5 7 2\n2 7 4\n8 2 9\n9 10 9\n11 9 7\n6 8 5\n13 8 3\n3 8 6\n13 11 10\n3 11 6\n5 10 9\n4 7 1\n2 13 6\n13 3 8\n3 4 7\n13 1 6\n6 12 2\n12 2 9\n5 11 5\n3 7 1\n10 4 5\n2 11 10\n10 1 4\n10 12 1\n2 3 9\n13 12 7\n5 13 6\n8 10 7\n11 6 9\n1 2 4\n13 7 4\n2 5 8\n13 4 8\n4 9 6\n6 4 6\n10 13 9\n8 12 5\n12 5 1\n6 7 6\n6 2 10\n11 1 9\n1 5 3\n7 9 2\n",
    "vertices": [
      1,
      6
    ],
    "answer": 59,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 84 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 4 (weight=56), 8 (weight=97), 5 (weight=5), 13 (weight=85), 2 (weight=13), 14 (weight=20), 10 (weight=64), 12 (weight=32), 9 (weight=22), 6 (weight=88), 11 (weight=59), 3 (weight=2)\nVertex 2: 1 (weight=13), 4 (weight=14), 11 (weight=31), 5 (weight=45), 12 (weight=26), 9 (weight=78), 6 (weight=92), 3 (weight=19), 10 (weight=45), 7 (weight=35), 8 (weight=56), 13 (weight=93)\nVertex 3: 8 (weight=29), 14 (weight=35), 11 (weight=83), 6 (weight=29), 10 (weight=62), 13 (weight=2), 9 (weight=17), 2 (weight=19), 4 (weight=85), 12 (weight=92), 1 (weight=2)\nVertex 4: 1 (weight=56), 7 (weight=7), 6 (weight=19), 12 (weight=88), 2 (weight=14), 8 (weight=88), 5 (weight=13), 9 (weight=53), 13 (weight=14), 3 (weight=85), 10 (weight=66), 14 (weight=30), 11 (weight=85)\nVertex 5: 1 (weight=5), 9 (weight=60), 11 (weight=72), 13 (weight=72), 14 (weight=26), 2 (weight=45), 4 (weight=13), 12 (weight=72), 7 (weight=11), 10 (weight=91), 6 (weight=79)\nVertex 6: 4 (weight=19), 14 (weight=28), 13 (weight=18), 12 (weight=92), 3 (weight=29), 9 (weight=88), 10 (weight=15), 2 (weight=92), 7 (weight=59), 8 (weight=12), 1 (weight=88), 5 (weight=79)\nVertex 7: 4 (weight=7), 10 (weight=60), 11 (weight=55), 8 (weight=47), 6 (weight=59), 9 (weight=94), 2 (weight=35), 12 (weight=84), 5 (weight=11), 13 (weight=44), 14 (weight=73)\nVertex 8: 1 (weight=97), 3 (weight=29), 4 (weight=88), 14 (weight=44), 7 (weight=47), 6 (weight=12), 11 (weight=4), 13 (weight=63), 9 (weight=71), 2 (weight=56), 12 (weight=1)\nVertex 9: 5 (weight=60), 13 (weight=11), 6 (weight=88), 4 (weight=53), 2 (weight=78), 1 (weight=22), 3 (weight=17), 7 (weight=94), 12 (weight=8), 8 (weight=71), 10 (weight=53), 14 (weight=86), 11 (weight=98)\nVertex 10: 7 (weight=60), 1 (weight=64), 13 (weight=41), 11 (weight=76), 3 (weight=62), 6 (weight=15), 12 (weight=50), 2 (weight=45), 4 (weight=66), 5 (weight=91), 9 (weight=53), 14 (weight=66)\nVertex 11: 13 (weight=82), 5 (weight=72), 14 (weight=83), 3 (weight=83), 7 (weight=55), 2 (weight=31), 10 (weight=76), 8 (weight=4), 4 (weight=85), 12 (weight=61), 9 (weight=98), 1 (weight=59)\nVertex 12: 4 (weight=88), 6 (weight=92), 2 (weight=26), 14 (weight=61), 1 (weight=32), 10 (weight=50), 5 (weight=72), 7 (weight=84), 9 (weight=8), 13 (weight=49), 3 (weight=92), 8 (weight=1), 11 (weight=61)\nVertex 13: 1 (weight=85), 11 (weight=82), 6 (weight=18), 9 (weight=11), 5 (weight=72), 10 (weight=41), 4 (weight=14), 3 (weight=2), 8 (weight=63), 12 (weight=49), 7 (weight=44), 2 (weight=93), 14 (weight=47)\nVertex 14: 6 (weight=28), 3 (weight=35), 11 (weight=83), 1 (weight=20), 5 (weight=26), 8 (weight=44), 12 (weight=61), 9 (weight=86), 4 (weight=30), 13 (weight=47), 7 (weight=73), 10 (weight=66)\n",
    "graph_output": "14 84\n1 4 56\n4 7 7\n1 8 97\n4 6 19\n6 14 28\n4 12 88\n1 5 5\n1 13 85\n7 10 60\n5 9 60\n1 2 13\n8 3 29\n13 11 82\n6 13 18\n14 3 35\n9 13 11\n5 11 72\n11 14 83\n12 6 92\n14 1 20\n4 2 14\n11 3 83\n3 6 29\n7 11 55\n8 4 88\n13 5 72\n14 5 26\n11 2 31\n1 10 64\n13 10 41\n8 14 44\n2 5 45\n4 5 13\n6 9 88\n9 4 53\n12 2 26\n11 10 76\n10 3 62\n2 9 78\n14 12 61\n6 10 15\n4 13 14\n1 12 32\n3 13 2\n7 8 47\n12 10 50\n2 6 92\n9 1 22\n3 9 17\n7 6 59\n3 2 19\n8 6 12\n3 4 85\n7 9 94\n12 5 72\n2 10 45\n2 7 35\n12 7 84\n10 4 66\n11 8 4\n7 5 11\n10 5 91\n13 8 63\n9 12 8\n9 8 71\n13 12 49\n10 9 53\n2 8 56\n9 14 86\n1 6 88\n4 14 30\n3 12 92\n13 7 44\n5 6 79\n13 2 93\n11 4 85\n14 13 47\n12 8 1\n7 14 73\n12 11 61\n9 11 98\n11 1 59\n14 10 66\n3 1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 111,
    "description_type": "list"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 5 (source) to vertex 9 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 8 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0   0  45   0  48   0  13   0  78 \n 2 |  0   0   0   0   0  26   0   0  54 \n 3 | 45   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0  86 \n 5 | 48   0   0   0   0   0   0  71   0 \n 6 |  0  26   0   0   0   0   0   0   0 \n 7 | 13   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0  71   0   0   0   0 \n 9 | 78  54   0  86   0   0   0   0   0 \n\nCapacity Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0   0   5   0   6   0   4   0   8 \n 2 |  0   0   0   0   0  10   0   0  10 \n 3 |  5   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   4 \n 5 |  6   0   0   0   0   0   0   1   0 \n 6 |  0  10   0   0   0   0   0   0   0 \n 7 |  4   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   1   0   0   0   0 \n 9 |  8  10   0   4   0   0   0   0   0 \n",
    "graph_output": "9 8\n1 9 78 8\n1 5 48 6\n9 2 54 10\n1 3 45 5\n5 8 71 1\n2 6 26 10\n1 7 13 4\n9 4 86 4\n",
    "vertices": [
      5,
      9
    ],
    "answer": 756,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 7 and vertex 13 are connected.\n\nUndirected Graph with 16 vertices and 96 edges\n\nEdges (Format: Node Node):\n10 15\n2 8\n9 12\n13 5\n2 11\n1 15\n8 10\n4 7\n13 4\n6 15\n15 7\n12 1\n8 11\n4 14\n1 4\n12 7\n15 8\n5 11\n11 12\n13 7\n8 1\n9 6\n7 16\n14 5\n10 9\n2 1\n15 13\n11 9\n15 2\n2 16\n8 16\n7 8\n1 7\n16 15\n10 7\n12 2\n7 9\n8 4\n15 11\n3 8\n13 6\n3 9\n3 2\n3 5\n7 11\n6 14\n9 4\n1 10\n11 3\n2 9\n4 15\n6 7\n16 11\n9 14\n2 5\n6 12\n10 14\n10 11\n11 1\n13 10\n4 5\n13 14\n3 7\n4 16\n8 12\n10 6\n9 15\n3 16\n6 4\n15 14\n2 13\n7 2\n8 9\n2 10\n9 13\n4 3\n10 4\n14 12\n1 14\n3 6\n13 11\n6 1\n6 5\n15 5\n4 12\n7 14\n12 10\n5 8\n5 1\n8 14\n5 10\n3 10\n16 9\n12 3\n1 13\n12 13\n",
    "graph_output": "16 96\n10 15\n2 8\n9 12\n13 5\n2 11\n1 15\n8 10\n4 7\n13 4\n6 15\n15 7\n12 1\n8 11\n4 14\n1 4\n12 7\n15 8\n5 11\n11 12\n13 7\n8 1\n9 6\n7 16\n14 5\n10 9\n2 1\n15 13\n11 9\n15 2\n2 16\n8 16\n7 8\n1 7\n16 15\n10 7\n12 2\n7 9\n8 4\n15 11\n3 8\n13 6\n3 9\n3 2\n3 5\n7 11\n6 14\n9 4\n1 10\n11 3\n2 9\n4 15\n6 7\n16 11\n9 14\n2 5\n6 12\n10 14\n10 11\n11 1\n13 10\n4 5\n13 14\n3 7\n4 16\n8 12\n10 6\n9 15\n3 16\n6 4\n15 14\n2 13\n7 2\n8 9\n2 10\n9 13\n4 3\n10 4\n14 12\n1 14\n3 6\n13 11\n6 1\n6 5\n15 5\n4 12\n7 14\n12 10\n5 8\n5 1\n8 14\n5 10\n3 10\n16 9\n12 3\n1 13\n12 13\n",
    "vertices": [
      7,
      13
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 87 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   0   1   0   1   1   1   1   1   1   1   1   0 \n 2 |  1   0   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   0   1   0   0   1   1   0   1   1   0   0 \n 4 |  0   1   1   0   1   0   1   0   1   1   1   1   1   1   1 \n 5 |  1   1   0   1   0   1   1   1   1   1   1   1   1   1   1 \n 6 |  0   1   1   0   1   0   1   0   1   1   1   1   1   1   1 \n 7 |  1   0   0   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   0   0   1   0   1   0   0   1   1   1   1   1   0 \n 9 |  1   1   1   1   1   1   1   0   0   1   1   0   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   0   1   1 \n11 |  1   1   0   1   1   1   1   1   1   1   0   0   1   1   1 \n12 |  1   1   1   1   1   1   1   1   0   1   0   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   0   1   1   0   1   1 \n14 |  1   1   0   1   1   1   1   1   1   1   1   1   1   0   1 \n15 |  0   1   0   1   1   1   1   0   1   1   1   1   1   1   0 \n",
    "graph_output": "15 87\n1 9\n1 11\n1 5\n1 14\n14 6\n6 15\n6 3\n3 4\n14 8\n8 7\n1 12\n4 2\n2 10\n12 13\n10 15\n10 3\n10 12\n14 4\n10 4\n2 6\n10 5\n5 12\n3 12\n11 14\n3 1\n9 11\n1 7\n14 7\n3 9\n13 4\n10 6\n14 12\n8 13\n13 5\n14 13\n1 13\n1 10\n5 8\n15 4\n5 6\n8 11\n11 6\n11 13\n4 5\n13 2\n14 15\n8 1\n10 7\n11 10\n6 9\n2 14\n5 14\n14 9\n8 2\n3 2\n13 15\n4 9\n9 7\n6 7\n10 14\n10 9\n11 5\n15 12\n5 7\n13 9\n9 15\n7 12\n11 15\n12 4\n10 8\n13 7\n5 2\n15 2\n6 13\n5 9\n15 5\n6 12\n7 4\n2 1\n12 8\n15 7\n2 12\n4 11\n2 9\n13 3\n2 11\n7 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 5 (source) to vertex 3 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 16 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 3 (capacity=5), 5 (capacity=2), 4 (capacity=1), 11 (capacity=2), 10 (capacity=7), 2 (capacity=1)\nVertex 2: 3 (capacity=1), 11 (capacity=8), 1 (capacity=1)\nVertex 3: 1 (capacity=5), 2 (capacity=1)\nVertex 4: 1 (capacity=1), 10 (capacity=10), 8 (capacity=5), 11 (capacity=6)\nVertex 5: 1 (capacity=2), 7 (capacity=9)\nVertex 6: 7 (capacity=8), 10 (capacity=4)\nVertex 7: 5 (capacity=9), 6 (capacity=8), 9 (capacity=1), 11 (capacity=8)\nVertex 8: 4 (capacity=5)\nVertex 9: 7 (capacity=1)\nVertex 10: 4 (capacity=10), 1 (capacity=7), 6 (capacity=4)\nVertex 11: 2 (capacity=8), 4 (capacity=6), 1 (capacity=2), 7 (capacity=8)\n",
    "graph_output": "11 16\n1 3 5\n1 5 2\n5 7 9\n7 6 8\n3 2 1\n1 4 1\n2 11 8\n4 10 10\n4 8 5\n7 9 1\n11 4 6\n1 11 2\n1 10 7\n6 10 4\n11 7 8\n2 1 1\n",
    "vertices": [
      5,
      3
    ],
    "answer": 6,
    "description_type": "list"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 23 and 3 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 22, 11, 29, 13\nVertex 2: 14\nVertex 3: 29, 27\nVertex 4: 26\nVertex 5: 14, 24\nVertex 6: 11\nVertex 7: 16\nVertex 8: 29, 12\nVertex 9: 26\nVertex 10: 19\nVertex 11: 1, 6\nVertex 12: 8\nVertex 13: 1\nVertex 14: 23, 2, 5, 20\nVertex 15: 27\nVertex 16: 25, 7, 21\nVertex 17: 22, 26\nVertex 18: 22, 25, 19\nVertex 19: 18, 10\nVertex 20: 14\nVertex 21: 16\nVertex 22: 1, 17, 18, 23\nVertex 23: 22, 14\nVertex 24: 5\nVertex 25: 18, 28, 16\nVertex 26: 17, 4, 9\nVertex 27: 3, 15\nVertex 28: 25, 30\nVertex 29: 1, 3, 8\nVertex 30: 28\n",
    "graph_output": "30 29\n1 22\n1 11\n22 17\n22 18\n17 26\n1 29\n18 25\n26 4\n25 28\n22 23\n23 14\n29 3\n14 2\n14 5\n18 19\n19 10\n11 6\n25 16\n16 7\n29 8\n16 21\n8 12\n3 27\n14 20\n1 13\n28 30\n5 24\n27 15\n26 9\n",
    "vertices": [
      23,
      3
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 17 vertices and 102 edges\n\nEdges (Format: Node Node):\n1 10\n10 7\n7 9\n9 16\n1 15\n15 3\n15 5\n1 17\n10 2\n5 8\n16 4\n9 6\n1 13\n7 14\n6 11\n9 12\n11 5\n12 13\n1 12\n9 14\n3 17\n1 2\n10 6\n16 10\n17 12\n11 10\n14 11\n2 12\n6 15\n15 13\n4 10\n9 4\n9 2\n16 11\n14 15\n12 5\n8 11\n8 6\n10 9\n4 6\n8 10\n6 5\n7 4\n17 4\n5 14\n2 6\n16 2\n7 3\n13 6\n11 3\n16 5\n5 17\n12 15\n4 1\n14 3\n14 12\n11 9\n17 15\n7 16\n3 6\n12 7\n16 17\n11 13\n15 2\n15 8\n5 7\n4 3\n7 11\n2 4\n3 10\n8 13\n17 11\n9 3\n3 8\n9 8\n3 13\n17 14\n3 5\n7 2\n9 5\n16 8\n13 4\n15 7\n17 9\n8 2\n14 4\n11 12\n8 7\n1 7\n14 10\n13 16\n5 2\n11 4\n6 12\n5 10\n1 5\n12 8\n14 8\n13 2\n17 13\n13 9\n10 15\n",
    "graph_output": "17 102\n1 10\n10 7\n7 9\n9 16\n1 15\n15 3\n15 5\n1 17\n10 2\n5 8\n16 4\n9 6\n1 13\n7 14\n6 11\n9 12\n11 5\n12 13\n1 12\n9 14\n3 17\n1 2\n10 6\n16 10\n17 12\n11 10\n14 11\n2 12\n6 15\n15 13\n4 10\n9 4\n9 2\n16 11\n14 15\n12 5\n8 11\n8 6\n10 9\n4 6\n8 10\n6 5\n7 4\n17 4\n5 14\n2 6\n16 2\n7 3\n13 6\n11 3\n16 5\n5 17\n12 15\n4 1\n14 3\n14 12\n11 9\n17 15\n7 16\n3 6\n12 7\n16 17\n11 13\n15 2\n15 8\n5 7\n4 3\n7 11\n2 4\n3 10\n8 13\n17 11\n9 3\n3 8\n9 8\n3 13\n17 14\n3 5\n7 2\n9 5\n16 8\n13 4\n15 7\n17 9\n8 2\n14 4\n11 12\n8 7\n1 7\n14 10\n13 16\n5 2\n11 4\n6 12\n5 10\n1 5\n12 8\n14 8\n13 2\n17 13\n13 9\n10 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 16 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 5, 3, 14\nVertex 2: 5\nVertex 3: 1\nVertex 4: 13, 16, 5\nVertex 5: 1, 2, 13, 4\nVertex 6: 13\nVertex 7: 9\nVertex 8: 9, 12\nVertex 9: 1, 7, 10, 8\nVertex 10: 9, 15, 11\nVertex 11: 10\nVertex 12: 8\nVertex 13: 5, 4, 6\nVertex 14: 1\nVertex 15: 10\nVertex 16: 4\n",
    "graph_output": "16 16\n1 9\n9 7\n1 5\n5 2\n9 10\n10 15\n9 8\n1 3\n5 13\n1 14\n8 12\n13 4\n10 11\n4 16\n13 6\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 12, 10, 7, 13, 11\nVertex 2: 15, 7\nVertex 3: 16, 8\nVertex 4: 15, 10, 8\nVertex 5: 11, 9, 13, 12, 6\nVertex 6: 16, 8, 5\nVertex 7: 10, 14, 1, 15, 2\nVertex 8: 6, 3, 4\nVertex 9: 5, 15\nVertex 10: 7, 4, 1, 16, 12\nVertex 11: 5, 13, 14, 1\nVertex 12: 13, 1, 5, 10\nVertex 13: 11, 12, 5, 1, 14\nVertex 14: 7, 16, 11, 13\nVertex 15: 4, 9, 2, 7\nVertex 16: 6, 3, 14, 10\n",
    "graph_output": "16 30\n10 7\n16 6\n15 4\n16 3\n6 8\n11 5\n13 11\n13 12\n3 8\n7 14\n9 5\n9 15\n14 16\n1 12\n10 4\n1 10\n7 1\n11 14\n2 15\n5 13\n16 10\n5 12\n12 10\n1 13\n6 5\n14 13\n7 15\n7 2\n1 11\n8 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 12 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 16 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 12 with a capacity of 5.\nThere is an edge between vertex 13 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 8 and vertex 3 with a capacity of 10.\nThere is an edge between vertex 8 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 12 and vertex 11 with a capacity of 9.\nThere is an edge between vertex 12 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 13 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 12 and vertex 9 with a capacity of 10.\nThere is an edge between vertex 7 and vertex 10 with a capacity of 3.\nThere is an edge between vertex 13 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 12 with a capacity of 8.\nThere is an edge between vertex 8 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 1 with a capacity of 4.\n",
    "graph_output": "13 16\n1 13 5\n1 4 8\n1 5 9\n4 12 5\n13 8 9\n8 3 10\n8 6 10\n12 11 9\n12 7 6\n13 2 10\n12 9 10\n7 10 3\n13 10 9\n5 12 8\n8 5 9\n7 1 4\n",
    "vertices": [
      3,
      12
    ],
    "answer": 10,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 26 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 12 and vertex 14.\n",
    "graph_output": "16 26\n1 5\n1 10\n5 12\n10 15\n1 4\n12 11\n10 8\n11 16\n5 6\n4 13\n1 7\n6 2\n2 14\n1 3\n4 9\n10 12\n16 9\n5 11\n15 7\n9 1\n12 4\n13 8\n9 14\n13 6\n2 8\n12 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 12, 28, 10, 7, 17\nVertex 2: 8, 25\nVertex 3: 10\nVertex 4: 16, 14, 30\nVertex 5: 6\nVertex 6: 22, 5\nVertex 7: 1\nVertex 8: 12, 2\nVertex 9: 13\nVertex 10: 1, 13, 11, 3\nVertex 11: 10\nVertex 12: 1, 8, 29\nVertex 13: 10, 19, 9\nVertex 14: 4, 24\nVertex 15: 22, 27, 18\nVertex 16: 28, 4, 26\nVertex 17: 1\nVertex 18: 15, 23\nVertex 19: 13, 20\nVertex 20: 19\nVertex 21: 22\nVertex 22: 28, 21, 15, 6\nVertex 23: 18\nVertex 24: 14\nVertex 25: 2\nVertex 26: 16\nVertex 27: 15\nVertex 28: 1, 22, 16\nVertex 29: 12\nVertex 30: 4\n",
    "graph_output": "30 29\n1 12\n1 28\n1 10\n1 7\n28 22\n22 21\n10 13\n22 15\n12 8\n12 29\n22 6\n13 19\n28 16\n16 4\n4 14\n16 26\n13 9\n4 30\n15 27\n10 11\n8 2\n15 18\n19 20\n18 23\n6 5\n10 3\n2 25\n14 24\n1 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "list"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (30\u00d730):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n   ------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1 \n 2 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 9 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n11 |  1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n14 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   1   0   0   0 \n16 |  0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n20 |  1   1   0   0   0   0   0   0   1   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n21 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n22 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n23 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n30 |  1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n",
    "graph_output": "30 29\n1 14\n1 30\n1 11\n1 20\n14 24\n20 15\n24 21\n15 18\n11 12\n20 2\n30 8\n20 9\n12 16\n2 7\n15 27\n8 10\n7 5\n20 13\n5 22\n12 17\n21 4\n10 26\n9 6\n22 25\n16 3\n30 29\n20 28\n28 19\n3 23\n",
    "vertices": [
      null,
      null
    ],
    "answer": 11,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 7, 3, 10, 15, 16\nVertex 2: 10, 17\nVertex 3: 1, 11\nVertex 4: 5, 10\nVertex 5: 14, 4, 10\nVertex 6: 1, 14, 11, 16, 13, 12, 17\nVertex 7: 1, 17\nVertex 8: 14, 9, 12\nVertex 9: 8, 15\nVertex 10: 1, 2, 4, 5\nVertex 11: 6, 3\nVertex 12: 14, 13, 16, 6, 8\nVertex 13: 12, 15, 6, 16\nVertex 14: 6, 8, 16, 5, 12\nVertex 15: 13, 1, 9\nVertex 16: 14, 6, 12, 13, 1\nVertex 17: 2, 7, 6\n",
    "graph_output": "17 30\n1 6\n6 14\n14 8\n14 16\n8 9\n14 5\n5 4\n1 7\n6 11\n14 12\n12 13\n1 3\n1 10\n10 2\n13 15\n2 17\n6 16\n7 17\n6 13\n10 4\n10 5\n12 16\n12 6\n16 13\n15 1\n9 15\n6 17\n3 11\n8 12\n1 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 19 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   1   0   0   0   1   0   1   0   0   0   1   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 3 |  1   0   0   1   1   0   0   0   0   0   0   0   0   1   0   0 \n 4 |  0   0   1   0   0   0   1   0   0   0   1   0   0   0   0   0 \n 5 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 7 |  1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0 \n 9 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n10 |  0   0   0   0   0   1   0   1   0   0   0   1   0   0   1   0 \n11 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   1   0   1   0   0   0   1   0   0 \n13 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n14 |  0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   1 \n15 |  0   0   0   0   0   0   0   0   1   1   0   0   1   0   0   0 \n16 |  0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n",
    "graph_output": "16 19\n1 9\n1 3\n9 15\n15 10\n10 12\n10 6\n3 4\n1 13\n12 14\n10 8\n4 7\n14 16\n4 11\n16 2\n3 5\n7 1\n12 8\n14 3\n13 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (30\u00d730):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n   ------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   1   1   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   1   0   0   0 \n 3 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 8 |  0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 9 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n13 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0 \n15 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   1   0   1   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n18 |  0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n23 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n26 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n27 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n30 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "30 29\n1 9\n9 16\n9 18\n16 21\n16 12\n18 22\n1 20\n21 8\n18 29\n1 25\n25 14\n8 5\n8 10\n1 3\n16 7\n12 19\n25 26\n26 6\n1 13\n18 2\n2 23\n14 28\n5 30\n23 17\n1 4\n7 24\n7 15\n29 11\n2 27\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 2 and vertex 1 are connected.\n\nThis is an undirected graph with 15 vertices and 86 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n 2 |  1   0   1   0   1   1   1   0   1   1   1   1   1   0   1 \n 3 |  1   1   0   1   0   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   0   1   0   1   1   0   1   1   1   0   0   1   1   1 \n 5 |  1   1   0   1   0   0   0   0   1   1   1   0   1   1   1 \n 6 |  1   1   1   1   0   0   1   1   0   0   1   1   1   1   1 \n 7 |  1   1   1   0   0   1   0   1   1   1   1   1   1   1   1 \n 8 |  1   0   1   1   0   1   1   0   1   1   1   1   1   0   0 \n 9 |  1   1   1   1   1   0   1   1   0   1   1   1   1   0   1 \n10 |  1   1   1   1   1   0   1   1   1   0   1   1   1   1   1 \n11 |  1   1   1   0   1   1   1   1   1   1   0   1   1   0   1 \n12 |  1   1   1   0   0   1   1   1   1   1   1   0   1   0   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   0   1   1   1   1   1   0   0   1   0   0   1   0   1 \n15 |  0   1   1   1   1   1   1   0   1   1   1   1   1   1   0 \n",
    "graph_output": "15 86\n5 11\n1 3\n13 15\n4 14\n11 15\n10 2\n15 6\n13 3\n1 2\n4 10\n9 5\n7 11\n14 5\n8 6\n15 14\n6 14\n12 9\n14 3\n10 7\n4 3\n14 10\n9 8\n1 4\n9 11\n1 10\n15 9\n1 13\n1 14\n14 7\n7 6\n8 4\n3 6\n5 13\n8 11\n9 2\n9 7\n7 2\n8 7\n12 11\n6 4\n7 1\n10 8\n5 1\n7 15\n2 12\n13 6\n10 11\n9 10\n8 13\n13 11\n13 9\n1 9\n10 3\n3 7\n10 13\n2 15\n4 9\n11 3\n4 13\n5 10\n6 11\n9 3\n12 15\n7 13\n3 2\n2 11\n3 12\n10 15\n8 12\n12 10\n4 5\n15 5\n7 12\n11 1\n12 1\n12 13\n6 1\n15 3\n14 13\n6 12\n2 13\n6 2\n8 3\n15 4\n8 1\n5 2\n",
    "vertices": [
      2,
      1
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 18 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   0   0   0   0   1   0   0   0   1   0   0   0   0 \n 2 |  1   0   0   1   0   1   0   0   1   0   0   1   0   1   0 \n 3 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   1 \n 4 |  0   1   0   0   1   0   0   0   0   0   0   0   1   0   0 \n 5 |  0   0   1   1   0   0   0   0   0   0   1   0   0   0   0 \n 6 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  1   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   1   0   0   1   0   0   0   0   0 \n 9 |  0   1   0   0   0   0   0   0   0   0   0   0   1   0   0 \n10 |  0   0   0   0   0   0   0   1   0   0   1   0   0   0   0 \n11 |  1   0   0   0   1   0   0   0   0   1   0   0   0   0   0 \n12 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   1   0   0   0   0   1   0   0   0   0   1   0 \n14 |  0   1   0   0   0   0   0   0   0   0   0   0   1   0   0 \n15 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "15 18\n1 11\n1 2\n2 4\n11 5\n2 9\n1 7\n5 3\n11 10\n3 15\n2 12\n2 14\n7 8\n2 6\n9 13\n8 10\n4 5\n4 13\n14 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 43 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 1 and vertex 8.\n",
    "graph_output": "11 43\n3 9\n11 5\n9 11\n8 2\n2 10\n11 6\n7 6\n2 9\n11 3\n5 7\n9 1\n5 9\n10 6\n2 1\n3 7\n7 8\n3 4\n6 4\n4 7\n4 1\n8 4\n8 9\n8 3\n5 10\n4 10\n1 6\n1 3\n6 5\n11 7\n2 5\n10 1\n11 2\n10 11\n8 5\n2 6\n1 11\n8 6\n7 2\n3 10\n4 5\n1 5\n9 6\n1 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 7 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (8\u00d78):\n\n      1   2   3   4   5   6   7   8\n   --------------------------------\n 1 |  0   1   0   1   0   0   0   0 \n 2 |  1   0   0   1   0   0   1   1 \n 3 |  0   0   0   1   0   0   0   0 \n 4 |  1   1   1   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   1 \n 7 |  0   1   0   0   0   0   0   0 \n 8 |  0   1   0   0   0   1   0   0 \n",
    "graph_output": "8 7\n3 4\n4 1\n8 6\n1 2\n2 4\n2 8\n2 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 9 and vertex 8 are connected.\n\nUndirected Graph with 16 vertices and 19 edges\n\nEdges (Format: Node Node):\n4 2\n1 10\n11 15\n4 12\n14 8\n9 5\n2 7\n10 2\n13 10\n8 5\n2 8\n4 10\n6 7\n13 5\n16 11\n5 11\n6 1\n4 8\n1 15\n",
    "graph_output": "16 19\n4 2\n1 10\n11 15\n4 12\n14 8\n9 5\n2 7\n10 2\n13 10\n8 5\n2 8\n4 10\n6 7\n13 5\n16 11\n5 11\n6 1\n4 8\n1 15\n",
    "vertices": [
      9,
      8
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 18 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 13 (weight=74), 11 (weight=44)\nVertex 2: 6 (weight=39), 7 (weight=63), 8 (weight=93)\nVertex 3: 13 (weight=15), 5 (weight=68), 9 (weight=57)\nVertex 4: 10 (weight=70), 11 (weight=92), 8 (weight=35)\nVertex 5: 3 (weight=68), 8 (weight=15)\nVertex 6: 13 (weight=92), 2 (weight=39)\nVertex 7: 2 (weight=63)\nVertex 8: 5 (weight=15), 4 (weight=35), 2 (weight=93)\nVertex 9: 12 (weight=48), 3 (weight=57)\nVertex 10: 13 (weight=37), 12 (weight=72), 4 (weight=70)\nVertex 11: 12 (weight=2), 1 (weight=44), 4 (weight=92)\nVertex 12: 10 (weight=72), 11 (weight=2), 9 (weight=48), 13 (weight=33)\nVertex 13: 1 (weight=74), 3 (weight=15), 10 (weight=37), 6 (weight=92), 12 (weight=33)\n",
    "graph_output": "13 18\n1 13 74\n13 3 15\n13 10 37\n13 6 92\n6 2 39\n3 5 68\n10 12 72\n12 11 2\n12 9 48\n2 7 63\n5 8 15\n10 4 70\n11 1 44\n3 9 57\n11 4 92\n4 8 35\n13 12 33\n8 2 93\n",
    "vertices": [
      null,
      null
    ],
    "answer": 492,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 14 vertices and 18 edges\n\nEdges (Format: Node Node Weight):\n1 9 33\n1 5 15\n9 2 87\n1 3 16\n5 8 57\n2 13 10\n8 10 37\n9 11 7\n11 7 30\n5 14 39\n7 6 60\n11 4 51\n8 12 85\n14 10 79\n1 12 97\n12 3 97\n7 2 59\n7 4 55\n",
    "graph_output": "14 18\n1 9 33\n1 5 15\n9 2 87\n1 3 16\n5 8 57\n2 13 10\n8 10 37\n9 11 7\n11 7 30\n5 14 39\n7 6 60\n11 4 51\n8 12 85\n14 10 79\n1 12 97\n12 3 97\n7 2 59\n7 4 55\n",
    "vertices": [
      null,
      null
    ],
    "answer": 499,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 15 vertices and 87 edges\n\nEdges (Format: Node Node):\n1 3\n1 5\n1 15\n1 12\n5 8\n5 2\n3 7\n12 13\n12 11\n5 14\n11 9\n7 10\n1 6\n14 4\n10 9\n5 6\n4 12\n10 8\n8 1\n6 3\n15 7\n2 13\n15 4\n6 15\n8 12\n15 12\n4 13\n9 14\n7 13\n5 11\n10 14\n10 2\n6 4\n10 4\n8 9\n14 6\n7 12\n5 13\n9 6\n2 15\n13 10\n14 12\n1 2\n9 13\n3 2\n11 15\n11 10\n6 11\n3 13\n2 4\n12 5\n4 7\n4 11\n10 5\n3 4\n8 3\n13 11\n14 1\n8 2\n14 8\n7 9\n1 11\n15 13\n8 4\n15 5\n5 9\n5 7\n7 6\n1 13\n3 14\n15 8\n6 10\n11 14\n13 8\n6 12\n9 12\n7 2\n3 5\n15 3\n6 8\n7 8\n1 7\n4 9\n9 2\n12 10\n2 11\n15 14\n",
    "graph_output": "15 87\n1 3\n1 5\n1 15\n1 12\n5 8\n5 2\n3 7\n12 13\n12 11\n5 14\n11 9\n7 10\n1 6\n14 4\n10 9\n5 6\n4 12\n10 8\n8 1\n6 3\n15 7\n2 13\n15 4\n6 15\n8 12\n15 12\n4 13\n9 14\n7 13\n5 11\n10 14\n10 2\n6 4\n10 4\n8 9\n14 6\n7 12\n5 13\n9 6\n2 15\n13 10\n14 12\n1 2\n9 13\n3 2\n11 15\n11 10\n6 11\n3 13\n2 4\n12 5\n4 7\n4 11\n10 5\n3 4\n8 3\n13 11\n14 1\n8 2\n14 8\n7 9\n1 11\n15 13\n8 4\n15 5\n5 9\n5 7\n7 6\n1 13\n3 14\n15 8\n6 10\n11 14\n13 8\n6 12\n9 12\n7 2\n3 5\n15 3\n6 8\n7 8\n1 7\n4 9\n9 2\n12 10\n2 11\n15 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 13 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 6 and vertex 3.\n",
    "graph_output": "8 13\n1 4\n4 6\n6 5\n1 3\n1 7\n4 2\n2 8\n3 8\n2 1\n6 8\n7 8\n4 7\n6 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 399,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 26 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   0   0   0   0   0   1   0   0   1   1   0   0   1 \n 2 |  1   0   1   1   0   0   0   0   0   0   1   0   1   0   0 \n 3 |  0   1   0   0   1   0   0   1   0   1   0   1   0   0   1 \n 4 |  0   1   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 5 |  0   0   1   0   0   0   0   0   0   1   0   0   0   1   0 \n 6 |  0   0   0   0   0   0   0   0   1   0   0   0   0   1   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  1   0   1   1   0   0   0   0   0   0   0   1   0   0   0 \n 9 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n10 |  0   0   1   0   1   0   0   0   0   0   1   0   1   1   0 \n11 |  1   1   0   0   0   0   0   0   0   1   0   0   1   1   0 \n12 |  1   0   1   0   0   0   0   1   0   0   0   0   0   1   0 \n13 |  0   1   0   0   0   0   0   0   0   1   1   0   0   0   0 \n14 |  0   0   0   0   1   1   0   0   0   1   1   1   0   0   0 \n15 |  1   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "15 26\n14 11\n14 10\n14 12\n13 11\n12 1\n8 4\n3 12\n15 1\n14 5\n15 3\n4 2\n2 11\n1 2\n2 13\n5 3\n2 3\n3 10\n6 9\n8 12\n13 10\n11 1\n1 8\n10 11\n6 14\n3 8\n10 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 40 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   1   0   1   1   0   1   1   0   1 \n 2 |  0   0   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   0   0   0   1   1   1 \n 4 |  0   1   1   0   1   1   0   1   1   0   1 \n 5 |  1   1   1   1   0   1   1   0   1   1   1 \n 6 |  1   1   0   1   1   0   1   1   0   1   0 \n 7 |  0   1   0   0   1   1   0   1   1   1   1 \n 8 |  1   1   0   1   0   1   1   0   1   0   0 \n 9 |  1   1   1   1   1   0   1   1   0   1   0 \n10 |  0   1   1   0   1   1   1   0   1   0   1 \n11 |  1   1   1   1   1   0   1   0   0   1   0 \n",
    "graph_output": "11 40\n7 10\n5 9\n1 11\n4 3\n2 11\n7 6\n3 11\n3 1\n11 4\n2 8\n9 1\n2 4\n9 4\n3 9\n7 9\n7 8\n10 5\n10 3\n5 1\n11 5\n2 3\n7 5\n11 10\n1 6\n4 8\n2 5\n5 6\n2 7\n5 3\n5 4\n8 6\n9 2\n10 6\n10 2\n11 7\n9 8\n1 8\n2 6\n9 10\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 24 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 13\nVertex 2: 4, 5, 7\nVertex 3: 16\nVertex 4: 2, 5, 7\nVertex 5: 2, 4, 8\nVertex 6: 9\nVertex 7: 13, 12, 2, 9, 4\nVertex 8: 11, 1, 5\nVertex 9: 14, 16, 7, 6\nVertex 10: 15, 16, 14\nVertex 11: 8, 16\nVertex 12: 16, 7, 15\nVertex 13: 7, 1, 15\nVertex 14: 9, 10, 16\nVertex 15: 10, 13, 12\nVertex 16: 12, 3, 10, 9, 11, 14\n",
    "graph_output": "16 24\n15 10\n7 13\n2 4\n16 12\n8 11\n9 14\n1 8\n5 2\n16 3\n10 16\n7 12\n16 9\n13 1\n16 11\n7 2\n9 7\n4 5\n13 15\n15 12\n10 14\n6 9\n7 4\n5 8\n14 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 113 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   0   1   1   1   1   0   0   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   0   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   0   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   0   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   0   1 \n10 |  1   1   1   1   1   1   1   1   1   0   0   1   1   1   1   1 \n11 |  1   0   1   1   1   1   1   1   1   0   0   1   1   1   1   1 \n12 |  1   0   0   1   1   1   0   1   1   1   1   0   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n15 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   0   1 \n16 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "16 113\n16 15\n3 11\n14 1\n7 8\n7 4\n8 9\n4 9\n3 6\n13 3\n12 16\n11 14\n9 16\n5 13\n3 8\n15 6\n7 11\n8 10\n8 2\n7 2\n13 1\n10 7\n12 10\n16 4\n4 10\n9 3\n14 12\n11 16\n5 2\n8 16\n16 5\n15 14\n9 10\n1 2\n14 3\n5 7\n6 8\n10 16\n3 16\n9 14\n4 5\n14 2\n13 15\n6 16\n11 13\n12 8\n13 9\n2 16\n6 14\n4 11\n7 15\n15 8\n3 1\n10 15\n10 14\n6 4\n2 13\n4 1\n11 6\n14 16\n1 16\n10 3\n1 9\n5 14\n6 1\n13 12\n15 4\n8 5\n15 2\n13 10\n4 14\n15 5\n13 16\n12 4\n7 13\n11 9\n1 15\n1 11\n4 3\n6 5\n11 12\n15 3\n14 7\n11 15\n8 11\n13 4\n12 9\n5 11\n10 6\n5 12\n5 3\n8 13\n2 9\n7 16\n14 13\n9 5\n12 6\n1 8\n1 10\n3 2\n5 1\n4 2\n14 8\n6 9\n4 8\n3 7\n7 1\n13 6\n12 15\n5 10\n1 12\n9 7\n10 2\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 69 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 12 and vertex 2.\n",
    "graph_output": "13 69\n7 4\n7 5\n6 2\n1 7\n11 12\n7 6\n10 2\n2 1\n8 4\n3 12\n13 8\n10 11\n6 1\n1 13\n11 5\n1 8\n1 5\n9 5\n9 13\n1 3\n11 4\n3 5\n2 9\n2 3\n13 7\n3 7\n2 8\n12 4\n3 6\n4 1\n5 4\n13 5\n10 5\n13 3\n9 10\n3 11\n13 4\n1 12\n2 11\n6 5\n4 9\n13 12\n4 6\n2 7\n8 6\n6 10\n1 10\n10 8\n10 3\n6 11\n1 9\n11 8\n7 12\n3 4\n7 11\n6 12\n13 11\n13 6\n7 8\n3 8\n10 7\n13 10\n3 9\n2 4\n9 6\n4 10\n10 12\n9 8\n12 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 198,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 15 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 92 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2 with a weight of 90.\nThere is an edge between vertex 2 and vertex 8 with a weight of 11.\nThere is an edge between vertex 2 and vertex 10 with a weight of 13.\nThere is an edge between vertex 10 and vertex 13 with a weight of 77.\nThere is an edge between vertex 8 and vertex 15 with a weight of 13.\nThere is an edge between vertex 10 and vertex 11 with a weight of 3.\nThere is an edge between vertex 11 and vertex 7 with a weight of 100.\nThere is an edge between vertex 2 and vertex 5 with a weight of 74.\nThere is an edge between vertex 2 and vertex 4 with a weight of 82.\nThere is an edge between vertex 8 and vertex 6 with a weight of 20.\nThere is an edge between vertex 13 and vertex 3 with a weight of 93.\nThere is an edge between vertex 5 and vertex 9 with a weight of 61.\nThere is an edge between vertex 13 and vertex 14 with a weight of 42.\nThere is an edge between vertex 15 and vertex 12 with a weight of 22.\nThere is an edge between vertex 5 and vertex 8 with a weight of 30.\nThere is an edge between vertex 13 and vertex 5 with a weight of 45.\nThere is an edge between vertex 7 and vertex 15 with a weight of 74.\nThere is an edge between vertex 5 and vertex 10 with a weight of 86.\nThere is an edge between vertex 4 and vertex 9 with a weight of 50.\nThere is an edge between vertex 8 and vertex 12 with a weight of 49.\nThere is an edge between vertex 6 and vertex 4 with a weight of 12.\nThere is an edge between vertex 14 and vertex 9 with a weight of 63.\nThere is an edge between vertex 15 and vertex 3 with a weight of 89.\nThere is an edge between vertex 15 and vertex 9 with a weight of 51.\nThere is an edge between vertex 15 and vertex 5 with a weight of 61.\nThere is an edge between vertex 9 and vertex 11 with a weight of 99.\nThere is an edge between vertex 1 and vertex 12 with a weight of 18.\nThere is an edge between vertex 8 and vertex 4 with a weight of 16.\nThere is an edge between vertex 10 and vertex 7 with a weight of 28.\nThere is an edge between vertex 12 and vertex 4 with a weight of 47.\nThere is an edge between vertex 11 and vertex 4 with a weight of 33.\nThere is an edge between vertex 7 and vertex 4 with a weight of 50.\nThere is an edge between vertex 6 and vertex 5 with a weight of 46.\nThere is an edge between vertex 14 and vertex 5 with a weight of 76.\nThere is an edge between vertex 2 and vertex 14 with a weight of 88.\nThere is an edge between vertex 13 and vertex 11 with a weight of 84.\nThere is an edge between vertex 1 and vertex 13 with a weight of 81.\nThere is an edge between vertex 6 and vertex 10 with a weight of 24.\nThere is an edge between vertex 14 and vertex 4 with a weight of 71.\nThere is an edge between vertex 1 and vertex 3 with a weight of 14.\nThere is an edge between vertex 1 and vertex 15 with a weight of 53.\nThere is an edge between vertex 10 and vertex 8 with a weight of 14.\nThere is an edge between vertex 3 and vertex 12 with a weight of 49.\nThere is an edge between vertex 10 and vertex 3 with a weight of 57.\nThere is an edge between vertex 2 and vertex 3 with a weight of 3.\nThere is an edge between vertex 2 and vertex 7 with a weight of 96.\nThere is an edge between vertex 11 and vertex 14 with a weight of 17.\nThere is an edge between vertex 2 and vertex 11 with a weight of 56.\nThere is an edge between vertex 1 and vertex 7 with a weight of 18.\nThere is an edge between vertex 1 and vertex 4 with a weight of 82.\nThere is an edge between vertex 14 and vertex 3 with a weight of 79.\nThere is an edge between vertex 9 and vertex 1 with a weight of 70.\nThere is an edge between vertex 1 and vertex 14 with a weight of 46.\nThere is an edge between vertex 3 and vertex 7 with a weight of 92.\nThere is an edge between vertex 5 and vertex 7 with a weight of 54.\nThere is an edge between vertex 10 and vertex 1 with a weight of 62.\nThere is an edge between vertex 6 and vertex 14 with a weight of 42.\nThere is an edge between vertex 8 and vertex 11 with a weight of 65.\nThere is an edge between vertex 7 and vertex 12 with a weight of 30.\nThere is an edge between vertex 7 and vertex 6 with a weight of 17.\nThere is an edge between vertex 14 and vertex 10 with a weight of 92.\nThere is an edge between vertex 12 and vertex 5 with a weight of 33.\nThere is an edge between vertex 13 and vertex 2 with a weight of 48.\nThere is an edge between vertex 9 and vertex 8 with a weight of 28.\nThere is an edge between vertex 1 and vertex 11 with a weight of 7.\nThere is an edge between vertex 15 and vertex 4 with a weight of 6.\nThere is an edge between vertex 15 and vertex 10 with a weight of 13.\nThere is an edge between vertex 9 and vertex 13 with a weight of 17.\nThere is an edge between vertex 13 and vertex 6 with a weight of 9.\nThere is an edge between vertex 3 and vertex 4 with a weight of 91.\nThere is an edge between vertex 12 and vertex 2 with a weight of 58.\nThere is an edge between vertex 11 and vertex 5 with a weight of 6.\nThere is an edge between vertex 9 and vertex 10 with a weight of 90.\nThere is an edge between vertex 6 and vertex 2 with a weight of 23.\nThere is an edge between vertex 11 and vertex 3 with a weight of 100.\nThere is an edge between vertex 13 and vertex 12 with a weight of 64.\nThere is an edge between vertex 9 and vertex 7 with a weight of 30.\nThere is an edge between vertex 13 and vertex 4 with a weight of 25.\nThere is an edge between vertex 12 and vertex 10 with a weight of 55.\nThere is an edge between vertex 7 and vertex 14 with a weight of 86.\nThere is an edge between vertex 15 and vertex 14 with a weight of 78.\nThere is an edge between vertex 9 and vertex 12 with a weight of 60.\nThere is an edge between vertex 14 and vertex 12 with a weight of 96.\nThere is an edge between vertex 8 and vertex 7 with a weight of 73.\nThere is an edge between vertex 2 and vertex 9 with a weight of 63.\nThere is an edge between vertex 8 and vertex 3 with a weight of 30.\nThere is an edge between vertex 11 and vertex 6 with a weight of 81.\nThere is an edge between vertex 8 and vertex 1 with a weight of 73.\nThere is an edge between vertex 6 and vertex 15 with a weight of 9.\nThere is an edge between vertex 13 and vertex 15 with a weight of 27.\nThere is an edge between vertex 13 and vertex 7 with a weight of 34.\nThere is an edge between vertex 3 and vertex 6 with a weight of 58.\n",
    "graph_output": "15 92\n1 2 90\n2 8 11\n2 10 13\n10 13 77\n8 15 13\n10 11 3\n11 7 100\n2 5 74\n2 4 82\n8 6 20\n13 3 93\n5 9 61\n13 14 42\n15 12 22\n5 8 30\n13 5 45\n7 15 74\n5 10 86\n4 9 50\n8 12 49\n6 4 12\n14 9 63\n15 3 89\n15 9 51\n15 5 61\n9 11 99\n1 12 18\n8 4 16\n10 7 28\n12 4 47\n11 4 33\n7 4 50\n6 5 46\n14 5 76\n2 14 88\n13 11 84\n1 13 81\n6 10 24\n14 4 71\n1 3 14\n1 15 53\n10 8 14\n3 12 49\n10 3 57\n2 3 3\n2 7 96\n11 14 17\n2 11 56\n1 7 18\n1 4 82\n14 3 79\n9 1 70\n1 14 46\n3 7 92\n5 7 54\n10 1 62\n6 14 42\n8 11 65\n7 12 30\n7 6 17\n14 10 92\n12 5 33\n13 2 48\n9 8 28\n1 11 7\n15 4 6\n15 10 13\n9 13 17\n13 6 9\n3 4 91\n12 2 58\n11 5 6\n9 10 90\n6 2 23\n11 3 100\n13 12 64\n9 7 30\n13 4 25\n12 10 55\n7 14 86\n15 14 78\n9 12 60\n14 12 96\n8 7 73\n2 9 63\n8 3 30\n11 6 81\n8 1 73\n6 15 9\n13 15 27\n13 7 34\n3 6 58\n",
    "vertices": [
      8,
      15
    ],
    "answer": 13,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 15 vertices and 26 edges\n\nEdges (Format: Node Node):\n5 10\n1 7\n2 1\n12 7\n4 9\n11 1\n12 6\n3 5\n2 9\n15 7\n7 10\n5 13\n5 4\n7 9\n8 10\n5 14\n9 6\n13 9\n3 4\n12 13\n5 11\n1 8\n14 11\n6 15\n9 8\n1 9\n",
    "graph_output": "15 26\n5 10\n1 7\n2 1\n12 7\n4 9\n11 1\n12 6\n3 5\n2 9\n15 7\n7 10\n5 13\n5 4\n7 9\n8 10\n5 14\n9 6\n13 9\n3 4\n12 13\n5 11\n1 8\n14 11\n6 15\n9 8\n1 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 6 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 16 edges\n\nEdges (Format: Node Node Capacity):\n1 7 3\n7 2 7\n7 3 1\n2 10 8\n1 9 6\n7 6 3\n7 11 2\n6 5 7\n5 8 9\n11 4 7\n11 5 1\n5 9 10\n1 10 2\n11 1 4\n5 7 2\n1 3 1\n",
    "graph_output": "11 16\n1 7 3\n7 2 7\n7 3 1\n2 10 8\n1 9 6\n7 6 3\n7 11 2\n6 5 7\n5 8 9\n11 4 7\n11 5 1\n5 9 10\n1 10 2\n11 1 4\n5 7 2\n1 3 1\n",
    "vertices": [
      6,
      4
    ],
    "answer": 7,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 24 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 3 (weight=88), 6 (weight=38), 2 (weight=72), 8 (weight=49), 15 (weight=4)\nVertex 2: 1 (weight=72), 5 (weight=53), 3 (weight=53)\nVertex 3: 1 (weight=88), 12 (weight=41), 10 (weight=1), 2 (weight=53)\nVertex 4: 5 (weight=87), 12 (weight=92), 15 (weight=99)\nVertex 5: 13 (weight=67), 4 (weight=87), 2 (weight=53)\nVertex 6: 1 (weight=38), 15 (weight=19), 10 (weight=84), 9 (weight=17), 8 (weight=75)\nVertex 7: 11 (weight=18)\nVertex 8: 1 (weight=49), 11 (weight=82), 6 (weight=75)\nVertex 9: 6 (weight=17), 10 (weight=74)\nVertex 10: 6 (weight=84), 13 (weight=53), 3 (weight=1), 9 (weight=74)\nVertex 11: 8 (weight=82), 7 (weight=18), 12 (weight=30)\nVertex 12: 3 (weight=41), 14 (weight=26), 4 (weight=92), 11 (weight=30), 15 (weight=79)\nVertex 13: 10 (weight=53), 5 (weight=67)\nVertex 14: 12 (weight=26)\nVertex 15: 6 (weight=19), 4 (weight=99), 1 (weight=4), 12 (weight=79)\n",
    "graph_output": "15 24\n1 3 88\n1 6 38\n1 2 72\n6 15 19\n6 10 84\n1 8 49\n10 13 53\n8 11 82\n13 5 67\n6 9 17\n3 12 41\n12 14 26\n11 7 18\n5 4 87\n8 6 75\n4 12 92\n15 4 99\n12 11 30\n1 15 4\n10 3 1\n2 5 53\n9 10 74\n15 12 79\n2 3 53\n",
    "vertices": [
      null,
      null
    ],
    "answer": 523,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 17 vertices and 128 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   0   1   1   1   1   0 \n 3 |  1   1   0   1   0   1   1   1   1   0   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   0   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   0   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n10 |  0   1   0   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n12 |  1   0   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   0   1   1   0 \n14 |  1   1   1   1   1   1   0   1   1   1   1   1   0   0   1   1   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n16 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n17 |  1   0   1   1   1   1   1   1   1   1   1   1   0   1   1   1   0 \n",
    "graph_output": "17 128\n1 7\n7 15\n7 8\n1 16\n16 14\n14 6\n14 4\n8 2\n14 12\n6 5\n16 9\n2 11\n8 17\n15 10\n11 13\n14 3\n16 13\n5 2\n11 7\n11 4\n6 11\n4 17\n11 17\n3 7\n1 14\n9 17\n3 12\n15 17\n13 6\n15 11\n3 11\n6 15\n4 6\n4 15\n17 3\n4 7\n1 13\n1 6\n4 5\n9 12\n11 14\n9 13\n3 16\n9 10\n15 3\n16 4\n11 10\n10 4\n13 10\n17 14\n11 16\n12 5\n3 6\n1 11\n3 8\n16 8\n15 1\n15 16\n12 8\n8 10\n8 9\n2 14\n4 13\n10 17\n16 17\n1 12\n7 6\n15 14\n5 7\n15 12\n7 13\n9 7\n2 1\n9 14\n5 16\n4 1\n12 4\n9 4\n15 5\n10 6\n13 8\n11 12\n8 6\n5 8\n15 13\n10 14\n15 2\n2 7\n10 16\n16 7\n5 14\n12 7\n6 16\n5 10\n5 1\n12 10\n9 15\n1 9\n2 16\n17 1\n10 2\n5 17\n4 2\n3 4\n11 8\n6 17\n2 6\n13 12\n12 16\n8 14\n5 13\n8 4\n13 2\n5 11\n8 1\n9 2\n6 12\n6 9\n13 3\n5 9\n1 3\n12 17\n17 7\n8 15\n9 3\n2 3\n10 7\n9 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 15 vertices and 83 edges\n\nEdges (Format: Node Node):\n4 15\n5 1\n12 4\n5 12\n10 1\n4 8\n8 14\n7 13\n13 3\n1 4\n8 9\n6 14\n7 9\n14 3\n12 2\n14 15\n8 2\n15 13\n15 10\n11 4\n9 4\n13 10\n15 7\n15 5\n6 4\n6 11\n8 1\n1 7\n3 2\n12 11\n9 3\n14 13\n12 8\n13 4\n15 1\n10 5\n1 13\n11 2\n7 2\n15 2\n4 10\n14 5\n6 7\n13 11\n9 2\n13 6\n14 2\n7 12\n14 7\n1 11\n12 15\n5 4\n11 5\n6 12\n8 10\n8 13\n15 3\n14 1\n1 2\n11 14\n9 1\n11 10\n9 6\n14 12\n4 2\n8 5\n2 13\n12 13\n7 10\n3 1\n1 6\n4 7\n5 2\n10 9\n14 9\n5 13\n10 2\n3 11\n3 7\n12 9\n5 9\n3 4\n8 11\n",
    "graph_output": "15 83\n4 15\n5 1\n12 4\n5 12\n10 1\n4 8\n8 14\n7 13\n13 3\n1 4\n8 9\n6 14\n7 9\n14 3\n12 2\n14 15\n8 2\n15 13\n15 10\n11 4\n9 4\n13 10\n15 7\n15 5\n6 4\n6 11\n8 1\n1 7\n3 2\n12 11\n9 3\n14 13\n12 8\n13 4\n15 1\n10 5\n1 13\n11 2\n7 2\n15 2\n4 10\n14 5\n6 7\n13 11\n9 2\n13 6\n14 2\n7 12\n14 7\n1 11\n12 15\n5 4\n11 5\n6 12\n8 10\n8 13\n15 3\n14 1\n1 2\n11 14\n9 1\n11 10\n9 6\n14 12\n4 2\n8 5\n2 13\n12 13\n7 10\n3 1\n1 6\n4 7\n5 2\n10 9\n14 9\n5 13\n10 2\n3 11\n3 7\n12 9\n5 9\n3 4\n8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 16 vertices and 105 edges\n\nEdges (Format: Node Node):\n1 15\n1 7\n7 13\n13 6\n15 5\n13 14\n13 2\n14 8\n8 4\n8 11\n4 10\n11 9\n9 16\n4 12\n9 3\n1 3\n4 16\n9 15\n13 1\n4 6\n15 16\n4 7\n11 1\n10 12\n15 12\n14 6\n16 2\n4 1\n7 6\n12 5\n1 5\n8 7\n5 16\n15 4\n2 10\n9 10\n10 1\n6 9\n1 6\n7 14\n11 13\n11 3\n13 5\n12 2\n11 16\n3 15\n13 8\n10 16\n15 8\n4 3\n4 14\n7 2\n2 8\n11 15\n10 3\n10 5\n3 16\n2 1\n3 6\n11 4\n10 15\n14 10\n7 3\n6 2\n12 1\n16 12\n14 15\n2 9\n15 2\n7 12\n14 3\n7 5\n15 7\n8 3\n1 8\n2 3\n11 6\n9 12\n15 13\n2 11\n16 6\n5 6\n1 16\n12 6\n10 13\n11 7\n3 12\n16 14\n13 16\n4 5\n13 9\n11 5\n8 10\n12 13\n14 5\n2 14\n8 12\n14 9\n12 14\n10 7\n11 12\n11 10\n13 4\n5 3\n3 13\n",
    "graph_output": "16 105\n1 15\n1 7\n7 13\n13 6\n15 5\n13 14\n13 2\n14 8\n8 4\n8 11\n4 10\n11 9\n9 16\n4 12\n9 3\n1 3\n4 16\n9 15\n13 1\n4 6\n15 16\n4 7\n11 1\n10 12\n15 12\n14 6\n16 2\n4 1\n7 6\n12 5\n1 5\n8 7\n5 16\n15 4\n2 10\n9 10\n10 1\n6 9\n1 6\n7 14\n11 13\n11 3\n13 5\n12 2\n11 16\n3 15\n13 8\n10 16\n15 8\n4 3\n4 14\n7 2\n2 8\n11 15\n10 3\n10 5\n3 16\n2 1\n3 6\n11 4\n10 15\n14 10\n7 3\n6 2\n12 1\n16 12\n14 15\n2 9\n15 2\n7 12\n14 3\n7 5\n15 7\n8 3\n1 8\n2 3\n11 6\n9 12\n15 13\n2 11\n16 6\n5 6\n1 16\n12 6\n10 13\n11 7\n3 12\n16 14\n13 16\n4 5\n13 9\n11 5\n8 10\n12 13\n14 5\n2 14\n8 12\n14 9\n12 14\n10 7\n11 12\n11 10\n13 4\n5 3\n3 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 3 (source) to vertex 8 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 9 vertices and 28 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 2 41 4\n1 5 42 4\n1 6 85 5\n2 8 39 1\n5 3 93 7\n2 7 40 5\n3 9 69 7\n5 4 17 9\n9 4 86 2\n6 9 9 2\n7 3 13 9\n4 7 66 7\n5 6 80 2\n3 4 28 4\n3 6 69 5\n9 8 74 9\n4 1 57 6\n1 9 77 8\n8 7 92 8\n7 6 50 1\n2 9 55 7\n5 2 4 6\n2 3 98 5\n8 4 58 10\n8 1 93 10\n5 9 56 1\n6 8 82 7\n7 1 9 7\n",
    "graph_output": "9 28\n1 2 41 4\n1 5 42 4\n1 6 85 5\n2 8 39 1\n5 3 93 7\n2 7 40 5\n3 9 69 7\n5 4 17 9\n9 4 86 2\n6 9 9 2\n7 3 13 9\n4 7 66 7\n5 6 80 2\n3 4 28 4\n3 6 69 5\n9 8 74 9\n4 1 57 6\n1 9 77 8\n8 7 92 8\n7 6 50 1\n2 9 55 7\n5 2 4 6\n2 3 98 5\n8 4 58 10\n8 1 93 10\n5 9 56 1\n6 8 82 7\n7 1 9 7\n",
    "vertices": [
      3,
      8
    ],
    "answer": 5346,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 5 (source) to vertex 3 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 17 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 5 (capacity=4), 7 (capacity=6), 4 (capacity=2)\nVertex 2: 5 (capacity=4), 7 (capacity=1), 3 (capacity=6)\nVertex 3: 4 (capacity=2), 10 (capacity=2), 2 (capacity=6)\nVertex 4: 6 (capacity=3), 8 (capacity=8), 3 (capacity=2), 1 (capacity=2), 7 (capacity=2), 10 (capacity=1)\nVertex 5: 1 (capacity=4), 6 (capacity=10), 2 (capacity=4), 9 (capacity=4)\nVertex 6: 5 (capacity=10), 11 (capacity=8), 4 (capacity=3)\nVertex 7: 1 (capacity=6), 10 (capacity=7), 2 (capacity=1), 4 (capacity=2), 11 (capacity=4)\nVertex 8: 4 (capacity=8)\nVertex 9: 5 (capacity=4)\nVertex 10: 7 (capacity=7), 3 (capacity=2), 4 (capacity=1)\nVertex 11: 6 (capacity=8), 7 (capacity=4)\n",
    "graph_output": "11 17\n1 5 4\n5 6 10\n5 2 4\n6 11 8\n1 7 6\n6 4 3\n7 10 7\n4 8 8\n4 3 2\n5 9 4\n4 1 2\n2 7 1\n7 4 2\n3 10 2\n10 4 1\n2 3 6\n7 11 4\n",
    "vertices": [
      5,
      3
    ],
    "answer": 9,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 20 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 5, 2, 7, 3, 4\nVertex 2: 5, 1, 3, 6, 4\nVertex 3: 2, 5, 7, 6, 1, 4\nVertex 4: 6, 5, 2, 7, 3, 1\nVertex 5: 1, 7, 2, 3, 4, 6\nVertex 6: 1, 7, 4, 2, 3, 5\nVertex 7: 6, 5, 3, 1, 4\n",
    "graph_output": "7 20\n1 6\n5 1\n6 7\n5 7\n2 5\n4 6\n2 1\n3 2\n5 3\n7 3\n5 4\n6 2\n7 1\n3 6\n2 4\n7 4\n1 3\n4 3\n6 5\n1 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 847,
    "description_type": "list"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 30 vertices and 29 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 23.\nThere is an edge between vertex 23 and vertex 18.\nThere is an edge between vertex 23 and vertex 4.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 4 and vertex 27.\nThere is an edge between vertex 27 and vertex 11.\nThere is an edge between vertex 23 and vertex 20.\nThere is an edge between vertex 1 and vertex 21.\nThere is an edge between vertex 18 and vertex 2.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 20 and vertex 9.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 23 and vertex 14.\nThere is an edge between vertex 4 and vertex 26.\nThere is an edge between vertex 20 and vertex 28.\nThere is an edge between vertex 20 and vertex 25.\nThere is an edge between vertex 9 and vertex 30.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 20 and vertex 8.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 28 and vertex 29.\nThere is an edge between vertex 20 and vertex 19.\nThere is an edge between vertex 27 and vertex 22.\nThere is an edge between vertex 4 and vertex 24.\n",
    "graph_output": "30 29\n1 16\n1 7\n1 23\n23 18\n23 4\n4 17\n4 27\n27 11\n23 20\n1 21\n18 2\n4 12\n2 13\n12 5\n20 9\n11 15\n23 14\n4 26\n20 28\n20 25\n9 30\n12 10\n4 3\n20 8\n9 6\n28 29\n20 19\n27 22\n4 24\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 19 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (8\u00d78):\n\n      1   2   3   4   5   6   7   8\n   --------------------------------\n 1 |  0   0   0   1   1   1   1   1 \n 2 |  0   0   0   1   1   1   1   1 \n 3 |  0   0   0   1   1   1   1   0 \n 4 |  1   1   1   0   0   0   0   1 \n 5 |  1   1   1   0   0   1   1   0 \n 6 |  1   1   1   0   1   0   1   0 \n 7 |  1   1   1   0   1   1   0   1 \n 8 |  1   1   0   1   0   0   1   0 \n",
    "graph_output": "8 19\n2 4\n6 7\n8 1\n7 2\n1 5\n3 6\n7 1\n7 3\n5 3\n3 4\n4 1\n5 7\n8 2\n6 1\n4 8\n5 2\n7 8\n6 2\n6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 522,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 13 to vertex 9 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 16 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0  20   0   0   0   0   0   0   0   0  32  40 \n 2 |  0   0   0   0   0   0  90   0   0   0   0   0   0   0   0  62 \n 3 |  0   0   0  54   0   0   0   0   0   0  82   0   0   0   0   0 \n 4 |  0   0  54   0   0   0   0   0   0   0   0   0   0 100   0   0 \n 5 |  0   0   0   0   0   0   0   0   0  18   0   0   5   0   0   0 \n 6 | 20   0   0   0   0   0   0  11   0   0   0  47   0   0   0   0 \n 7 |  0  90   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0  11   0   0   0  18  12   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0  42   0   0   0   0   0   0 \n10 |  0   0   0   0  18   0   0  18  42   0   0   0   0   0   0   0 \n11 |  0   0  82   0   0   0   0  12   0   0   0   0  92   0   0   0 \n12 |  0   0   0   0   0  47   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   5   0   0   0   0   0  92   0   0   0   0   0 \n14 |  0   0   0 100   0   0   0   0   0   0   0   0   0   0   0   0 \n15 | 32   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 | 40  62   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "16 16\n1 16 40\n1 6 20\n6 8 11\n8 11 12\n11 3 82\n11 13 92\n16 2 62\n3 4 54\n8 10 18\n10 9 42\n2 7 90\n6 12 47\n13 5 5\n1 15 32\n4 14 100\n5 10 18\n",
    "vertices": [
      13,
      9
    ],
    "answer": 65,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 8 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 47 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 12 (capacity=3), 3 (capacity=5), 8 (capacity=7), 7 (capacity=8), 4 (capacity=8), 10 (capacity=2)\nVertex 2: 10 (capacity=3), 4 (capacity=9), 8 (capacity=1), 11 (capacity=2), 7 (capacity=8), 6 (capacity=10), 12 (capacity=10), 9 (capacity=4), 3 (capacity=8)\nVertex 3: 1 (capacity=5), 10 (capacity=4), 12 (capacity=6), 7 (capacity=2), 6 (capacity=7), 2 (capacity=8), 9 (capacity=8), 5 (capacity=9)\nVertex 4: 7 (capacity=2), 6 (capacity=7), 5 (capacity=2), 2 (capacity=9), 11 (capacity=9), 8 (capacity=9), 12 (capacity=1), 1 (capacity=8)\nVertex 5: 11 (capacity=1), 4 (capacity=2), 10 (capacity=7), 12 (capacity=9), 6 (capacity=7), 7 (capacity=3), 3 (capacity=9), 9 (capacity=8), 8 (capacity=8)\nVertex 6: 4 (capacity=7), 9 (capacity=3), 12 (capacity=6), 10 (capacity=7), 2 (capacity=10), 3 (capacity=7), 5 (capacity=7)\nVertex 7: 12 (capacity=1), 4 (capacity=2), 1 (capacity=8), 8 (capacity=5), 2 (capacity=8), 11 (capacity=2), 3 (capacity=2), 5 (capacity=3)\nVertex 8: 1 (capacity=7), 9 (capacity=7), 11 (capacity=5), 2 (capacity=1), 7 (capacity=5), 4 (capacity=9), 10 (capacity=5), 5 (capacity=8)\nVertex 9: 11 (capacity=6), 8 (capacity=7), 6 (capacity=3), 12 (capacity=10), 2 (capacity=4), 3 (capacity=8), 5 (capacity=8)\nVertex 10: 3 (capacity=4), 2 (capacity=3), 5 (capacity=7), 6 (capacity=7), 11 (capacity=9), 1 (capacity=2), 8 (capacity=5)\nVertex 11: 12 (capacity=7), 5 (capacity=1), 9 (capacity=6), 8 (capacity=5), 2 (capacity=2), 4 (capacity=9), 7 (capacity=2), 10 (capacity=9)\nVertex 12: 1 (capacity=3), 7 (capacity=1), 11 (capacity=7), 6 (capacity=6), 9 (capacity=10), 4 (capacity=1), 3 (capacity=6), 5 (capacity=9), 2 (capacity=10)\n",
    "graph_output": "12 47\n1 12 3\n1 3 5\n3 10 4\n12 7 1\n12 11 7\n11 5 1\n11 9 6\n7 4 2\n4 6 7\n1 8 7\n10 2 3\n4 5 2\n8 9 7\n11 8 5\n2 4 9\n7 1 8\n8 2 1\n11 2 2\n6 9 3\n12 6 6\n5 10 7\n4 11 9\n7 8 5\n6 10 7\n7 2 8\n9 12 10\n7 11 2\n4 8 9\n4 12 1\n3 12 6\n6 2 10\n5 12 9\n10 11 9\n2 12 10\n7 3 2\n6 3 7\n5 6 7\n1 4 8\n2 9 4\n7 5 3\n1 10 2\n2 3 8\n9 3 8\n3 5 9\n5 9 8\n10 8 5\n5 8 8\n",
    "vertices": [
      8,
      4
    ],
    "answer": 47,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 9 and vertex 8 are connected.\n\nThis is an undirected graph with 15 vertices and 98 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   0 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   0 \n 5 |  1   1   1   1   0   1   1   0   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   0   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  0   1   1   1   0   1   1   0   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   0   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   0   1   1   1 \n12 |  1   1   1   1   1   0   1   1   1   0   0   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n15 |  1   1   0   0   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 98\n5 11\n14 12\n6 13\n10 15\n7 10\n6 2\n8 3\n11 3\n3 12\n5 14\n11 1\n5 3\n15 8\n4 13\n11 13\n5 1\n10 6\n7 14\n13 1\n13 12\n15 1\n9 5\n8 4\n15 13\n4 14\n4 12\n8 7\n14 11\n7 12\n6 8\n7 6\n10 4\n3 10\n5 6\n2 12\n7 3\n8 13\n3 6\n10 9\n3 9\n1 10\n10 13\n2 4\n12 8\n9 4\n9 11\n5 12\n1 3\n9 7\n5 4\n15 9\n9 12\n10 14\n5 10\n2 13\n7 11\n15 6\n2 10\n3 2\n2 15\n10 11\n1 6\n2 8\n14 3\n11 4\n8 11\n3 13\n6 9\n5 13\n12 1\n1 2\n13 7\n13 14\n7 15\n8 9\n2 7\n2 11\n10 8\n15 5\n2 14\n9 1\n1 4\n14 1\n15 11\n6 4\n9 13\n15 12\n5 7\n11 6\n14 15\n1 7\n2 9\n5 2\n4 3\n9 14\n8 14\n14 6\n7 4\n",
    "vertices": [
      9,
      8
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 20 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   1   0   0 \n 2 |  0   0   0   1   1   0   0   0   1   1   0   0   0 \n 3 |  0   0   0   0   1   0   0   1   1   1   0   0   0 \n 4 |  0   1   0   0   0   0   0   0   1   0   0   0   0 \n 5 |  0   1   1   0   0   0   0   1   0   1   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   1   0   0   0   1 \n 7 |  0   0   0   0   0   0   0   1   0   1   0   0   0 \n 8 |  0   0   1   0   1   0   1   0   0   0   1   0   0 \n 9 |  0   1   1   1   0   1   0   0   0   1   0   0   0 \n10 |  0   1   1   0   1   0   1   0   1   0   0   1   0 \n11 |  1   0   0   0   0   0   0   1   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   1   0   0   1 \n13 |  0   0   0   0   0   1   0   0   0   0   0   1   0 \n",
    "graph_output": "13 20\n3 9\n5 10\n3 10\n3 8\n8 5\n7 8\n3 5\n12 13\n9 10\n2 4\n2 9\n10 12\n10 2\n11 1\n11 8\n9 6\n4 9\n6 13\n2 5\n10 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 10 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 5, 8\nVertex 2: 6, 4, 7\nVertex 3: 4\nVertex 4: 1, 6, 3, 2\nVertex 5: 1, 7\nVertex 6: 4, 7, 2\nVertex 7: 6, 2, 5\nVertex 8: 1\n",
    "graph_output": "8 10\n1 4\n4 6\n1 5\n1 8\n6 7\n4 3\n6 2\n2 4\n7 2\n7 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 32,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 117 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 8, 6, 11, 14, 9, 3, 2, 16, 5, 10, 4, 7, 12\nVertex 2: 9, 8, 13, 14, 4, 1, 7, 15, 12, 16, 10, 5, 3, 6, 11\nVertex 3: 12, 5, 14, 4, 11, 13, 1, 15, 7, 10, 6, 16, 2, 8, 9\nVertex 4: 14, 11, 3, 16, 9, 6, 2, 8, 15, 1, 10, 12, 7, 13, 5\nVertex 5: 13, 3, 11, 14, 7, 16, 15, 10, 1, 9, 2, 6, 12, 4\nVertex 6: 13, 7, 8, 14, 1, 4, 16, 11, 15, 9, 3, 10, 5, 2, 12\nVertex 7: 8, 6, 13, 12, 5, 15, 16, 2, 3, 10, 14, 1, 9, 4, 11\nVertex 8: 7, 15, 14, 2, 6, 16, 1, 11, 13, 12, 4, 9, 10, 3\nVertex 9: 2, 16, 14, 4, 11, 12, 1, 6, 10, 15, 5, 8, 13, 7, 3\nVertex 10: 15, 11, 16, 9, 5, 1, 7, 3, 14, 12, 8, 6, 4, 2, 13\nVertex 11: 12, 4, 3, 10, 5, 9, 1, 8, 13, 6, 14, 2, 7, 15\nVertex 12: 11, 3, 15, 16, 9, 7, 8, 10, 2, 14, 4, 13, 1, 5, 6\nVertex 13: 1, 5, 6, 7, 2, 14, 11, 3, 15, 8, 9, 16, 12, 10, 4\nVertex 14: 4, 8, 2, 3, 6, 9, 13, 15, 5, 1, 11, 10, 7, 12, 16\nVertex 15: 10, 8, 12, 14, 3, 6, 7, 13, 5, 9, 4, 2, 16, 11\nVertex 16: 9, 4, 8, 12, 10, 6, 5, 7, 1, 3, 15, 2, 13, 14\n",
    "graph_output": "16 117\n11 12\n1 13\n8 7\n5 13\n3 12\n15 10\n2 9\n14 4\n15 8\n13 6\n9 16\n8 14\n7 6\n8 2\n13 7\n13 2\n14 2\n5 3\n14 3\n4 11\n15 12\n8 6\n3 4\n14 6\n16 4\n11 3\n16 8\n10 11\n12 16\n1 8\n6 1\n9 14\n13 14\n5 11\n9 4\n9 11\n11 1\n8 11\n14 15\n14 5\n1 14\n9 12\n13 11\n3 13\n9 1\n7 12\n4 6\n16 10\n6 16\n1 3\n15 3\n7 5\n11 6\n5 16\n6 15\n11 14\n15 7\n6 9\n15 13\n8 13\n7 16\n4 2\n5 15\n1 2\n2 7\n9 10\n15 9\n5 10\n16 1\n7 3\n12 8\n1 5\n1 10\n7 10\n4 8\n3 10\n10 14\n9 5\n4 15\n1 4\n14 7\n3 6\n10 12\n15 2\n16 3\n8 9\n10 8\n2 12\n14 12\n16 15\n16 2\n7 1\n9 13\n6 10\n10 4\n12 4\n16 13\n2 10\n2 5\n12 13\n7 9\n6 5\n3 2\n10 13\n1 12\n12 5\n8 3\n6 2\n7 4\n2 11\n13 4\n16 14\n7 11\n15 11\n6 12\n9 3\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 23 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 14, 7, 4\nVertex 2: 3, 12, 11\nVertex 3: 2, 12, 13, 8\nVertex 4: 13, 15, 1\nVertex 5: No connections\nVertex 6: 8\nVertex 7: 15, 12, 16, 1\nVertex 8: 10, 3, 6\nVertex 9: 10, 13, 15\nVertex 10: 8, 9, 12\nVertex 11: 1, 2\nVertex 12: 17, 3, 7, 2, 10\nVertex 13: 4, 3, 9, 14\nVertex 14: 1, 13\nVertex 15: 7, 4, 9\nVertex 16: 7\nVertex 17: 12\n",
    "graph_output": "17 23\n11 1\n14 1\n17 12\n3 2\n3 12\n4 13\n7 15\n8 10\n4 15\n3 13\n7 12\n10 9\n13 9\n12 2\n15 9\n14 13\n7 16\n8 3\n10 12\n8 6\n11 2\n1 7\n1 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 81 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 9, 8, 12, 6, 15, 4, 5, 11, 2, 14, 3, 7, 10\nVertex 2: 15, 6, 3, 7, 5, 12, 10, 1\nVertex 3: 15, 2, 5, 8, 4, 11, 10, 6, 1, 14\nVertex 4: 11, 3, 6, 1, 14, 9, 13, 10\nVertex 5: 8, 15, 11, 14, 3, 2, 9, 1, 12, 6, 7, 10\nVertex 6: 2, 12, 11, 1, 4, 3, 5, 13, 9, 8, 10, 7\nVertex 7: 14, 2, 9, 11, 10, 5, 1, 12, 15, 13, 6\nVertex 8: 10, 5, 11, 1, 14, 12, 3, 15, 13, 6\nVertex 9: 10, 11, 1, 12, 7, 15, 5, 14, 4, 6\nVertex 10: 11, 8, 9, 2, 7, 3, 15, 13, 5, 4, 1, 6\nVertex 11: 10, 5, 9, 15, 8, 4, 6, 3, 7, 13, 1, 14, 12\nVertex 12: 6, 9, 8, 1, 2, 15, 14, 5, 7, 13, 11\nVertex 13: 1, 11, 8, 4, 15, 6, 10, 12, 7\nVertex 14: 5, 7, 8, 4, 12, 1, 9, 3, 15, 11\nVertex 15: 2, 3, 5, 11, 9, 1, 8, 12, 10, 13, 14, 7\n",
    "graph_output": "15 81\n11 10\n2 15\n10 8\n6 2\n8 5\n1 13\n9 10\n15 3\n15 5\n5 11\n9 11\n2 3\n12 6\n9 1\n11 15\n5 14\n7 14\n7 2\n3 5\n9 12\n11 8\n5 2\n8 1\n4 11\n11 6\n8 14\n12 8\n8 3\n4 3\n1 12\n7 9\n11 3\n9 15\n6 1\n4 6\n7 11\n9 5\n15 1\n8 15\n2 12\n2 10\n15 12\n1 4\n7 10\n4 14\n14 12\n11 13\n5 1\n10 3\n11 1\n2 1\n14 1\n3 6\n14 9\n5 12\n9 4\n6 5\n5 7\n8 13\n13 4\n15 10\n13 15\n13 6\n3 1\n7 1\n12 7\n10 13\n13 12\n14 3\n14 15\n9 6\n6 8\n14 11\n5 10\n10 4\n15 7\n1 10\n12 11\n6 10\n13 7\n6 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 5 and vertex 14 are connected.\n\nUndirected Graph with 15 vertices and 25 edges\n\nEdges (Format: Node Node):\n2 7\n9 6\n1 7\n2 5\n4 1\n8 14\n14 4\n3 11\n2 4\n11 13\n14 3\n12 14\n6 10\n7 8\n10 15\n10 1\n5 8\n14 9\n3 2\n9 7\n4 9\n5 1\n15 1\n3 5\n1 6\n",
    "graph_output": "15 25\n2 7\n9 6\n1 7\n2 5\n4 1\n8 14\n14 4\n3 11\n2 4\n11 13\n14 3\n12 14\n6 10\n7 8\n10 15\n10 1\n5 8\n14 9\n3 2\n9 7\n4 9\n5 1\n15 1\n3 5\n1 6\n",
    "vertices": [
      5,
      14
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nUndirected Graph with 30 vertices and 29 edges\n\nEdges (Format: Node Node):\n1 10\n1 16\n1 24\n1 13\n10 25\n25 18\n13 21\n21 9\n13 2\n10 20\n24 11\n16 26\n13 15\n2 4\n11 14\n20 29\n21 8\n2 5\n25 3\n18 23\n13 27\n24 6\n16 22\n4 7\n15 28\n29 30\n14 19\n8 17\n25 12\n",
    "graph_output": "30 29\n1 10\n1 16\n1 24\n1 13\n10 25\n25 18\n13 21\n21 9\n13 2\n10 20\n24 11\n16 26\n13 15\n2 4\n11 14\n20 29\n21 8\n2 5\n25 3\n18 23\n13 27\n24 6\n16 22\n4 7\n15 28\n29 30\n14 19\n8 17\n25 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 17 vertices and 22 edges\n\nEdges (Format: Node Node):\n1 4\n1 9\n1 16\n9 8\n4 14\n4 2\n16 12\n2 7\n9 10\n14 11\n11 6\n9 17\n2 13\n12 3\n2 5\n1 15\n17 2\n15 9\n3 4\n5 8\n7 4\n8 17\n",
    "graph_output": "17 22\n1 4\n1 9\n1 16\n9 8\n4 14\n4 2\n16 12\n2 7\n9 10\n14 11\n11 6\n9 17\n2 13\n12 3\n2 5\n1 15\n17 2\n15 9\n3 4\n5 8\n7 4\n8 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 3 (source) to vertex 8 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 28 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2 with a weight of 41 and a capacity of 4.\nThere is an edge between vertex 1 and vertex 5 with a weight of 42 and a capacity of 4.\nThere is an edge between vertex 1 and vertex 6 with a weight of 85 and a capacity of 5.\nThere is an edge between vertex 2 and vertex 8 with a weight of 39 and a capacity of 1.\nThere is an edge between vertex 5 and vertex 3 with a weight of 93 and a capacity of 7.\nThere is an edge between vertex 2 and vertex 7 with a weight of 40 and a capacity of 5.\nThere is an edge between vertex 3 and vertex 9 with a weight of 69 and a capacity of 7.\nThere is an edge between vertex 5 and vertex 4 with a weight of 17 and a capacity of 9.\nThere is an edge between vertex 9 and vertex 4 with a weight of 86 and a capacity of 2.\nThere is an edge between vertex 6 and vertex 9 with a weight of 9 and a capacity of 2.\nThere is an edge between vertex 7 and vertex 3 with a weight of 13 and a capacity of 9.\nThere is an edge between vertex 4 and vertex 7 with a weight of 66 and a capacity of 7.\nThere is an edge between vertex 5 and vertex 6 with a weight of 80 and a capacity of 2.\nThere is an edge between vertex 3 and vertex 4 with a weight of 28 and a capacity of 4.\nThere is an edge between vertex 3 and vertex 6 with a weight of 69 and a capacity of 5.\nThere is an edge between vertex 9 and vertex 8 with a weight of 74 and a capacity of 9.\nThere is an edge between vertex 4 and vertex 1 with a weight of 57 and a capacity of 6.\nThere is an edge between vertex 1 and vertex 9 with a weight of 77 and a capacity of 8.\nThere is an edge between vertex 8 and vertex 7 with a weight of 92 and a capacity of 8.\nThere is an edge between vertex 7 and vertex 6 with a weight of 50 and a capacity of 1.\nThere is an edge between vertex 2 and vertex 9 with a weight of 55 and a capacity of 7.\nThere is an edge between vertex 5 and vertex 2 with a weight of 4 and a capacity of 6.\nThere is an edge between vertex 2 and vertex 3 with a weight of 98 and a capacity of 5.\nThere is an edge between vertex 8 and vertex 4 with a weight of 58 and a capacity of 10.\nThere is an edge between vertex 8 and vertex 1 with a weight of 93 and a capacity of 10.\nThere is an edge between vertex 5 and vertex 9 with a weight of 56 and a capacity of 1.\nThere is an edge between vertex 6 and vertex 8 with a weight of 82 and a capacity of 7.\nThere is an edge between vertex 7 and vertex 1 with a weight of 9 and a capacity of 7.\n",
    "graph_output": "9 28\n1 2 41 4\n1 5 42 4\n1 6 85 5\n2 8 39 1\n5 3 93 7\n2 7 40 5\n3 9 69 7\n5 4 17 9\n9 4 86 2\n6 9 9 2\n7 3 13 9\n4 7 66 7\n5 6 80 2\n3 4 28 4\n3 6 69 5\n9 8 74 9\n4 1 57 6\n1 9 77 8\n8 7 92 8\n7 6 50 1\n2 9 55 7\n5 2 4 6\n2 3 98 5\n8 4 58 10\n8 1 93 10\n5 9 56 1\n6 8 82 7\n7 1 9 7\n",
    "vertices": [
      3,
      8
    ],
    "answer": 5346,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 1 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 10 vertices and 20 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 10 10 4\n1 7 85 8\n7 5 94 2\n5 2 4 2\n7 9 65 3\n10 3 100 1\n2 8 56 9\n2 6 85 6\n8 4 62 2\n2 9 46 8\n4 3 55 3\n9 8 24 9\n2 7 62 3\n1 8 9 5\n1 4 35 4\n4 10 28 10\n7 6 41 5\n9 3 46 8\n9 10 11 2\n1 2 48 9\n",
    "graph_output": "10 20\n1 10 10 4\n1 7 85 8\n7 5 94 2\n5 2 4 2\n7 9 65 3\n10 3 100 1\n2 8 56 9\n2 6 85 6\n8 4 62 2\n2 9 46 8\n4 3 55 3\n9 8 24 9\n2 7 62 3\n1 8 9 5\n1 4 35 4\n4 10 28 10\n7 6 41 5\n9 3 46 8\n9 10 11 2\n1 2 48 9\n",
    "vertices": [
      4,
      1
    ],
    "answer": 1370,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 112 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   0   1   1   0   1   1   1   1 \n 4 |  0   1   1   0   1   1   0   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   0   1   1   1   1 \n 7 |  1   1   1   0   1   1   0   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 9 |  1   1   0   1   1   1   1   1   0   1   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1   0 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   0   1 \n12 |  1   1   0   1   1   0   1   1   1   1   1   0   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   0   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   0   0   1   1 \n15 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   0   1 \n16 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1   0 \n",
    "graph_output": "16 112\n1 13\n1 9\n13 3\n1 2\n13 16\n1 12\n1 11\n11 8\n12 4\n11 10\n9 14\n8 15\n1 7\n15 5\n2 6\n15 4\n5 13\n9 13\n7 14\n2 5\n6 15\n1 8\n14 12\n10 2\n10 9\n13 10\n2 11\n6 11\n7 10\n2 15\n6 7\n3 4\n7 11\n7 12\n15 9\n6 14\n5 12\n3 10\n8 16\n8 4\n15 10\n9 11\n15 3\n12 2\n8 12\n12 13\n7 5\n2 13\n8 13\n3 5\n6 1\n9 16\n4 6\n15 1\n4 2\n5 14\n14 15\n3 8\n10 12\n6 13\n6 3\n4 11\n5 6\n2 16\n9 2\n10 6\n15 16\n16 12\n3 14\n5 11\n12 9\n13 15\n10 8\n13 4\n4 10\n1 3\n5 8\n6 9\n3 16\n9 8\n8 2\n14 1\n3 7\n16 5\n14 11\n8 6\n13 11\n1 16\n7 16\n4 14\n5 9\n10 14\n16 11\n1 10\n13 7\n7 9\n10 5\n5 1\n3 11\n16 6\n5 4\n14 16\n16 4\n9 4\n7 15\n12 15\n7 8\n12 11\n2 14\n14 8\n2 7\n3 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 4 and vertex 16 are connected.\n\nThis is an undirected graph with 16 vertices and 15 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   1   0   1   0   0   0   1   0   0 \n 4 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0 \n 5 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 6 |  1   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0 \n 7 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   1 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  1   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0 \n11 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0 \n14 |  0   0   1   0   0   0   0   0   0   1   0   1   1   0   0   0 \n15 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n",
    "graph_output": "16 15\n11 6\n3 14\n1 10\n6 4\n3 8\n13 14\n6 1\n5 8\n3 10\n7 2\n4 15\n14 10\n8 16\n12 14\n12 13\n",
    "vertices": [
      4,
      16
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 85 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7 with a weight of 92.\nThere is an edge between vertex 1 and vertex 3 with a weight of 63.\nThere is an edge between vertex 7 and vertex 9 with a weight of 84.\nThere is an edge between vertex 9 and vertex 10 with a weight of 1.\nThere is an edge between vertex 10 and vertex 2 with a weight of 55.\nThere is an edge between vertex 3 and vertex 12 with a weight of 88.\nThere is an edge between vertex 12 and vertex 4 with a weight of 65.\nThere is an edge between vertex 7 and vertex 5 with a weight of 67.\nThere is an edge between vertex 9 and vertex 13 with a weight of 80.\nThere is an edge between vertex 9 and vertex 6 with a weight of 8.\nThere is an edge between vertex 3 and vertex 14 with a weight of 23.\nThere is an edge between vertex 7 and vertex 8 with a weight of 11.\nThere is an edge between vertex 10 and vertex 11 with a weight of 69.\nThere is an edge between vertex 6 and vertex 10 with a weight of 8.\nThere is an edge between vertex 10 and vertex 8 with a weight of 90.\nThere is an edge between vertex 5 and vertex 6 with a weight of 22.\nThere is an edge between vertex 4 and vertex 9 with a weight of 3.\nThere is an edge between vertex 12 and vertex 13 with a weight of 24.\nThere is an edge between vertex 11 and vertex 2 with a weight of 68.\nThere is an edge between vertex 2 and vertex 14 with a weight of 96.\nThere is an edge between vertex 8 and vertex 2 with a weight of 94.\nThere is an edge between vertex 14 and vertex 7 with a weight of 79.\nThere is an edge between vertex 1 and vertex 13 with a weight of 47.\nThere is an edge between vertex 8 and vertex 6 with a weight of 4.\nThere is an edge between vertex 3 and vertex 6 with a weight of 44.\nThere is an edge between vertex 7 and vertex 6 with a weight of 66.\nThere is an edge between vertex 11 and vertex 9 with a weight of 84.\nThere is an edge between vertex 5 and vertex 4 with a weight of 5.\nThere is an edge between vertex 11 and vertex 3 with a weight of 76.\nThere is an edge between vertex 2 and vertex 6 with a weight of 79.\nThere is an edge between vertex 6 and vertex 13 with a weight of 95.\nThere is an edge between vertex 13 and vertex 14 with a weight of 80.\nThere is an edge between vertex 7 and vertex 12 with a weight of 33.\nThere is an edge between vertex 4 and vertex 1 with a weight of 70.\nThere is an edge between vertex 12 and vertex 10 with a weight of 20.\nThere is an edge between vertex 12 and vertex 1 with a weight of 52.\nThere is an edge between vertex 14 and vertex 5 with a weight of 49.\nThere is an edge between vertex 12 and vertex 14 with a weight of 2.\nThere is an edge between vertex 5 and vertex 10 with a weight of 78.\nThere is an edge between vertex 8 and vertex 12 with a weight of 56.\nThere is an edge between vertex 3 and vertex 9 with a weight of 8.\nThere is an edge between vertex 10 and vertex 7 with a weight of 23.\nThere is an edge between vertex 3 and vertex 8 with a weight of 3.\nThere is an edge between vertex 2 and vertex 4 with a weight of 6.\nThere is an edge between vertex 12 and vertex 2 with a weight of 28.\nThere is an edge between vertex 7 and vertex 4 with a weight of 30.\nThere is an edge between vertex 1 and vertex 11 with a weight of 62.\nThere is an edge between vertex 1 and vertex 10 with a weight of 12.\nThere is an edge between vertex 13 and vertex 2 with a weight of 42.\nThere is an edge between vertex 9 and vertex 2 with a weight of 83.\nThere is an edge between vertex 5 and vertex 9 with a weight of 18.\nThere is an edge between vertex 4 and vertex 11 with a weight of 7.\nThere is an edge between vertex 4 and vertex 3 with a weight of 11.\nThere is an edge between vertex 12 and vertex 6 with a weight of 54.\nThere is an edge between vertex 5 and vertex 11 with a weight of 84.\nThere is an edge between vertex 5 and vertex 3 with a weight of 90.\nThere is an edge between vertex 8 and vertex 5 with a weight of 75.\nThere is an edge between vertex 8 and vertex 1 with a weight of 28.\nThere is an edge between vertex 9 and vertex 12 with a weight of 80.\nThere is an edge between vertex 3 and vertex 2 with a weight of 21.\nThere is an edge between vertex 13 and vertex 4 with a weight of 45.\nThere is an edge between vertex 13 and vertex 8 with a weight of 53.\nThere is an edge between vertex 4 and vertex 6 with a weight of 97.\nThere is an edge between vertex 10 and vertex 3 with a weight of 11.\nThere is an edge between vertex 6 and vertex 14 with a weight of 97.\nThere is an edge between vertex 7 and vertex 13 with a weight of 23.\nThere is an edge between vertex 12 and vertex 5 with a weight of 49.\nThere is an edge between vertex 1 and vertex 5 with a weight of 7.\nThere is an edge between vertex 3 and vertex 7 with a weight of 60.\nThere is an edge between vertex 8 and vertex 4 with a weight of 36.\nThere is an edge between vertex 11 and vertex 14 with a weight of 80.\nThere is an edge between vertex 5 and vertex 2 with a weight of 12.\nThere is an edge between vertex 14 and vertex 4 with a weight of 58.\nThere is an edge between vertex 10 and vertex 13 with a weight of 21.\nThere is an edge between vertex 1 and vertex 14 with a weight of 38.\nThere is an edge between vertex 13 and vertex 3 with a weight of 89.\nThere is an edge between vertex 6 and vertex 11 with a weight of 39.\nThere is an edge between vertex 11 and vertex 13 with a weight of 34.\nThere is an edge between vertex 9 and vertex 8 with a weight of 22.\nThere is an edge between vertex 8 and vertex 14 with a weight of 83.\nThere is an edge between vertex 11 and vertex 12 with a weight of 87.\nThere is an edge between vertex 7 and vertex 11 with a weight of 33.\nThere is an edge between vertex 8 and vertex 11 with a weight of 24.\nThere is an edge between vertex 6 and vertex 1 with a weight of 75.\nThere is an edge between vertex 10 and vertex 4 with a weight of 30.\n",
    "graph_output": "14 85\n1 7 92\n1 3 63\n7 9 84\n9 10 1\n10 2 55\n3 12 88\n12 4 65\n7 5 67\n9 13 80\n9 6 8\n3 14 23\n7 8 11\n10 11 69\n6 10 8\n10 8 90\n5 6 22\n4 9 3\n12 13 24\n11 2 68\n2 14 96\n8 2 94\n14 7 79\n1 13 47\n8 6 4\n3 6 44\n7 6 66\n11 9 84\n5 4 5\n11 3 76\n2 6 79\n6 13 95\n13 14 80\n7 12 33\n4 1 70\n12 10 20\n12 1 52\n14 5 49\n12 14 2\n5 10 78\n8 12 56\n3 9 8\n10 7 23\n3 8 3\n2 4 6\n12 2 28\n7 4 30\n1 11 62\n1 10 12\n13 2 42\n9 2 83\n5 9 18\n4 11 7\n4 3 11\n12 6 54\n5 11 84\n5 3 90\n8 5 75\n8 1 28\n9 12 80\n3 2 21\n13 4 45\n13 8 53\n4 6 97\n10 3 11\n6 14 97\n7 13 23\n12 5 49\n1 5 7\n3 7 60\n8 4 36\n11 14 80\n5 2 12\n14 4 58\n10 13 21\n1 14 38\n13 3 89\n6 11 39\n11 13 34\n9 8 22\n8 14 83\n11 12 87\n7 11 33\n8 11 24\n6 1 75\n10 4 30\n",
    "vertices": [
      null,
      null
    ],
    "answer": 98,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 6 (source) to vertex 13 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 13 vertices and 26 edges\n\nEdges (Format: Node Node Capacity):\n1 8 4\n8 5 9\n5 2 10\n1 11 3\n5 10 7\n8 9 6\n9 12 1\n10 6 10\n2 7 5\n9 13 9\n5 3 2\n2 4 1\n13 4 6\n1 13 2\n2 6 3\n4 8 7\n6 11 8\n5 12 9\n10 12 5\n6 8 10\n7 8 5\n3 4 5\n7 9 3\n13 8 6\n10 3 3\n5 9 10\n",
    "graph_output": "13 26\n1 8 4\n8 5 9\n5 2 10\n1 11 3\n5 10 7\n8 9 6\n9 12 1\n10 6 10\n2 7 5\n9 13 9\n5 3 2\n2 4 1\n13 4 6\n1 13 2\n2 6 3\n4 8 7\n6 11 8\n5 12 9\n10 12 5\n6 8 10\n7 8 5\n3 4 5\n7 9 3\n13 8 6\n10 3 3\n5 9 10\n",
    "vertices": [
      6,
      13
    ],
    "answer": 23,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nUndirected Graph with 31 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 4\n1 2\n2 3\n3 19\n4 6\n6 15\n1 20\n1 17\n6 12\n17 5\n2 25\n25 30\n15 10\n20 16\n15 7\n12 22\n16 28\n10 8\n20 13\n8 26\n10 24\n25 14\n19 23\n23 21\n8 18\n16 27\n14 31\n15 11\n23 29\n16 9\n",
    "graph_output": "31 30\n1 4\n1 2\n2 3\n3 19\n4 6\n6 15\n1 20\n1 17\n6 12\n17 5\n2 25\n25 30\n15 10\n20 16\n15 7\n12 22\n16 28\n10 8\n20 13\n8 26\n10 24\n25 14\n19 23\n23 21\n8 18\n16 27\n14 31\n15 11\n23 29\n16 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 50 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 4 and vertex 8.\n",
    "graph_output": "11 50\n7 3\n8 11\n11 5\n8 7\n3 1\n6 3\n9 8\n4 9\n2 1\n6 8\n10 8\n7 10\n9 2\n3 9\n7 4\n10 2\n9 7\n5 1\n10 5\n6 7\n5 3\n4 10\n1 10\n10 9\n4 2\n10 11\n9 1\n10 6\n3 4\n4 11\n8 5\n11 9\n11 6\n1 11\n2 8\n10 3\n11 7\n2 7\n7 5\n9 6\n4 1\n2 6\n5 4\n2 11\n4 6\n7 1\n1 8\n2 3\n5 6\n4 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 1 to vertex 7 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 16 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 8 (weight=46), 11 (weight=8), 7 (weight=62), 5 (weight=34), 9 (weight=73)\nVertex 2: 12 (weight=86), 14 (weight=9)\nVertex 3: 12 (weight=86)\nVertex 4: 14 (weight=84)\nVertex 5: 1 (weight=34)\nVertex 6: 10 (weight=79)\nVertex 7: 1 (weight=62), 13 (weight=79), 12 (weight=15)\nVertex 8: 1 (weight=46), 12 (weight=22)\nVertex 9: 1 (weight=73), 12 (weight=24)\nVertex 10: 15 (weight=45), 6 (weight=79)\nVertex 11: 1 (weight=8)\nVertex 12: 8 (weight=22), 3 (weight=86), 2 (weight=86), 15 (weight=53), 7 (weight=15), 9 (weight=24)\nVertex 13: 7 (weight=79)\nVertex 14: 2 (weight=9), 4 (weight=84)\nVertex 15: 12 (weight=53), 10 (weight=45)\n",
    "graph_output": "15 16\n1 8 46\n8 12 22\n12 3 86\n1 11 8\n1 7 62\n7 13 79\n12 2 86\n2 14 9\n12 15 53\n1 5 34\n15 10 45\n10 6 79\n1 9 73\n14 4 84\n7 12 15\n9 12 24\n",
    "vertices": [
      1,
      7
    ],
    "answer": 62,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 8 and vertex 1 are connected.\n\nThis is an undirected graph with 16 vertices and 18 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 12, 5, 8\nVertex 2: 8\nVertex 3: 11, 16, 14, 7\nVertex 4: 5, 10\nVertex 5: 12, 4, 1, 13\nVertex 6: No connections\nVertex 7: 16, 8, 14, 3\nVertex 8: 7, 1, 2\nVertex 9: 11\nVertex 10: 4\nVertex 11: 3, 9, 14\nVertex 12: 5, 1\nVertex 13: 5\nVertex 14: 7, 3, 11\nVertex 15: 16\nVertex 16: 7, 3, 15\n",
    "graph_output": "16 18\n5 12\n7 16\n5 4\n11 3\n11 9\n16 3\n1 12\n5 1\n7 8\n5 13\n10 4\n15 16\n14 7\n14 3\n8 1\n2 8\n3 7\n14 11\n",
    "vertices": [
      8,
      1
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 12 vertices and 56 edges\n\nEdges (Format: Node Node Weight):\n1 8 68\n1 11 50\n1 10 6\n11 4 11\n1 3 89\n4 5 60\n1 9 91\n9 6 22\n5 2 44\n8 7 30\n6 12 14\n8 5 95\n12 4 4\n2 3 24\n10 7 16\n12 10 77\n2 11 19\n9 12 50\n12 7 48\n10 6 37\n8 9 54\n4 1 71\n6 8 63\n8 4 15\n9 7 61\n6 7 65\n12 8 15\n11 10 80\n11 8 13\n5 11 51\n8 2 90\n1 12 15\n9 5 91\n2 10 18\n5 10 84\n10 3 29\n6 4 41\n8 10 46\n2 6 16\n12 11 82\n7 4 99\n3 4 32\n1 7 37\n10 4 30\n3 9 13\n11 7 35\n7 3 57\n2 1 75\n5 7 23\n3 12 22\n6 5 78\n2 7 77\n9 10 54\n6 1 33\n3 6 33\n11 9 64\n",
    "graph_output": "12 56\n1 8 68\n1 11 50\n1 10 6\n11 4 11\n1 3 89\n4 5 60\n1 9 91\n9 6 22\n5 2 44\n8 7 30\n6 12 14\n8 5 95\n12 4 4\n2 3 24\n10 7 16\n12 10 77\n2 11 19\n9 12 50\n12 7 48\n10 6 37\n8 9 54\n4 1 71\n6 8 63\n8 4 15\n9 7 61\n6 7 65\n12 8 15\n11 10 80\n11 8 13\n5 11 51\n8 2 90\n1 12 15\n9 5 91\n2 10 18\n5 10 84\n10 3 29\n6 4 41\n8 10 46\n2 6 16\n12 11 82\n7 4 99\n3 4 32\n1 7 37\n10 4 30\n3 9 13\n11 7 35\n7 3 57\n2 1 75\n5 7 23\n3 12 22\n6 5 78\n2 7 77\n9 10 54\n6 1 33\n3 6 33\n11 9 64\n",
    "vertices": [
      null,
      null
    ],
    "answer": 155,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 90 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   0   1   0   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   0   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   0   0   1   1   1   0   1   1 \n 5 |  0   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   0   1   1   1   1   1   1   1   1 \n 7 |  1   0   1   1   1   0   0   0   1   0   1   1   1   1   1 \n 8 |  1   1   1   0   1   1   0   0   0   1   1   1   1   1   1 \n 9 |  1   0   1   0   1   1   1   0   0   1   0   1   1   1   1 \n10 |  1   1   0   1   1   1   0   1   1   0   0   0   1   0   1 \n11 |  1   1   1   1   1   1   1   1   0   0   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   0   1   0   1   1   1 \n13 |  1   1   1   0   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   1   1   1   1   1   1   0   1   1   1   0   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 90\n1 11\n1 10\n1 12\n12 15\n15 9\n15 3\n15 14\n3 6\n6 13\n11 7\n15 4\n14 2\n15 8\n11 5\n4 14\n5 8\n12 11\n12 8\n5 3\n5 13\n5 7\n3 9\n1 9\n14 12\n1 3\n14 1\n11 14\n9 14\n10 6\n2 5\n7 14\n8 10\n4 5\n14 8\n13 8\n2 12\n12 3\n7 4\n5 6\n3 14\n6 4\n13 1\n6 8\n12 6\n5 10\n15 11\n4 3\n2 8\n9 5\n6 1\n6 14\n4 1\n15 13\n6 15\n5 14\n14 13\n3 2\n13 9\n10 13\n12 5\n15 1\n13 3\n7 12\n1 8\n11 3\n4 10\n6 9\n2 10\n2 15\n1 7\n13 11\n12 9\n2 13\n3 7\n13 12\n15 5\n6 2\n4 11\n2 4\n2 11\n7 9\n4 12\n7 15\n7 13\n6 11\n15 10\n9 10\n1 2\n8 3\n11 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 15 vertices and 83 edges\n\nEdges (Format: Node Node):\n8 13\n9 8\n2 10\n9 13\n9 12\n10 5\n11 8\n15 11\n7 3\n12 11\n8 12\n7 8\n6 1\n3 12\n7 11\n14 2\n14 12\n8 5\n6 14\n13 12\n4 13\n6 8\n8 2\n10 11\n14 7\n11 4\n1 7\n9 14\n3 15\n5 12\n7 5\n15 5\n11 14\n3 8\n8 1\n12 10\n6 2\n10 6\n8 15\n9 4\n2 9\n2 1\n3 9\n15 4\n14 1\n13 5\n12 1\n3 10\n6 9\n13 15\n12 15\n5 14\n3 14\n8 4\n15 7\n5 9\n7 4\n2 4\n1 5\n14 13\n8 14\n7 6\n13 11\n11 9\n4 12\n14 10\n6 13\n14 15\n13 2\n10 4\n10 15\n6 4\n10 9\n3 13\n1 13\n3 2\n5 6\n10 13\n2 12\n11 1\n13 7\n15 9\n1 9\n",
    "graph_output": "15 83\n8 13\n9 8\n2 10\n9 13\n9 12\n10 5\n11 8\n15 11\n7 3\n12 11\n8 12\n7 8\n6 1\n3 12\n7 11\n14 2\n14 12\n8 5\n6 14\n13 12\n4 13\n6 8\n8 2\n10 11\n14 7\n11 4\n1 7\n9 14\n3 15\n5 12\n7 5\n15 5\n11 14\n3 8\n8 1\n12 10\n6 2\n10 6\n8 15\n9 4\n2 9\n2 1\n3 9\n15 4\n14 1\n13 5\n12 1\n3 10\n6 9\n13 15\n12 15\n5 14\n3 14\n8 4\n15 7\n5 9\n7 4\n2 4\n1 5\n14 13\n8 14\n7 6\n13 11\n11 9\n4 12\n14 10\n6 13\n14 15\n13 2\n10 4\n10 15\n6 4\n10 9\n3 13\n1 13\n3 2\n5 6\n10 13\n2 12\n11 1\n13 7\n15 9\n1 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 17 and vertex 14 are connected.\n\nThis is an undirected graph with 17 vertices and 115 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   0 \n 2 |  1   0   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 3 |  1   1   0   0   1   1   1   1   1   1   1   1   1   1   1   0   1 \n 4 |  1   1   0   0   1   1   1   0   0   1   1   1   1   0   1   1   1 \n 5 |  1   1   1   1   0   1   1   0   0   1   0   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   0   1   1   1   1   1   0   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   0   1   1   1   0   1   1   1 \n 8 |  1   1   1   0   0   0   1   0   1   1   1   1   1   1   1   1   1 \n 9 |  0   1   1   0   0   1   1   1   0   1   1   1   1   1   1   1   1 \n10 |  1   0   1   1   1   1   0   1   1   0   1   0   1   1   1   0   1 \n11 |  1   1   1   1   0   1   1   1   1   1   0   0   1   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   0   0   0   1   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   0   1   0 \n14 |  1   1   1   0   1   0   0   1   1   1   1   1   1   0   1   0   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   0   1   1 \n16 |  1   1   0   1   1   1   1   1   1   0   1   1   1   0   1   0   1 \n17 |  0   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   0 \n",
    "graph_output": "17 115\n17 5\n8 17\n2 4\n4 16\n12 15\n13 11\n1 8\n3 1\n1 5\n13 10\n15 6\n6 1\n15 8\n13 3\n13 5\n11 9\n5 16\n13 16\n15 14\n14 9\n1 15\n11 14\n14 1\n8 11\n2 13\n2 17\n7 5\n6 4\n3 8\n15 7\n7 17\n8 2\n3 9\n6 12\n7 16\n9 7\n13 6\n9 8\n2 14\n17 6\n17 12\n16 15\n13 1\n12 2\n4 10\n3 17\n2 11\n10 14\n7 13\n7 4\n6 7\n17 4\n14 8\n5 4\n11 10\n8 13\n6 16\n14 5\n8 10\n5 10\n15 11\n16 1\n1 7\n7 2\n12 9\n9 16\n6 3\n11 7\n1 4\n16 2\n12 16\n10 9\n12 5\n4 11\n3 14\n17 9\n6 2\n17 11\n4 13\n15 2\n15 9\n10 15\n9 6\n4 12\n6 10\n2 1\n12 7\n1 10\n11 3\n3 15\n5 3\n3 12\n13 12\n8 16\n11 16\n8 7\n5 2\n15 17\n2 3\n9 2\n1 12\n5 15\n3 10\n7 3\n4 15\n10 17\n8 12\n14 12\n17 14\n16 17\n11 6\n11 1\n13 9\n13 14\n5 6\n",
    "vertices": [
      17,
      14
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 8 and vertex 6 are connected.\n\nUndirected Graph with 15 vertices and 91 edges\n\nEdges (Format: Node Node):\n6 15\n8 12\n13 11\n8 4\n2 14\n5 4\n2 7\n14 13\n5 7\n9 5\n10 4\n14 3\n9 4\n9 6\n6 10\n12 6\n13 2\n9 10\n4 12\n2 9\n2 10\n5 2\n3 1\n13 8\n1 4\n7 11\n1 14\n11 8\n15 11\n3 7\n9 13\n11 14\n9 3\n13 7\n14 6\n3 11\n9 15\n10 5\n12 7\n3 8\n4 13\n10 7\n3 15\n1 11\n3 6\n15 13\n12 14\n1 8\n1 12\n4 14\n12 13\n12 11\n3 4\n7 8\n6 13\n15 4\n13 5\n12 3\n10 13\n8 15\n12 2\n4 11\n11 9\n1 7\n14 15\n11 2\n6 8\n8 14\n4 6\n6 1\n9 12\n5 12\n1 10\n5 6\n9 8\n4 2\n14 10\n9 14\n7 14\n13 3\n5 3\n15 5\n15 12\n1 13\n10 12\n10 11\n2 8\n2 1\n7 6\n15 2\n15 10\n",
    "graph_output": "15 91\n6 15\n8 12\n13 11\n8 4\n2 14\n5 4\n2 7\n14 13\n5 7\n9 5\n10 4\n14 3\n9 4\n9 6\n6 10\n12 6\n13 2\n9 10\n4 12\n2 9\n2 10\n5 2\n3 1\n13 8\n1 4\n7 11\n1 14\n11 8\n15 11\n3 7\n9 13\n11 14\n9 3\n13 7\n14 6\n3 11\n9 15\n10 5\n12 7\n3 8\n4 13\n10 7\n3 15\n1 11\n3 6\n15 13\n12 14\n1 8\n1 12\n4 14\n12 13\n12 11\n3 4\n7 8\n6 13\n15 4\n13 5\n12 3\n10 13\n8 15\n12 2\n4 11\n11 9\n1 7\n14 15\n11 2\n6 8\n8 14\n4 6\n6 1\n9 12\n5 12\n1 10\n5 6\n9 8\n4 2\n14 10\n9 14\n7 14\n13 3\n5 3\n15 5\n15 12\n1 13\n10 12\n10 11\n2 8\n2 1\n7 6\n15 2\n15 10\n",
    "vertices": [
      8,
      6
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 10 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 54 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   0 \n 6 |  1   1   1   1   1   0   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1 \n11 |  1   1   1   1   0   1   1   1   1   1   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   4   2   9   5   6   5   8   8   7   1 \n 2 |  4   0   9   2  10   7   4   5   2   3   5 \n 3 |  2   9   0   2   8   7   5   2   5   5   8 \n 4 |  9   2   2   0   6   1   9  10   7  10   8 \n 5 |  5  10   8   6   0   5   5   1   9   2   0 \n 6 |  6   7   7   1   5   0   3   4   3  10   6 \n 7 |  5   4   5   9   5   3   0   3   3   1   3 \n 8 |  8   5   2  10   1   4   3   0   6   7   5 \n 9 |  8   2   5   7   9   3   3   6   0   6  10 \n10 |  7   3   5  10   2  10   1   7   6   0  10 \n11 |  1   5   8   8   0   6   3   5  10  10   0 \n",
    "graph_output": "11 54\n1 3 2\n1 5 5\n3 8 2\n5 7 5\n3 6 7\n6 9 3\n8 4 10\n6 11 6\n8 2 5\n7 10 1\n4 3 2\n3 2 9\n11 3 8\n10 5 2\n3 7 5\n4 7 9\n8 1 8\n4 1 9\n10 11 10\n4 9 7\n8 7 3\n2 11 5\n9 7 3\n2 9 2\n3 5 8\n10 3 5\n8 9 6\n10 1 7\n7 6 3\n9 1 8\n6 10 10\n4 6 1\n11 4 8\n11 1 1\n7 11 3\n9 3 5\n10 4 10\n5 6 5\n8 11 5\n9 5 9\n4 5 6\n6 8 4\n1 6 6\n5 2 10\n2 10 3\n10 9 6\n4 2 2\n11 9 10\n7 1 5\n7 2 4\n6 2 7\n5 8 1\n1 2 4\n10 8 7\n",
    "vertices": [
      10,
      2
    ],
    "answer": 51,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 106 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   0   1   1   1   1   1   1   0   0   1 \n 2 |  1   0   1   0   1   1   0   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   0   1   1   1   0   1   1   1   1   0   1   1   1 \n 4 |  1   0   0   0   1   1   1   1   1   1   1   1   0   1   1   1 \n 5 |  1   1   1   1   0   1   0   1   1   0   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   0   0   1   1   1   1 \n 7 |  0   0   1   1   0   1   0   1   1   1   1   1   0   1   1   1 \n 8 |  1   1   0   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n10 |  1   1   1   1   0   1   1   1   1   0   1   1   1   1   1   1 \n11 |  1   1   1   1   1   0   1   1   1   1   0   1   1   1   1   1 \n12 |  1   1   1   1   1   0   1   1   1   1   1   0   1   1   1   1 \n13 |  1   1   0   0   1   1   0   1   1   1   1   1   0   1   1   1 \n14 |  0   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n15 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n16 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "16 106\n11 3\n7 8\n2 12\n7 3\n3 12\n5 14\n14 9\n5 15\n2 6\n15 8\n15 9\n3 15\n4 10\n11 5\n9 10\n1 16\n12 14\n3 2\n13 8\n8 16\n6 14\n15 14\n10 8\n8 9\n16 6\n4 1\n14 11\n13 5\n6 5\n15 13\n4 15\n15 10\n6 8\n6 10\n7 6\n2 10\n13 1\n10 1\n12 4\n8 2\n9 5\n8 14\n4 9\n7 14\n13 6\n15 12\n7 12\n2 14\n16 9\n1 12\n7 4\n7 11\n16 2\n10 3\n7 16\n3 5\n11 1\n15 7\n11 2\n16 10\n14 10\n8 5\n1 6\n1 8\n16 5\n4 14\n2 15\n11 15\n4 8\n16 11\n7 10\n11 12\n9 6\n3 6\n9 13\n16 3\n15 16\n14 16\n2 1\n6 4\n11 9\n12 5\n10 11\n11 13\n5 4\n9 2\n16 13\n16 4\n3 9\n5 1\n12 13\n2 5\n11 8\n16 12\n12 9\n13 10\n14 13\n15 6\n11 4\n12 10\n1 9\n7 9\n8 12\n3 1\n13 2\n3 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 7 vertices and 19 edges\n\nEdges (Format: Node Node):\n1 2\n1 7\n2 6\n6 4\n4 3\n2 5\n3 5\n5 1\n7 3\n2 7\n4 2\n5 4\n7 6\n7 5\n6 5\n3 2\n3 6\n4 7\n1 6\n",
    "graph_output": "7 19\n1 2\n1 7\n2 6\n6 4\n4 3\n2 5\n3 5\n5 1\n7 3\n2 7\n4 2\n5 4\n7 6\n7 5\n6 5\n3 2\n3 6\n4 7\n1 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8232,
    "description_type": "structured"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 38 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 1 and vertex 3.\n",
    "graph_output": "11 38\n9 2\n5 6\n11 3\n7 1\n10 1\n10 5\n11 10\n7 11\n3 8\n10 3\n8 10\n1 2\n9 4\n3 4\n2 3\n11 4\n7 5\n10 7\n5 4\n11 6\n9 6\n7 4\n2 4\n5 9\n5 2\n11 1\n7 8\n6 2\n3 5\n6 8\n8 2\n8 9\n3 7\n9 7\n3 9\n8 5\n8 1\n1 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 69 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 6 and vertex 12.\n",
    "graph_output": "13 69\n6 8\n3 5\n6 10\n5 13\n2 11\n3 2\n5 12\n5 10\n3 9\n13 8\n11 9\n4 3\n6 7\n5 9\n3 11\n1 8\n1 2\n1 11\n5 6\n9 2\n4 6\n13 4\n2 4\n11 13\n7 5\n9 1\n1 5\n7 8\n9 6\n13 6\n9 4\n13 7\n11 12\n13 12\n8 9\n7 2\n12 1\n8 11\n9 13\n11 4\n4 10\n2 6\n8 12\n12 3\n6 3\n10 11\n8 3\n4 7\n10 2\n9 12\n4 1\n8 5\n10 8\n1 7\n13 10\n10 12\n11 6\n1 10\n8 2\n7 10\n1 13\n11 7\n4 8\n13 2\n2 12\n12 4\n13 3\n5 4\n6 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 18 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   0   0   0   1   1   0   0   0   1   0   0   1 \n 2 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   1 \n 3 |  0   0   0   0   0   0   1   0   0   0   0   1   1   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 5 |  0   0   0   0   0   0   1   0   0   0   0   0   1   0   0 \n 6 |  0   1   0   0   0   0   0   0   0   0   0   1   1   0   0 \n 7 |  1   0   1   0   1   0   0   0   0   0   0   0   0   0   0 \n 8 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   1   1   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   1   0   0   0   0   0   0   0   0   0   1   0 \n12 |  1   0   1   0   0   1   0   0   0   0   0   0   0   0   1 \n13 |  0   0   1   0   1   1   0   0   1   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   1   0   1   0   0   0   0 \n15 |  1   1   0   0   0   0   0   0   0   0   0   1   0   0   0 \n",
    "graph_output": "15 18\n13 5\n8 1\n14 9\n12 3\n12 6\n15 1\n1 7\n3 7\n2 6\n4 11\n1 12\n11 14\n12 15\n5 7\n15 2\n13 9\n13 6\n3 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 8 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 6, 3, 2\nVertex 2: 4, 1\nVertex 3: 5, 1, 6\nVertex 4: 2, 5\nVertex 5: 3, 1, 4\nVertex 6: 1, 3\n",
    "graph_output": "6 8\n2 4\n5 3\n1 5\n6 1\n5 4\n1 3\n3 6\n2 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 20 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 1 and vertex 4.\n",
    "graph_output": "7 20\n1 6\n5 1\n6 7\n5 7\n2 5\n4 6\n2 1\n3 2\n5 3\n7 3\n5 4\n6 2\n7 1\n3 6\n2 4\n7 4\n1 3\n4 3\n6 5\n1 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 847,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (31\u00d731):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31\n   ----------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0 \n 2 |  0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 7 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  1   0   1   0   0   0   0   1   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   1   1   1   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   1   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n27 |  0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1 \n29 |  0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n30 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n31 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n",
    "graph_output": "31 30\n1 19\n1 25\n25 28\n25 27\n19 23\n23 17\n28 14\n1 16\n16 8\n27 7\n7 2\n25 26\n16 15\n7 29\n27 5\n2 4\n23 12\n8 21\n21 30\n12 13\n19 24\n19 22\n25 11\n16 3\n19 20\n29 6\n28 31\n13 10\n16 9\n19 18\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 24 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   1   0   1   1   0   1   0   0   1   1   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0 \n 3 |  1   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0 \n 5 |  1   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0 \n 6 |  1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  1   0   1   1   1   1   0   0   0   0   0   0   1   0   0   0 \n 9 |  0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0 \n11 |  1   1   1   0   0   0   0   0   0   1   0   0   0   0   0   1 \n12 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n13 |  0   0   0   0   1   0   0   1   0   0   0   0   0   0   1   1 \n14 |  0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   1   0   1   1   0   0   1 \n16 |  0   0   0   0   0   0   0   0   0   0   1   0   1   0   1   0 \n",
    "graph_output": "16 24\n2 14\n11 10\n3 1\n8 13\n15 16\n1 12\n1 8\n5 1\n15 12\n2 11\n13 5\n8 3\n9 4\n1 11\n14 9\n4 8\n6 8\n3 11\n1 6\n8 5\n16 11\n16 13\n15 10\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 24 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 12, 8, 5, 11, 6\nVertex 2: 14, 11\nVertex 3: 1, 8, 11\nVertex 4: 9, 8\nVertex 5: 1, 13, 8\nVertex 6: 8, 1\nVertex 7: No connections\nVertex 8: 13, 1, 3, 4, 6, 5\nVertex 9: 4, 14\nVertex 10: 11, 15\nVertex 11: 10, 2, 1, 3, 16\nVertex 12: 1, 15\nVertex 13: 8, 5, 16, 15\nVertex 14: 2, 9\nVertex 15: 16, 12, 10, 13\nVertex 16: 15, 11, 13\n",
    "graph_output": "16 24\n2 14\n11 10\n3 1\n8 13\n15 16\n1 12\n1 8\n5 1\n15 12\n2 11\n13 5\n8 3\n9 4\n1 11\n14 9\n4 8\n6 8\n3 11\n1 6\n8 5\n16 11\n16 13\n15 10\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 29 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 15\n1 5\n15 4\n1 24\n4 20\n15 23\n5 28\n24 21\n5 29\n29 13\n23 18\n1 14\n4 17\n23 16\n23 3\n17 8\n21 26\n24 10\n28 25\n13 9\n20 27\n28 6\n17 19\n28 7\n28 22\n8 11\n20 2\n4 12\n",
    "graph_output": "29 28\n1 15\n1 5\n15 4\n1 24\n4 20\n15 23\n5 28\n24 21\n5 29\n29 13\n23 18\n1 14\n4 17\n23 16\n23 3\n17 8\n21 26\n24 10\n28 25\n13 9\n20 27\n28 6\n17 19\n28 7\n28 22\n8 11\n20 2\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 21 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (8\u00d78):\n\n      1   2   3   4   5   6   7   8\n   --------------------------------\n 1 |  0   1   0   1   0   1   1   1 \n 2 |  1   0   1   1   1   0   1   0 \n 3 |  0   1   0   1   1   1   1   1 \n 4 |  1   1   1   0   0   1   1   0 \n 5 |  0   1   1   0   0   1   0   1 \n 6 |  1   0   1   1   1   0   1   1 \n 7 |  1   1   1   1   0   1   0   1 \n 8 |  1   0   1   0   1   1   1   0 \n",
    "graph_output": "8 21\n1 2\n2 5\n5 8\n1 6\n2 4\n2 7\n7 3\n8 1\n4 6\n7 8\n7 4\n8 6\n3 6\n6 5\n3 2\n4 1\n5 3\n4 3\n1 7\n8 3\n6 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 28203,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 15 vertices and 18 edges\n\nEdges (Format: Node Node):\n13 5\n8 1\n14 9\n12 3\n12 6\n15 1\n1 7\n3 7\n2 6\n4 11\n1 12\n11 14\n12 15\n5 7\n15 2\n13 9\n13 6\n3 13\n",
    "graph_output": "15 18\n13 5\n8 1\n14 9\n12 3\n12 6\n15 1\n1 7\n3 7\n2 6\n4 11\n1 12\n11 14\n12 15\n5 7\n15 2\n13 9\n13 6\n3 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 8 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 3 and vertex 5.\n",
    "graph_output": "6 8\n1 2\n1 3\n2 4\n2 6\n1 5\n4 1\n4 5\n3 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 21,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 15 vertices and 84 edges\n\nEdges (Format: Node Node):\n1 2\n2 11\n11 4\n1 5\n4 7\n1 15\n4 6\n11 9\n11 10\n10 12\n11 3\n4 8\n4 13\n5 14\n12 14\n5 4\n1 4\n9 6\n15 7\n5 8\n14 11\n10 8\n9 13\n15 8\n6 10\n7 11\n1 11\n5 15\n3 8\n7 2\n9 10\n5 10\n6 8\n2 13\n1 8\n15 3\n8 9\n10 1\n6 2\n1 7\n2 15\n4 2\n1 14\n15 10\n14 3\n1 9\n12 11\n10 14\n12 4\n2 9\n12 5\n1 13\n13 6\n14 13\n6 3\n2 5\n2 10\n11 5\n15 6\n3 12\n15 13\n14 6\n3 5\n10 3\n13 7\n10 13\n4 15\n3 1\n7 8\n11 15\n6 5\n5 7\n9 5\n6 11\n13 3\n13 8\n2 8\n12 2\n8 12\n14 2\n12 1\n12 9\n7 9\n9 15\n",
    "graph_output": "15 84\n1 2\n2 11\n11 4\n1 5\n4 7\n1 15\n4 6\n11 9\n11 10\n10 12\n11 3\n4 8\n4 13\n5 14\n12 14\n5 4\n1 4\n9 6\n15 7\n5 8\n14 11\n10 8\n9 13\n15 8\n6 10\n7 11\n1 11\n5 15\n3 8\n7 2\n9 10\n5 10\n6 8\n2 13\n1 8\n15 3\n8 9\n10 1\n6 2\n1 7\n2 15\n4 2\n1 14\n15 10\n14 3\n1 9\n12 11\n10 14\n12 4\n2 9\n12 5\n1 13\n13 6\n14 13\n6 3\n2 5\n2 10\n11 5\n15 6\n3 12\n15 13\n14 6\n3 5\n10 3\n13 7\n10 13\n4 15\n3 1\n7 8\n11 15\n6 5\n5 7\n9 5\n6 11\n13 3\n13 8\n2 8\n12 2\n8 12\n14 2\n12 1\n12 9\n7 9\n9 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 8 (source) to vertex 6 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 10 vertices and 10 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 8 29 5\n8 10 97 5\n8 9 35 5\n10 4 9 10\n4 7 16 5\n4 5 74 5\n9 3 7 6\n4 2 53 4\n10 6 6 7\n6 8 34 9\n",
    "graph_output": "10 10\n1 8 29 5\n8 10 97 5\n8 9 35 5\n10 4 9 10\n4 7 16 5\n4 5 74 5\n9 3 7 6\n4 2 53 4\n10 6 6 7\n6 8 34 9\n",
    "vertices": [
      8,
      6
    ],
    "answer": 821,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 18 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0  44   0  74 \n 2 |  0   0   0   0   0  39  63  93   0   0   0   0   0 \n 3 |  0   0   0   0  68   0   0   0  57   0   0   0  15 \n 4 |  0   0   0   0   0   0   0  35   0  70  92   0   0 \n 5 |  0   0  68   0   0   0   0  15   0   0   0   0   0 \n 6 |  0  39   0   0   0   0   0   0   0   0   0   0  92 \n 7 |  0  63   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0  93   0  35  15   0   0   0   0   0   0   0   0 \n 9 |  0   0  57   0   0   0   0   0   0   0   0  48   0 \n10 |  0   0   0  70   0   0   0   0   0   0   0  72  37 \n11 | 44   0   0  92   0   0   0   0   0   0   0   2   0 \n12 |  0   0   0   0   0   0   0   0  48  72   2   0  33 \n13 | 74   0  15   0   0  92   0   0   0  37   0  33   0 \n",
    "graph_output": "13 18\n1 13 74\n13 3 15\n13 10 37\n13 6 92\n6 2 39\n3 5 68\n10 12 72\n12 11 2\n12 9 48\n2 7 63\n5 8 15\n10 4 70\n11 1 44\n3 9 57\n11 4 92\n4 8 35\n13 12 33\n8 2 93\n",
    "vertices": [
      null,
      null
    ],
    "answer": 492,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 93 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 10, 8, 9, 7, 15, 12, 11, 13, 4, 14, 2, 16\nVertex 2: 16, 6, 9, 13, 12, 10, 15, 4, 5, 11, 1, 7\nVertex 3: 14, 10, 9, 15, 13, 4, 5\nVertex 4: 9, 5, 6, 2, 3, 11, 15, 1, 10, 14, 12\nVertex 5: 7, 14, 9, 10, 13, 11, 8, 4, 16, 2, 3, 6\nVertex 6: 14, 1, 7, 2, 11, 9, 10, 12, 4, 15, 5\nVertex 7: 6, 5, 1, 14, 9, 13, 15, 11, 2, 10\nVertex 8: 1, 10, 12, 13, 9, 15, 5, 14, 16\nVertex 9: 2, 4, 5, 3, 14, 1, 6, 8, 7, 16, 12, 11, 15, 13\nVertex 10: 1, 15, 12, 16, 8, 5, 3, 11, 2, 6, 13, 7, 4\nVertex 11: 15, 16, 14, 13, 6, 10, 5, 4, 12, 9, 7, 1, 2\nVertex 12: 10, 8, 2, 13, 1, 6, 14, 9, 11, 15, 4\nVertex 13: 16, 14, 8, 11, 15, 2, 5, 12, 7, 3, 10, 1, 9\nVertex 14: 6, 13, 5, 11, 3, 9, 7, 8, 12, 16, 15, 1, 4\nVertex 15: 10, 11, 13, 1, 3, 8, 2, 6, 7, 9, 14, 4, 16, 12\nVertex 16: 13, 2, 10, 11, 8, 5, 9, 14, 15, 1\n",
    "graph_output": "16 93\n6 14\n16 13\n1 6\n10 1\n7 6\n15 10\n13 14\n16 2\n6 2\n5 7\n10 12\n9 2\n8 1\n16 10\n8 10\n12 8\n4 9\n5 14\n11 15\n16 11\n11 14\n9 5\n13 8\n14 3\n13 11\n6 11\n10 5\n3 10\n10 11\n15 13\n2 13\n9 3\n5 13\n12 2\n14 9\n1 9\n2 10\n7 1\n15 1\n6 9\n3 15\n7 14\n9 8\n11 5\n15 8\n8 5\n8 14\n15 2\n16 8\n7 9\n13 12\n1 12\n6 10\n5 4\n12 6\n5 16\n7 13\n4 6\n14 12\n15 6\n4 2\n15 7\n13 3\n2 5\n13 10\n16 9\n4 3\n3 5\n9 12\n11 4\n11 12\n11 9\n11 7\n15 9\n11 1\n14 16\n14 15\n4 15\n13 1\n13 9\n11 2\n1 4\n14 1\n15 16\n2 1\n6 5\n7 2\n15 12\n16 1\n10 7\n10 4\n4 14\n12 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 12 (source) to vertex 13 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 13 vertices and 71 edges\n\nEdges (Format: Node Node Capacity):\n1 13 3\n1 8 9\n1 7 6\n7 10 9\n13 11 8\n13 3 5\n7 5 9\n8 4 5\n7 12 9\n3 9 5\n11 6 8\n12 2 2\n7 6 10\n2 3 3\n6 8 9\n3 10 4\n4 2 5\n3 5 7\n7 9 8\n8 10 6\n1 6 5\n2 6 5\n3 12 8\n6 4 8\n1 2 9\n12 9 9\n5 4 7\n3 7 4\n4 12 2\n9 13 5\n2 9 4\n8 7 9\n3 1 3\n5 6 10\n1 11 2\n10 4 1\n13 10 5\n6 12 3\n4 11 5\n2 10 8\n9 8 7\n7 2 6\n12 10 3\n4 3 3\n13 6 10\n13 12 9\n11 10 2\n11 7 4\n10 5 2\n5 9 10\n6 9 5\n13 4 4\n1 10 2\n9 11 6\n10 6 1\n7 4 3\n1 12 5\n9 10 3\n5 13 4\n1 9 5\n8 11 4\n8 2 5\n7 13 1\n1 5 10\n2 5 1\n8 13 8\n3 11 9\n13 2 6\n8 5 9\n2 11 9\n6 3 9\n",
    "graph_output": "13 71\n1 13 3\n1 8 9\n1 7 6\n7 10 9\n13 11 8\n13 3 5\n7 5 9\n8 4 5\n7 12 9\n3 9 5\n11 6 8\n12 2 2\n7 6 10\n2 3 3\n6 8 9\n3 10 4\n4 2 5\n3 5 7\n7 9 8\n8 10 6\n1 6 5\n2 6 5\n3 12 8\n6 4 8\n1 2 9\n12 9 9\n5 4 7\n3 7 4\n4 12 2\n9 13 5\n2 9 4\n8 7 9\n3 1 3\n5 6 10\n1 11 2\n10 4 1\n13 10 5\n6 12 3\n4 11 5\n2 10 8\n9 8 7\n7 2 6\n12 10 3\n4 3 3\n13 6 10\n13 12 9\n11 10 2\n11 7 4\n10 5 2\n5 9 10\n6 9 5\n13 4 4\n1 10 2\n9 11 6\n10 6 1\n7 4 3\n1 12 5\n9 10 3\n5 13 4\n1 9 5\n8 11 4\n8 2 5\n7 13 1\n1 5 10\n2 5 1\n8 13 8\n3 11 9\n13 2 6\n8 5 9\n2 11 9\n6 3 9\n",
    "vertices": [
      12,
      13
    ],
    "answer": 50,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 106 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   1   1   0   1   1   0   1   1   0   1   1   1   1   1 \n 2 |  0   0   1   1   1   1   1   0   1   1   0   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   0   1   0 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  0   1   1   1   0   1   1   1   1   0   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   0   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   0   1   0 \n 8 |  0   0   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n10 |  1   1   1   1   0   1   1   1   1   0   1   1   0   1   0   1 \n11 |  0   0   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   0   1   1   0   1   1   1 \n14 |  1   1   0   1   1   0   0   1   1   1   1   1   1   0   1   1 \n15 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   0   1 \n16 |  1   1   0   1   1   1   0   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "16 106\n1 4\n4 5\n1 6\n6 10\n10 14\n14 16\n4 15\n6 3\n4 9\n9 13\n4 8\n9 2\n4 12\n12 11\n1 7\n13 1\n14 1\n11 9\n12 9\n15 11\n3 12\n15 14\n11 14\n7 10\n2 7\n13 16\n12 10\n3 2\n3 8\n14 5\n5 15\n13 4\n3 1\n13 3\n1 10\n10 4\n2 15\n2 5\n11 6\n11 8\n8 6\n15 7\n10 3\n8 5\n11 13\n9 15\n16 9\n7 9\n12 14\n5 16\n1 16\n15 16\n12 16\n7 4\n1 12\n7 3\n12 15\n10 2\n4 14\n8 13\n6 9\n2 6\n5 3\n7 13\n7 12\n16 6\n3 15\n14 9\n3 11\n11 4\n11 7\n5 9\n12 2\n2 13\n14 2\n13 14\n6 4\n15 8\n14 8\n12 13\n6 5\n16 10\n16 11\n7 5\n11 5\n1 15\n2 4\n10 9\n4 3\n16 4\n6 13\n9 8\n2 16\n5 12\n15 13\n12 8\n6 12\n9 3\n13 5\n6 7\n8 10\n8 16\n9 1\n10 11\n8 7\n15 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 17 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 7 (weight=16), 12 (weight=95), 4 (weight=75)\nVertex 2: 12 (weight=58)\nVertex 3: 12 (weight=20), 10 (weight=44), 11 (weight=10)\nVertex 4: 12 (weight=61), 9 (weight=51), 1 (weight=75)\nVertex 5: 11 (weight=69), 13 (weight=27), 10 (weight=68)\nVertex 6: 12 (weight=64)\nVertex 7: 1 (weight=16), 11 (weight=63), 9 (weight=53)\nVertex 8: 12 (weight=42)\nVertex 9: 4 (weight=51), 7 (weight=53)\nVertex 10: 3 (weight=44), 5 (weight=68)\nVertex 11: 7 (weight=63), 5 (weight=69), 13 (weight=88), 3 (weight=10)\nVertex 12: 1 (weight=95), 3 (weight=20), 4 (weight=61), 8 (weight=42), 2 (weight=58), 6 (weight=64)\nVertex 13: 11 (weight=88), 5 (weight=27)\n",
    "graph_output": "13 17\n1 7 16\n1 12 95\n7 11 63\n12 3 20\n3 10 44\n12 4 61\n12 8 42\n12 2 58\n4 9 51\n11 5 69\n11 13 88\n12 6 64\n1 4 75\n13 5 27\n10 5 68\n3 11 10\n7 9 53\n",
    "vertices": [
      null,
      null
    ],
    "answer": 515,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 6 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 2\nVertex 2: 1, 6, 5\nVertex 3: No connections\nVertex 4: 6, 5\nVertex 5: 1, 4, 2\nVertex 6: 4, 2\n",
    "graph_output": "6 6\n1 5\n6 4\n2 1\n2 6\n5 4\n2 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 31 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   1   0 \n 2 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0 \n 3 |  0   0   0   0   0   0   1   1   0   0   1   1   0   0   0   0   0 \n 4 |  0   0   0   0   0   1   0   0   0   0   1   0   1   0   0   0   0 \n 5 |  1   1   0   0   0   1   0   1   0   0   0   0   0   1   1   0   0 \n 6 |  0   0   0   1   1   0   1   0   0   1   0   0   0   0   0   0   0 \n 7 |  0   0   1   0   0   1   0   0   0   0   1   1   1   0   0   0   0 \n 8 |  1   0   1   0   1   0   0   0   0   0   0   0   0   0   0   1   1 \n 9 |  0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0 \n10 |  0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   1 \n11 |  0   0   1   1   0   0   1   0   0   0   0   0   0   1   0   0   0 \n12 |  0   0   1   0   0   0   1   0   1   0   0   0   1   0   0   0   1 \n13 |  0   0   0   1   0   0   1   0   0   0   0   1   0   0   1   0   0 \n14 |  0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0 \n15 |  0   1   0   0   1   0   0   0   0   0   0   0   1   0   0   0   1 \n16 |  1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   1   0   1   0   1   0   0   1   0   0 \n",
    "graph_output": "17 31\n1 5\n5 6\n6 7\n5 2\n2 15\n6 10\n10 9\n9 12\n6 4\n7 3\n7 13\n7 11\n11 14\n1 16\n3 8\n10 17\n12 17\n5 15\n8 16\n3 12\n17 15\n3 11\n5 14\n12 13\n8 5\n4 11\n8 1\n7 12\n4 13\n15 13\n8 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 22 edges\n\nEdges (Format: Node Node):\n1 11\n11 8\n1 10\n8 3\n11 7\n11 14\n10 2\n11 4\n2 9\n10 13\n2 16\n10 5\n1 15\n15 12\n8 6\n7 14\n3 7\n7 2\n12 16\n13 11\n3 14\n1 3\n",
    "graph_output": "16 22\n1 11\n11 8\n1 10\n8 3\n11 7\n11 14\n10 2\n11 4\n2 9\n10 13\n2 16\n10 5\n1 15\n15 12\n8 6\n7 14\n3 7\n7 2\n12 16\n13 11\n3 14\n1 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 15 vertices and 86 edges\n\nEdges (Format: Node Node Weight):\n1 14 81\n1 13 19\n13 6 99\n6 9 18\n14 3 10\n13 4 75\n14 5 24\n9 15 14\n4 7 83\n13 8 46\n13 2 85\n13 11 84\n6 10 65\n10 12 55\n5 15 83\n15 3 79\n8 14 45\n13 5 57\n6 7 51\n1 9 2\n15 6 55\n15 1 17\n5 12 8\n9 5 100\n6 4 1\n10 2 59\n5 3 82\n14 13 56\n8 7 23\n9 10 80\n14 15 69\n10 14 4\n4 1 83\n4 11 41\n15 4 39\n15 2 70\n15 8 29\n8 5 81\n9 14 82\n5 7 66\n14 11 55\n14 4 53\n13 15 6\n6 1 73\n15 10 98\n2 14 53\n9 11 40\n3 1 71\n8 6 76\n13 7 45\n3 4 90\n2 9 7\n15 11 56\n8 11 90\n9 4 79\n2 7 62\n7 3 84\n12 8 41\n10 8 96\n5 1 81\n11 12 28\n4 12 76\n10 4 92\n2 11 57\n7 14 59\n15 12 20\n2 6 89\n12 14 62\n12 1 30\n5 11 19\n4 2 41\n11 3 67\n5 2 9\n9 8 69\n15 7 46\n7 11 87\n3 12 41\n10 5 30\n3 13 17\n2 1 68\n7 10 20\n11 1 17\n14 6 43\n2 3 27\n13 12 68\n9 12 16\n",
    "graph_output": "15 86\n1 14 81\n1 13 19\n13 6 99\n6 9 18\n14 3 10\n13 4 75\n14 5 24\n9 15 14\n4 7 83\n13 8 46\n13 2 85\n13 11 84\n6 10 65\n10 12 55\n5 15 83\n15 3 79\n8 14 45\n13 5 57\n6 7 51\n1 9 2\n15 6 55\n15 1 17\n5 12 8\n9 5 100\n6 4 1\n10 2 59\n5 3 82\n14 13 56\n8 7 23\n9 10 80\n14 15 69\n10 14 4\n4 1 83\n4 11 41\n15 4 39\n15 2 70\n15 8 29\n8 5 81\n9 14 82\n5 7 66\n14 11 55\n14 4 53\n13 15 6\n6 1 73\n15 10 98\n2 14 53\n9 11 40\n3 1 71\n8 6 76\n13 7 45\n3 4 90\n2 9 7\n15 11 56\n8 11 90\n9 4 79\n2 7 62\n7 3 84\n12 8 41\n10 8 96\n5 1 81\n11 12 28\n4 12 76\n10 4 92\n2 11 57\n7 14 59\n15 12 20\n2 6 89\n12 14 62\n12 1 30\n5 11 19\n4 2 41\n11 3 67\n5 2 9\n9 8 69\n15 7 46\n7 11 87\n3 12 41\n10 5 30\n3 13 17\n2 1 68\n7 10 20\n11 1 17\n14 6 43\n2 3 27\n13 12 68\n9 12 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 156,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 14 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 5\nVertex 2: 4\nVertex 3: 5\nVertex 4: 5, 11, 2, 10\nVertex 5: 10, 4, 1, 7, 3\nVertex 6: 9, 7\nVertex 7: 6, 10, 5\nVertex 8: No connections\nVertex 9: 6, 11\nVertex 10: 5, 7, 4\nVertex 11: 1, 4, 9, 12\nVertex 12: 11\n",
    "graph_output": "12 14\n5 10\n4 5\n11 1\n11 4\n9 6\n7 6\n7 10\n1 5\n4 2\n7 5\n5 3\n10 4\n9 11\n11 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 5,
    "description_type": "list"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nUndirected Graph with 29 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 28\n28 6\n1 20\n20 25\n28 23\n25 10\n6 17\n23 22\n25 9\n10 4\n6 29\n29 19\n1 2\n22 21\n20 5\n28 7\n6 3\n28 18\n23 16\n9 8\n28 14\n29 11\n7 24\n28 15\n7 27\n19 26\n22 13\n24 12\n",
    "graph_output": "29 28\n1 28\n28 6\n1 20\n20 25\n28 23\n25 10\n6 17\n23 22\n25 9\n10 4\n6 29\n29 19\n1 2\n22 21\n20 5\n28 7\n6 3\n28 18\n23 16\n9 8\n28 14\n29 11\n7 24\n28 15\n7 27\n19 26\n22 13\n24 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 8 vertices and 14 edges\n\nEdges (Format: Node Node):\n1 4\n4 8\n1 5\n5 7\n7 2\n4 6\n1 3\n6 2\n6 1\n6 3\n8 5\n2 1\n4 5\n7 1\n",
    "graph_output": "8 14\n1 4\n4 8\n1 5\n5 7\n7 2\n4 6\n1 3\n6 2\n6 1\n6 3\n8 5\n2 1\n4 5\n7 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 755,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 15 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   0   0   0   1   1   1   0   0 \n 2 |  0   0   1   0   0   1   0   0   1   0   0 \n 3 |  0   1   0   0   0   0   0   1   0   0   0 \n 4 |  0   0   0   0   0   1   0   0   0   0   0 \n 5 |  0   0   0   0   0   1   0   0   0   0   0 \n 6 |  0   1   0   1   1   0   0   0   1   0   1 \n 7 |  1   0   0   0   0   0   0   1   0   0   1 \n 8 |  1   0   1   0   0   0   1   0   0   0   0 \n 9 |  1   1   0   0   0   1   0   0   0   1   1 \n10 |  0   0   0   0   0   0   0   0   1   0   0 \n11 |  0   0   0   0   0   1   1   0   1   0   0 \n",
    "graph_output": "11 15\n2 6\n9 2\n4 6\n7 8\n11 6\n1 8\n1 7\n7 11\n9 1\n3 2\n3 8\n5 6\n6 9\n9 10\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 16 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   1   0   1   0   0   0   0   1 \n 2 |  1   0   0   0   0   0   0   0   0   1   0 \n 3 |  1   0   0   0   0   0   0   0   1   1   0 \n 4 |  1   0   0   0   1   0   0   0   0   0   1 \n 5 |  0   0   0   1   0   0   0   0   0   0   1 \n 6 |  1   0   0   0   0   0   0   0   1   0   1 \n 7 |  0   0   0   0   0   0   0   0   0   1   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   1   0   0   1   0   0   0   1   1 \n10 |  0   1   1   0   0   0   1   0   1   0   0 \n11 |  1   0   0   1   1   1   0   0   1   0   0 \n",
    "graph_output": "11 16\n7 10\n11 9\n1 11\n5 11\n10 3\n2 10\n1 2\n1 4\n1 6\n3 1\n10 9\n11 4\n9 6\n6 11\n5 4\n9 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 3 (source) to vertex 1 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 40 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 6 (capacity=8), 2 (capacity=9), 10 (capacity=7), 9 (capacity=8), 3 (capacity=8), 4 (capacity=1), 7 (capacity=6), 5 (capacity=10), 11 (capacity=8)\nVertex 2: 1 (capacity=9), 8 (capacity=4), 10 (capacity=5), 11 (capacity=9), 9 (capacity=2), 3 (capacity=5)\nVertex 3: 11 (capacity=8), 5 (capacity=4), 7 (capacity=10), 6 (capacity=8), 1 (capacity=8), 9 (capacity=5), 2 (capacity=5), 10 (capacity=6)\nVertex 4: 11 (capacity=9), 10 (capacity=3), 1 (capacity=1), 9 (capacity=8), 7 (capacity=4), 8 (capacity=6)\nVertex 5: 3 (capacity=4), 6 (capacity=2), 11 (capacity=10), 10 (capacity=2), 1 (capacity=10), 9 (capacity=6)\nVertex 6: 1 (capacity=8), 11 (capacity=1), 5 (capacity=2), 3 (capacity=8), 8 (capacity=8)\nVertex 7: 3 (capacity=10), 9 (capacity=6), 8 (capacity=2), 4 (capacity=4), 1 (capacity=6), 10 (capacity=8)\nVertex 8: 2 (capacity=4), 9 (capacity=7), 6 (capacity=8), 7 (capacity=2), 11 (capacity=2), 10 (capacity=6), 4 (capacity=6)\nVertex 9: 7 (capacity=6), 10 (capacity=10), 8 (capacity=7), 1 (capacity=8), 4 (capacity=8), 2 (capacity=2), 3 (capacity=5), 11 (capacity=3), 5 (capacity=6)\nVertex 10: 1 (capacity=7), 9 (capacity=10), 4 (capacity=3), 11 (capacity=5), 2 (capacity=5), 8 (capacity=6), 5 (capacity=2), 7 (capacity=8), 3 (capacity=6)\nVertex 11: 6 (capacity=1), 3 (capacity=8), 4 (capacity=9), 10 (capacity=5), 5 (capacity=10), 8 (capacity=2), 2 (capacity=9), 9 (capacity=3), 1 (capacity=8)\n",
    "graph_output": "11 40\n1 6 8\n1 2 9\n6 11 1\n11 3 8\n1 10 7\n3 5 4\n11 4 9\n3 7 10\n2 8 4\n7 9 6\n9 10 10\n5 6 2\n9 8 7\n10 4 3\n11 10 5\n1 9 8\n6 3 8\n1 3 8\n5 11 10\n4 1 1\n6 8 8\n2 10 5\n7 8 2\n9 4 8\n11 8 2\n10 8 6\n10 5 2\n11 2 9\n4 7 4\n9 2 2\n3 9 5\n7 1 6\n10 7 8\n8 4 6\n2 3 5\n10 3 6\n11 9 3\n1 5 10\n5 9 6\n11 1 8\n",
    "vertices": [
      3,
      1
    ],
    "answer": 54,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 11 vertices and 51 edges\n\nEdges (Format: Node Node):\n2 9\n2 11\n4 2\n8 2\n3 6\n2 7\n8 11\n6 8\n1 6\n6 4\n9 4\n1 2\n8 3\n9 1\n4 7\n10 2\n9 8\n10 11\n11 5\n7 10\n8 4\n5 3\n6 7\n6 10\n6 11\n9 5\n11 3\n7 5\n9 11\n4 5\n6 2\n1 11\n7 3\n3 1\n5 1\n2 3\n1 4\n8 1\n10 3\n6 5\n4 11\n5 10\n11 7\n5 2\n10 8\n7 1\n9 10\n7 8\n7 9\n10 4\n5 8\n",
    "graph_output": "11 51\n2 9\n2 11\n4 2\n8 2\n3 6\n2 7\n8 11\n6 8\n1 6\n6 4\n9 4\n1 2\n8 3\n9 1\n4 7\n10 2\n9 8\n10 11\n11 5\n7 10\n8 4\n5 3\n6 7\n6 10\n6 11\n9 5\n11 3\n7 5\n9 11\n4 5\n6 2\n1 11\n7 3\n3 1\n5 1\n2 3\n1 4\n8 1\n10 3\n6 5\n4 11\n5 10\n11 7\n5 2\n10 8\n7 1\n9 10\n7 8\n7 9\n10 4\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 131,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 4 and vertex 2 are connected.\n\nUndirected Graph with 16 vertices and 31 edges\n\nEdges (Format: Node Node):\n5 15\n13 7\n5 4\n8 7\n1 14\n1 7\n5 1\n10 5\n7 10\n3 5\n10 8\n12 9\n16 6\n13 11\n9 16\n13 9\n3 4\n2 15\n15 7\n6 1\n8 12\n4 2\n3 12\n16 7\n15 4\n6 10\n10 2\n3 8\n16 5\n11 1\n7 3\n",
    "graph_output": "16 31\n5 15\n13 7\n5 4\n8 7\n1 14\n1 7\n5 1\n10 5\n7 10\n3 5\n10 8\n12 9\n16 6\n13 11\n9 16\n13 9\n3 4\n2 15\n15 7\n6 1\n8 12\n4 2\n3 12\n16 7\n15 4\n6 10\n10 2\n3 8\n16 5\n11 1\n7 3\n",
    "vertices": [
      4,
      2
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 26, 15, 27, 16\nVertex 2: 13\nVertex 3: 4, 25\nVertex 4: 26, 30, 3\nVertex 5: 22\nVertex 6: 22, 17, 7, 18\nVertex 7: 6, 24\nVertex 8: 26\nVertex 9: 1, 22, 19\nVertex 10: 14\nVertex 11: 27\nVertex 12: 19\nVertex 13: 15, 2\nVertex 14: 27, 10\nVertex 15: 1, 29, 13\nVertex 16: 1\nVertex 17: 6\nVertex 18: 6\nVertex 19: 9, 12, 23\nVertex 20: 29\nVertex 21: 22, 28\nVertex 22: 9, 6, 21, 5\nVertex 23: 19\nVertex 24: 7\nVertex 25: 3\nVertex 26: 1, 4, 8\nVertex 27: 1, 11, 14\nVertex 28: 21\nVertex 29: 15, 20\nVertex 30: 4, 31\nVertex 31: 30\n",
    "graph_output": "31 30\n1 9\n9 22\n1 26\n22 6\n1 15\n15 29\n6 17\n6 7\n26 4\n29 20\n9 19\n22 21\n19 12\n4 30\n30 31\n22 5\n1 27\n4 3\n6 18\n21 28\n7 24\n3 25\n19 23\n27 11\n1 16\n26 8\n27 14\n15 13\n13 2\n14 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 11 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 20 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 4 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 11 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 6 with a capacity of 3.\nThere is an edge between vertex 8 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 11 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 10 and vertex 2 with a capacity of 3.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 10.\nThere is an edge between vertex 7 and vertex 9 with a capacity of 2.\nThere is an edge between vertex 9 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 6 and vertex 2 with a capacity of 8.\nThere is an edge between vertex 2 and vertex 4 with a capacity of 9.\nThere is an edge between vertex 6 and vertex 1 with a capacity of 4.\nThere is an edge between vertex 11 and vertex 3 with a capacity of 9.\nThere is an edge between vertex 11 and vertex 7 with a capacity of 10.\nThere is an edge between vertex 7 and vertex 5 with a capacity of 10.\nThere is an edge between vertex 6 and vertex 10 with a capacity of 7.\nThere is an edge between vertex 9 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 11 with a capacity of 7.\nThere is an edge between vertex 10 and vertex 3 with a capacity of 5.\n",
    "graph_output": "11 20\n1 4 1\n4 8 9\n1 11 1\n11 6 3\n8 3 5\n11 10 10\n10 2 3\n3 7 10\n7 9 2\n9 5 2\n6 2 8\n2 4 9\n6 1 4\n11 3 9\n11 7 10\n7 5 10\n6 10 7\n9 6 9\n4 11 7\n10 3 5\n",
    "vertices": [
      11,
      6
    ],
    "answer": 24,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 13 to vertex 5 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 63 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (14\u00d714):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14\n   --------------------------------------------------------\n 1 |  0  44  72  43   0   0  99  17  40   0  54  35  95  95 \n 2 | 44   0  41  86   0   0  50  88  80  43  80  49   0   0 \n 3 | 72  41   0   0   0  20   0  36  99  15   0  20  81   0 \n 4 | 43  86   0   0  75  83   0  70   1   7  87  89   5  30 \n 5 |  0   0   0  75   0  52   0   0  21   0   0  98   0   0 \n 6 |  0   0  20  83  52   0  10  50  88 100  36   3  86   3 \n 7 | 99  50   0   0   0  10   0   0  55   0   0  95  12  72 \n 8 | 17  88  36  70   0  50   0   0  21  18  35  30   0   0 \n 9 | 40  80  99   1  21  88  55  21   0  20   7  39  57   0 \n10 |  0  43  15   7   0 100   0  18  20   0  59   0   0  67 \n11 | 54  80   0  87   0  36   0  35   7  59   0  40  68  57 \n12 | 35  49  20  89  98   3  95  30  39   0  40   0   0  65 \n13 | 95   0  81   5   0  86  12   0  57   0  68   0   0  74 \n14 | 95   0   0  30   0   3  72   0   0  67  57  65  74   0 \n",
    "graph_output": "14 63\n1 4 43\n4 8 70\n4 2 86\n2 12 49\n12 5 98\n1 7 99\n12 9 39\n7 13 12\n1 14 95\n4 11 87\n9 10 20\n12 3 20\n8 6 50\n9 11 7\n13 6 86\n13 4 5\n7 2 50\n12 6 3\n1 13 95\n14 12 65\n14 6 3\n6 10 100\n5 9 21\n12 4 89\n4 5 75\n10 4 7\n8 3 36\n10 11 59\n12 11 40\n8 12 30\n1 9 40\n2 8 88\n2 10 43\n1 8 17\n12 7 95\n11 6 36\n13 11 68\n10 8 18\n11 14 57\n2 1 44\n11 1 54\n8 9 21\n9 13 57\n14 4 30\n9 4 1\n7 6 10\n3 9 99\n6 4 83\n14 10 67\n6 3 20\n8 11 35\n13 14 74\n7 9 55\n3 10 15\n2 3 41\n6 5 52\n1 3 72\n14 7 72\n2 9 80\n1 12 35\n6 9 88\n2 11 80\n3 13 81\n",
    "vertices": [
      13,
      5
    ],
    "answer": 27,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 6 (source) to vertex 3 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 45 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 10 with a weight of 38 and a capacity of 6.\nThere is an edge between vertex 10 and vertex 6 with a weight of 3 and a capacity of 6.\nThere is an edge between vertex 10 and vertex 4 with a weight of 47 and a capacity of 7.\nThere is an edge between vertex 10 and vertex 3 with a weight of 71 and a capacity of 9.\nThere is an edge between vertex 4 and vertex 2 with a weight of 16 and a capacity of 5.\nThere is an edge between vertex 3 and vertex 7 with a weight of 9 and a capacity of 2.\nThere is an edge between vertex 6 and vertex 11 with a weight of 97 and a capacity of 2.\nThere is an edge between vertex 10 and vertex 8 with a weight of 35 and a capacity of 1.\nThere is an edge between vertex 4 and vertex 5 with a weight of 82 and a capacity of 6.\nThere is an edge between vertex 11 and vertex 9 with a weight of 64 and a capacity of 10.\nThere is an edge between vertex 2 and vertex 6 with a weight of 16 and a capacity of 6.\nThere is an edge between vertex 4 and vertex 1 with a weight of 85 and a capacity of 5.\nThere is an edge between vertex 2 and vertex 9 with a weight of 46 and a capacity of 8.\nThere is an edge between vertex 5 and vertex 9 with a weight of 98 and a capacity of 3.\nThere is an edge between vertex 5 and vertex 2 with a weight of 81 and a capacity of 7.\nThere is an edge between vertex 11 and vertex 3 with a weight of 89 and a capacity of 7.\nThere is an edge between vertex 3 and vertex 1 with a weight of 40 and a capacity of 5.\nThere is an edge between vertex 5 and vertex 1 with a weight of 94 and a capacity of 4.\nThere is an edge between vertex 7 and vertex 1 with a weight of 28 and a capacity of 9.\nThere is an edge between vertex 11 and vertex 8 with a weight of 70 and a capacity of 1.\nThere is an edge between vertex 6 and vertex 3 with a weight of 95 and a capacity of 3.\nThere is an edge between vertex 1 and vertex 2 with a weight of 21 and a capacity of 3.\nThere is an edge between vertex 8 and vertex 2 with a weight of 84 and a capacity of 2.\nThere is an edge between vertex 5 and vertex 6 with a weight of 80 and a capacity of 5.\nThere is an edge between vertex 10 and vertex 2 with a weight of 59 and a capacity of 8.\nThere is an edge between vertex 2 and vertex 7 with a weight of 15 and a capacity of 8.\nThere is an edge between vertex 2 and vertex 3 with a weight of 69 and a capacity of 9.\nThere is an edge between vertex 1 and vertex 6 with a weight of 14 and a capacity of 2.\nThere is an edge between vertex 3 and vertex 9 with a weight of 22 and a capacity of 2.\nThere is an edge between vertex 10 and vertex 11 with a weight of 9 and a capacity of 6.\nThere is an edge between vertex 2 and vertex 11 with a weight of 20 and a capacity of 3.\nThere is an edge between vertex 11 and vertex 7 with a weight of 26 and a capacity of 5.\nThere is an edge between vertex 4 and vertex 3 with a weight of 96 and a capacity of 10.\nThere is an edge between vertex 6 and vertex 7 with a weight of 94 and a capacity of 2.\nThere is an edge between vertex 5 and vertex 10 with a weight of 20 and a capacity of 5.\nThere is an edge between vertex 9 and vertex 7 with a weight of 67 and a capacity of 4.\nThere is an edge between vertex 8 and vertex 4 with a weight of 87 and a capacity of 6.\nThere is an edge between vertex 1 and vertex 8 with a weight of 100 and a capacity of 2.\nThere is an edge between vertex 9 and vertex 8 with a weight of 40 and a capacity of 7.\nThere is an edge between vertex 1 and vertex 9 with a weight of 86 and a capacity of 7.\nThere is an edge between vertex 5 and vertex 7 with a weight of 21 and a capacity of 9.\nThere is an edge between vertex 11 and vertex 5 with a weight of 27 and a capacity of 5.\nThere is an edge between vertex 4 and vertex 7 with a weight of 65 and a capacity of 4.\nThere is an edge between vertex 8 and vertex 5 with a weight of 13 and a capacity of 3.\nThere is an edge between vertex 10 and vertex 9 with a weight of 31 and a capacity of 6.\n",
    "graph_output": "11 45\n1 10 38 6\n10 6 3 6\n10 4 47 7\n10 3 71 9\n4 2 16 5\n3 7 9 2\n6 11 97 2\n10 8 35 1\n4 5 82 6\n11 9 64 10\n2 6 16 6\n4 1 85 5\n2 9 46 8\n5 9 98 3\n5 2 81 7\n11 3 89 7\n3 1 40 5\n5 1 94 4\n7 1 28 9\n11 8 70 1\n6 3 95 3\n1 2 21 3\n8 2 84 2\n5 6 80 5\n10 2 59 8\n2 7 15 8\n2 3 69 9\n1 6 14 2\n3 9 22 2\n10 11 9 6\n2 11 20 3\n11 7 26 5\n4 3 96 10\n6 7 94 2\n5 10 20 5\n9 7 67 4\n8 4 87 6\n1 8 100 2\n9 8 40 7\n1 9 86 7\n5 7 21 9\n11 5 27 5\n4 7 65 4\n8 5 13 3\n10 9 31 6\n",
    "vertices": [
      6,
      3
    ],
    "answer": 2714,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 17 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   0   0   0   0   0   1   0   0   0   0   1   0   0 \n 2 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 3 |  1   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0 \n 4 |  0   0   0   0   1   0   1   0   0   0   0   0   0   1   0   0 \n 5 |  0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   1   0   0   0   1   0   1   0   1   0   0 \n 9 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   1 \n11 |  0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n14 |  1   0   1   1   0   0   0   1   0   0   0   0   0   0   0   0 \n15 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n",
    "graph_output": "16 17\n1 14\n1 2\n14 8\n8 10\n8 12\n14 4\n4 5\n2 15\n5 11\n4 7\n10 13\n14 3\n10 16\n1 9\n8 6\n3 11\n3 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 21 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 17\nVertex 2: 12, 9\nVertex 3: 14, 15, 4, 8\nVertex 4: 8, 13, 3\nVertex 5: 12, 9\nVertex 6: 15, 14\nVertex 7: 13\nVertex 8: 4, 9, 3\nVertex 9: 14, 8, 2, 17, 5\nVertex 10: No connections\nVertex 11: 16\nVertex 12: 5, 2\nVertex 13: 15, 7, 4\nVertex 14: 3, 9, 1, 16, 6\nVertex 15: 13, 6, 3\nVertex 16: 11, 14\nVertex 17: 1, 9\n",
    "graph_output": "17 21\n14 3\n12 5\n14 9\n8 4\n12 2\n8 9\n15 13\n11 16\n7 13\n1 14\n6 15\n17 1\n16 14\n15 3\n2 9\n13 4\n17 9\n5 9\n6 14\n4 3\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 17 vertices and 30 edges\n\nEdges (Format: Node Node):\n10 12\n13 8\n4 10\n10 11\n14 3\n17 3\n7 4\n10 9\n4 12\n15 16\n12 15\n10 6\n11 16\n3 2\n6 17\n15 8\n9 4\n4 3\n14 16\n15 14\n4 5\n6 14\n13 6\n16 8\n11 9\n9 16\n11 12\n15 13\n7 5\n17 5\n",
    "graph_output": "17 30\n10 12\n13 8\n4 10\n10 11\n14 3\n17 3\n7 4\n10 9\n4 12\n15 16\n12 15\n10 6\n11 16\n3 2\n6 17\n15 8\n9 4\n4 3\n14 16\n15 14\n4 5\n6 14\n13 6\n16 8\n11 9\n9 16\n11 12\n15 13\n7 5\n17 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 2 and vertex 12 are connected.\n\nThis is an undirected graph with 15 vertices and 20 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 7, 11, 3\nVertex 2: 1, 9\nVertex 3: 6, 10, 12, 1\nVertex 4: 14, 15\nVertex 5: 14, 13, 9, 12\nVertex 6: 10, 3\nVertex 7: 1, 13\nVertex 8: 14\nVertex 9: 13, 5, 2, 12\nVertex 10: 14, 6, 3\nVertex 11: 1\nVertex 12: 3, 9, 5\nVertex 13: 9, 5, 7\nVertex 14: 5, 10, 4, 8\nVertex 15: 4\n",
    "graph_output": "15 20\n5 14\n10 14\n2 1\n1 7\n14 4\n9 13\n6 10\n1 11\n4 15\n5 13\n3 6\n5 9\n3 10\n14 8\n2 9\n3 12\n12 9\n1 3\n13 7\n12 5\n",
    "vertices": [
      2,
      12
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 93 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 12 and vertex 4.\n",
    "graph_output": "16 93\n6 14\n16 13\n1 6\n10 1\n7 6\n15 10\n13 14\n16 2\n6 2\n5 7\n10 12\n9 2\n8 1\n16 10\n8 10\n12 8\n4 9\n5 14\n11 15\n16 11\n11 14\n9 5\n13 8\n14 3\n13 11\n6 11\n10 5\n3 10\n10 11\n15 13\n2 13\n9 3\n5 13\n12 2\n14 9\n1 9\n2 10\n7 1\n15 1\n6 9\n3 15\n7 14\n9 8\n11 5\n15 8\n8 5\n8 14\n15 2\n16 8\n7 9\n13 12\n1 12\n6 10\n5 4\n12 6\n5 16\n7 13\n4 6\n14 12\n15 6\n4 2\n15 7\n13 3\n2 5\n13 10\n16 9\n4 3\n3 5\n9 12\n11 4\n11 12\n11 9\n11 7\n15 9\n11 1\n14 16\n14 15\n4 15\n13 1\n13 9\n11 2\n1 4\n14 1\n15 16\n2 1\n6 5\n7 2\n15 12\n16 1\n10 7\n10 4\n4 14\n12 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 13 vertices and 24 edges\n\nEdges (Format: Node Node):\n3 6\n9 4\n9 13\n11 10\n10 1\n13 11\n12 8\n8 9\n5 10\n10 7\n11 1\n4 6\n4 11\n1 12\n3 2\n5 1\n2 8\n1 7\n12 5\n4 7\n8 13\n1 8\n11 12\n4 12\n",
    "graph_output": "13 24\n3 6\n9 4\n9 13\n11 10\n10 1\n13 11\n12 8\n8 9\n5 10\n10 7\n11 1\n4 6\n4 11\n1 12\n3 2\n5 1\n2 8\n1 7\n12 5\n4 7\n8 13\n1 8\n11 12\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 7 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 21 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 7 (weight=65), 2 (weight=14), 9 (weight=10), 11 (weight=96), 15 (weight=55), 13 (weight=76)\nVertex 2: 1 (weight=14), 14 (weight=63), 6 (weight=90)\nVertex 3: 7 (weight=71)\nVertex 4: 9 (weight=36), 7 (weight=28)\nVertex 5: 13 (weight=39), 12 (weight=69), 8 (weight=38)\nVertex 6: 2 (weight=90), 15 (weight=39), 7 (weight=58)\nVertex 7: 1 (weight=65), 13 (weight=96), 3 (weight=71), 4 (weight=28), 6 (weight=58)\nVertex 8: 11 (weight=46), 5 (weight=38)\nVertex 9: 1 (weight=10), 4 (weight=36)\nVertex 10: 11 (weight=38), 13 (weight=50), 15 (weight=58)\nVertex 11: 1 (weight=96), 10 (weight=38), 8 (weight=46)\nVertex 12: 5 (weight=69)\nVertex 13: 7 (weight=96), 5 (weight=39), 1 (weight=76), 10 (weight=50)\nVertex 14: 2 (weight=63)\nVertex 15: 1 (weight=55), 6 (weight=39), 10 (weight=58)\n",
    "graph_output": "15 21\n1 7 65\n7 13 96\n1 2 14\n1 9 10\n7 3 71\n1 11 96\n13 5 39\n2 14 63\n11 10 38\n5 12 69\n11 8 46\n9 4 36\n1 15 55\n2 6 90\n5 8 38\n13 1 76\n15 6 39\n7 4 28\n10 13 50\n10 15 58\n6 7 58\n",
    "vertices": [
      4,
      7
    ],
    "answer": 28,
    "description_type": "list"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 10 and 1 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 31 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 11 and vertex 19.\nThere is an edge between vertex 19 and vertex 31.\nThere is an edge between vertex 19 and vertex 21.\nThere is an edge between vertex 1 and vertex 25.\nThere is an edge between vertex 1 and vertex 28.\nThere is an edge between vertex 1 and vertex 20.\nThere is an edge between vertex 25 and vertex 17.\nThere is an edge between vertex 20 and vertex 22.\nThere is an edge between vertex 17 and vertex 3.\nThere is an edge between vertex 11 and vertex 23.\nThere is an edge between vertex 20 and vertex 9.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 22 and vertex 10.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 9 and vertex 29.\nThere is an edge between vertex 22 and vertex 5.\nThere is an edge between vertex 23 and vertex 18.\nThere is an edge between vertex 31 and vertex 13.\nThere is an edge between vertex 20 and vertex 14.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 5 and vertex 24.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 20 and vertex 7.\nThere is an edge between vertex 2 and vertex 27.\nThere is an edge between vertex 25 and vertex 26.\nThere is an edge between vertex 13 and vertex 30.\nThere is an edge between vertex 28 and vertex 16.\nThere is an edge between vertex 26 and vertex 12.\nThere is an edge between vertex 9 and vertex 6.\n",
    "graph_output": "31 30\n1 11\n11 19\n19 31\n19 21\n1 25\n1 28\n1 20\n25 17\n20 22\n17 3\n11 23\n20 9\n1 15\n22 10\n9 2\n9 29\n22 5\n23 18\n31 13\n20 14\n13 8\n5 24\n3 4\n20 7\n2 27\n25 26\n13 30\n28 16\n26 12\n9 6\n",
    "vertices": [
      10,
      1
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 21 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1 \n 2 |  0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0 \n 3 |  0   0   0   1   0   0   0   1   0   0   0   0   0   1   1   0   0 \n 4 |  0   0   1   0   0   0   0   1   0   0   0   0   1   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 8 |  0   0   1   1   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 9 |  0   1   0   0   1   0   0   1   0   0   0   0   0   1   0   0   1 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n12 |  0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   1   0   0   1   0   0   0   0   0   0   0   1   0   0 \n14 |  1   0   1   0   0   1   0   0   1   0   0   0   0   0   0   1   0 \n15 |  0   0   1   0   0   1   0   0   0   0   0   0   1   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0 \n17 |  1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n",
    "graph_output": "17 21\n14 3\n12 5\n14 9\n8 4\n12 2\n8 9\n15 13\n11 16\n7 13\n1 14\n6 15\n17 1\n16 14\n15 3\n2 9\n13 4\n17 9\n5 9\n6 14\n4 3\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 5 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 86 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 11 (weight=85), 12 (weight=19), 3 (weight=73), 8 (weight=33), 9 (weight=70), 6 (weight=25), 4 (weight=72), 13 (weight=70), 14 (weight=90), 10 (weight=91), 2 (weight=21), 7 (weight=7), 5 (weight=96)\nVertex 2: 8 (weight=35), 12 (weight=85), 3 (weight=87), 11 (weight=98), 5 (weight=71), 4 (weight=81), 9 (weight=83), 13 (weight=12), 6 (weight=16), 14 (weight=32), 10 (weight=60), 7 (weight=71), 1 (weight=21)\nVertex 3: 1 (weight=73), 8 (weight=30), 2 (weight=87), 13 (weight=19), 14 (weight=98), 6 (weight=25), 9 (weight=44), 11 (weight=33), 5 (weight=3), 4 (weight=45), 7 (weight=60)\nVertex 4: 14 (weight=13), 2 (weight=81), 10 (weight=26), 12 (weight=44), 1 (weight=72), 7 (weight=38), 6 (weight=4), 9 (weight=25), 3 (weight=45), 5 (weight=83), 13 (weight=73), 8 (weight=18)\nVertex 5: 7 (weight=7), 11 (weight=3), 2 (weight=71), 12 (weight=27), 10 (weight=71), 6 (weight=94), 14 (weight=73), 8 (weight=94), 9 (weight=17), 3 (weight=3), 13 (weight=28), 4 (weight=83), 1 (weight=96)\nVertex 6: 12 (weight=98), 13 (weight=80), 1 (weight=25), 8 (weight=24), 5 (weight=94), 4 (weight=4), 10 (weight=66), 2 (weight=16), 3 (weight=25), 9 (weight=63), 7 (weight=31), 14 (weight=2), 11 (weight=25)\nVertex 7: 11 (weight=13), 9 (weight=89), 5 (weight=7), 14 (weight=97), 13 (weight=85), 8 (weight=9), 4 (weight=38), 12 (weight=12), 10 (weight=4), 3 (weight=60), 2 (weight=71), 6 (weight=31), 1 (weight=7)\nVertex 8: 1 (weight=33), 2 (weight=35), 3 (weight=30), 6 (weight=24), 10 (weight=57), 11 (weight=39), 7 (weight=9), 13 (weight=35), 5 (weight=94), 12 (weight=84), 9 (weight=7), 4 (weight=18)\nVertex 9: 7 (weight=89), 1 (weight=70), 2 (weight=83), 14 (weight=1), 12 (weight=41), 13 (weight=45), 5 (weight=17), 6 (weight=63), 3 (weight=44), 4 (weight=25), 8 (weight=7), 11 (weight=28), 10 (weight=86)\nVertex 10: 14 (weight=74), 11 (weight=28), 5 (weight=71), 8 (weight=57), 4 (weight=26), 13 (weight=12), 6 (weight=66), 7 (weight=4), 2 (weight=60), 1 (weight=91), 9 (weight=86)\nVertex 11: 1 (weight=85), 7 (weight=13), 14 (weight=37), 10 (weight=28), 12 (weight=38), 2 (weight=98), 5 (weight=3), 8 (weight=39), 3 (weight=33), 13 (weight=10), 9 (weight=28), 6 (weight=25)\nVertex 12: 1 (weight=19), 6 (weight=98), 2 (weight=85), 11 (weight=38), 5 (weight=27), 14 (weight=80), 4 (weight=44), 13 (weight=50), 9 (weight=41), 7 (weight=12), 8 (weight=84)\nVertex 13: 6 (weight=80), 3 (weight=19), 7 (weight=85), 12 (weight=50), 2 (weight=12), 10 (weight=12), 9 (weight=45), 8 (weight=35), 1 (weight=70), 11 (weight=10), 5 (weight=28), 14 (weight=92), 4 (weight=73)\nVertex 14: 11 (weight=37), 4 (weight=13), 10 (weight=74), 7 (weight=97), 3 (weight=98), 5 (weight=73), 9 (weight=1), 12 (weight=80), 2 (weight=32), 1 (weight=90), 6 (weight=2), 13 (weight=92)\n",
    "graph_output": "14 86\n1 11 85\n11 7 13\n11 14 37\n14 4 13\n1 12 19\n12 6 98\n1 3 73\n14 10 74\n7 9 89\n6 13 80\n7 5 7\n1 8 33\n8 2 35\n1 9 70\n10 11 28\n2 12 85\n8 3 30\n11 12 38\n2 3 87\n2 11 98\n3 13 19\n11 5 3\n2 5 71\n2 4 81\n6 1 25\n7 14 97\n2 9 83\n3 14 98\n5 12 27\n8 6 24\n5 10 71\n5 6 94\n8 10 57\n14 5 73\n10 4 26\n8 11 39\n7 13 85\n7 8 9\n9 14 1\n12 14 80\n12 4 44\n13 12 50\n1 4 72\n9 12 41\n13 2 12\n13 10 12\n7 4 38\n12 7 12\n9 13 45\n4 6 4\n13 8 35\n1 13 70\n10 6 66\n2 6 16\n10 7 4\n5 8 94\n5 9 17\n6 3 25\n9 6 63\n9 3 44\n3 11 33\n14 2 32\n9 4 25\n11 13 10\n5 3 3\n3 4 45\n3 7 60\n12 8 84\n2 10 60\n8 9 7\n1 14 90\n5 13 28\n11 9 28\n7 2 71\n1 10 91\n6 7 31\n2 1 21\n14 6 2\n10 9 86\n6 11 25\n14 13 92\n4 5 83\n7 1 7\n5 1 96\n4 13 73\n4 8 18\n",
    "vertices": [
      8,
      5
    ],
    "answer": 16,
    "description_type": "list"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 31 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 3 and vertex 19.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 1 and vertex 20.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 2 and vertex 25.\nThere is an edge between vertex 25 and vertex 30.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 20 and vertex 16.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 12 and vertex 22.\nThere is an edge between vertex 16 and vertex 28.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 20 and vertex 13.\nThere is an edge between vertex 8 and vertex 26.\nThere is an edge between vertex 10 and vertex 24.\nThere is an edge between vertex 25 and vertex 14.\nThere is an edge between vertex 19 and vertex 23.\nThere is an edge between vertex 23 and vertex 21.\nThere is an edge between vertex 8 and vertex 18.\nThere is an edge between vertex 16 and vertex 27.\nThere is an edge between vertex 14 and vertex 31.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 23 and vertex 29.\nThere is an edge between vertex 16 and vertex 9.\n",
    "graph_output": "31 30\n1 4\n1 2\n2 3\n3 19\n4 6\n6 15\n1 20\n1 17\n6 12\n17 5\n2 25\n25 30\n15 10\n20 16\n15 7\n12 22\n16 28\n10 8\n20 13\n8 26\n10 24\n25 14\n19 23\n23 21\n8 18\n16 27\n14 31\n15 11\n23 29\n16 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 3 (source) to vertex 5 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 14 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 3 (weight=2, capacity=3), 2 (weight=98, capacity=7), 4 (weight=38, capacity=4), 5 (weight=21, capacity=1), 6 (weight=96, capacity=10)\nVertex 2: 1 (weight=98, capacity=7), 8 (weight=24, capacity=7), 5 (weight=22, capacity=9), 6 (weight=49, capacity=6)\nVertex 3: 1 (weight=2, capacity=3), 7 (weight=89, capacity=6), 6 (weight=17, capacity=2)\nVertex 4: 1 (weight=38, capacity=4), 9 (weight=97, capacity=8)\nVertex 5: 1 (weight=21, capacity=1), 2 (weight=22, capacity=9)\nVertex 6: 1 (weight=96, capacity=10), 3 (weight=17, capacity=2), 2 (weight=49, capacity=6)\nVertex 7: 3 (weight=89, capacity=6), 10 (weight=56, capacity=10)\nVertex 8: 2 (weight=24, capacity=7), 10 (weight=89, capacity=8)\nVertex 9: 4 (weight=97, capacity=8), 10 (weight=43, capacity=1)\nVertex 10: 8 (weight=89, capacity=8), 7 (weight=56, capacity=10), 9 (weight=43, capacity=1)\n",
    "graph_output": "10 14\n1 3 2 3\n3 7 89 6\n1 2 98 7\n1 4 38 4\n4 9 97 8\n2 8 24 7\n8 10 89 8\n1 5 21 1\n1 6 96 10\n10 7 56 10\n9 10 43 1\n2 5 22 9\n6 3 17 2\n6 2 49 6\n",
    "vertices": [
      3,
      5
    ],
    "answer": 1843,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 31 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 2 and vertex 11.\n",
    "graph_output": "16 31\n1 11\n1 3\n11 7\n1 16\n1 12\n7 9\n11 4\n3 8\n1 13\n11 15\n4 2\n2 6\n15 14\n16 10\n2 5\n9 14\n6 13\n4 5\n8 9\n16 12\n16 4\n5 1\n5 10\n2 1\n10 15\n10 8\n9 1\n14 12\n11 12\n5 16\n2 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 59 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 5 and vertex 11.\n",
    "graph_output": "12 59\n3 12\n8 9\n7 6\n12 6\n3 4\n8 11\n6 2\n6 3\n1 8\n7 9\n12 9\n2 3\n1 7\n5 3\n10 4\n7 3\n11 6\n1 6\n9 11\n8 7\n5 2\n12 10\n9 5\n9 4\n4 6\n5 1\n1 4\n8 2\n3 10\n2 11\n11 10\n10 7\n7 5\n7 11\n3 9\n4 11\n8 12\n6 5\n2 10\n9 2\n10 9\n10 1\n9 6\n5 12\n7 4\n2 1\n4 8\n1 11\n8 5\n7 2\n2 4\n11 3\n3 8\n12 1\n3 1\n4 5\n8 6\n5 10\n5 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 4 (source) to vertex 5 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 22 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 9 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 9 and vertex 2 with a capacity of 5.\nThere is an edge between vertex 5 and vertex 11 with a capacity of 7.\nThere is an edge between vertex 1 and vertex 12 with a capacity of 10.\nThere is an edge between vertex 11 and vertex 6 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 12 and vertex 4 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 8 and vertex 7 with a capacity of 10.\nThere is an edge between vertex 11 and vertex 3 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 10 with a capacity of 7.\nThere is an edge between vertex 1 and vertex 3 with a capacity of 7.\nThere is an edge between vertex 2 and vertex 3 with a capacity of 4.\nThere is an edge between vertex 7 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 10 and vertex 11 with a capacity of 4.\nThere is an edge between vertex 9 and vertex 8 with a capacity of 10.\nThere is an edge between vertex 7 and vertex 3 with a capacity of 2.\nThere is an edge between vertex 11 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 12 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 12 and vertex 10 with a capacity of 1.\nThere is an edge between vertex 12 and vertex 9 with a capacity of 7.\n",
    "graph_output": "12 22\n1 9 6\n9 5 9\n9 2 5\n5 11 7\n1 12 10\n11 6 1\n6 8 4\n12 4 5\n1 10 9\n8 7 10\n11 3 9\n7 10 7\n1 3 7\n2 3 4\n7 5 9\n10 11 4\n9 8 10\n7 3 2\n11 8 5\n12 8 4\n12 10 1\n12 9 7\n",
    "vertices": [
      4,
      5
    ],
    "answer": 5,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 5 (source) to vertex 8 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 12 vertices and 21 edges\n\nEdges (Format: Node Node Capacity):\n1 8 9\n8 11 9\n11 2 1\n11 5 10\n1 10 4\n11 6 8\n1 9 9\n10 12 8\n10 7 6\n12 4 9\n4 3 3\n7 2 8\n12 8 4\n3 8 8\n3 10 10\n9 10 10\n7 11 2\n8 6 8\n9 7 10\n1 5 10\n4 5 3\n",
    "graph_output": "12 21\n1 8 9\n8 11 9\n11 2 1\n11 5 10\n1 10 4\n11 6 8\n1 9 9\n10 12 8\n10 7 6\n12 4 9\n4 3 3\n7 2 8\n12 8 4\n3 8 8\n3 10 10\n9 10 10\n7 11 2\n8 6 8\n9 7 10\n1 5 10\n4 5 3\n",
    "vertices": [
      5,
      8
    ],
    "answer": 23,
    "description_type": "structured"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 40 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 11 and vertex 9.\n",
    "graph_output": "11 40\n10 6\n7 2\n7 5\n4 7\n5 2\n4 8\n11 5\n10 7\n4 9\n3 7\n10 11\n3 9\n2 6\n7 9\n10 2\n1 9\n10 9\n7 11\n3 8\n11 3\n10 8\n11 1\n8 9\n2 9\n5 3\n11 8\n9 5\n3 10\n3 1\n11 4\n4 6\n2 4\n8 6\n4 5\n2 3\n6 3\n1 10\n9 6\n2 1\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 9 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 16 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   1   1   1   0   1   0   0   1   0   0   0 \n 2 |  0   0   1   0   0   0   0   0   1   0   0   1   0 \n 3 |  1   1   0   0   0   1   0   0   0   0   1   0   0 \n 4 |  1   0   0   0   0   0   0   0   0   0   0   0   1 \n 5 |  1   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   1   0   0   0   0   1   0   0   0   1   0 \n 7 |  1   0   0   0   0   0   0   0   0   0   0   1   0 \n 8 |  0   0   0   0   0   1   0   0   0   0   0   0   0 \n 9 |  0   1   0   0   0   0   0   0   0   1   0   0   0 \n10 |  1   0   0   0   0   0   0   0   1   0   1   0   0 \n11 |  0   0   1   0   0   0   0   0   0   1   0   0   0 \n12 |  0   1   0   0   0   1   1   0   0   0   0   0   0 \n13 |  0   0   0   1   0   0   0   0   0   0   0   0   0 \n\nCapacity Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   3   2   7   0   2   0   0  10   0   0   0 \n 2 |  0   0   4   0   0   0   0   0   4   0   0   6   0 \n 3 |  3   4   0   0   0   9   0   0   0   0   5   0   0 \n 4 |  2   0   0   0   0   0   0   0   0   0   0   0   8 \n 5 |  7   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   9   0   0   0   0   4   0   0   0  10   0 \n 7 |  2   0   0   0   0   0   0   0   0   0   0  10   0 \n 8 |  0   0   0   0   0   4   0   0   0   0   0   0   0 \n 9 |  0   4   0   0   0   0   0   0   0   4   0   0   0 \n10 | 10   0   0   0   0   0   0   0   4   0   6   0   0 \n11 |  0   0   5   0   0   0   0   0   0   6   0   0   0 \n12 |  0   6   0   0   0  10  10   0   0   0   0   0   0 \n13 |  0   0   0   8   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "13 16\n1 5 7\n1 10 10\n10 11 6\n1 7 2\n7 12 10\n12 6 10\n12 2 6\n6 3 9\n1 4 2\n2 9 4\n4 13 8\n6 8 4\n3 1 3\n2 3 4\n10 9 4\n11 3 5\n",
    "vertices": [
      9,
      10
    ],
    "answer": 8,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 10 (source) to vertex 3 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 34 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 4 (weight=93, capacity=8), 3 (weight=13, capacity=5), 5 (weight=46, capacity=4), 2 (weight=27, capacity=6), 8 (weight=82, capacity=4), 6 (weight=46, capacity=5)\nVertex 2: 1 (weight=27, capacity=6), 11 (weight=15, capacity=4), 9 (weight=70, capacity=1), 8 (weight=86, capacity=9), 4 (weight=90, capacity=6), 7 (weight=83, capacity=4), 5 (weight=6, capacity=2)\nVertex 3: 1 (weight=13, capacity=5), 10 (weight=2, capacity=4), 9 (weight=98, capacity=10), 6 (weight=100, capacity=8), 8 (weight=98, capacity=1), 5 (weight=73, capacity=8), 7 (weight=31, capacity=2)\nVertex 4: 1 (weight=93, capacity=8), 2 (weight=90, capacity=6), 10 (weight=14, capacity=9), 6 (weight=51, capacity=2), 5 (weight=12, capacity=2), 11 (weight=9, capacity=5)\nVertex 5: 1 (weight=46, capacity=4), 3 (weight=73, capacity=8), 2 (weight=6, capacity=2), 4 (weight=12, capacity=2), 7 (weight=66, capacity=3)\nVertex 6: 3 (weight=100, capacity=8), 11 (weight=72, capacity=7), 8 (weight=76, capacity=8), 1 (weight=46, capacity=5), 9 (weight=29, capacity=2), 7 (weight=92, capacity=3), 4 (weight=51, capacity=2), 10 (weight=30, capacity=1)\nVertex 7: 10 (weight=32, capacity=3), 6 (weight=92, capacity=3), 2 (weight=83, capacity=4), 3 (weight=31, capacity=2), 5 (weight=66, capacity=3)\nVertex 8: 9 (weight=11, capacity=2), 10 (weight=22, capacity=9), 6 (weight=76, capacity=8), 1 (weight=82, capacity=4), 3 (weight=98, capacity=1), 2 (weight=86, capacity=9)\nVertex 9: 3 (weight=98, capacity=10), 8 (weight=11, capacity=2), 11 (weight=68, capacity=10), 2 (weight=70, capacity=1), 6 (weight=29, capacity=2), 10 (weight=98, capacity=5)\nVertex 10: 3 (weight=2, capacity=4), 7 (weight=32, capacity=3), 11 (weight=72, capacity=1), 8 (weight=22, capacity=9), 9 (weight=98, capacity=5), 4 (weight=14, capacity=9), 6 (weight=30, capacity=1)\nVertex 11: 6 (weight=72, capacity=7), 10 (weight=72, capacity=1), 9 (weight=68, capacity=10), 2 (weight=15, capacity=4), 4 (weight=9, capacity=5)\n",
    "graph_output": "11 34\n1 4 93 8\n1 3 13 5\n3 10 2 4\n1 5 46 4\n1 2 27 6\n3 9 98 10\n3 6 100 8\n6 11 72 7\n9 8 11 2\n10 7 32 3\n11 10 72 1\n9 11 68 10\n10 8 22 9\n8 6 76 8\n2 11 15 4\n8 1 82 4\n1 6 46 5\n9 2 70 1\n8 3 98 1\n3 5 73 8\n2 8 86 9\n4 2 90 6\n9 6 29 2\n10 9 98 5\n10 4 14 9\n6 7 92 3\n7 2 83 4\n5 2 6 2\n6 4 51 2\n7 3 31 2\n10 6 30 1\n5 4 12 2\n7 5 66 3\n4 11 9 5\n",
    "vertices": [
      10,
      3
    ],
    "answer": 4087,
    "description_type": "list"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 18 and 23 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 23.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 23 and vertex 8.\nThere is an edge between vertex 1 and vertex 18.\nThere is an edge between vertex 18 and vertex 21.\nThere is an edge between vertex 18 and vertex 13.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 21 and vertex 12.\nThere is an edge between vertex 23 and vertex 11.\nThere is an edge between vertex 8 and vertex 25.\nThere is an edge between vertex 11 and vertex 29.\nThere is an edge between vertex 23 and vertex 22.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 9 and vertex 19.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 2 and vertex 26.\nThere is an edge between vertex 18 and vertex 10.\nThere is an edge between vertex 29 and vertex 20.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 2 and vertex 27.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 18 and vertex 28.\nThere is an edge between vertex 13 and vertex 17.\nThere is an edge between vertex 20 and vertex 24.\nThere is an edge between vertex 27 and vertex 6.\nThere is an edge between vertex 24 and vertex 16.\n",
    "graph_output": "29 28\n1 23\n1 2\n1 5\n23 8\n1 18\n18 21\n18 13\n2 15\n21 12\n23 11\n8 25\n11 29\n23 22\n2 9\n9 19\n5 4\n8 3\n2 26\n18 10\n29 20\n12 14\n2 27\n14 7\n18 28\n13 17\n20 24\n27 6\n24 16\n",
    "vertices": [
      18,
      23
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 105 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 5 and vertex 15.\n",
    "graph_output": "15 105\n9 2\n11 15\n7 5\n11 2\n2 3\n7 4\n7 3\n10 11\n1 4\n13 5\n9 5\n15 1\n15 7\n13 3\n3 15\n13 2\n10 14\n9 6\n12 2\n12 14\n15 4\n8 10\n2 10\n6 14\n3 10\n4 8\n15 14\n9 1\n10 7\n1 5\n10 4\n6 12\n15 9\n7 8\n5 11\n14 8\n11 3\n9 8\n6 7\n9 13\n12 8\n6 4\n9 4\n3 5\n13 4\n1 13\n6 1\n4 5\n11 7\n7 9\n1 2\n9 12\n2 4\n14 11\n6 8\n4 14\n9 10\n10 1\n13 6\n9 14\n13 11\n3 4\n3 6\n12 3\n6 10\n14 2\n13 15\n14 3\n7 13\n10 13\n6 11\n12 7\n14 1\n12 1\n8 15\n9 11\n5 10\n7 14\n11 4\n3 8\n13 14\n10 15\n8 1\n8 5\n15 6\n7 1\n12 13\n11 1\n11 12\n1 3\n2 5\n10 12\n5 14\n8 11\n2 15\n2 7\n5 6\n12 15\n9 3\n5 12\n6 2\n8 13\n8 2\n12 4\n5 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (30\u00d730):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n   ------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   1   0   0   1   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 2 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 5 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 7 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  1   0   1   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n13 |  0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   1   0   0   0 \n16 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0 \n17 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n30 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "30 29\n1 12\n1 28\n1 10\n1 7\n28 22\n22 21\n10 13\n22 15\n12 8\n12 29\n22 6\n13 19\n28 16\n16 4\n4 14\n16 26\n13 9\n4 30\n15 27\n10 11\n8 2\n15 18\n19 20\n18 23\n6 5\n10 3\n2 25\n14 24\n1 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 27 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (8\u00d78):\n\n      1   2   3   4   5   6   7   8\n   --------------------------------\n 1 |  0   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   0   1 \n 3 |  1   1   0   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1 \n 6 |  1   1   1   1   1   0   1   1 \n 7 |  1   0   1   1   1   1   0   1 \n 8 |  1   1   1   1   1   1   1   0 \n",
    "graph_output": "8 27\n4 2\n3 7\n4 8\n5 2\n1 7\n5 4\n8 3\n6 5\n3 6\n1 8\n5 7\n8 5\n6 4\n1 4\n3 1\n8 6\n7 4\n7 8\n1 6\n6 2\n8 2\n1 5\n7 6\n2 3\n4 3\n2 1\n3 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6062,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 17 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 4 |  0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 6 |  0   0   0   1   0   0   1   1   1   0   0   0   0   1   0   0 \n 7 |  0   1   0   0   0   1   0   1   0   0   0   0   0   0   0   1 \n 8 |  0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n11 |  1   0   0   1   0   0   0   0   0   0   0   0   1   0   0   1 \n12 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1 \n13 |  0   0   0   0   0   0   0   0   0   1   1   0   0   0   1   0 \n14 |  0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n16 |  0   0   0   0   0   0   1   0   0   0   1   1   0   0   0   0 \n",
    "graph_output": "16 17\n1 11\n11 16\n11 4\n11 13\n16 12\n12 5\n13 15\n16 7\n7 8\n4 6\n6 14\n7 2\n13 10\n14 3\n6 9\n7 6\n6 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 16, 24, 13\nVertex 2: 13, 4, 5\nVertex 3: 25\nVertex 4: 2, 7\nVertex 5: 2\nVertex 6: 24\nVertex 7: 4\nVertex 8: 21, 17\nVertex 9: 21\nVertex 10: 1, 25, 20\nVertex 11: 24, 14\nVertex 12: 25\nVertex 13: 1, 21, 2, 15, 27\nVertex 14: 11, 19\nVertex 15: 13, 28\nVertex 16: 1, 26, 22\nVertex 17: 8\nVertex 18: 25, 23\nVertex 19: 14\nVertex 20: 10, 29\nVertex 21: 13, 9, 8\nVertex 22: 16\nVertex 23: 18\nVertex 24: 1, 11, 6\nVertex 25: 10, 18, 3, 12\nVertex 26: 16\nVertex 27: 13\nVertex 28: 15\nVertex 29: 20, 30\nVertex 30: 29\n",
    "graph_output": "30 29\n1 10\n1 16\n1 24\n1 13\n10 25\n25 18\n13 21\n21 9\n13 2\n10 20\n24 11\n16 26\n13 15\n2 4\n11 14\n20 29\n21 8\n2 5\n25 3\n18 23\n13 27\n24 6\n16 22\n4 7\n15 28\n29 30\n14 19\n8 17\n25 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 6 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 4 and vertex 3.\n",
    "graph_output": "6 6\n1 6\n6 3\n6 4\n4 2\n2 5\n4 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 11 and 7 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (29\u00d729):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n   --------------------------------------------------------------------------------------------------------------------\n 1 |  0   1   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 2 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   1 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   1   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 7 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n21 |  0   0   0   1   1   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "29 28\n1 8\n8 21\n1 2\n21 4\n2 15\n8 6\n21 10\n2 29\n2 17\n4 22\n15 24\n4 20\n4 27\n15 3\n3 25\n21 5\n10 9\n25 18\n18 16\n6 14\n14 12\n15 28\n6 23\n12 19\n1 7\n20 11\n22 13\n11 26\n",
    "vertices": [
      11,
      7
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 112 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0  61  92  80  10  75  67  90  13   6  52  22  54  36  26  56 \n 2 | 61   0  29  92  24  62  40  46  79  53  48  40  67  22  39  76 \n 3 | 92  29   0  22  53  14  10  38  20  88  57  64  80   0  90  10 \n 4 | 80  92  22   0  71  99   0  54  14  15  10  29  65  35   0  31 \n 5 | 10  24  53  71   0  37  22  41  90  94  58  17  41   8  19  50 \n 6 | 75  62  14  99  37   0  66  34  47   1  66  21  51  40   9  23 \n 7 | 67  40  10   0  22  66   0  14  23  11  67  82  42  58  16   2 \n 8 | 90  46  38  54  41  34  14   0   6  16  36  15  34   0  93  15 \n 9 | 13  79  20  14  90  47  23   6   0  52  66  23   9  71  80  56 \n10 |  6  53  88  15  94   1  11  16  52   0  77   2  58   0   6   0 \n11 | 52  48  57  10  58  66  67  36  66  77   0   8  27   0  80  64 \n12 | 22  40  64  29  17  21  82  15  23   2   8   0  19  74  90  26 \n13 | 54  67  80  65  41  51  42  34   9  58  27  19   0  31  91  40 \n14 | 36  22   0  35   8  40  58   0  71   0   0  74  31   0   0  23 \n15 | 26  39  90   0  19   9  16  93  80   6  80  90  91   0   0  76 \n16 | 56  76  10  31  50  23   2  15  56   0  64  26  40  23  76   0 \n",
    "graph_output": "16 112\n1 13 54\n13 15 91\n15 10 6\n1 16 56\n10 4 15\n10 7 11\n10 2 53\n4 9 14\n1 12 22\n7 5 22\n10 6 1\n16 8 15\n4 3 22\n10 11 77\n4 14 35\n1 11 52\n5 8 41\n3 6 14\n9 16 56\n2 1 61\n7 2 40\n11 6 66\n6 14 40\n11 15 80\n1 5 10\n7 3 10\n5 3 53\n3 15 90\n11 12 8\n9 2 79\n10 13 58\n16 11 64\n3 2 29\n15 16 76\n3 11 57\n16 13 40\n13 9 9\n5 11 58\n1 8 90\n2 16 76\n11 9 66\n2 12 40\n7 6 66\n13 12 19\n6 4 99\n6 2 62\n10 1 6\n2 13 67\n4 2 92\n11 13 27\n16 14 23\n8 12 15\n4 1 80\n6 8 34\n3 10 88\n4 11 10\n6 15 9\n15 12 90\n16 7 2\n15 1 26\n12 6 21\n7 15 16\n3 12 64\n2 8 46\n2 5 24\n11 8 36\n16 3 10\n3 8 38\n14 2 22\n13 4 65\n3 13 80\n13 14 31\n9 15 80\n5 14 8\n7 11 67\n8 15 93\n6 13 51\n13 5 41\n16 6 23\n7 1 67\n4 8 54\n9 14 71\n5 4 71\n3 9 20\n7 14 58\n12 4 29\n9 8 6\n7 8 14\n12 5 17\n9 12 23\n8 13 34\n1 14 36\n9 5 90\n10 8 16\n16 4 31\n7 9 23\n15 5 19\n10 5 94\n6 9 47\n12 14 74\n15 2 39\n5 16 50\n10 9 52\n7 13 42\n9 1 13\n12 16 26\n10 12 2\n6 1 75\n7 12 82\n5 6 37\n1 3 92\n2 11 48\n",
    "vertices": [
      null,
      null
    ],
    "answer": 124,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nUndirected Graph with 29 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 14\n14 19\n1 10\n1 21\n1 12\n14 2\n2 6\n21 26\n21 27\n10 24\n14 9\n2 28\n26 15\n19 20\n9 5\n26 29\n2 3\n21 4\n15 11\n27 25\n19 13\n5 7\n4 18\n10 8\n25 23\n21 22\n24 17\n29 16\n",
    "graph_output": "29 28\n1 14\n14 19\n1 10\n1 21\n1 12\n14 2\n2 6\n21 26\n21 27\n10 24\n14 9\n2 28\n26 15\n19 20\n9 5\n26 29\n2 3\n21 4\n15 11\n27 25\n19 13\n5 7\n4 18\n10 8\n25 23\n21 22\n24 17\n29 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 12 vertices and 59 edges\n\nEdges (Format: Node Node):\n3 12\n8 9\n7 6\n12 6\n3 4\n8 11\n6 2\n6 3\n1 8\n7 9\n12 9\n2 3\n1 7\n5 3\n10 4\n7 3\n11 6\n1 6\n9 11\n8 7\n5 2\n12 10\n9 5\n9 4\n4 6\n5 1\n1 4\n8 2\n3 10\n2 11\n11 10\n10 7\n7 5\n7 11\n3 9\n4 11\n8 12\n6 5\n2 10\n9 2\n10 9\n10 1\n9 6\n5 12\n7 4\n2 1\n4 8\n1 11\n8 5\n7 2\n2 4\n11 3\n3 8\n12 1\n3 1\n4 5\n8 6\n5 10\n5 11\n",
    "graph_output": "12 59\n3 12\n8 9\n7 6\n12 6\n3 4\n8 11\n6 2\n6 3\n1 8\n7 9\n12 9\n2 3\n1 7\n5 3\n10 4\n7 3\n11 6\n1 6\n9 11\n8 7\n5 2\n12 10\n9 5\n9 4\n4 6\n5 1\n1 4\n8 2\n3 10\n2 11\n11 10\n10 7\n7 5\n7 11\n3 9\n4 11\n8 12\n6 5\n2 10\n9 2\n10 9\n10 1\n9 6\n5 12\n7 4\n2 1\n4 8\n1 11\n8 5\n7 2\n2 4\n11 3\n3 8\n12 1\n3 1\n4 5\n8 6\n5 10\n5 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 11 (source) to vertex 7 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 16 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   0   0   1   1   0   0   0   0   0 \n 2 |  1   0   1   1   0   0   1   0   0   1   1 \n 3 |  0   1   0   1   0   0   1   1   0   0   0 \n 4 |  0   1   1   0   0   0   0   0   0   0   0 \n 5 |  1   0   0   0   0   1   0   0   0   0   0 \n 6 |  1   0   0   0   1   0   1   0   1   0   0 \n 7 |  0   1   1   0   0   1   0   1   0   1   0 \n 8 |  0   0   1   0   0   0   1   0   0   0   0 \n 9 |  0   0   0   0   0   1   0   0   0   0   0 \n10 |  0   1   0   0   0   0   1   0   0   0   0 \n11 |  0   1   0   0   0   0   0   0   0   0   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   8   0   0   2   9   0   0   0   0   0 \n 2 |  8   0   9   9   0   0   2   0   0   1   2 \n 3 |  0   9   0  10   0   0   8   4   0   0   0 \n 4 |  0   9  10   0   0   0   0   0   0   0   0 \n 5 |  2   0   0   0   0   6   0   0   0   0   0 \n 6 |  9   0   0   0   6   0   7   0   2   0   0 \n 7 |  0   2   8   0   0   7   0   9   0   9   0 \n 8 |  0   0   4   0   0   0   9   0   0   0   0 \n 9 |  0   0   0   0   0   2   0   0   0   0   0 \n10 |  0   1   0   0   0   0   9   0   0   0   0 \n11 |  0   2   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "11 16\n1 2 8\n2 11 2\n1 6 9\n1 5 2\n6 7 7\n2 4 9\n6 9 2\n4 3 10\n7 10 9\n3 8 4\n7 3 8\n2 7 2\n2 10 1\n5 6 6\n7 8 9\n3 2 9\n",
    "vertices": [
      11,
      7
    ],
    "answer": 2,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 17 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0  75   0   0  16   0   0   0   0  95   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0  58   0 \n 3 |  0   0   0   0   0   0   0   0   0  44  10  20   0 \n 4 | 75   0   0   0   0   0   0   0  51   0   0  61   0 \n 5 |  0   0   0   0   0   0   0   0   0  68  69   0  27 \n 6 |  0   0   0   0   0   0   0   0   0   0   0  64   0 \n 7 | 16   0   0   0   0   0   0   0  53   0  63   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0  42   0 \n 9 |  0   0   0  51   0   0  53   0   0   0   0   0   0 \n10 |  0   0  44   0  68   0   0   0   0   0   0   0   0 \n11 |  0   0  10   0  69   0  63   0   0   0   0   0  88 \n12 | 95  58  20  61   0  64   0  42   0   0   0   0   0 \n13 |  0   0   0   0  27   0   0   0   0   0  88   0   0 \n",
    "graph_output": "13 17\n1 7 16\n1 12 95\n7 11 63\n12 3 20\n3 10 44\n12 4 61\n12 8 42\n12 2 58\n4 9 51\n11 5 69\n11 13 88\n12 6 64\n1 4 75\n13 5 27\n10 5 68\n3 11 10\n7 9 53\n",
    "vertices": [
      null,
      null
    ],
    "answer": 515,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 17 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 6 and vertex 8.\n",
    "graph_output": "16 17\n1 11\n11 16\n11 4\n11 13\n16 12\n12 5\n13 15\n16 7\n7 8\n4 6\n6 14\n7 2\n13 10\n14 3\n6 9\n7 6\n6 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 32 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 16 (weight=97), 13 (weight=4), 7 (weight=29)\nVertex 2: 13 (weight=18), 6 (weight=31), 3 (weight=20), 15 (weight=48), 4 (weight=88), 16 (weight=78), 8 (weight=99), 7 (weight=57)\nVertex 3: 2 (weight=20), 10 (weight=61), 9 (weight=43), 7 (weight=94)\nVertex 4: 6 (weight=38), 9 (weight=28), 2 (weight=88), 14 (weight=75)\nVertex 5: 11 (weight=30), 8 (weight=44), 7 (weight=85), 6 (weight=65), 16 (weight=82)\nVertex 6: 2 (weight=31), 4 (weight=38), 5 (weight=65), 9 (weight=34)\nVertex 7: 5 (weight=85), 1 (weight=29), 2 (weight=57), 14 (weight=33), 3 (weight=94)\nVertex 8: 5 (weight=44), 2 (weight=99), 15 (weight=38)\nVertex 9: 4 (weight=28), 6 (weight=34), 3 (weight=43)\nVertex 10: 3 (weight=61), 16 (weight=23), 13 (weight=51), 11 (weight=75)\nVertex 11: 16 (weight=62), 5 (weight=30), 10 (weight=75)\nVertex 12: 13 (weight=4), 14 (weight=25)\nVertex 13: 1 (weight=4), 2 (weight=18), 12 (weight=4), 10 (weight=51)\nVertex 14: 16 (weight=18), 12 (weight=25), 4 (weight=75), 7 (weight=33)\nVertex 15: 2 (weight=48), 8 (weight=38)\nVertex 16: 1 (weight=97), 11 (weight=62), 14 (weight=18), 2 (weight=78), 10 (weight=23), 5 (weight=82)\n",
    "graph_output": "16 32\n1 16 97\n1 13 4\n13 2 18\n2 6 31\n2 3 20\n16 11 62\n6 4 38\n2 15 48\n11 5 30\n16 14 18\n3 10 61\n5 8 44\n5 7 85\n4 9 28\n13 12 4\n1 7 29\n2 4 88\n5 6 65\n2 16 78\n16 10 23\n14 12 25\n8 2 99\n9 6 34\n7 2 57\n8 15 38\n13 10 51\n9 3 43\n14 4 75\n5 16 82\n10 11 75\n14 7 33\n7 3 94\n",
    "vertices": [
      null,
      null
    ],
    "answer": 394,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 55 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 11 (capacity=6), 10 (capacity=10), 9 (capacity=3), 8 (capacity=9), 12 (capacity=7), 4 (capacity=7), 5 (capacity=5), 2 (capacity=10), 13 (capacity=7)\nVertex 2: 11 (capacity=4), 8 (capacity=5), 9 (capacity=8), 10 (capacity=9), 13 (capacity=4), 12 (capacity=3), 1 (capacity=10), 5 (capacity=4)\nVertex 3: 13 (capacity=5), 6 (capacity=1), 4 (capacity=9), 5 (capacity=6), 12 (capacity=4), 7 (capacity=3), 10 (capacity=5)\nVertex 4: 11 (capacity=3), 5 (capacity=5), 7 (capacity=5), 12 (capacity=4), 1 (capacity=7), 13 (capacity=2), 6 (capacity=3), 3 (capacity=9), 9 (capacity=1), 10 (capacity=2), 8 (capacity=8)\nVertex 5: 4 (capacity=5), 12 (capacity=9), 1 (capacity=5), 3 (capacity=6), 8 (capacity=3), 10 (capacity=4), 13 (capacity=9), 2 (capacity=4), 11 (capacity=10)\nVertex 6: 9 (capacity=10), 13 (capacity=2), 3 (capacity=1), 4 (capacity=3), 11 (capacity=3)\nVertex 7: 4 (capacity=5), 9 (capacity=1), 8 (capacity=1), 3 (capacity=3), 12 (capacity=3), 10 (capacity=1)\nVertex 8: 1 (capacity=9), 2 (capacity=5), 11 (capacity=4), 7 (capacity=1), 10 (capacity=5), 13 (capacity=9), 5 (capacity=3), 4 (capacity=8), 9 (capacity=9), 12 (capacity=7)\nVertex 9: 1 (capacity=3), 6 (capacity=10), 7 (capacity=1), 10 (capacity=1), 2 (capacity=8), 4 (capacity=1), 8 (capacity=9), 12 (capacity=2), 13 (capacity=7)\nVertex 10: 1 (capacity=10), 9 (capacity=1), 8 (capacity=5), 2 (capacity=9), 4 (capacity=2), 5 (capacity=4), 13 (capacity=1), 3 (capacity=5), 11 (capacity=10), 7 (capacity=1)\nVertex 11: 1 (capacity=6), 4 (capacity=3), 12 (capacity=4), 2 (capacity=4), 8 (capacity=4), 6 (capacity=3), 10 (capacity=10), 5 (capacity=10)\nVertex 12: 11 (capacity=4), 4 (capacity=4), 1 (capacity=7), 5 (capacity=9), 3 (capacity=4), 2 (capacity=3), 8 (capacity=7), 9 (capacity=2), 7 (capacity=3)\nVertex 13: 6 (capacity=2), 3 (capacity=5), 4 (capacity=2), 8 (capacity=9), 2 (capacity=4), 10 (capacity=1), 1 (capacity=7), 5 (capacity=9), 9 (capacity=7)\n",
    "graph_output": "13 55\n1 11 6\n1 10 10\n11 4 3\n1 9 3\n11 12 4\n4 5 5\n9 6 10\n11 2 4\n6 13 2\n4 7 5\n13 3 5\n1 8 9\n4 12 4\n9 7 1\n1 12 7\n1 4 7\n12 5 9\n4 13 2\n8 2 5\n6 3 1\n11 8 4\n7 8 1\n9 10 1\n4 6 3\n8 10 5\n9 2 8\n13 8 9\n3 4 9\n9 4 1\n2 10 9\n4 10 2\n1 5 5\n3 5 6\n12 3 4\n8 5 3\n2 13 4\n4 8 8\n8 9 9\n5 10 4\n13 10 1\n3 7 3\n2 12 3\n12 8 7\n3 10 5\n1 2 10\n6 11 3\n11 10 10\n9 12 2\n1 13 7\n5 13 9\n5 2 4\n12 7 3\n13 9 7\n7 10 1\n11 5 10\n",
    "vertices": [
      3,
      10
    ],
    "answer": 33,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 8 vertices and 16 edges\n\nEdges (Format: Node Node):\n1 4\n1 6\n1 5\n5 3\n3 2\n2 7\n7 8\n2 5\n4 6\n5 7\n2 1\n2 8\n4 2\n6 8\n7 3\n1 7\n",
    "graph_output": "8 16\n1 4\n1 6\n1 5\n5 3\n3 2\n2 7\n7 8\n2 5\n4 6\n5 7\n2 1\n2 8\n4 2\n6 8\n7 3\n1 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2631,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 8 vertices and 9 edges\n\nEdges (Format: Node Node):\n8 5\n4 1\n2 4\n5 4\n3 4\n2 1\n2 5\n1 5\n2 6\n",
    "graph_output": "8 9\n8 5\n4 1\n2 4\n5 4\n3 4\n2 1\n2 5\n1 5\n2 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 23 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 2 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 3 |  0   1   0   0   0   1   0   0   0   1   0   0   0   0   1   0   0 \n 4 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   1 \n 5 |  0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0 \n 6 |  0   0   1   0   1   0   0   0   0   0   0   0   0   1   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0 \n 8 |  0   0   0   1   0   0   0   0   0   1   0   0   0   0   1   1   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   1 \n12 |  0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0 \n13 |  1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0 \n14 |  0   0   0   0   0   1   1   0   0   0   1   0   0   0   0   1   1 \n15 |  0   1   1   1   0   0   0   1   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   1   0   0   0   0   1   1   0   0   0 \n17 |  0   0   0   1   0   0   0   0   0   0   1   0   0   1   0   0   0 \n",
    "graph_output": "17 23\n15 4\n16 14\n3 15\n10 8\n14 6\n11 17\n4 8\n7 12\n8 15\n1 13\n17 14\n8 16\n14 7\n2 15\n11 13\n5 6\n10 3\n13 16\n3 2\n5 12\n17 4\n3 6\n14 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 11 vertices and 21 edges\n\nEdges (Format: Node Node):\n5 6\n4 2\n11 5\n9 10\n11 7\n1 10\n9 4\n10 4\n8 1\n4 6\n2 11\n9 3\n4 7\n11 6\n6 2\n5 1\n8 11\n5 2\n6 1\n6 7\n8 3\n",
    "graph_output": "11 21\n5 6\n4 2\n11 5\n9 10\n11 7\n1 10\n9 4\n10 4\n8 1\n4 6\n2 11\n9 3\n4 7\n11 6\n6 2\n5 1\n8 11\n5 2\n6 1\n6 7\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 12 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (6\u00d76):\n\n      1   2   3   4   5   6\n   ------------------------\n 1 |  0   1   1   1   0   1 \n 2 |  1   0   1   1   0   1 \n 3 |  1   1   0   1   1   1 \n 4 |  1   1   1   0   0   1 \n 5 |  0   0   1   0   0   1 \n 6 |  1   1   1   1   1   0 \n",
    "graph_output": "6 12\n4 2\n4 1\n5 3\n6 5\n4 6\n2 1\n3 1\n3 4\n2 3\n6 1\n2 6\n6 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 53,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 6 (source) to vertex 5 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 55 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   2  10   2   8  10   6   2   4   2   3 \n 2 |  2   0   8  10   7   1   6   9   1   6   5 \n 3 | 10   8   0   4   9   8  10   2   8   8   3 \n 4 |  2  10   4   0   9   1   3   6   5   2   3 \n 5 |  8   7   9   9   0   2   4   6   8  10   4 \n 6 | 10   1   8   1   2   0   1   7   7   1   2 \n 7 |  6   6  10   3   4   1   0   3  10   9   1 \n 8 |  2   9   2   6   6   7   3   0   4   2  10 \n 9 |  4   1   8   5   8   7  10   4   0   4   9 \n10 |  2   6   8   2  10   1   9   2   4   0  10 \n11 |  3   5   3   3   4   2   1  10   9  10   0 \n",
    "graph_output": "11 55\n1 3 10\n3 9 8\n9 2 1\n2 7 6\n2 10 6\n7 11 1\n2 5 7\n3 4 4\n3 6 8\n11 8 10\n11 4 3\n10 4 2\n9 10 4\n9 1 4\n6 11 2\n1 4 2\n8 4 6\n7 9 10\n10 7 9\n9 11 9\n9 8 4\n7 4 3\n6 2 1\n9 4 5\n7 5 4\n11 10 10\n1 11 3\n2 1 2\n10 1 2\n3 5 9\n4 5 9\n6 4 1\n3 7 10\n5 10 10\n4 2 10\n1 8 2\n3 2 8\n5 6 2\n5 11 4\n6 10 1\n2 8 9\n5 9 8\n6 7 1\n6 9 7\n8 7 3\n3 8 2\n8 10 2\n1 6 10\n5 8 6\n10 3 8\n5 1 8\n3 11 3\n6 8 7\n7 1 6\n11 2 5\n",
    "vertices": [
      6,
      5
    ],
    "answer": 40,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 16 and vertex 1 are connected.\n\nThis is an undirected graph with 16 vertices and 89 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 7 and vertex 6.\n",
    "graph_output": "16 89\n8 1\n16 10\n14 16\n3 7\n14 13\n4 8\n11 14\n10 9\n2 16\n5 6\n3 10\n13 1\n13 11\n8 16\n12 2\n11 2\n3 6\n9 16\n4 1\n4 10\n14 12\n5 7\n12 10\n1 10\n16 13\n13 12\n3 4\n8 5\n1 14\n1 15\n4 9\n10 2\n9 12\n6 8\n11 4\n5 16\n6 14\n14 4\n15 14\n12 15\n13 15\n16 3\n9 11\n1 5\n6 12\n7 14\n8 2\n2 1\n12 11\n13 9\n3 12\n7 8\n3 9\n2 15\n16 12\n7 13\n6 4\n2 9\n6 15\n4 2\n7 4\n5 9\n8 12\n9 6\n11 6\n11 7\n10 5\n8 11\n10 6\n15 10\n15 4\n7 1\n14 10\n7 9\n3 5\n13 5\n8 3\n5 2\n12 5\n16 6\n11 1\n11 5\n9 8\n16 15\n4 12\n3 2\n11 16\n2 14\n7 6\n",
    "vertices": [
      16,
      1
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 13 to vertex 5 in the weighted graph.\n\nUndirected, Weighted Graph with 14 vertices and 63 edges\n\nEdges (Format: Node Node Weight):\n1 4 43\n4 8 70\n4 2 86\n2 12 49\n12 5 98\n1 7 99\n12 9 39\n7 13 12\n1 14 95\n4 11 87\n9 10 20\n12 3 20\n8 6 50\n9 11 7\n13 6 86\n13 4 5\n7 2 50\n12 6 3\n1 13 95\n14 12 65\n14 6 3\n6 10 100\n5 9 21\n12 4 89\n4 5 75\n10 4 7\n8 3 36\n10 11 59\n12 11 40\n8 12 30\n1 9 40\n2 8 88\n2 10 43\n1 8 17\n12 7 95\n11 6 36\n13 11 68\n10 8 18\n11 14 57\n2 1 44\n11 1 54\n8 9 21\n9 13 57\n14 4 30\n9 4 1\n7 6 10\n3 9 99\n6 4 83\n14 10 67\n6 3 20\n8 11 35\n13 14 74\n7 9 55\n3 10 15\n2 3 41\n6 5 52\n1 3 72\n14 7 72\n2 9 80\n1 12 35\n6 9 88\n2 11 80\n3 13 81\n",
    "graph_output": "14 63\n1 4 43\n4 8 70\n4 2 86\n2 12 49\n12 5 98\n1 7 99\n12 9 39\n7 13 12\n1 14 95\n4 11 87\n9 10 20\n12 3 20\n8 6 50\n9 11 7\n13 6 86\n13 4 5\n7 2 50\n12 6 3\n1 13 95\n14 12 65\n14 6 3\n6 10 100\n5 9 21\n12 4 89\n4 5 75\n10 4 7\n8 3 36\n10 11 59\n12 11 40\n8 12 30\n1 9 40\n2 8 88\n2 10 43\n1 8 17\n12 7 95\n11 6 36\n13 11 68\n10 8 18\n11 14 57\n2 1 44\n11 1 54\n8 9 21\n9 13 57\n14 4 30\n9 4 1\n7 6 10\n3 9 99\n6 4 83\n14 10 67\n6 3 20\n8 11 35\n13 14 74\n7 9 55\n3 10 15\n2 3 41\n6 5 52\n1 3 72\n14 7 72\n2 9 80\n1 12 35\n6 9 88\n2 11 80\n3 13 81\n",
    "vertices": [
      13,
      5
    ],
    "answer": 27,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 15 vertices and 24 edges\n\nEdges (Format: Node Node Weight):\n1 3 88\n1 6 38\n1 2 72\n6 15 19\n6 10 84\n1 8 49\n10 13 53\n8 11 82\n13 5 67\n6 9 17\n3 12 41\n12 14 26\n11 7 18\n5 4 87\n8 6 75\n4 12 92\n15 4 99\n12 11 30\n1 15 4\n10 3 1\n2 5 53\n9 10 74\n15 12 79\n2 3 53\n",
    "graph_output": "15 24\n1 3 88\n1 6 38\n1 2 72\n6 15 19\n6 10 84\n1 8 49\n10 13 53\n8 11 82\n13 5 67\n6 9 17\n3 12 41\n12 14 26\n11 7 18\n5 4 87\n8 6 75\n4 12 92\n15 4 99\n12 11 30\n1 15 4\n10 3 1\n2 5 53\n9 10 74\n15 12 79\n2 3 53\n",
    "vertices": [
      null,
      null
    ],
    "answer": 523,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 16 vertices and 24 edges\n\nEdges (Format: Node Node):\n2 14\n11 10\n3 1\n8 13\n15 16\n1 12\n1 8\n5 1\n15 12\n2 11\n13 5\n8 3\n9 4\n1 11\n14 9\n4 8\n6 8\n3 11\n1 6\n8 5\n16 11\n16 13\n15 10\n15 13\n",
    "graph_output": "16 24\n2 14\n11 10\n3 1\n8 13\n15 16\n1 12\n1 8\n5 1\n15 12\n2 11\n13 5\n8 3\n9 4\n1 11\n14 9\n4 8\n6 8\n3 11\n1 6\n8 5\n16 11\n16 13\n15 10\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 20 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 1 and vertex 15.\n",
    "graph_output": "17 20\n1 17\n17 4\n1 11\n11 15\n1 16\n11 14\n16 9\n9 13\n11 10\n9 3\n14 8\n1 12\n10 6\n12 2\n17 7\n13 5\n14 1\n1 13\n6 16\n1 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 27 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 3 and vertex 5.\n",
    "graph_output": "8 27\n4 2\n3 7\n4 8\n5 2\n1 7\n5 4\n8 3\n6 5\n3 6\n1 8\n5 7\n8 5\n6 4\n1 4\n3 1\n8 6\n7 4\n7 8\n1 6\n6 2\n8 2\n1 5\n7 6\n2 3\n4 3\n2 1\n3 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6062,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 14 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   1   0   0   0   0   0   1   0   0   1   1 \n 2 |  1   0   0   0   0   0   0   0   1   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   1   1 \n 4 |  0   0   0   0   0   0   1   0   0   1   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   1   0 \n 6 |  0   0   0   0   0   0   0   0   0   1   0   0 \n 7 |  0   0   0   1   0   0   0   0   0   0   0   0 \n 8 |  1   0   0   0   0   0   0   0   1   0   1   0 \n 9 |  0   1   0   0   0   0   0   1   0   0   1   0 \n10 |  0   0   0   1   0   1   0   0   0   0   0   0 \n11 |  1   0   1   0   1   0   0   1   1   0   0   0 \n12 |  1   0   1   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "12 14\n1 8\n7 4\n9 8\n12 1\n11 8\n2 9\n10 4\n12 3\n3 11\n1 11\n5 11\n1 2\n11 9\n6 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 13 vertices and 66 edges\n\nEdges (Format: Node Node):\n4 10\n9 11\n6 1\n1 7\n12 3\n8 3\n3 11\n12 10\n6 8\n4 1\n2 12\n1 13\n4 2\n6 10\n7 4\n2 9\n12 9\n1 11\n7 11\n6 7\n7 12\n10 3\n11 2\n6 11\n4 8\n5 13\n5 7\n13 11\n8 7\n13 7\n9 1\n5 8\n6 4\n1 5\n7 10\n7 9\n6 3\n9 6\n10 13\n1 10\n4 3\n5 12\n9 4\n8 12\n9 10\n12 6\n4 5\n1 12\n13 8\n4 12\n4 11\n6 13\n2 5\n10 2\n3 13\n12 11\n3 5\n8 2\n8 11\n3 2\n1 8\n3 1\n10 5\n2 1\n5 11\n6 2\n",
    "graph_output": "13 66\n4 10\n9 11\n6 1\n1 7\n12 3\n8 3\n3 11\n12 10\n6 8\n4 1\n2 12\n1 13\n4 2\n6 10\n7 4\n2 9\n12 9\n1 11\n7 11\n6 7\n7 12\n10 3\n11 2\n6 11\n4 8\n5 13\n5 7\n13 11\n8 7\n13 7\n9 1\n5 8\n6 4\n1 5\n7 10\n7 9\n6 3\n9 6\n10 13\n1 10\n4 3\n5 12\n9 4\n8 12\n9 10\n12 6\n4 5\n1 12\n13 8\n4 12\n4 11\n6 13\n2 5\n10 2\n3 13\n12 11\n3 5\n8 2\n8 11\n3 2\n1 8\n3 1\n10 5\n2 1\n5 11\n6 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 43 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   1   1   1   1   1   0   0   1   1   1   1 \n 2 |  1   0   1   0   1   0   1   1   0   1   1   1 \n 3 |  1   1   0   1   0   1   0   0   1   1   1   1 \n 4 |  1   0   1   0   1   1   1   1   1   0   1   0 \n 5 |  1   1   0   1   0   0   0   0   0   0   0   1 \n 6 |  1   0   1   1   0   0   0   0   1   0   0   1 \n 7 |  0   1   0   1   0   0   0   1   1   0   1   1 \n 8 |  0   1   0   1   0   0   1   0   0   1   1   1 \n 9 |  1   0   1   1   0   1   1   0   0   1   1   1 \n10 |  1   1   1   0   0   0   0   1   1   0   0   1 \n11 |  1   1   1   1   0   0   1   1   1   0   0   1 \n12 |  1   1   1   0   1   1   1   1   1   1   1   0 \n",
    "graph_output": "12 43\n1 2\n4 6\n11 1\n1 10\n3 9\n9 12\n9 10\n4 11\n3 11\n2 12\n3 1\n9 4\n2 5\n4 3\n12 8\n11 9\n5 1\n12 10\n3 2\n6 1\n9 6\n7 11\n4 1\n2 8\n5 4\n4 8\n2 11\n2 10\n1 9\n6 12\n7 9\n12 11\n4 7\n10 8\n11 8\n12 7\n2 7\n6 3\n12 5\n12 3\n8 7\n12 1\n3 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 61,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 104 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 5 and vertex 10.\n",
    "graph_output": "16 104\n1 10\n1 12\n12 11\n11 15\n1 16\n10 13\n11 9\n9 7\n15 14\n11 3\n14 2\n13 6\n7 5\n10 4\n16 8\n16 12\n11 8\n16 9\n8 9\n9 2\n13 7\n15 12\n13 12\n16 13\n9 12\n2 16\n8 2\n3 14\n8 10\n3 10\n1 2\n1 7\n7 2\n8 4\n9 4\n15 16\n2 4\n1 13\n3 8\n4 7\n5 1\n13 8\n10 11\n1 15\n5 11\n1 9\n4 12\n7 3\n6 2\n3 13\n2 12\n14 1\n6 1\n14 9\n4 15\n1 8\n1 4\n4 6\n3 4\n13 11\n7 6\n10 14\n15 2\n12 5\n8 12\n9 5\n6 11\n9 3\n15 7\n4 14\n9 10\n2 5\n13 4\n16 7\n2 3\n10 7\n11 14\n12 7\n8 15\n16 11\n16 14\n4 5\n11 7\n9 6\n9 13\n8 5\n3 1\n13 15\n15 6\n6 5\n5 14\n6 3\n9 15\n16 3\n15 3\n3 5\n3 12\n6 10\n2 10\n8 6\n2 11\n4 16\n11 4\n5 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 7 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 5, 6\nVertex 2: 1, 6\nVertex 3: 5\nVertex 4: 5\nVertex 5: 1, 4, 3, 6\nVertex 6: 2, 5, 1\n",
    "graph_output": "6 7\n1 2\n1 5\n2 6\n5 4\n5 3\n5 6\n6 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 12 vertices and 14 edges\n\nEdges (Format: Node Node):\n5 10\n4 5\n11 1\n11 4\n9 6\n7 6\n7 10\n1 5\n4 2\n7 5\n5 3\n10 4\n9 11\n11 12\n",
    "graph_output": "12 14\n5 10\n4 5\n11 1\n11 4\n9 6\n7 6\n7 10\n1 5\n4 2\n7 5\n5 3\n10 4\n9 11\n11 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 5,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 2 (source) to vertex 4 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 21 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9 with a weight of 86 and a capacity of 10.\nThere is an edge between vertex 1 and vertex 6 with a weight of 13 and a capacity of 9.\nThere is an edge between vertex 6 and vertex 8 with a weight of 7 and a capacity of 7.\nThere is an edge between vertex 8 and vertex 2 with a weight of 20 and a capacity of 2.\nThere is an edge between vertex 6 and vertex 10 with a weight of 63 and a capacity of 7.\nThere is an edge between vertex 10 and vertex 4 with a weight of 37 and a capacity of 2.\nThere is an edge between vertex 1 and vertex 11 with a weight of 93 and a capacity of 4.\nThere is an edge between vertex 6 and vertex 3 with a weight of 45 and a capacity of 9.\nThere is an edge between vertex 6 and vertex 5 with a weight of 15 and a capacity of 5.\nThere is an edge between vertex 1 and vertex 7 with a weight of 56 and a capacity of 2.\nThere is an edge between vertex 9 and vertex 8 with a weight of 26 and a capacity of 9.\nThere is an edge between vertex 8 and vertex 10 with a weight of 4 and a capacity of 3.\nThere is an edge between vertex 11 and vertex 2 with a weight of 49 and a capacity of 7.\nThere is an edge between vertex 4 and vertex 6 with a weight of 29 and a capacity of 7.\nThere is an edge between vertex 3 and vertex 7 with a weight of 6 and a capacity of 8.\nThere is an edge between vertex 2 and vertex 1 with a weight of 65 and a capacity of 2.\nThere is an edge between vertex 10 and vertex 3 with a weight of 37 and a capacity of 9.\nThere is an edge between vertex 11 and vertex 8 with a weight of 82 and a capacity of 9.\nThere is an edge between vertex 9 and vertex 4 with a weight of 15 and a capacity of 10.\nThere is an edge between vertex 10 and vertex 11 with a weight of 62 and a capacity of 5.\nThere is an edge between vertex 5 and vertex 2 with a weight of 84 and a capacity of 9.\n",
    "graph_output": "11 21\n1 9 86 10\n1 6 13 9\n6 8 7 7\n8 2 20 2\n6 10 63 7\n10 4 37 2\n1 11 93 4\n6 3 45 9\n6 5 15 5\n1 7 56 2\n9 8 26 9\n8 10 4 3\n11 2 49 7\n4 6 29 7\n3 7 6 8\n2 1 65 2\n10 3 37 9\n11 8 82 9\n9 4 15 10\n10 11 62 5\n5 2 84 9\n",
    "vertices": [
      2,
      4
    ],
    "answer": 2084,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 105 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 3 and vertex 6.\n",
    "graph_output": "15 105\n10 4\n14 11\n2 8\n2 3\n12 14\n14 5\n13 11\n1 7\n10 13\n5 3\n3 13\n11 8\n3 1\n12 9\n7 3\n11 4\n3 9\n6 13\n11 9\n2 6\n10 8\n15 6\n4 9\n10 1\n3 8\n4 3\n5 6\n15 8\n6 12\n2 12\n13 12\n6 14\n14 15\n4 2\n7 13\n9 8\n2 14\n8 14\n7 5\n7 14\n5 8\n2 7\n12 5\n15 13\n2 11\n7 9\n8 4\n2 9\n14 1\n11 3\n4 13\n8 13\n6 9\n10 15\n14 3\n13 5\n13 9\n4 7\n6 7\n1 11\n15 12\n14 10\n1 2\n15 3\n12 1\n12 3\n10 7\n14 4\n1 5\n10 6\n8 12\n13 14\n14 9\n7 15\n8 7\n4 6\n1 6\n12 7\n5 10\n4 1\n2 13\n3 10\n8 6\n15 4\n11 10\n11 15\n1 8\n9 5\n10 12\n9 10\n11 12\n2 10\n5 4\n15 1\n9 1\n12 4\n7 11\n2 15\n2 5\n15 5\n1 13\n15 9\n6 11\n5 11\n3 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 81 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 6 and vertex 7.\n",
    "graph_output": "15 81\n11 10\n2 15\n10 8\n6 2\n8 5\n1 13\n9 10\n15 3\n15 5\n5 11\n9 11\n2 3\n12 6\n9 1\n11 15\n5 14\n7 14\n7 2\n3 5\n9 12\n11 8\n5 2\n8 1\n4 11\n11 6\n8 14\n12 8\n8 3\n4 3\n1 12\n7 9\n11 3\n9 15\n6 1\n4 6\n7 11\n9 5\n15 1\n8 15\n2 12\n2 10\n15 12\n1 4\n7 10\n4 14\n14 12\n11 13\n5 1\n10 3\n11 1\n2 1\n14 1\n3 6\n14 9\n5 12\n9 4\n6 5\n5 7\n8 13\n13 4\n15 10\n13 15\n13 6\n3 1\n7 1\n12 7\n10 13\n13 12\n14 3\n14 15\n9 6\n6 8\n14 11\n5 10\n10 4\n15 7\n1 10\n12 11\n6 10\n13 7\n6 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 86 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0  68  71  83  81  73   0   0   2   0  17  30  19  81  17 \n 2 | 68   0  27  41   9  89  62   0   7  59  57   0  85  53  70 \n 3 | 71  27   0  90  82   0  84   0   0   0  67  41  17  10  79 \n 4 | 83  41  90   0   0   1  83   0  79  92  41  76  75  53  39 \n 5 | 81   9  82   0   0   0  66  81 100  30  19   8  57  24  83 \n 6 | 73  89   0   1   0   0  51  76  18  65   0   0  99  43  55 \n 7 |  0  62  84  83  66  51   0  23   0  20  87   0  45  59  46 \n 8 |  0   0   0   0  81  76  23   0  69  96  90  41  46  45  29 \n 9 |  2   7   0  79 100  18   0  69   0  80  40  16   0  82  14 \n10 |  0  59   0  92  30  65  20  96  80   0   0  55   0   4  98 \n11 | 17  57  67  41  19   0  87  90  40   0   0  28  84  55  56 \n12 | 30   0  41  76   8   0   0  41  16  55  28   0  68  62  20 \n13 | 19  85  17  75  57  99  45  46   0   0  84  68   0  56   6 \n14 | 81  53  10  53  24  43  59  45  82   4  55  62  56   0  69 \n15 | 17  70  79  39  83  55  46  29  14  98  56  20   6  69   0 \n",
    "graph_output": "15 86\n1 14 81\n1 13 19\n13 6 99\n6 9 18\n14 3 10\n13 4 75\n14 5 24\n9 15 14\n4 7 83\n13 8 46\n13 2 85\n13 11 84\n6 10 65\n10 12 55\n5 15 83\n15 3 79\n8 14 45\n13 5 57\n6 7 51\n1 9 2\n15 6 55\n15 1 17\n5 12 8\n9 5 100\n6 4 1\n10 2 59\n5 3 82\n14 13 56\n8 7 23\n9 10 80\n14 15 69\n10 14 4\n4 1 83\n4 11 41\n15 4 39\n15 2 70\n15 8 29\n8 5 81\n9 14 82\n5 7 66\n14 11 55\n14 4 53\n13 15 6\n6 1 73\n15 10 98\n2 14 53\n9 11 40\n3 1 71\n8 6 76\n13 7 45\n3 4 90\n2 9 7\n15 11 56\n8 11 90\n9 4 79\n2 7 62\n7 3 84\n12 8 41\n10 8 96\n5 1 81\n11 12 28\n4 12 76\n10 4 92\n2 11 57\n7 14 59\n15 12 20\n2 6 89\n12 14 62\n12 1 30\n5 11 19\n4 2 41\n11 3 67\n5 2 9\n9 8 69\n15 7 46\n7 11 87\n3 12 41\n10 5 30\n3 13 17\n2 1 68\n7 10 20\n11 1 17\n14 6 43\n2 3 27\n13 12 68\n9 12 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 156,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 2 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 15 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (14\u00d714):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14\n   --------------------------------------------------------\n 1 |  0   0  60   0   0   0   0  49   0  66  34   0   0   0 \n 2 |  0   0   0   0   0   0   0  15   0   0   0   0   0   0 \n 3 | 60   0   0  89   0   0  96   0   0   0   0   0   0  33 \n 4 |  0   0  89   0   0  38   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0  77 \n 6 |  0   0   0  38   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0  96   0   0   0   0   0   0   0   0   0   0   0 \n 8 | 49  15   0   0   0   0   0   0   0   0   0   0   4   0 \n 9 |  0   0   0   0   0   0   0   0   0  74   0   0   0   0 \n10 | 66   0   0   0   0   0   0   0  74   0   0  87   9   0 \n11 | 34   0   0   0   0   0   0   0   0   0   0   0  95   0 \n12 |  0   0   0   0   0   0   0   0   0  87   0   0   0   0 \n13 |  0   0   0   0   0   0   0   4   0   9  95   0   0   0 \n14 |  0   0  33   0  77   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "14 15\n1 3 60\n3 4 89\n1 11 34\n1 10 66\n3 7 96\n10 12 87\n11 13 95\n3 14 33\n14 5 77\n1 8 49\n10 9 74\n8 2 15\n4 6 38\n13 10 9\n13 8 4\n",
    "vertices": [
      8,
      2
    ],
    "answer": 15,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 15 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 7, 9\nVertex 2: 6, 9, 3\nVertex 3: 2, 8\nVertex 4: 6\nVertex 5: 6\nVertex 6: 2, 4, 11, 5, 9\nVertex 7: 8, 1, 11\nVertex 8: 7, 1, 3\nVertex 9: 2, 1, 6, 10, 11\nVertex 10: 9\nVertex 11: 6, 7, 9\n",
    "graph_output": "11 15\n2 6\n9 2\n4 6\n7 8\n11 6\n1 8\n1 7\n7 11\n9 1\n3 2\n3 8\n5 6\n6 9\n9 10\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 75 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 5 and vertex 8.\n",
    "graph_output": "13 75\n3 7\n8 2\n8 4\n11 9\n2 9\n5 1\n3 6\n2 4\n11 3\n9 5\n4 5\n1 6\n12 7\n2 13\n9 6\n8 11\n13 12\n6 5\n5 7\n11 13\n13 5\n10 13\n3 13\n6 2\n11 7\n10 11\n7 13\n8 3\n1 9\n9 10\n11 12\n7 9\n4 1\n2 3\n1 8\n13 4\n6 11\n11 5\n4 10\n6 10\n4 3\n5 3\n2 11\n12 1\n12 10\n6 4\n3 9\n10 7\n3 12\n12 5\n12 4\n1 2\n8 12\n12 2\n1 7\n7 6\n1 3\n11 4\n3 10\n6 8\n4 7\n11 1\n4 9\n10 8\n9 13\n9 12\n6 13\n7 8\n10 1\n8 13\n5 2\n6 12\n10 2\n5 10\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 46 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a weight of 5.\nThere is an edge between vertex 3 and vertex 10 with a weight of 75.\nThere is an edge between vertex 1 and vertex 12 with a weight of 22.\nThere is an edge between vertex 10 and vertex 5 with a weight of 17.\nThere is an edge between vertex 10 and vertex 4 with a weight of 64.\nThere is an edge between vertex 12 and vertex 7 with a weight of 87.\nThere is an edge between vertex 12 and vertex 6 with a weight of 84.\nThere is an edge between vertex 5 and vertex 9 with a weight of 67.\nThere is an edge between vertex 12 and vertex 2 with a weight of 12.\nThere is an edge between vertex 1 and vertex 8 with a weight of 52.\nThere is an edge between vertex 9 and vertex 11 with a weight of 87.\nThere is an edge between vertex 7 and vertex 9 with a weight of 19.\nThere is an edge between vertex 8 and vertex 5 with a weight of 74.\nThere is an edge between vertex 7 and vertex 10 with a weight of 37.\nThere is an edge between vertex 12 and vertex 5 with a weight of 75.\nThere is an edge between vertex 12 and vertex 3 with a weight of 78.\nThere is an edge between vertex 5 and vertex 6 with a weight of 46.\nThere is an edge between vertex 12 and vertex 11 with a weight of 26.\nThere is an edge between vertex 4 and vertex 12 with a weight of 32.\nThere is an edge between vertex 7 and vertex 5 with a weight of 27.\nThere is an edge between vertex 5 and vertex 2 with a weight of 19.\nThere is an edge between vertex 11 and vertex 1 with a weight of 46.\nThere is an edge between vertex 8 and vertex 7 with a weight of 57.\nThere is an edge between vertex 2 and vertex 9 with a weight of 28.\nThere is an edge between vertex 4 and vertex 6 with a weight of 24.\nThere is an edge between vertex 4 and vertex 9 with a weight of 30.\nThere is an edge between vertex 8 and vertex 9 with a weight of 100.\nThere is an edge between vertex 7 and vertex 11 with a weight of 78.\nThere is an edge between vertex 8 and vertex 2 with a weight of 36.\nThere is an edge between vertex 3 and vertex 2 with a weight of 57.\nThere is an edge between vertex 4 and vertex 8 with a weight of 91.\nThere is an edge between vertex 3 and vertex 7 with a weight of 9.\nThere is an edge between vertex 8 and vertex 11 with a weight of 8.\nThere is an edge between vertex 5 and vertex 4 with a weight of 58.\nThere is an edge between vertex 1 and vertex 9 with a weight of 1.\nThere is an edge between vertex 4 and vertex 7 with a weight of 49.\nThere is an edge between vertex 7 and vertex 1 with a weight of 52.\nThere is an edge between vertex 11 and vertex 6 with a weight of 59.\nThere is an edge between vertex 1 and vertex 6 with a weight of 46.\nThere is an edge between vertex 3 and vertex 4 with a weight of 45.\nThere is an edge between vertex 2 and vertex 6 with a weight of 75.\nThere is an edge between vertex 9 and vertex 6 with a weight of 27.\nThere is an edge between vertex 1 and vertex 10 with a weight of 76.\nThere is an edge between vertex 12 and vertex 9 with a weight of 60.\nThere is an edge between vertex 1 and vertex 4 with a weight of 68.\nThere is an edge between vertex 2 and vertex 7 with a weight of 52.\n",
    "graph_output": "12 46\n1 3 5\n3 10 75\n1 12 22\n10 5 17\n10 4 64\n12 7 87\n12 6 84\n5 9 67\n12 2 12\n1 8 52\n9 11 87\n7 9 19\n8 5 74\n7 10 37\n12 5 75\n12 3 78\n5 6 46\n12 11 26\n4 12 32\n7 5 27\n5 2 19\n11 1 46\n8 7 57\n2 9 28\n4 6 24\n4 9 30\n8 9 100\n7 11 78\n8 2 36\n3 2 57\n4 8 91\n3 7 9\n8 11 8\n5 4 58\n1 9 1\n4 7 49\n7 1 52\n11 6 59\n1 6 46\n3 4 45\n2 6 75\n9 6 27\n1 10 76\n12 9 60\n1 4 68\n2 7 52\n",
    "vertices": [
      null,
      null
    ],
    "answer": 173,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 28, 20, 2\nVertex 2: 1\nVertex 3: 6\nVertex 4: 10\nVertex 5: 20\nVertex 6: 28, 17, 29, 3\nVertex 7: 28, 24, 27\nVertex 8: 9\nVertex 9: 25, 8\nVertex 10: 25, 4\nVertex 11: 29\nVertex 12: 24\nVertex 13: 22\nVertex 14: 28\nVertex 15: 28\nVertex 16: 23\nVertex 17: 6\nVertex 18: 28\nVertex 19: 29, 26\nVertex 20: 1, 25, 5\nVertex 21: 22\nVertex 22: 23, 21, 13\nVertex 23: 28, 22, 16\nVertex 24: 7, 12\nVertex 25: 20, 10, 9\nVertex 26: 19\nVertex 27: 7\nVertex 28: 1, 6, 23, 7, 18, 14, 15\nVertex 29: 6, 19, 11\n",
    "graph_output": "29 28\n1 28\n28 6\n1 20\n20 25\n28 23\n25 10\n6 17\n23 22\n25 9\n10 4\n6 29\n29 19\n1 2\n22 21\n20 5\n28 7\n6 3\n28 18\n23 16\n9 8\n28 14\n29 11\n7 24\n28 15\n7 27\n19 26\n22 13\n24 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 112 edges\n\nEdges (Format: Node Node Weight):\n1 13 54\n13 15 91\n15 10 6\n1 16 56\n10 4 15\n10 7 11\n10 2 53\n4 9 14\n1 12 22\n7 5 22\n10 6 1\n16 8 15\n4 3 22\n10 11 77\n4 14 35\n1 11 52\n5 8 41\n3 6 14\n9 16 56\n2 1 61\n7 2 40\n11 6 66\n6 14 40\n11 15 80\n1 5 10\n7 3 10\n5 3 53\n3 15 90\n11 12 8\n9 2 79\n10 13 58\n16 11 64\n3 2 29\n15 16 76\n3 11 57\n16 13 40\n13 9 9\n5 11 58\n1 8 90\n2 16 76\n11 9 66\n2 12 40\n7 6 66\n13 12 19\n6 4 99\n6 2 62\n10 1 6\n2 13 67\n4 2 92\n11 13 27\n16 14 23\n8 12 15\n4 1 80\n6 8 34\n3 10 88\n4 11 10\n6 15 9\n15 12 90\n16 7 2\n15 1 26\n12 6 21\n7 15 16\n3 12 64\n2 8 46\n2 5 24\n11 8 36\n16 3 10\n3 8 38\n14 2 22\n13 4 65\n3 13 80\n13 14 31\n9 15 80\n5 14 8\n7 11 67\n8 15 93\n6 13 51\n13 5 41\n16 6 23\n7 1 67\n4 8 54\n9 14 71\n5 4 71\n3 9 20\n7 14 58\n12 4 29\n9 8 6\n7 8 14\n12 5 17\n9 12 23\n8 13 34\n1 14 36\n9 5 90\n10 8 16\n16 4 31\n7 9 23\n15 5 19\n10 5 94\n6 9 47\n12 14 74\n15 2 39\n5 16 50\n10 9 52\n7 13 42\n9 1 13\n12 16 26\n10 12 2\n6 1 75\n7 12 82\n5 6 37\n1 3 92\n2 11 48\n",
    "graph_output": "16 112\n1 13 54\n13 15 91\n15 10 6\n1 16 56\n10 4 15\n10 7 11\n10 2 53\n4 9 14\n1 12 22\n7 5 22\n10 6 1\n16 8 15\n4 3 22\n10 11 77\n4 14 35\n1 11 52\n5 8 41\n3 6 14\n9 16 56\n2 1 61\n7 2 40\n11 6 66\n6 14 40\n11 15 80\n1 5 10\n7 3 10\n5 3 53\n3 15 90\n11 12 8\n9 2 79\n10 13 58\n16 11 64\n3 2 29\n15 16 76\n3 11 57\n16 13 40\n13 9 9\n5 11 58\n1 8 90\n2 16 76\n11 9 66\n2 12 40\n7 6 66\n13 12 19\n6 4 99\n6 2 62\n10 1 6\n2 13 67\n4 2 92\n11 13 27\n16 14 23\n8 12 15\n4 1 80\n6 8 34\n3 10 88\n4 11 10\n6 15 9\n15 12 90\n16 7 2\n15 1 26\n12 6 21\n7 15 16\n3 12 64\n2 8 46\n2 5 24\n11 8 36\n16 3 10\n3 8 38\n14 2 22\n13 4 65\n3 13 80\n13 14 31\n9 15 80\n5 14 8\n7 11 67\n8 15 93\n6 13 51\n13 5 41\n16 6 23\n7 1 67\n4 8 54\n9 14 71\n5 4 71\n3 9 20\n7 14 58\n12 4 29\n9 8 6\n7 8 14\n12 5 17\n9 12 23\n8 13 34\n1 14 36\n9 5 90\n10 8 16\n16 4 31\n7 9 23\n15 5 19\n10 5 94\n6 9 47\n12 14 74\n15 2 39\n5 16 50\n10 9 52\n7 13 42\n9 1 13\n12 16 26\n10 12 2\n6 1 75\n7 12 82\n5 6 37\n1 3 92\n2 11 48\n",
    "vertices": [
      null,
      null
    ],
    "answer": 124,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 6 vertices and 8 edges\n\nEdges (Format: Node Node):\n1 6\n1 2\n3 5\n4 6\n6 2\n1 3\n4 5\n2 5\n",
    "graph_output": "6 8\n1 6\n1 2\n3 5\n4 6\n6 2\n1 3\n4 5\n2 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 69 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0  10  92  77  32  44  60  27  87  67  19  25  48 \n 2 | 10   0  23  12  17  84  72  21  32  50  94  23   0 \n 3 | 92  23   0  58  64  71  10   0 100  33  59  24  83 \n 4 | 77  12  58   0  56  76  99  73  78  65   0  38  15 \n 5 | 32  17  64  56   0  97   0  35   8  68  89   5  72 \n 6 | 44  84  71  76  97   0  24  53   0  73   0  83  73 \n 7 | 60  72  10  99   0  24   0  23  30  36   2  88  55 \n 8 | 27  21   0  73  35  53  23   0  25  81  75  25  18 \n 9 | 87  32 100  78   8   0  30  25   0  86   0   0  88 \n10 | 67  50  33  65  68  73  36  81  86   0   2  54   0 \n11 | 19  94  59   0  89   0   2  75   0   2   0  84  43 \n12 | 25  23  24  38   5  83  88  25   0  54  84   0  82 \n13 | 48   0  83  15  72  73  55  18  88   0  43  82   0 \n",
    "graph_output": "13 69\n1 7 60\n7 3 10\n3 11 59\n11 10 2\n3 6 71\n7 2 72\n11 5 89\n5 12 5\n6 4 76\n1 13 48\n2 8 21\n8 9 25\n11 8 75\n9 5 8\n13 6 73\n1 3 92\n12 10 54\n7 6 24\n10 9 86\n4 10 65\n4 5 56\n9 3 100\n4 7 99\n12 3 24\n3 5 64\n13 3 83\n8 13 18\n11 2 94\n9 13 88\n6 12 83\n6 8 53\n1 11 19\n7 8 23\n2 5 17\n12 2 23\n10 1 67\n1 12 25\n12 11 84\n5 10 68\n7 11 2\n2 1 10\n11 13 43\n12 8 25\n3 4 58\n8 1 27\n7 12 88\n2 3 23\n9 1 87\n2 9 32\n13 4 15\n1 5 32\n10 7 36\n4 1 77\n6 2 84\n7 13 55\n10 2 50\n10 8 81\n4 12 38\n8 4 73\n6 1 44\n8 5 35\n5 6 97\n13 12 82\n2 4 12\n4 9 78\n10 3 33\n13 5 72\n10 6 73\n9 7 30\n",
    "vertices": [
      null,
      null
    ],
    "answer": 145,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 17 vertices and 30 edges\n\nEdges (Format: Node Node):\n12 8\n17 11\n16 12\n13 2\n3 2\n14 3\n4 11\n11 14\n15 9\n2 1\n16 17\n8 7\n1 11\n16 14\n5 3\n6 12\n4 6\n9 8\n12 2\n16 3\n14 7\n13 15\n7 1\n7 15\n2 6\n10 8\n8 3\n5 4\n6 15\n4 12\n",
    "graph_output": "17 30\n12 8\n17 11\n16 12\n13 2\n3 2\n14 3\n4 11\n11 14\n15 9\n2 1\n16 17\n8 7\n1 11\n16 14\n5 3\n6 12\n4 6\n9 8\n12 2\n16 3\n14 7\n13 15\n7 1\n7 15\n2 6\n10 8\n8 3\n5 4\n6 15\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 65 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 7 (weight=99), 6 (weight=26), 9 (weight=5), 4 (weight=32), 5 (weight=69), 11 (weight=76), 2 (weight=45), 8 (weight=32), 10 (weight=80), 12 (weight=86), 3 (weight=43)\nVertex 2: 6 (weight=57), 5 (weight=94), 9 (weight=84), 7 (weight=44), 1 (weight=45), 3 (weight=80), 10 (weight=9), 4 (weight=59), 12 (weight=73), 8 (weight=30)\nVertex 3: 6 (weight=62), 4 (weight=36), 9 (weight=28), 7 (weight=26), 12 (weight=100), 2 (weight=80), 11 (weight=95), 8 (weight=86), 10 (weight=52), 1 (weight=43), 5 (weight=43)\nVertex 4: 3 (weight=36), 1 (weight=32), 12 (weight=49), 11 (weight=51), 5 (weight=61), 6 (weight=31), 9 (weight=79), 7 (weight=44), 10 (weight=38), 8 (weight=15), 2 (weight=59)\nVertex 5: 9 (weight=72), 7 (weight=8), 2 (weight=94), 1 (weight=69), 6 (weight=45), 4 (weight=61), 12 (weight=25), 8 (weight=62), 11 (weight=21), 10 (weight=86), 3 (weight=43)\nVertex 6: 1 (weight=26), 10 (weight=99), 3 (weight=62), 12 (weight=79), 2 (weight=57), 5 (weight=45), 4 (weight=31), 7 (weight=38), 8 (weight=40), 9 (weight=71), 11 (weight=59)\nVertex 7: 1 (weight=99), 11 (weight=57), 5 (weight=8), 10 (weight=52), 3 (weight=26), 2 (weight=44), 6 (weight=38), 4 (weight=44), 12 (weight=48), 8 (weight=29), 9 (weight=70)\nVertex 8: 9 (weight=50), 12 (weight=88), 11 (weight=55), 1 (weight=32), 3 (weight=86), 6 (weight=40), 10 (weight=100), 4 (weight=15), 5 (weight=62), 7 (weight=29), 2 (weight=30)\nVertex 9: 12 (weight=8), 5 (weight=72), 8 (weight=50), 3 (weight=28), 1 (weight=5), 2 (weight=84), 11 (weight=43), 4 (weight=79), 6 (weight=71), 7 (weight=70), 10 (weight=59)\nVertex 10: 6 (weight=99), 7 (weight=52), 4 (weight=38), 11 (weight=68), 8 (weight=100), 2 (weight=9), 1 (weight=80), 3 (weight=52), 5 (weight=86), 12 (weight=59), 9 (weight=59)\nVertex 11: 7 (weight=57), 8 (weight=55), 9 (weight=43), 1 (weight=76), 4 (weight=51), 3 (weight=95), 12 (weight=72), 10 (weight=68), 5 (weight=21), 6 (weight=59)\nVertex 12: 6 (weight=79), 9 (weight=8), 8 (weight=88), 3 (weight=100), 4 (weight=49), 11 (weight=72), 5 (weight=25), 7 (weight=48), 1 (weight=86), 2 (weight=73), 10 (weight=59)\n",
    "graph_output": "12 65\n1 7 99\n1 6 26\n6 10 99\n6 3 62\n3 4 36\n6 12 79\n12 9 8\n7 11 57\n9 5 72\n9 8 50\n6 2 57\n3 9 28\n12 8 88\n5 7 8\n1 9 5\n7 10 52\n1 4 32\n5 2 94\n9 2 84\n7 3 26\n8 11 55\n2 7 44\n1 5 69\n11 9 43\n6 5 45\n12 3 100\n4 12 49\n11 1 76\n2 1 45\n4 11 51\n4 5 61\n2 3 80\n3 11 95\n11 12 72\n6 4 31\n4 9 79\n6 7 38\n8 1 32\n8 3 86\n7 4 44\n4 10 38\n6 8 40\n10 11 68\n8 10 100\n2 10 9\n5 12 25\n1 10 80\n8 4 15\n6 9 71\n5 8 62\n12 7 48\n4 2 59\n8 7 29\n10 3 52\n1 12 86\n5 11 21\n7 9 70\n2 12 73\n10 5 86\n3 1 43\n10 12 59\n9 10 59\n5 3 43\n8 2 30\n6 11 59\n",
    "vertices": [
      null,
      null
    ],
    "answer": 204,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 105 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 12, 16, 10, 8, 2, 11, 14, 5, 9, 3, 15\nVertex 2: 16, 3, 15, 10, 6, 7, 8, 5, 1, 4, 9, 14, 11\nVertex 3: 6, 4, 16, 2, 15, 13, 5, 7, 1, 14, 12\nVertex 4: 3, 14, 8, 16, 11, 12, 2, 10, 15, 17, 5\nVertex 5: 8, 10, 16, 3, 6, 2, 7, 13, 12, 9, 1, 14, 4, 11\nVertex 6: 3, 16, 15, 13, 5, 11, 2, 9, 8, 7, 17, 12, 14\nVertex 7: 8, 15, 3, 12, 2, 10, 5, 17, 9, 6, 13\nVertex 8: 14, 5, 7, 1, 4, 2, 6, 11, 13, 12, 10, 9, 16, 15\nVertex 9: 12, 13, 16, 15, 6, 14, 2, 7, 8, 5, 1, 10, 17\nVertex 10: 16, 11, 5, 1, 15, 2, 13, 17, 7, 4, 8, 9, 14\nVertex 11: 10, 16, 4, 6, 1, 8, 17, 2, 13, 14, 5, 12\nVertex 12: 9, 1, 14, 4, 7, 15, 16, 8, 5, 13, 6, 3, 11\nVertex 13: 1, 9, 3, 6, 17, 10, 16, 5, 8, 12, 11, 14, 7\nVertex 14: 8, 12, 4, 1, 9, 2, 17, 5, 11, 6, 3, 10, 13\nVertex 15: 6, 2, 3, 7, 10, 9, 17, 16, 12, 4, 1, 8\nVertex 16: 2, 6, 10, 3, 5, 1, 11, 4, 9, 13, 15, 12, 8\nVertex 17: 13, 10, 15, 7, 6, 11, 14, 4, 9\n",
    "graph_output": "17 105\n16 2\n6 3\n3 4\n13 1\n16 6\n9 12\n14 8\n16 10\n13 9\n15 6\n16 3\n1 12\n8 5\n11 10\n10 5\n16 5\n16 1\n14 12\n2 3\n15 2\n15 3\n8 7\n1 10\n3 13\n15 7\n6 13\n13 17\n4 14\n5 3\n11 16\n8 1\n15 10\n4 8\n4 16\n11 4\n2 10\n12 4\n3 7\n6 5\n9 16\n11 6\n6 2\n7 12\n2 7\n2 8\n15 9\n6 9\n10 13\n2 5\n2 1\n11 1\n4 2\n8 6\n1 14\n10 17\n10 7\n5 7\n13 16\n11 8\n15 17\n15 16\n12 15\n14 9\n4 10\n13 5\n13 8\n15 4\n16 12\n2 9\n2 14\n12 8\n17 7\n7 9\n10 8\n7 6\n8 9\n17 6\n11 17\n17 14\n17 4\n12 5\n5 9\n5 1\n13 12\n11 2\n13 11\n14 5\n16 8\n9 1\n1 3\n15 1\n12 6\n14 11\n15 8\n6 14\n14 3\n9 10\n5 4\n12 3\n17 9\n11 5\n12 11\n14 10\n14 13\n7 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 21 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   0   1   0   0   0   0   1   0   1   0   1   0 \n 2 |  1   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0 \n 3 |  1   0   0   1   0   1   0   0   1   1   0   0   0   1   0   0 \n 4 |  1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 6 |  1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 7 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   0 \n 9 |  0   1   1   0   0   0   0   1   0   0   0   0   0   0   0   0 \n10 |  0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0 \n11 |  1   1   0   0   1   0   1   1   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n13 |  1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n14 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "16 21\n1 13\n1 11\n1 15\n11 5\n1 3\n1 6\n11 2\n6 16\n13 12\n3 14\n11 7\n3 4\n11 8\n3 10\n8 9\n3 9\n10 8\n1 2\n4 1\n9 2\n3 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 22 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 4 and vertex 2.\n",
    "graph_output": "11 22\n8 9\n2 3\n11 7\n3 11\n6 2\n3 10\n8 11\n1 9\n4 7\n4 8\n5 7\n2 10\n8 10\n10 6\n6 11\n10 4\n5 6\n5 4\n5 8\n11 2\n6 9\n4 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 105 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 105\n10 4\n14 11\n2 8\n2 3\n12 14\n14 5\n13 11\n1 7\n10 13\n5 3\n3 13\n11 8\n3 1\n12 9\n7 3\n11 4\n3 9\n6 13\n11 9\n2 6\n10 8\n15 6\n4 9\n10 1\n3 8\n4 3\n5 6\n15 8\n6 12\n2 12\n13 12\n6 14\n14 15\n4 2\n7 13\n9 8\n2 14\n8 14\n7 5\n7 14\n5 8\n2 7\n12 5\n15 13\n2 11\n7 9\n8 4\n2 9\n14 1\n11 3\n4 13\n8 13\n6 9\n10 15\n14 3\n13 5\n13 9\n4 7\n6 7\n1 11\n15 12\n14 10\n1 2\n15 3\n12 1\n12 3\n10 7\n14 4\n1 5\n10 6\n8 12\n13 14\n14 9\n7 15\n8 7\n4 6\n1 6\n12 7\n5 10\n4 1\n2 13\n3 10\n8 6\n15 4\n11 10\n11 15\n1 8\n9 5\n10 12\n9 10\n11 12\n2 10\n5 4\n15 1\n9 1\n12 4\n7 11\n2 15\n2 5\n15 5\n1 13\n15 9\n6 11\n5 11\n3 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 40 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 3, 9, 5, 6, 8\nVertex 2: 11, 8, 4, 3, 5, 7, 9, 10, 6\nVertex 3: 4, 11, 1, 9, 10, 2, 5\nVertex 4: 3, 11, 2, 9, 8, 5, 6\nVertex 5: 9, 10, 1, 11, 7, 2, 6, 3, 4\nVertex 6: 7, 1, 5, 8, 10, 2, 4\nVertex 7: 10, 6, 9, 8, 5, 2, 11\nVertex 8: 2, 7, 4, 6, 9, 1\nVertex 9: 5, 1, 4, 3, 7, 2, 8, 10\nVertex 10: 7, 5, 3, 11, 6, 2, 9\nVertex 11: 1, 2, 3, 4, 5, 10, 7\n",
    "graph_output": "11 40\n7 10\n5 9\n1 11\n4 3\n2 11\n7 6\n3 11\n3 1\n11 4\n2 8\n9 1\n2 4\n9 4\n3 9\n7 9\n7 8\n10 5\n10 3\n5 1\n11 5\n2 3\n7 5\n11 10\n1 6\n4 8\n2 5\n5 6\n2 7\n5 3\n5 4\n8 6\n9 2\n10 6\n10 2\n11 7\n9 8\n1 8\n2 6\n9 10\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 18 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   1   0   0   0   0   1   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 3 |  1   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   1   0   0   1   0   0   0   1   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   1   0   0   1   0   0   0 \n 6 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   1   1   1   1 \n 8 |  1   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 9 |  0   0   0   0   1   0   0   0   0   0   0   1   0   0   0 \n10 |  0   0   0   1   0   0   0   0   0   0   0   1   0   0   0 \n11 |  0   1   0   0   0   0   0   0   0   0   0   1   1   0   0 \n12 |  0   0   0   0   1   0   1   0   1   1   1   0   0   0   0 \n13 |  0   0   0   0   0   0   1   1   0   0   1   0   0   1   0 \n14 |  0   0   0   0   0   0   1   0   0   0   0   0   1   0   0 \n15 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n",
    "graph_output": "15 18\n12 5\n10 4\n6 4\n12 11\n9 5\n9 12\n2 11\n12 7\n15 7\n8 1\n14 13\n1 3\n13 11\n8 13\n4 3\n12 10\n7 14\n7 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (29\u00d729):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n   --------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   1   0   1   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 2 |  0   0   1   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 3 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n14 |  1   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n18 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n21 |  1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   1   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   1 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0 \n28 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0 \n",
    "graph_output": "29 28\n1 14\n14 19\n1 10\n1 21\n1 12\n14 2\n2 6\n21 26\n21 27\n10 24\n14 9\n2 28\n26 15\n19 20\n9 5\n26 29\n2 3\n21 4\n15 11\n27 25\n19 13\n5 7\n4 18\n10 8\n25 23\n21 22\n24 17\n29 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 99 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 4, 8, 3, 12, 14, 5, 7, 2, 10, 9, 15, 11, 6\nVertex 2: 4, 6, 5, 12, 13, 9, 3, 1, 14, 7, 10, 11, 8\nVertex 3: 1, 11, 7, 4, 5, 14, 13, 12, 2, 10, 15, 8, 9\nVertex 4: 1, 2, 10, 15, 3, 7, 14, 5, 12, 9, 13, 11, 6\nVertex 5: 10, 2, 1, 8, 14, 6, 3, 12, 15, 9, 4, 11, 13, 7\nVertex 6: 2, 15, 14, 11, 13, 5, 8, 9, 10, 4, 12, 1, 7\nVertex 7: 3, 15, 11, 10, 4, 1, 9, 14, 2, 13, 8, 12, 5, 6\nVertex 8: 1, 11, 5, 6, 10, 14, 12, 3, 7, 2, 9\nVertex 9: 14, 10, 7, 2, 6, 5, 1, 3, 12, 4, 13, 15, 11, 8\nVertex 10: 13, 5, 4, 9, 7, 8, 11, 15, 3, 1, 12, 6, 14, 2\nVertex 11: 3, 8, 6, 7, 14, 10, 13, 12, 5, 1, 9, 2, 15, 4\nVertex 12: 1, 2, 5, 3, 8, 14, 10, 9, 4, 15, 11, 7, 6\nVertex 13: 1, 10, 6, 2, 3, 14, 11, 7, 9, 5, 15, 4\nVertex 14: 6, 9, 1, 5, 15, 11, 3, 8, 4, 7, 2, 13, 12, 10\nVertex 15: 6, 4, 7, 14, 10, 5, 3, 1, 12, 9, 13, 11\n",
    "graph_output": "15 99\n1 13\n1 4\n4 2\n2 6\n1 8\n1 3\n3 11\n3 7\n1 12\n6 15\n13 10\n6 14\n14 9\n10 5\n2 5\n10 4\n15 4\n15 7\n3 4\n11 8\n12 2\n10 9\n6 11\n6 13\n14 1\n5 1\n5 8\n11 7\n14 5\n6 5\n7 10\n6 8\n10 8\n14 15\n11 14\n4 7\n7 1\n10 11\n3 5\n7 9\n13 2\n5 12\n2 9\n9 6\n15 10\n14 3\n3 13\n3 12\n2 3\n14 8\n15 5\n10 3\n12 8\n15 3\n2 1\n9 5\n3 8\n14 4\n14 7\n1 10\n1 9\n2 14\n14 13\n14 12\n9 3\n11 13\n10 12\n12 9\n7 2\n7 13\n15 1\n5 4\n10 6\n12 4\n10 14\n15 12\n9 4\n13 9\n9 15\n12 11\n5 11\n7 8\n2 10\n1 11\n11 9\n13 5\n15 13\n2 11\n7 12\n5 7\n8 2\n11 15\n13 4\n11 4\n9 8\n6 4\n6 12\n1 6\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 15 vertices and 87 edges\n\nEdges (Format: Node Node Weight):\n1 15 66\n15 13 4\n13 2 34\n1 11 42\n11 7 48\n7 3 15\n3 5 21\n5 6 41\n13 9 22\n2 12 74\n13 4 19\n11 14 42\n2 10 52\n2 8 36\n11 3 32\n15 10 53\n12 7 71\n2 9 47\n1 12 68\n11 6 41\n8 13 29\n1 10 72\n14 1 44\n7 10 91\n14 15 67\n4 6 84\n11 10 7\n3 2 91\n6 9 89\n15 3 68\n1 2 63\n8 10 78\n15 4 1\n1 3 71\n10 4 15\n7 15 67\n8 12 60\n9 11 20\n8 1 85\n14 5 36\n8 6 93\n7 2 88\n7 1 62\n5 2 38\n12 11 13\n6 7 60\n3 4 63\n15 6 14\n14 12 1\n15 5 48\n3 14 97\n14 6 79\n4 8 10\n7 14 29\n13 7 66\n6 2 37\n4 1 65\n10 9 81\n14 13 27\n4 2 51\n4 9 76\n4 11 6\n13 12 83\n14 2 44\n11 15 9\n13 1 41\n4 12 11\n7 5 9\n14 8 65\n6 13 89\n13 11 82\n10 6 36\n7 4 60\n9 7 86\n8 11 37\n9 1 93\n7 8 24\n11 2 98\n6 12 35\n4 5 55\n5 1 46\n6 1 41\n14 9 21\n8 9 25\n3 9 20\n12 9 85\n10 5 28\n",
    "graph_output": "15 87\n1 15 66\n15 13 4\n13 2 34\n1 11 42\n11 7 48\n7 3 15\n3 5 21\n5 6 41\n13 9 22\n2 12 74\n13 4 19\n11 14 42\n2 10 52\n2 8 36\n11 3 32\n15 10 53\n12 7 71\n2 9 47\n1 12 68\n11 6 41\n8 13 29\n1 10 72\n14 1 44\n7 10 91\n14 15 67\n4 6 84\n11 10 7\n3 2 91\n6 9 89\n15 3 68\n1 2 63\n8 10 78\n15 4 1\n1 3 71\n10 4 15\n7 15 67\n8 12 60\n9 11 20\n8 1 85\n14 5 36\n8 6 93\n7 2 88\n7 1 62\n5 2 38\n12 11 13\n6 7 60\n3 4 63\n15 6 14\n14 12 1\n15 5 48\n3 14 97\n14 6 79\n4 8 10\n7 14 29\n13 7 66\n6 2 37\n4 1 65\n10 9 81\n14 13 27\n4 2 51\n4 9 76\n4 11 6\n13 12 83\n14 2 44\n11 15 9\n13 1 41\n4 12 11\n7 5 9\n14 8 65\n6 13 89\n13 11 82\n10 6 36\n7 4 60\n9 7 86\n8 11 37\n9 1 93\n7 8 24\n11 2 98\n6 12 35\n4 5 55\n5 1 46\n6 1 41\n14 9 21\n8 9 25\n3 9 20\n12 9 85\n10 5 28\n",
    "vertices": [
      null,
      null
    ],
    "answer": 193,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 4 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 13 vertices and 21 edges\n\nEdges (Format: Node Node Capacity):\n1 9 9\n9 4 5\n1 3 5\n1 7 1\n9 2 10\n9 6 10\n2 12 7\n3 8 6\n2 5 10\n1 11 2\n11 10 6\n8 13 2\n4 2 2\n12 6 8\n13 4 7\n1 12 5\n6 8 4\n3 6 1\n6 2 1\n10 8 1\n3 5 5\n",
    "graph_output": "13 21\n1 9 9\n9 4 5\n1 3 5\n1 7 1\n9 2 10\n9 6 10\n2 12 7\n3 8 6\n2 5 10\n1 11 2\n11 10 6\n8 13 2\n4 2 2\n12 6 8\n13 4 7\n1 12 5\n6 8 4\n3 6 1\n6 2 1\n10 8 1\n3 5 5\n",
    "vertices": [
      4,
      10
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 12 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 3, 5\nVertex 2: 4, 6, 5, 7\nVertex 3: 4, 1\nVertex 4: 3, 2, 5\nVertex 5: 6, 7, 2, 1, 4\nVertex 6: 5, 7, 1, 2\nVertex 7: 6, 5, 2\n",
    "graph_output": "7 12\n6 5\n7 6\n4 3\n2 4\n6 1\n6 2\n3 1\n7 5\n5 2\n1 5\n5 4\n7 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 35,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 3 (source) to vertex 1 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 40 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 2 with a capacity of 9.\nThere is an edge between vertex 6 and vertex 11 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 7.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 4.\nThere is an edge between vertex 11 and vertex 4 with a capacity of 9.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 10.\nThere is an edge between vertex 2 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 7 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 9 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 2.\nThere is an edge between vertex 9 and vertex 8 with a capacity of 7.\nThere is an edge between vertex 10 and vertex 4 with a capacity of 3.\nThere is an edge between vertex 11 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 8.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 5 and vertex 11 with a capacity of 10.\nThere is an edge between vertex 4 and vertex 1 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 8.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 9 and vertex 4 with a capacity of 8.\nThere is an edge between vertex 11 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 10 and vertex 8 with a capacity of 6.\nThere is an edge between vertex 10 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 11 and vertex 2 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 9 and vertex 2 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 1 with a capacity of 6.\nThere is an edge between vertex 10 and vertex 7 with a capacity of 8.\nThere is an edge between vertex 8 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 2 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 3 with a capacity of 6.\nThere is an edge between vertex 11 and vertex 9 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 10.\nThere is an edge between vertex 5 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 11 and vertex 1 with a capacity of 8.\n",
    "graph_output": "11 40\n1 6 8\n1 2 9\n6 11 1\n11 3 8\n1 10 7\n3 5 4\n11 4 9\n3 7 10\n2 8 4\n7 9 6\n9 10 10\n5 6 2\n9 8 7\n10 4 3\n11 10 5\n1 9 8\n6 3 8\n1 3 8\n5 11 10\n4 1 1\n6 8 8\n2 10 5\n7 8 2\n9 4 8\n11 8 2\n10 8 6\n10 5 2\n11 2 9\n4 7 4\n9 2 2\n3 9 5\n7 1 6\n10 7 8\n8 4 6\n2 3 5\n10 3 6\n11 9 3\n1 5 10\n5 9 6\n11 1 8\n",
    "vertices": [
      3,
      1
    ],
    "answer": 54,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 87 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 15 and vertex 14.\n",
    "graph_output": "15 87\n1 3\n1 5\n1 15\n1 12\n5 8\n5 2\n3 7\n12 13\n12 11\n5 14\n11 9\n7 10\n1 6\n14 4\n10 9\n5 6\n4 12\n10 8\n8 1\n6 3\n15 7\n2 13\n15 4\n6 15\n8 12\n15 12\n4 13\n9 14\n7 13\n5 11\n10 14\n10 2\n6 4\n10 4\n8 9\n14 6\n7 12\n5 13\n9 6\n2 15\n13 10\n14 12\n1 2\n9 13\n3 2\n11 15\n11 10\n6 11\n3 13\n2 4\n12 5\n4 7\n4 11\n10 5\n3 4\n8 3\n13 11\n14 1\n8 2\n14 8\n7 9\n1 11\n15 13\n8 4\n15 5\n5 9\n5 7\n7 6\n1 13\n3 14\n15 8\n6 10\n11 14\n13 8\n6 12\n9 12\n7 2\n3 5\n15 3\n6 8\n7 8\n1 7\n4 9\n9 2\n12 10\n2 11\n15 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 83 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n 2 |  1   0   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   0   0   1   0   1   0   1   0   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   0   1 \n 5 |  1   1   0   1   0   0   0   1   1   1   1   1   1   1   1 \n 6 |  1   0   0   1   0   0   1   0   1   0   1   1   1   1   0 \n 7 |  1   1   1   1   0   1   0   0   1   1   0   1   1   1   1 \n 8 |  1   1   0   1   1   0   0   0   1   1   1   1   1   1   0 \n 9 |  1   1   1   1   1   1   1   1   0   1   0   1   0   1   0 \n10 |  1   1   0   1   1   0   1   1   1   0   1   0   1   0   1 \n11 |  1   1   1   1   1   1   0   1   0   1   0   1   1   1   0 \n12 |  0   1   0   1   1   1   1   1   1   0   1   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   0   1   1   1   0   1   1 \n14 |  1   1   1   0   1   1   1   1   1   0   1   1   1   0   1 \n15 |  1   1   1   1   1   0   1   0   0   1   0   1   1   1   0 \n",
    "graph_output": "15 83\n4 15\n5 1\n12 4\n5 12\n10 1\n4 8\n8 14\n7 13\n13 3\n1 4\n8 9\n6 14\n7 9\n14 3\n12 2\n14 15\n8 2\n15 13\n15 10\n11 4\n9 4\n13 10\n15 7\n15 5\n6 4\n6 11\n8 1\n1 7\n3 2\n12 11\n9 3\n14 13\n12 8\n13 4\n15 1\n10 5\n1 13\n11 2\n7 2\n15 2\n4 10\n14 5\n6 7\n13 11\n9 2\n13 6\n14 2\n7 12\n14 7\n1 11\n12 15\n5 4\n11 5\n6 12\n8 10\n8 13\n15 3\n14 1\n1 2\n11 14\n9 1\n11 10\n9 6\n14 12\n4 2\n8 5\n2 13\n12 13\n7 10\n3 1\n1 6\n4 7\n5 2\n10 9\n14 9\n5 13\n10 2\n3 11\n3 7\n12 9\n5 9\n3 4\n8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 17 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 6 (weight=9), 4 (weight=64), 5 (weight=82), 2 (weight=55)\nVertex 2: 9 (weight=46), 8 (weight=28), 10 (weight=13), 1 (weight=55)\nVertex 3: 11 (weight=16), 5 (weight=79), 7 (weight=84)\nVertex 4: 1 (weight=64), 9 (weight=60), 11 (weight=88)\nVertex 5: 10 (weight=38), 8 (weight=62), 1 (weight=82), 3 (weight=79)\nVertex 6: 1 (weight=9), 10 (weight=7), 7 (weight=49)\nVertex 7: 11 (weight=54), 3 (weight=84), 6 (weight=49)\nVertex 8: 5 (weight=62), 2 (weight=28)\nVertex 9: 4 (weight=60), 2 (weight=46)\nVertex 10: 6 (weight=7), 5 (weight=38), 2 (weight=13)\nVertex 11: 4 (weight=88), 7 (weight=54), 3 (weight=16)\n",
    "graph_output": "11 17\n1 6 9\n6 10 7\n1 4 64\n4 9 60\n4 11 88\n11 7 54\n10 5 38\n11 3 16\n5 8 62\n9 2 46\n5 1 82\n5 3 79\n3 7 84\n8 2 28\n10 2 13\n1 2 55\n7 6 49\n",
    "vertices": [
      null,
      null
    ],
    "answer": 324,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 22 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 3 |  0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   1   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 5 |  1   0   1   0   0   0   1   0   0   0   0   0   0   1   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 7 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1 \n 8 |  1   0   0   0   0   0   0   0   0   1   0   1   0   0   1   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0 \n10 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0 \n11 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n12 |  0   0   1   1   0   0   0   1   0   0   0   0   1   0   1   0   0 \n13 |  0   0   0   0   0   1   0   0   0   0   0   1   0   0   1   0   0 \n14 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0 \n15 |  0   0   0   0   0   0   0   1   0   0   0   1   1   1   0   1   0 \n16 |  0   0   1   0   0   0   0   0   1   1   0   0   0   0   1   0   0 \n17 |  0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "17 22\n1 5\n5 14\n5 3\n14 15\n15 13\n3 16\n5 7\n7 17\n17 2\n13 12\n13 6\n16 10\n16 9\n15 8\n12 4\n9 11\n16 15\n8 12\n8 1\n8 10\n12 15\n12 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 2, 20, 17\nVertex 2: 1, 3, 25\nVertex 3: 2, 19\nVertex 4: 1, 6\nVertex 5: 17\nVertex 6: 4, 15, 12\nVertex 7: 15\nVertex 8: 10, 26, 18\nVertex 9: 16\nVertex 10: 15, 8, 24\nVertex 11: 15\nVertex 12: 6, 22\nVertex 13: 20\nVertex 14: 25, 31\nVertex 15: 6, 10, 7, 11\nVertex 16: 20, 28, 27, 9\nVertex 17: 1, 5\nVertex 18: 8\nVertex 19: 3, 23\nVertex 20: 1, 16, 13\nVertex 21: 23\nVertex 22: 12\nVertex 23: 19, 21, 29\nVertex 24: 10\nVertex 25: 2, 30, 14\nVertex 26: 8\nVertex 27: 16\nVertex 28: 16\nVertex 29: 23\nVertex 30: 25\nVertex 31: 14\n",
    "graph_output": "31 30\n1 4\n1 2\n2 3\n3 19\n4 6\n6 15\n1 20\n1 17\n6 12\n17 5\n2 25\n25 30\n15 10\n20 16\n15 7\n12 22\n16 28\n10 8\n20 13\n8 26\n10 24\n25 14\n19 23\n23 21\n8 18\n16 27\n14 31\n15 11\n23 29\n16 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 12 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9\nVertex 2: 10, 4\nVertex 3: 11, 8\nVertex 4: 2, 10, 9, 6\nVertex 5: 10, 11\nVertex 6: 4\nVertex 7: 11\nVertex 8: 11, 3\nVertex 9: 4, 1\nVertex 10: 2, 4, 5\nVertex 11: 8, 5, 7, 3\n",
    "graph_output": "11 12\n2 10\n4 2\n10 4\n4 9\n8 11\n5 10\n5 11\n9 1\n11 7\n11 3\n8 3\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 17 vertices and 132 edges\n\nEdges (Format: Node Node):\n1 9\n1 8\n8 5\n9 16\n8 11\n9 13\n5 4\n11 2\n11 15\n9 17\n2 6\n13 12\n11 7\n8 10\n15 14\n15 3\n17 13\n17 14\n14 2\n17 6\n4 10\n2 17\n17 7\n3 8\n3 13\n3 17\n16 1\n4 1\n16 10\n2 5\n14 9\n6 12\n15 13\n3 16\n5 13\n15 5\n3 9\n6 14\n6 9\n16 13\n10 11\n11 12\n6 8\n10 15\n8 9\n2 1\n7 10\n12 15\n12 1\n13 11\n5 16\n6 16\n14 10\n11 14\n17 5\n11 5\n6 1\n11 17\n5 14\n5 12\n16 2\n8 17\n3 12\n7 8\n17 12\n9 4\n12 10\n17 4\n3 14\n12 2\n13 14\n8 12\n14 12\n2 15\n7 2\n6 5\n7 12\n11 16\n4 13\n8 14\n7 15\n10 17\n3 2\n4 16\n11 6\n5 7\n3 7\n2 13\n14 4\n1 11\n13 10\n7 16\n10 9\n3 5\n14 1\n3 6\n4 12\n7 6\n7 14\n14 16\n8 13\n10 6\n15 8\n9 7\n15 6\n9 11\n16 17\n2 9\n12 9\n10 2\n10 5\n12 16\n13 1\n8 4\n15 4\n1 15\n9 15\n3 1\n10 3\n7 4\n6 4\n4 2\n9 5\n10 1\n4 11\n15 16\n1 17\n2 8\n13 6\n11 3\n7 13\n16 8\n",
    "graph_output": "17 132\n1 9\n1 8\n8 5\n9 16\n8 11\n9 13\n5 4\n11 2\n11 15\n9 17\n2 6\n13 12\n11 7\n8 10\n15 14\n15 3\n17 13\n17 14\n14 2\n17 6\n4 10\n2 17\n17 7\n3 8\n3 13\n3 17\n16 1\n4 1\n16 10\n2 5\n14 9\n6 12\n15 13\n3 16\n5 13\n15 5\n3 9\n6 14\n6 9\n16 13\n10 11\n11 12\n6 8\n10 15\n8 9\n2 1\n7 10\n12 15\n12 1\n13 11\n5 16\n6 16\n14 10\n11 14\n17 5\n11 5\n6 1\n11 17\n5 14\n5 12\n16 2\n8 17\n3 12\n7 8\n17 12\n9 4\n12 10\n17 4\n3 14\n12 2\n13 14\n8 12\n14 12\n2 15\n7 2\n6 5\n7 12\n11 16\n4 13\n8 14\n7 15\n10 17\n3 2\n4 16\n11 6\n5 7\n3 7\n2 13\n14 4\n1 11\n13 10\n7 16\n10 9\n3 5\n14 1\n3 6\n4 12\n7 6\n7 14\n14 16\n8 13\n10 6\n15 8\n9 7\n15 6\n9 11\n16 17\n2 9\n12 9\n10 2\n10 5\n12 16\n13 1\n8 4\n15 4\n1 15\n9 15\n3 1\n10 3\n7 4\n6 4\n4 2\n9 5\n10 1\n4 11\n15 16\n1 17\n2 8\n13 6\n11 3\n7 13\n16 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 18 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 3\nVertex 2: 11\nVertex 3: 1, 4\nVertex 4: 10, 6, 3\nVertex 5: 12, 9\nVertex 6: 4\nVertex 7: 12, 15, 14, 13\nVertex 8: 1, 13\nVertex 9: 5, 12\nVertex 10: 4, 12\nVertex 11: 12, 2, 13\nVertex 12: 5, 11, 9, 7, 10\nVertex 13: 14, 11, 8, 7\nVertex 14: 13, 7\nVertex 15: 7\n",
    "graph_output": "15 18\n12 5\n10 4\n6 4\n12 11\n9 5\n9 12\n2 11\n12 7\n15 7\n8 1\n14 13\n1 3\n13 11\n8 13\n4 3\n12 10\n7 14\n7 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 13 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   0   0   1   1   0   1   0   0   0   1 \n 2 |  0   0   0   0   0   0   0   0   0   1   0   0   1 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   1   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  1   0   0   0   0   0   0   0   0   0   0   1   1 \n 7 |  1   0   0   0   0   0   0   1   0   1   0   0   0 \n 8 |  0   0   0   0   0   0   1   0   0   0   0   0   0 \n 9 |  1   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   1   0   1   0   0   1   0   0   0   0   1   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   1 \n12 |  0   0   0   0   0   1   0   0   0   1   0   0   0 \n13 |  1   1   0   0   0   1   0   0   0   0   1   0   0 \n",
    "graph_output": "13 13\n6 12\n10 2\n1 6\n10 12\n1 13\n9 1\n4 10\n6 13\n10 7\n11 13\n7 1\n13 2\n8 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 43 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   1   1   1   0   1   1   1   1 \n 2 |  1   0   0   0   1   1   1   1   1   1   1 \n 3 |  1   0   0   1   0   0   1   1   1   1   1 \n 4 |  1   0   1   0   1   1   1   1   0   1   0 \n 5 |  1   1   0   1   0   1   1   1   1   1   1 \n 6 |  1   1   0   1   1   0   1   1   1   1   1 \n 7 |  0   1   1   1   1   1   0   1   0   0   1 \n 8 |  1   1   1   1   1   1   1   0   1   0   0 \n 9 |  1   1   1   0   1   1   0   1   0   0   1 \n10 |  1   1   1   1   1   1   0   0   0   0   1 \n11 |  1   1   1   0   1   1   1   0   1   1   0 \n",
    "graph_output": "11 43\n3 9\n11 5\n9 11\n8 2\n2 10\n11 6\n7 6\n2 9\n11 3\n5 7\n9 1\n5 9\n10 6\n2 1\n3 7\n7 8\n3 4\n6 4\n4 7\n4 1\n8 4\n8 9\n8 3\n5 10\n4 10\n1 6\n1 3\n6 5\n11 7\n2 5\n10 1\n11 2\n10 11\n8 5\n2 6\n1 11\n8 6\n7 2\n3 10\n4 5\n1 5\n9 6\n1 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 43 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 3 and vertex 10.\n",
    "graph_output": "12 43\n1 2\n4 6\n11 1\n1 10\n3 9\n9 12\n9 10\n4 11\n3 11\n2 12\n3 1\n9 4\n2 5\n4 3\n12 8\n11 9\n5 1\n12 10\n3 2\n6 1\n9 6\n7 11\n4 1\n2 8\n5 4\n4 8\n2 11\n2 10\n1 9\n6 12\n7 9\n12 11\n4 7\n10 8\n11 8\n12 7\n2 7\n6 3\n12 5\n12 3\n8 7\n12 1\n3 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 61,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 9 (source) to vertex 12 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 21 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   0   0   1   0   0   0   0   0   1   1 \n 2 |  0   0   0   0   1   0   1   1   1   0   0   0 \n 3 |  0   0   0   1   1   0   1   0   1   0   0   0 \n 4 |  0   0   1   0   1   0   0   0   1   1   0   0 \n 5 |  1   1   1   1   0   1   0   0   1   0   1   1 \n 6 |  0   0   0   0   1   0   0   0   0   0   0   1 \n 7 |  0   1   1   0   0   0   0   0   0   0   0   0 \n 8 |  0   1   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   1   1   1   1   0   0   0   0   0   0   1 \n10 |  0   0   0   1   0   0   0   0   0   0   0   0 \n11 |  1   0   0   0   1   0   0   0   0   0   0   1 \n12 |  1   0   0   0   1   1   0   0   1   0   1   0 \n\nCapacity Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   0   0   2   0   0   0   0   0   4   7 \n 2 |  0   0   0   0  10   0   7   1   3   0   0   0 \n 3 |  0   0   0   2   2   0   1   0   5   0   0   0 \n 4 |  0   0   2   0   3   0   0   0   6   6   0   0 \n 5 |  2  10   2   3   0   5   0   0   5   0  10  10 \n 6 |  0   0   0   0   5   0   0   0   0   0   0   7 \n 7 |  0   7   1   0   0   0   0   0   0   0   0   0 \n 8 |  0   1   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   3   5   6   5   0   0   0   0   0   0   3 \n10 |  0   0   0   6   0   0   0   0   0   0   0   0 \n11 |  4   0   0   0  10   0   0   0   0   0   0   4 \n12 |  7   0   0   0  10   7   0   0   3   0   4   0 \n",
    "graph_output": "12 21\n1 5 2\n5 4 3\n5 12 10\n5 11 10\n12 9 3\n9 2 3\n2 8 1\n4 10 6\n2 7 7\n7 3 1\n5 6 5\n9 5 5\n5 2 10\n1 11 4\n1 12 7\n6 12 7\n9 3 5\n3 5 2\n4 3 2\n9 4 6\n12 11 4\n",
    "vertices": [
      9,
      12
    ],
    "answer": 17,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 8 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (6\u00d76):\n\n      1   2   3   4   5   6\n   ------------------------\n 1 |  0   1   1   1   0   1 \n 2 |  1   0   1   1   0   0 \n 3 |  1   1   0   1   0   0 \n 4 |  1   1   1   0   1   0 \n 5 |  0   0   0   1   0   0 \n 6 |  1   0   0   0   0   0 \n",
    "graph_output": "6 8\n6 1\n3 2\n3 4\n3 1\n1 4\n2 4\n4 5\n1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (30\u00d730):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n   ------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   1   0   0   1 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  1   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   1   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 5 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   1   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n15 |  1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n26 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   1   0 \n27 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n30 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "30 29\n1 15\n15 8\n1 20\n1 3\n3 9\n1 27\n3 26\n3 28\n28 22\n15 17\n3 11\n17 12\n28 4\n1 30\n22 14\n26 25\n8 10\n26 16\n14 2\n8 21\n22 23\n9 5\n26 29\n3 19\n5 24\n2 18\n12 6\n9 13\n19 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 15 vertices and 26 edges\n\nEdges (Format: Node Node):\n1 13\n1 15\n1 4\n15 12\n1 5\n15 14\n13 3\n14 6\n5 9\n12 7\n14 11\n3 8\n13 10\n10 2\n7 5\n2 13\n2 7\n11 8\n8 7\n5 13\n1 8\n5 15\n5 14\n12 9\n4 3\n3 10\n",
    "graph_output": "15 26\n1 13\n1 15\n1 4\n15 12\n1 5\n15 14\n13 3\n14 6\n5 9\n12 7\n14 11\n3 8\n13 10\n10 2\n7 5\n2 13\n2 7\n11 8\n8 7\n5 13\n1 8\n5 15\n5 14\n12 9\n4 3\n3 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 102 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 4, 6, 9, 13, 10, 12, 5, 8, 7, 11, 2, 14, 15\nVertex 2: 3, 15, 9, 10, 13, 11, 5, 4, 12, 14, 1, 6, 8\nVertex 3: 1, 2, 5, 9, 13, 12, 11, 15, 10, 6, 7, 14, 8, 4\nVertex 4: 1, 7, 12, 6, 14, 13, 5, 10, 11, 2, 9, 15, 3, 8\nVertex 5: 3, 13, 12, 7, 9, 4, 10, 2, 1, 15, 8, 6, 11\nVertex 6: 1, 4, 7, 14, 3, 9, 13, 8, 15, 5, 12, 2, 11\nVertex 7: 4, 8, 12, 15, 9, 6, 5, 14, 11, 3, 1, 10, 13\nVertex 8: 7, 11, 10, 12, 14, 1, 5, 6, 15, 3, 13, 2, 9, 4\nVertex 9: 3, 14, 12, 7, 1, 5, 2, 15, 11, 6, 13, 4, 8, 10\nVertex 10: 15, 4, 2, 5, 3, 13, 1, 8, 11, 7, 12, 14, 9\nVertex 11: 15, 8, 3, 4, 7, 13, 2, 9, 14, 1, 12, 10, 5, 6\nVertex 12: 5, 4, 7, 9, 3, 1, 8, 2, 15, 6, 11, 14, 13, 10\nVertex 13: 5, 3, 14, 4, 2, 1, 11, 10, 6, 9, 7, 15, 8, 12\nVertex 14: 9, 13, 4, 15, 6, 7, 8, 11, 2, 1, 3, 12, 10\nVertex 15: 2, 10, 11, 7, 14, 3, 9, 5, 6, 12, 4, 8, 13, 1\n",
    "graph_output": "15 102\n1 3\n3 2\n3 5\n5 13\n1 4\n4 7\n1 6\n2 15\n5 12\n3 9\n15 10\n15 11\n7 8\n9 14\n12 4\n7 12\n6 4\n3 13\n15 7\n9 12\n11 8\n3 12\n14 13\n3 11\n9 7\n9 1\n14 4\n15 14\n7 6\n13 4\n7 5\n14 6\n9 5\n4 5\n14 7\n3 15\n4 10\n2 9\n10 2\n13 2\n5 10\n4 11\n11 7\n10 3\n15 9\n13 1\n13 11\n13 10\n1 10\n6 3\n3 7\n11 2\n2 5\n1 12\n1 5\n9 11\n15 5\n8 10\n8 12\n6 9\n6 13\n2 4\n14 8\n8 1\n9 13\n8 5\n8 6\n4 9\n11 14\n6 15\n1 7\n12 2\n5 6\n12 15\n6 12\n1 11\n2 14\n12 11\n2 1\n11 10\n6 2\n1 14\n7 10\n7 13\n15 4\n3 14\n8 15\n8 3\n15 13\n13 8\n2 8\n4 3\n8 9\n14 12\n5 11\n13 12\n6 11\n10 12\n10 14\n4 8\n10 9\n1 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 13 vertices and 17 edges\n\nEdges (Format: Node Node Weight):\n1 7 16\n1 12 95\n7 11 63\n12 3 20\n3 10 44\n12 4 61\n12 8 42\n12 2 58\n4 9 51\n11 5 69\n11 13 88\n12 6 64\n1 4 75\n13 5 27\n10 5 68\n3 11 10\n7 9 53\n",
    "graph_output": "13 17\n1 7 16\n1 12 95\n7 11 63\n12 3 20\n3 10 44\n12 4 61\n12 8 42\n12 2 58\n4 9 51\n11 5 69\n11 13 88\n12 6 64\n1 4 75\n13 5 27\n10 5 68\n3 11 10\n7 9 53\n",
    "vertices": [
      null,
      null
    ],
    "answer": 515,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 11 (source) to vertex 9 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 47 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 10 with a capacity of 1.\nThere is an edge between vertex 10 and vertex 11 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 8 with a capacity of 3.\nThere is an edge between vertex 8 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 3 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 6 with a capacity of 5.\nThere is an edge between vertex 6 and vertex 7 with a capacity of 1.\nThere is an edge between vertex 7 and vertex 2 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 9 with a capacity of 7.\nThere is an edge between vertex 4 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 2 and vertex 11 with a capacity of 6.\nThere is an edge between vertex 10 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 7.\nThere is an edge between vertex 11 and vertex 3 with a capacity of 1.\nThere is an edge between vertex 1 and vertex 3 with a capacity of 4.\nThere is an edge between vertex 11 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 5 and vertex 2 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 11 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 6 with a capacity of 3.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 8 and vertex 9 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 3 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 1 with a capacity of 10.\nThere is an edge between vertex 11 and vertex 8 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 2 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 1 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 4 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 8 and vertex 5 with a capacity of 7.\nThere is an edge between vertex 6 and vertex 10 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 6.\nThere is an edge between vertex 9 and vertex 6 with a capacity of 7.\nThere is an edge between vertex 10 and vertex 8 with a capacity of 8.\nThere is an edge between vertex 10 and vertex 5 with a capacity of 7.\nThere is an edge between vertex 6 and vertex 11 with a capacity of 9.\nThere is an edge between vertex 9 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 9 and vertex 3 with a capacity of 6.\nThere is an edge between vertex 5 and vertex 3 with a capacity of 4.\nThere is an edge between vertex 6 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 8 with a capacity of 8.\n",
    "graph_output": "11 47\n1 10 1\n10 11 3\n1 8 3\n8 4 2\n4 3 3\n1 6 5\n6 7 1\n7 2 2\n1 5 1\n11 9 7\n4 2 10\n2 11 6\n10 7 5\n10 2 10\n9 10 9\n7 8 7\n11 3 1\n1 3 4\n11 7 6\n5 2 2\n5 11 1\n3 6 3\n3 7 5\n8 9 3\n1 9 4\n3 10 5\n1 4 1\n11 1 10\n11 8 8\n1 2 5\n7 1 5\n9 7 3\n4 10 9\n8 5 7\n6 10 2\n5 6 6\n9 6 7\n10 8 8\n10 5 7\n6 11 9\n9 5 2\n3 8 9\n5 7 4\n9 3 6\n5 3 4\n6 4 2\n2 8 8\n",
    "vertices": [
      11,
      9
    ],
    "answer": 41,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 92 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 3, 4, 14, 13, 2, 12, 6, 8, 5\nVertex 2: 15, 12, 8, 9, 14, 11, 4, 1, 10, 5, 3, 7, 13\nVertex 3: 14, 1, 11, 6, 15, 4, 5, 10, 7, 2, 12, 9\nVertex 4: 15, 14, 13, 1, 3, 2, 11, 6, 8, 9, 5, 10, 12\nVertex 5: 6, 15, 12, 3, 9, 8, 2, 10, 11, 14, 4, 7, 1\nVertex 6: 15, 5, 9, 3, 8, 7, 11, 1, 4, 12, 13, 14\nVertex 7: 15, 13, 8, 6, 9, 3, 2, 11, 5, 14, 12\nVertex 8: 2, 6, 7, 12, 14, 15, 9, 5, 4, 11, 10, 1\nVertex 9: 10, 13, 2, 6, 14, 12, 11, 7, 5, 8, 4, 3, 15\nVertex 10: 9, 14, 11, 2, 3, 15, 13, 5, 12, 8, 4\nVertex 11: 1, 14, 3, 15, 2, 10, 9, 6, 13, 12, 4, 5, 8, 7\nVertex 12: 2, 8, 15, 9, 13, 5, 1, 11, 10, 3, 14, 7, 6, 4\nVertex 13: 4, 9, 7, 12, 14, 1, 11, 10, 2, 6\nVertex 14: 3, 15, 4, 11, 2, 10, 9, 8, 1, 13, 5, 7, 12, 6\nVertex 15: 4, 7, 6, 2, 14, 11, 3, 12, 5, 8, 10, 9\n",
    "graph_output": "15 92\n4 15\n15 7\n9 10\n15 6\n11 1\n14 3\n6 5\n15 2\n15 14\n14 4\n14 11\n1 3\n13 4\n2 12\n3 11\n2 8\n9 13\n11 15\n9 2\n2 14\n7 13\n9 6\n6 3\n8 6\n3 15\n7 8\n4 1\n10 14\n7 6\n11 2\n14 9\n10 11\n12 8\n12 15\n12 9\n4 3\n15 5\n14 8\n14 1\n15 8\n12 13\n4 2\n11 9\n14 13\n13 1\n2 1\n11 6\n12 5\n9 7\n10 2\n3 5\n1 12\n13 11\n9 5\n11 12\n3 10\n4 11\n15 10\n13 10\n1 6\n8 9\n8 5\n3 7\n2 5\n6 4\n10 5\n11 5\n14 5\n12 10\n4 8\n8 11\n2 3\n10 8\n1 8\n9 4\n3 12\n7 2\n5 4\n11 7\n7 5\n14 7\n12 14\n13 2\n9 3\n12 7\n6 12\n5 1\n13 6\n14 6\n9 15\n10 4\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 43 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   0   0   1 \n 2 |  1   0   0   1   1   1   1   1   1   1   0 \n 3 |  1   0   0   1   1   1   1   1   0   1   1 \n 4 |  1   1   1   0   1   1   1   0   1   0   1 \n 5 |  1   1   1   1   0   0   1   1   0   0   1 \n 6 |  1   1   1   1   0   0   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1 \n 8 |  1   1   1   0   1   1   1   0   1   0   1 \n 9 |  0   1   0   1   0   1   1   1   0   1   0 \n10 |  0   1   1   0   0   1   1   0   1   0   1 \n11 |  1   0   1   1   1   1   1   1   0   1   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   3   2   6   9   4  10   0   0   4 \n 2 |  1   0   0  10   2   9   5   7   5   3   0 \n 3 |  3   0   0   3   2   9   8   8   0   1   6 \n 4 |  2  10   3   0   6   1   4   0  10   0   1 \n 5 |  6   2   2   6   0   0   8   1   0   0   1 \n 6 |  9   9   9   1   0   0   1   2   5   9   7 \n 7 |  4   5   8   4   8   1   0   1   1  10  10 \n 8 | 10   7   8   0   1   2   1   0   7   0   1 \n 9 |  0   5   0  10   0   5   1   7   0   6   0 \n10 |  0   3   1   0   0   9  10   0   6   0   5 \n11 |  4   0   6   1   1   7  10   1   0   5   0 \n",
    "graph_output": "11 43\n1 7 4\n7 10 10\n10 6 9\n7 8 1\n8 3 8\n8 11 1\n8 2 7\n2 9 5\n2 5 2\n6 4 1\n1 11 4\n6 7 1\n9 7 1\n1 4 2\n6 11 7\n5 3 2\n2 7 5\n9 8 7\n9 4 10\n10 11 5\n10 2 3\n5 11 1\n6 8 2\n11 4 1\n6 3 9\n7 4 4\n3 7 8\n2 6 9\n11 7 10\n10 9 6\n2 1 1\n8 5 1\n6 9 5\n10 3 1\n7 5 8\n3 4 3\n3 11 6\n1 8 10\n2 4 10\n1 5 6\n1 3 3\n6 1 9\n5 4 6\n",
    "vertices": [
      3,
      6
    ],
    "answer": 40,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 31 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 19.\nThere is an edge between vertex 1 and vertex 25.\nThere is an edge between vertex 25 and vertex 28.\nThere is an edge between vertex 25 and vertex 27.\nThere is an edge between vertex 19 and vertex 23.\nThere is an edge between vertex 23 and vertex 17.\nThere is an edge between vertex 28 and vertex 14.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 27 and vertex 7.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 25 and vertex 26.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 7 and vertex 29.\nThere is an edge between vertex 27 and vertex 5.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 23 and vertex 12.\nThere is an edge between vertex 8 and vertex 21.\nThere is an edge between vertex 21 and vertex 30.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 19 and vertex 24.\nThere is an edge between vertex 19 and vertex 22.\nThere is an edge between vertex 25 and vertex 11.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 19 and vertex 20.\nThere is an edge between vertex 29 and vertex 6.\nThere is an edge between vertex 28 and vertex 31.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 19 and vertex 18.\n",
    "graph_output": "31 30\n1 19\n1 25\n25 28\n25 27\n19 23\n23 17\n28 14\n1 16\n16 8\n27 7\n7 2\n25 26\n16 15\n7 29\n27 5\n2 4\n23 12\n8 21\n21 30\n12 13\n19 24\n19 22\n25 11\n16 3\n19 20\n29 6\n28 31\n13 10\n16 9\n19 18\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 17 vertices and 128 edges\n\nEdges (Format: Node Node):\n1 7\n7 15\n7 8\n1 16\n16 14\n14 6\n14 4\n8 2\n14 12\n6 5\n16 9\n2 11\n8 17\n15 10\n11 13\n14 3\n16 13\n5 2\n11 7\n11 4\n6 11\n4 17\n11 17\n3 7\n1 14\n9 17\n3 12\n15 17\n13 6\n15 11\n3 11\n6 15\n4 6\n4 15\n17 3\n4 7\n1 13\n1 6\n4 5\n9 12\n11 14\n9 13\n3 16\n9 10\n15 3\n16 4\n11 10\n10 4\n13 10\n17 14\n11 16\n12 5\n3 6\n1 11\n3 8\n16 8\n15 1\n15 16\n12 8\n8 10\n8 9\n2 14\n4 13\n10 17\n16 17\n1 12\n7 6\n15 14\n5 7\n15 12\n7 13\n9 7\n2 1\n9 14\n5 16\n4 1\n12 4\n9 4\n15 5\n10 6\n13 8\n11 12\n8 6\n5 8\n15 13\n10 14\n15 2\n2 7\n10 16\n16 7\n5 14\n12 7\n6 16\n5 10\n5 1\n12 10\n9 15\n1 9\n2 16\n17 1\n10 2\n5 17\n4 2\n3 4\n11 8\n6 17\n2 6\n13 12\n12 16\n8 14\n5 13\n8 4\n13 2\n5 11\n8 1\n9 2\n6 12\n6 9\n13 3\n5 9\n1 3\n12 17\n17 7\n8 15\n9 3\n2 3\n10 7\n9 11\n",
    "graph_output": "17 128\n1 7\n7 15\n7 8\n1 16\n16 14\n14 6\n14 4\n8 2\n14 12\n6 5\n16 9\n2 11\n8 17\n15 10\n11 13\n14 3\n16 13\n5 2\n11 7\n11 4\n6 11\n4 17\n11 17\n3 7\n1 14\n9 17\n3 12\n15 17\n13 6\n15 11\n3 11\n6 15\n4 6\n4 15\n17 3\n4 7\n1 13\n1 6\n4 5\n9 12\n11 14\n9 13\n3 16\n9 10\n15 3\n16 4\n11 10\n10 4\n13 10\n17 14\n11 16\n12 5\n3 6\n1 11\n3 8\n16 8\n15 1\n15 16\n12 8\n8 10\n8 9\n2 14\n4 13\n10 17\n16 17\n1 12\n7 6\n15 14\n5 7\n15 12\n7 13\n9 7\n2 1\n9 14\n5 16\n4 1\n12 4\n9 4\n15 5\n10 6\n13 8\n11 12\n8 6\n5 8\n15 13\n10 14\n15 2\n2 7\n10 16\n16 7\n5 14\n12 7\n6 16\n5 10\n5 1\n12 10\n9 15\n1 9\n2 16\n17 1\n10 2\n5 17\n4 2\n3 4\n11 8\n6 17\n2 6\n13 12\n12 16\n8 14\n5 13\n8 4\n13 2\n5 11\n8 1\n9 2\n6 12\n6 9\n13 3\n5 9\n1 3\n12 17\n17 7\n8 15\n9 3\n2 3\n10 7\n9 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 11 in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 104 edges\n\nEdges (Format: Node Node Weight):\n1 3 41\n3 10 20\n3 13 91\n1 15 89\n1 6 96\n6 4 92\n10 5 73\n10 7 22\n4 8 54\n4 2 42\n10 16 1\n5 11 98\n3 12 79\n13 9 28\n15 14 51\n1 4 38\n11 15 16\n3 7 14\n2 16 22\n12 13 56\n11 8 78\n11 9 8\n9 6 73\n5 3 62\n14 11 44\n2 5 44\n15 10 86\n7 1 91\n10 4 37\n12 11 20\n9 1 92\n11 13 18\n3 15 56\n5 9 24\n14 7 37\n12 2 2\n1 2 51\n14 1 62\n2 7 78\n6 14 99\n11 10 92\n1 5 27\n2 10 87\n6 12 48\n13 14 34\n7 15 41\n3 14 91\n7 12 29\n11 6 48\n2 6 67\n3 4 8\n7 9 48\n9 10 5\n1 11 33\n11 7 21\n9 16 86\n15 5 73\n7 8 47\n8 2 91\n5 7 36\n15 8 25\n14 12 90\n16 12 26\n1 10 62\n9 15 73\n11 2 68\n12 8 79\n4 13 75\n7 6 98\n9 2 5\n8 1 61\n15 4 76\n16 6 48\n6 10 62\n9 12 58\n13 7 37\n12 5 28\n14 5 32\n13 16 20\n15 12 13\n10 8 39\n14 4 21\n9 3 17\n16 4 45\n13 6 50\n4 9 62\n16 3 10\n11 3 51\n5 6 57\n13 10 24\n12 4 26\n12 10 16\n13 15 23\n14 9 3\n8 14 56\n5 16 11\n8 13 84\n4 7 2\n2 3 57\n14 16 38\n11 4 75\n15 2 44\n11 16 66\n8 3 61\n",
    "graph_output": "16 104\n1 3 41\n3 10 20\n3 13 91\n1 15 89\n1 6 96\n6 4 92\n10 5 73\n10 7 22\n4 8 54\n4 2 42\n10 16 1\n5 11 98\n3 12 79\n13 9 28\n15 14 51\n1 4 38\n11 15 16\n3 7 14\n2 16 22\n12 13 56\n11 8 78\n11 9 8\n9 6 73\n5 3 62\n14 11 44\n2 5 44\n15 10 86\n7 1 91\n10 4 37\n12 11 20\n9 1 92\n11 13 18\n3 15 56\n5 9 24\n14 7 37\n12 2 2\n1 2 51\n14 1 62\n2 7 78\n6 14 99\n11 10 92\n1 5 27\n2 10 87\n6 12 48\n13 14 34\n7 15 41\n3 14 91\n7 12 29\n11 6 48\n2 6 67\n3 4 8\n7 9 48\n9 10 5\n1 11 33\n11 7 21\n9 16 86\n15 5 73\n7 8 47\n8 2 91\n5 7 36\n15 8 25\n14 12 90\n16 12 26\n1 10 62\n9 15 73\n11 2 68\n12 8 79\n4 13 75\n7 6 98\n9 2 5\n8 1 61\n15 4 76\n16 6 48\n6 10 62\n9 12 58\n13 7 37\n12 5 28\n14 5 32\n13 16 20\n15 12 13\n10 8 39\n14 4 21\n9 3 17\n16 4 45\n13 6 50\n4 9 62\n16 3 10\n11 3 51\n5 6 57\n13 10 24\n12 4 26\n12 10 16\n13 15 23\n14 9 3\n8 14 56\n5 16 11\n8 13 84\n4 7 2\n2 3 57\n14 16 38\n11 4 75\n15 2 44\n11 16 66\n8 3 61\n",
    "vertices": [
      4,
      11
    ],
    "answer": 23,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 37 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0  27  40   0  92  24   0   3  49   0  59 \n 2 | 27   0  16   0  24  99  15  27  22   0  76 \n 3 | 40  16   0  62   0   0  34   0  24  10  34 \n 4 |  0   0  62   0  26  57   0  37  81  20  18 \n 5 | 92  24   0  26   0  18   0   0  40   0   0 \n 6 | 24  99   0  57  18   0  99   0   0   0   0 \n 7 |  0  15  34   0   0  99   0  23   0  99   5 \n 8 |  3  27   0  37   0   0  23   0  11  26  15 \n 9 | 49  22  24  81  40   0   0  11   0  75  25 \n10 |  0   0  10  20   0   0  99  26  75   0  62 \n11 | 59  76  34  18   0   0   5  15  25  62   0 \n",
    "graph_output": "11 37\n1 9 49\n9 4 81\n4 6 57\n9 8 11\n1 11 59\n6 2 99\n11 10 62\n4 5 26\n9 3 24\n3 7 34\n9 5 40\n2 5 24\n7 11 5\n1 8 3\n10 9 75\n8 10 26\n2 9 22\n10 4 20\n4 8 37\n6 5 18\n7 10 99\n11 8 15\n1 2 27\n4 11 18\n7 8 23\n2 3 16\n7 2 15\n8 2 27\n4 3 62\n10 3 10\n3 1 40\n6 7 99\n11 2 76\n5 1 92\n3 11 34\n6 1 24\n9 11 25\n",
    "vertices": [
      null,
      null
    ],
    "answer": 137,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 10 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 4, 8\nVertex 2: 8, 3\nVertex 3: 2, 5\nVertex 4: 1, 7\nVertex 5: 10, 3\nVertex 6: 1, 10\nVertex 7: 4, 8\nVertex 8: 2, 1, 7\nVertex 9: No connections\nVertex 10: 5, 6\nVertex 11: No connections\n",
    "graph_output": "11 10\n1 6\n8 2\n4 1\n4 7\n5 10\n2 3\n3 5\n1 8\n6 10\n7 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 53 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 8 (weight=78), 9 (weight=46), 11 (weight=17), 12 (weight=100), 10 (weight=18), 13 (weight=15), 4 (weight=7), 7 (weight=30)\nVertex 2: 3 (weight=92), 10 (weight=73), 7 (weight=2), 6 (weight=95), 12 (weight=2), 8 (weight=2), 5 (weight=65), 4 (weight=76), 9 (weight=67)\nVertex 3: 9 (weight=66), 12 (weight=55), 2 (weight=92), 4 (weight=84), 5 (weight=82), 13 (weight=86), 7 (weight=18)\nVertex 4: 3 (weight=84), 7 (weight=91), 6 (weight=64), 2 (weight=76), 13 (weight=48), 10 (weight=56), 1 (weight=7), 11 (weight=4)\nVertex 5: 8 (weight=38), 7 (weight=77), 3 (weight=82), 2 (weight=65), 12 (weight=62), 9 (weight=38), 11 (weight=74)\nVertex 6: 11 (weight=7), 9 (weight=98), 2 (weight=95), 4 (weight=64), 7 (weight=20), 8 (weight=92), 10 (weight=28)\nVertex 7: 5 (weight=77), 2 (weight=2), 4 (weight=91), 3 (weight=18), 12 (weight=60), 6 (weight=20), 13 (weight=24), 8 (weight=15), 9 (weight=23), 1 (weight=30)\nVertex 8: 1 (weight=78), 5 (weight=38), 13 (weight=63), 11 (weight=40), 12 (weight=74), 2 (weight=2), 6 (weight=92), 7 (weight=15), 10 (weight=68)\nVertex 9: 1 (weight=46), 3 (weight=66), 6 (weight=98), 5 (weight=38), 7 (weight=23), 10 (weight=3), 2 (weight=67)\nVertex 10: 12 (weight=17), 2 (weight=73), 13 (weight=71), 1 (weight=18), 11 (weight=53), 9 (weight=3), 4 (weight=56), 6 (weight=28), 8 (weight=68)\nVertex 11: 1 (weight=17), 6 (weight=7), 12 (weight=73), 8 (weight=40), 10 (weight=53), 13 (weight=3), 5 (weight=74), 4 (weight=4)\nVertex 12: 3 (weight=55), 10 (weight=17), 11 (weight=73), 1 (weight=100), 8 (weight=74), 13 (weight=21), 2 (weight=2), 7 (weight=60), 5 (weight=62)\nVertex 13: 8 (weight=63), 10 (weight=71), 12 (weight=21), 3 (weight=86), 1 (weight=15), 7 (weight=24), 4 (weight=48), 11 (weight=3)\n",
    "graph_output": "13 53\n1 8 78\n1 9 46\n8 5 38\n8 13 63\n1 11 17\n5 7 77\n9 3 66\n3 12 55\n12 10 17\n3 2 92\n11 6 7\n3 4 84\n2 10 73\n3 5 82\n11 12 73\n6 9 98\n1 12 100\n11 8 40\n7 2 2\n13 10 71\n6 2 95\n7 4 91\n12 8 74\n1 10 18\n12 13 21\n6 4 64\n3 13 86\n3 7 18\n12 2 2\n8 2 2\n13 1 15\n7 12 60\n7 6 20\n5 2 65\n8 6 92\n4 2 76\n5 12 62\n10 11 53\n13 7 24\n8 7 15\n5 9 38\n13 4 48\n7 9 23\n9 10 3\n11 13 3\n5 11 74\n4 10 56\n4 1 7\n4 11 4\n10 6 28\n1 7 30\n8 10 68\n2 9 67\n",
    "vertices": [
      null,
      null
    ],
    "answer": 123,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 6 in the weighted graph.\n\nUndirected, Weighted Graph with 15 vertices and 99 edges\n\nEdges (Format: Node Node Weight):\n1 12 19\n12 9 19\n9 5 51\n1 11 99\n1 14 61\n11 7 33\n14 13 84\n11 6 30\n14 2 5\n6 4 23\n14 10 48\n11 8 90\n12 15 41\n8 3 86\n5 6 33\n14 15 12\n9 7 6\n2 8 74\n3 4 40\n7 10 53\n4 9 72\n1 2 63\n8 6 73\n4 11 75\n8 9 30\n7 15 15\n6 7 9\n15 11 83\n12 11 44\n15 6 5\n8 14 12\n2 11 100\n3 2 55\n6 14 18\n13 8 41\n7 12 54\n2 15 64\n7 4 92\n1 8 54\n10 9 2\n1 3 22\n6 1 93\n7 5 33\n9 15 44\n12 5 7\n14 3 74\n7 3 77\n12 10 80\n11 5 79\n13 9 49\n12 8 45\n4 14 41\n13 10 13\n3 10 3\n12 2 33\n9 2 41\n1 5 17\n1 15 62\n10 1 8\n2 5 7\n10 5 42\n11 14 73\n14 5 28\n4 2 20\n13 1 11\n12 14 83\n6 13 5\n11 9 21\n15 5 95\n7 2 43\n10 11 6\n2 13 84\n15 4 39\n6 9 6\n7 14 85\n10 4 88\n6 12 2\n5 8 48\n2 10 69\n4 12 68\n1 4 23\n8 4 58\n13 12 87\n15 3 28\n13 3 61\n14 9 50\n13 5 84\n13 4 30\n1 9 31\n7 1 46\n11 13 21\n3 12 35\n15 13 8\n5 4 59\n7 8 23\n2 6 29\n3 11 21\n15 8 47\n8 10 67\n",
    "graph_output": "15 99\n1 12 19\n12 9 19\n9 5 51\n1 11 99\n1 14 61\n11 7 33\n14 13 84\n11 6 30\n14 2 5\n6 4 23\n14 10 48\n11 8 90\n12 15 41\n8 3 86\n5 6 33\n14 15 12\n9 7 6\n2 8 74\n3 4 40\n7 10 53\n4 9 72\n1 2 63\n8 6 73\n4 11 75\n8 9 30\n7 15 15\n6 7 9\n15 11 83\n12 11 44\n15 6 5\n8 14 12\n2 11 100\n3 2 55\n6 14 18\n13 8 41\n7 12 54\n2 15 64\n7 4 92\n1 8 54\n10 9 2\n1 3 22\n6 1 93\n7 5 33\n9 15 44\n12 5 7\n14 3 74\n7 3 77\n12 10 80\n11 5 79\n13 9 49\n12 8 45\n4 14 41\n13 10 13\n3 10 3\n12 2 33\n9 2 41\n1 5 17\n1 15 62\n10 1 8\n2 5 7\n10 5 42\n11 14 73\n14 5 28\n4 2 20\n13 1 11\n12 14 83\n6 13 5\n11 9 21\n15 5 95\n7 2 43\n10 11 6\n2 13 84\n15 4 39\n6 9 6\n7 14 85\n10 4 88\n6 12 2\n5 8 48\n2 10 69\n4 12 68\n1 4 23\n8 4 58\n13 12 87\n15 3 28\n13 3 61\n14 9 50\n13 5 84\n13 4 30\n1 9 31\n7 1 46\n11 13 21\n3 12 35\n15 13 8\n5 4 59\n7 8 23\n2 6 29\n3 11 21\n15 8 47\n8 10 67\n",
    "vertices": [
      8,
      6
    ],
    "answer": 29,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 6 (source) to vertex 8 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 17 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7 with a weight of 58 and a capacity of 4.\nThere is an edge between vertex 7 and vertex 8 with a weight of 67 and a capacity of 6.\nThere is an edge between vertex 8 and vertex 9 with a weight of 44 and a capacity of 5.\nThere is an edge between vertex 1 and vertex 5 with a weight of 87 and a capacity of 4.\nThere is an edge between vertex 5 and vertex 4 with a weight of 26 and a capacity of 7.\nThere is an edge between vertex 4 and vertex 3 with a weight of 64 and a capacity of 3.\nThere is an edge between vertex 3 and vertex 2 with a weight of 49 and a capacity of 2.\nThere is an edge between vertex 7 and vertex 6 with a weight of 50 and a capacity of 4.\nThere is an edge between vertex 5 and vertex 8 with a weight of 53 and a capacity of 10.\nThere is an edge between vertex 3 and vertex 7 with a weight of 66 and a capacity of 9.\nThere is an edge between vertex 2 and vertex 7 with a weight of 47 and a capacity of 5.\nThere is an edge between vertex 9 and vertex 2 with a weight of 54 and a capacity of 6.\nThere is an edge between vertex 6 and vertex 4 with a weight of 82 and a capacity of 6.\nThere is an edge between vertex 2 and vertex 1 with a weight of 14 and a capacity of 1.\nThere is an edge between vertex 3 and vertex 5 with a weight of 30 and a capacity of 6.\nThere is an edge between vertex 9 and vertex 7 with a weight of 77 and a capacity of 1.\nThere is an edge between vertex 1 and vertex 3 with a weight of 12 and a capacity of 5.\n",
    "graph_output": "9 17\n1 7 58 4\n7 8 67 6\n8 9 44 5\n1 5 87 4\n5 4 26 7\n4 3 64 3\n3 2 49 2\n7 6 50 4\n5 8 53 10\n3 7 66 9\n2 7 47 5\n9 2 54 6\n6 4 82 6\n2 1 14 1\n3 5 30 6\n9 7 77 1\n1 3 12 5\n",
    "vertices": [
      6,
      8
    ],
    "answer": 1434,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nUndirected Graph with 31 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 4\n1 12\n1 9\n12 22\n12 6\n22 27\n6 8\n9 31\n9 19\n19 20\n1 25\n27 26\n31 14\n31 2\n4 28\n1 11\n14 21\n9 15\n26 30\n12 3\n9 18\n8 24\n26 13\n20 23\n2 7\n26 10\n25 16\n26 5\n1 29\n23 17\n",
    "graph_output": "31 30\n1 4\n1 12\n1 9\n12 22\n12 6\n22 27\n6 8\n9 31\n9 19\n19 20\n1 25\n27 26\n31 14\n31 2\n4 28\n1 11\n14 21\n9 15\n26 30\n12 3\n9 18\n8 24\n26 13\n20 23\n2 7\n26 10\n25 16\n26 5\n1 29\n23 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 17 and 21 in the given tree, with node 1 as the root.\n\nUndirected Graph with 31 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 30\n30 29\n1 11\n1 4\n1 10\n29 19\n30 25\n4 8\n1 17\n25 28\n10 6\n10 13\n4 26\n6 15\n19 31\n1 7\n7 18\n17 21\n6 14\n28 3\n7 5\n6 20\n14 16\n19 2\n25 9\n13 27\n25 12\n6 24\n24 23\n9 22\n",
    "graph_output": "31 30\n1 30\n30 29\n1 11\n1 4\n1 10\n29 19\n30 25\n4 8\n1 17\n25 28\n10 6\n10 13\n4 26\n6 15\n19 31\n1 7\n7 18\n17 21\n6 14\n28 3\n7 5\n6 20\n14 16\n19 2\n25 9\n13 27\n25 12\n6 24\n24 23\n9 22\n",
    "vertices": [
      17,
      21
    ],
    "answer": 17,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 3 and vertex 24.\nThere is an edge between vertex 24 and vertex 20.\nThere is an edge between vertex 24 and vertex 21.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 24 and vertex 8.\nThere is an edge between vertex 15 and vertex 27.\nThere is an edge between vertex 27 and vertex 6.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 8 and vertex 23.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 6 and vertex 28.\nThere is an edge between vertex 6 and vertex 26.\nThere is an edge between vertex 26 and vertex 19.\nThere is an edge between vertex 28 and vertex 9.\nThere is an edge between vertex 17 and vertex 29.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 20 and vertex 5.\nThere is an edge between vertex 11 and vertex 22.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 20 and vertex 18.\nThere is an edge between vertex 7 and vertex 25.\nThere is an edge between vertex 28 and vertex 12.\nThere is an edge between vertex 14 and vertex 2.\n",
    "graph_output": "29 28\n1 3\n3 24\n24 20\n24 21\n1 4\n4 15\n15 17\n24 8\n15 27\n27 6\n4 13\n3 14\n3 7\n8 23\n1 11\n6 28\n6 26\n26 19\n28 9\n17 29\n8 10\n20 5\n11 22\n14 16\n20 18\n7 25\n28 12\n14 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 17,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 9 (source) to vertex 7 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 10 vertices and 38 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 9 92 3\n1 4 64 7\n1 10 10 4\n9 7 34 6\n4 6 52 9\n10 5 72 9\n4 8 16 4\n6 2 8 7\n1 3 50 3\n9 8 3 4\n5 7 35 4\n4 5 67 4\n9 3 28 2\n10 9 15 1\n1 5 71 1\n3 7 98 4\n2 1 70 9\n3 6 28 9\n6 10 65 4\n8 10 14 7\n2 3 32 10\n6 8 58 8\n3 4 85 4\n10 2 55 2\n8 5 13 8\n2 4 7 7\n8 1 29 3\n1 7 70 7\n10 4 35 2\n8 7 61 3\n7 2 29 2\n7 4 48 4\n6 9 41 10\n10 3 30 3\n5 3 40 4\n3 8 64 10\n6 7 26 8\n9 5 95 5\n",
    "graph_output": "10 38\n1 9 92 3\n1 4 64 7\n1 10 10 4\n9 7 34 6\n4 6 52 9\n10 5 72 9\n4 8 16 4\n6 2 8 7\n1 3 50 3\n9 8 3 4\n5 7 35 4\n4 5 67 4\n9 3 28 2\n10 9 15 1\n1 5 71 1\n3 7 98 4\n2 1 70 9\n3 6 28 9\n6 10 65 4\n8 10 14 7\n2 3 32 10\n6 8 58 8\n3 4 85 4\n10 2 55 2\n8 5 13 8\n2 4 7 7\n8 1 29 3\n1 7 70 7\n10 4 35 2\n8 7 61 3\n7 2 29 2\n7 4 48 4\n6 9 41 10\n10 3 30 3\n5 3 40 4\n3 8 64 10\n6 7 26 8\n9 5 95 5\n",
    "vertices": [
      9,
      7
    ],
    "answer": 2658,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 53 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 12 (weight=47), 9 (weight=64), 6 (weight=24), 7 (weight=18), 10 (weight=34), 4 (weight=62), 8 (weight=48), 3 (weight=100), 5 (weight=23), 2 (weight=65)\nVertex 2: 6 (weight=65), 7 (weight=23), 4 (weight=74), 9 (weight=36), 3 (weight=43), 5 (weight=53), 1 (weight=65)\nVertex 3: 7 (weight=88), 10 (weight=23), 2 (weight=43), 11 (weight=56), 4 (weight=16), 1 (weight=100), 9 (weight=15), 12 (weight=83), 8 (weight=97)\nVertex 4: 8 (weight=30), 2 (weight=74), 9 (weight=77), 5 (weight=22), 1 (weight=62), 3 (weight=16), 7 (weight=23), 11 (weight=100)\nVertex 5: 6 (weight=65), 12 (weight=30), 7 (weight=44), 4 (weight=22), 8 (weight=27), 9 (weight=49), 10 (weight=61), 2 (weight=53), 11 (weight=12), 1 (weight=23)\nVertex 6: 12 (weight=75), 2 (weight=65), 5 (weight=65), 1 (weight=24), 11 (weight=15), 8 (weight=87), 9 (weight=47), 7 (weight=95)\nVertex 7: 2 (weight=23), 10 (weight=21), 8 (weight=34), 11 (weight=1), 3 (weight=88), 1 (weight=18), 12 (weight=81), 5 (weight=44), 4 (weight=23), 6 (weight=95), 9 (weight=2)\nVertex 8: 7 (weight=34), 4 (weight=30), 9 (weight=69), 6 (weight=87), 5 (weight=27), 10 (weight=60), 11 (weight=89), 12 (weight=48), 1 (weight=48), 3 (weight=97)\nVertex 9: 10 (weight=69), 1 (weight=64), 8 (weight=69), 2 (weight=36), 4 (weight=77), 5 (weight=49), 3 (weight=15), 6 (weight=47), 7 (weight=2)\nVertex 10: 7 (weight=21), 9 (weight=69), 3 (weight=23), 12 (weight=4), 1 (weight=34), 11 (weight=97), 8 (weight=60), 5 (weight=61)\nVertex 11: 7 (weight=1), 12 (weight=100), 6 (weight=15), 10 (weight=97), 8 (weight=89), 3 (weight=56), 4 (weight=100), 5 (weight=12)\nVertex 12: 1 (weight=47), 6 (weight=75), 5 (weight=30), 11 (weight=100), 7 (weight=81), 10 (weight=4), 8 (weight=48), 3 (weight=83)\n",
    "graph_output": "12 53\n1 12 47\n12 6 75\n6 2 65\n2 7 23\n7 10 21\n6 5 65\n7 8 34\n8 4 30\n10 9 69\n7 11 1\n7 3 88\n5 12 30\n1 9 64\n3 10 23\n1 6 24\n9 8 69\n4 2 74\n11 12 100\n7 1 18\n2 9 36\n11 6 15\n7 12 81\n4 9 77\n8 6 87\n12 10 4\n10 1 34\n7 5 44\n10 11 97\n4 5 22\n4 1 62\n8 5 27\n8 10 60\n11 8 89\n5 9 49\n2 3 43\n12 8 48\n10 5 61\n3 11 56\n3 4 16\n4 7 23\n8 1 48\n3 1 100\n9 3 15\n9 6 47\n4 11 100\n12 3 83\n5 2 53\n5 11 12\n7 6 95\n1 5 23\n2 1 65\n8 3 97\n9 7 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 156,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 15 vertices and 105 edges\n\nEdges (Format: Node Node):\n9 2\n11 15\n7 5\n11 2\n2 3\n7 4\n7 3\n10 11\n1 4\n13 5\n9 5\n15 1\n15 7\n13 3\n3 15\n13 2\n10 14\n9 6\n12 2\n12 14\n15 4\n8 10\n2 10\n6 14\n3 10\n4 8\n15 14\n9 1\n10 7\n1 5\n10 4\n6 12\n15 9\n7 8\n5 11\n14 8\n11 3\n9 8\n6 7\n9 13\n12 8\n6 4\n9 4\n3 5\n13 4\n1 13\n6 1\n4 5\n11 7\n7 9\n1 2\n9 12\n2 4\n14 11\n6 8\n4 14\n9 10\n10 1\n13 6\n9 14\n13 11\n3 4\n3 6\n12 3\n6 10\n14 2\n13 15\n14 3\n7 13\n10 13\n6 11\n12 7\n14 1\n12 1\n8 15\n9 11\n5 10\n7 14\n11 4\n3 8\n13 14\n10 15\n8 1\n8 5\n15 6\n7 1\n12 13\n11 1\n11 12\n1 3\n2 5\n10 12\n5 14\n8 11\n2 15\n2 7\n5 6\n12 15\n9 3\n5 12\n6 2\n8 13\n8 2\n12 4\n5 15\n",
    "graph_output": "15 105\n9 2\n11 15\n7 5\n11 2\n2 3\n7 4\n7 3\n10 11\n1 4\n13 5\n9 5\n15 1\n15 7\n13 3\n3 15\n13 2\n10 14\n9 6\n12 2\n12 14\n15 4\n8 10\n2 10\n6 14\n3 10\n4 8\n15 14\n9 1\n10 7\n1 5\n10 4\n6 12\n15 9\n7 8\n5 11\n14 8\n11 3\n9 8\n6 7\n9 13\n12 8\n6 4\n9 4\n3 5\n13 4\n1 13\n6 1\n4 5\n11 7\n7 9\n1 2\n9 12\n2 4\n14 11\n6 8\n4 14\n9 10\n10 1\n13 6\n9 14\n13 11\n3 4\n3 6\n12 3\n6 10\n14 2\n13 15\n14 3\n7 13\n10 13\n6 11\n12 7\n14 1\n12 1\n8 15\n9 11\n5 10\n7 14\n11 4\n3 8\n13 14\n10 15\n8 1\n8 5\n15 6\n7 1\n12 13\n11 1\n11 12\n1 3\n2 5\n10 12\n5 14\n8 11\n2 15\n2 7\n5 6\n12 15\n9 3\n5 12\n6 2\n8 13\n8 2\n12 4\n5 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 18 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 9 (weight=33), 5 (weight=15), 3 (weight=16), 12 (weight=97)\nVertex 2: 9 (weight=87), 13 (weight=10), 7 (weight=59)\nVertex 3: 1 (weight=16), 12 (weight=97)\nVertex 4: 11 (weight=51), 7 (weight=55)\nVertex 5: 1 (weight=15), 8 (weight=57), 14 (weight=39)\nVertex 6: 7 (weight=60)\nVertex 7: 11 (weight=30), 6 (weight=60), 2 (weight=59), 4 (weight=55)\nVertex 8: 5 (weight=57), 10 (weight=37), 12 (weight=85)\nVertex 9: 1 (weight=33), 2 (weight=87), 11 (weight=7)\nVertex 10: 8 (weight=37), 14 (weight=79)\nVertex 11: 9 (weight=7), 7 (weight=30), 4 (weight=51)\nVertex 12: 8 (weight=85), 1 (weight=97), 3 (weight=97)\nVertex 13: 2 (weight=10)\nVertex 14: 5 (weight=39), 10 (weight=79)\n",
    "graph_output": "14 18\n1 9 33\n1 5 15\n9 2 87\n1 3 16\n5 8 57\n2 13 10\n8 10 37\n9 11 7\n11 7 30\n5 14 39\n7 6 60\n11 4 51\n8 12 85\n14 10 79\n1 12 97\n12 3 97\n7 2 59\n7 4 55\n",
    "vertices": [
      null,
      null
    ],
    "answer": 499,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 18 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 15, 7, 12\nVertex 2: 6, 15\nVertex 3: 12, 7, 13\nVertex 4: 11\nVertex 5: 13, 7\nVertex 6: 12, 2, 13\nVertex 7: 1, 3, 5\nVertex 8: 1\nVertex 9: 14, 13\nVertex 10: No connections\nVertex 11: 4, 14\nVertex 12: 3, 6, 1, 15\nVertex 13: 5, 9, 6, 3\nVertex 14: 9, 11\nVertex 15: 1, 12, 2\n",
    "graph_output": "15 18\n13 5\n8 1\n14 9\n12 3\n12 6\n15 1\n1 7\n3 7\n2 6\n4 11\n1 12\n11 14\n12 15\n5 7\n15 2\n13 9\n13 6\n3 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 11 vertices and 44 edges\n\nEdges (Format: Node Node Weight):\n1 5 68\n1 4 84\n1 8 49\n8 7 94\n8 9 3\n4 2 68\n4 6 6\n4 10 98\n10 11 25\n9 3 59\n3 10 31\n1 3 94\n4 7 21\n11 4 96\n1 2 45\n2 10 56\n6 8 43\n11 3 5\n1 6 95\n11 1 4\n3 4 99\n2 11 99\n11 7 54\n6 7 63\n10 5 85\n11 8 33\n8 4 17\n10 9 20\n8 2 80\n5 7 98\n9 5 58\n11 5 100\n2 6 54\n7 3 62\n7 1 71\n7 2 20\n4 5 97\n1 9 20\n11 9 97\n8 5 48\n5 6 71\n10 1 52\n2 3 50\n5 3 3\n",
    "graph_output": "11 44\n1 5 68\n1 4 84\n1 8 49\n8 7 94\n8 9 3\n4 2 68\n4 6 6\n4 10 98\n10 11 25\n9 3 59\n3 10 31\n1 3 94\n4 7 21\n11 4 96\n1 2 45\n2 10 56\n6 8 43\n11 3 5\n1 6 95\n11 1 4\n3 4 99\n2 11 99\n11 7 54\n6 7 63\n10 5 85\n11 8 33\n8 4 17\n10 9 20\n8 2 80\n5 7 98\n9 5 58\n11 5 100\n2 6 54\n7 3 62\n7 1 71\n7 2 20\n4 5 97\n1 9 20\n11 9 97\n8 5 48\n5 6 71\n10 1 52\n2 3 50\n5 3 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 124,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 18 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 11, 7\nVertex 2: 9\nVertex 3: 11, 14\nVertex 4: 12\nVertex 5: 9\nVertex 6: 9\nVertex 7: 1, 11\nVertex 8: 11\nVertex 9: 11, 2, 6, 14, 5\nVertex 10: 12\nVertex 11: 1, 13, 9, 12, 3, 8, 16, 7\nVertex 12: 11, 10, 4\nVertex 13: 11, 16\nVertex 14: 9, 3\nVertex 15: 1\nVertex 16: 13, 11\n",
    "graph_output": "16 18\n1 15\n1 11\n11 13\n11 9\n9 2\n11 12\n9 6\n9 14\n9 5\n11 3\n12 10\n12 4\n13 16\n11 8\n1 7\n16 11\n14 3\n7 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 27 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   0   0   0   0   1   1   0   0   0   0   0   0   1 \n 2 |  1   0   0   0   0   0   0   0   0   0   0   1   0   1   1   0 \n 3 |  1   0   0   0   0   1   0   0   0   1   0   0   0   1   0   1 \n 4 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   1   0   0   0   0   0   0   1   0   1   0 \n 6 |  0   0   1   1   1   0   0   0   0   0   1   0   0   0   0   1 \n 7 |  0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0 \n 8 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n10 |  0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   1 \n11 |  0   0   0   0   0   1   1   0   0   0   0   0   0   0   1   1 \n12 |  0   1   0   0   0   0   0   0   0   1   0   0   1   0   1   0 \n13 |  0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0 \n14 |  0   1   1   0   0   0   1   0   1   0   0   0   0   0   0   0 \n15 |  0   1   0   0   1   0   0   0   0   0   1   1   0   0   0   0 \n16 |  1   0   1   0   0   1   0   0   0   1   1   0   0   0   0   0 \n",
    "graph_output": "16 27\n1 3\n1 8\n3 14\n14 2\n14 7\n3 10\n7 11\n2 15\n3 6\n6 5\n14 9\n10 12\n12 13\n10 16\n6 4\n16 11\n2 12\n15 12\n1 9\n11 6\n13 5\n1 16\n16 6\n16 3\n11 15\n1 2\n5 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 7 vertices and 13 edges\n\nEdges (Format: Node Node):\n1 2\n2 3\n2 4\n3 5\n4 7\n4 6\n1 5\n4 1\n7 2\n3 7\n3 4\n7 6\n5 6\n",
    "graph_output": "7 13\n1 2\n2 3\n2 4\n3 5\n4 7\n4 6\n1 5\n4 1\n7 2\n3 7\n3 4\n7 6\n5 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 644,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 17 vertices and 128 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 16, 14, 13, 6, 11, 15, 12, 2, 4, 5, 9, 17, 8, 3\nVertex 2: 8, 11, 5, 14, 1, 15, 7, 16, 10, 4, 6, 13, 9, 3\nVertex 3: 14, 7, 12, 11, 17, 16, 15, 6, 8, 4, 13, 1, 9, 2\nVertex 4: 14, 11, 17, 6, 15, 7, 5, 16, 10, 13, 1, 12, 9, 2, 3, 8\nVertex 5: 6, 2, 4, 12, 7, 16, 15, 8, 14, 10, 1, 17, 13, 11, 9\nVertex 6: 14, 5, 11, 13, 15, 4, 1, 3, 7, 10, 8, 16, 17, 2, 12, 9\nVertex 7: 1, 15, 8, 11, 3, 4, 6, 5, 13, 9, 2, 16, 12, 17, 10\nVertex 8: 7, 2, 17, 3, 16, 12, 10, 9, 13, 6, 5, 11, 14, 4, 1, 15\nVertex 9: 16, 17, 12, 13, 10, 8, 7, 14, 4, 15, 1, 2, 6, 5, 3, 11\nVertex 10: 15, 9, 11, 4, 13, 8, 17, 6, 14, 16, 5, 12, 2, 7\nVertex 11: 2, 13, 7, 4, 6, 17, 15, 3, 14, 10, 16, 1, 12, 8, 5, 9\nVertex 12: 14, 3, 9, 5, 8, 1, 15, 4, 11, 7, 10, 13, 16, 6, 17\nVertex 13: 11, 16, 6, 1, 9, 10, 4, 7, 8, 15, 12, 5, 2, 3\nVertex 14: 16, 6, 4, 12, 3, 1, 11, 17, 2, 15, 9, 10, 5, 8\nVertex 15: 7, 10, 17, 11, 6, 4, 3, 1, 16, 14, 12, 5, 13, 2, 9, 8\nVertex 16: 1, 14, 9, 13, 3, 4, 11, 8, 15, 17, 5, 10, 7, 6, 2, 12\nVertex 17: 8, 4, 11, 9, 15, 3, 14, 10, 16, 1, 5, 6, 12, 7\n",
    "graph_output": "17 128\n1 7\n7 15\n7 8\n1 16\n16 14\n14 6\n14 4\n8 2\n14 12\n6 5\n16 9\n2 11\n8 17\n15 10\n11 13\n14 3\n16 13\n5 2\n11 7\n11 4\n6 11\n4 17\n11 17\n3 7\n1 14\n9 17\n3 12\n15 17\n13 6\n15 11\n3 11\n6 15\n4 6\n4 15\n17 3\n4 7\n1 13\n1 6\n4 5\n9 12\n11 14\n9 13\n3 16\n9 10\n15 3\n16 4\n11 10\n10 4\n13 10\n17 14\n11 16\n12 5\n3 6\n1 11\n3 8\n16 8\n15 1\n15 16\n12 8\n8 10\n8 9\n2 14\n4 13\n10 17\n16 17\n1 12\n7 6\n15 14\n5 7\n15 12\n7 13\n9 7\n2 1\n9 14\n5 16\n4 1\n12 4\n9 4\n15 5\n10 6\n13 8\n11 12\n8 6\n5 8\n15 13\n10 14\n15 2\n2 7\n10 16\n16 7\n5 14\n12 7\n6 16\n5 10\n5 1\n12 10\n9 15\n1 9\n2 16\n17 1\n10 2\n5 17\n4 2\n3 4\n11 8\n6 17\n2 6\n13 12\n12 16\n8 14\n5 13\n8 4\n13 2\n5 11\n8 1\n9 2\n6 12\n6 9\n13 3\n5 9\n1 3\n12 17\n17 7\n8 15\n9 3\n2 3\n10 7\n9 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 16 and 25 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 29.\nThere is an edge between vertex 29 and vertex 24.\nThere is an edge between vertex 29 and vertex 26.\nThere is an edge between vertex 26 and vertex 3.\nThere is an edge between vertex 26 and vertex 22.\nThere is an edge between vertex 22 and vertex 10.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 24 and vertex 12.\nThere is an edge between vertex 5 and vertex 27.\nThere is an edge between vertex 26 and vertex 20.\nThere is an edge between vertex 22 and vertex 16.\nThere is an edge between vertex 20 and vertex 7.\nThere is an edge between vertex 27 and vertex 15.\nThere is an edge between vertex 29 and vertex 23.\nThere is an edge between vertex 16 and vertex 25.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 22 and vertex 2.\nThere is an edge between vertex 27 and vertex 9.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 25 and vertex 18.\nThere is an edge between vertex 25 and vertex 17.\nThere is an edge between vertex 29 and vertex 8.\nThere is an edge between vertex 2 and vertex 28.\nThere is an edge between vertex 13 and vertex 19.\nThere is an edge between vertex 5 and vertex 21.\nThere is an edge between vertex 11 and vertex 4.\n",
    "graph_output": "29 28\n1 29\n29 24\n29 26\n26 3\n26 22\n22 10\n10 5\n10 13\n24 12\n5 27\n26 20\n22 16\n20 7\n27 15\n29 23\n16 25\n10 6\n22 2\n27 9\n2 14\n15 11\n25 18\n25 17\n29 8\n2 28\n13 19\n5 21\n11 4\n",
    "vertices": [
      16,
      25
    ],
    "answer": 16,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 93 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 2 and vertex 14.\n",
    "graph_output": "15 93\n7 8\n4 13\n8 2\n3 12\n2 9\n9 14\n4 12\n12 2\n5 12\n11 4\n6 7\n1 3\n10 14\n3 7\n2 10\n6 14\n3 15\n7 11\n6 12\n8 12\n6 1\n13 9\n10 6\n3 11\n4 5\n14 15\n9 11\n2 1\n9 1\n14 13\n3 4\n7 14\n11 15\n3 8\n8 11\n15 8\n15 5\n14 8\n7 13\n9 3\n11 12\n5 6\n5 2\n6 11\n11 13\n13 8\n3 13\n13 15\n5 11\n10 11\n10 13\n5 7\n9 15\n4 2\n3 2\n5 9\n8 6\n6 13\n12 1\n15 1\n7 2\n10 8\n3 5\n15 4\n5 1\n8 9\n5 14\n7 9\n6 2\n12 14\n12 15\n6 9\n11 14\n1 13\n14 1\n7 12\n7 4\n2 15\n7 10\n12 10\n14 4\n4 10\n10 9\n3 14\n6 4\n1 10\n15 10\n3 6\n8 4\n1 7\n2 11\n15 7\n2 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 44 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 10, 3, 5, 7, 2, 6, 9\nVertex 2: 4, 3, 6, 10, 8, 9, 1, 7, 11\nVertex 3: 11, 5, 2, 6, 1, 7, 10, 8\nVertex 4: 2, 8, 5, 7, 6, 9, 10\nVertex 5: 3, 11, 1, 4, 10, 7, 9\nVertex 6: 7, 8, 3, 2, 9, 10, 11, 4, 1\nVertex 7: 6, 8, 3, 9, 1, 4, 11, 2, 5, 10\nVertex 8: 9, 6, 7, 4, 11, 2, 3\nVertex 9: 8, 7, 6, 2, 4, 5, 1\nVertex 10: 1, 3, 2, 6, 11, 5, 4, 7\nVertex 11: 3, 5, 1, 8, 6, 10, 7, 2\n",
    "graph_output": "11 44\n3 11\n6 7\n4 2\n5 3\n8 9\n11 5\n3 2\n11 1\n1 10\n6 8\n6 3\n7 8\n1 3\n2 6\n7 3\n5 1\n3 10\n4 8\n7 9\n11 8\n1 7\n5 4\n2 10\n6 9\n10 6\n6 11\n8 2\n4 7\n11 10\n9 2\n10 5\n2 1\n11 7\n6 4\n4 9\n10 4\n6 1\n7 2\n7 5\n5 9\n8 3\n1 9\n11 2\n10 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 17 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 8, 7, 5\nVertex 2: 8, 1\nVertex 3: 10\nVertex 4: 5, 10\nVertex 5: 9, 4, 1\nVertex 6: No connections\nVertex 7: 9, 11, 1, 13\nVertex 8: 10, 2, 1, 11\nVertex 9: 5, 7, 10, 13\nVertex 10: 8, 3, 9, 4, 13\nVertex 11: 7, 8\nVertex 12: No connections\nVertex 13: 9, 10, 7\n",
    "graph_output": "13 17\n9 5\n4 5\n9 7\n10 8\n8 2\n3 10\n7 11\n1 2\n8 1\n10 9\n7 1\n10 4\n11 8\n5 1\n13 9\n10 13\n7 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 105 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 13 and vertex 4.\n",
    "graph_output": "15 105\n1 8\n1 7\n7 6\n1 11\n7 13\n13 3\n13 5\n7 12\n7 15\n5 9\n5 14\n15 2\n1 4\n13 10\n8 3\n15 12\n1 13\n14 1\n3 15\n9 13\n2 1\n14 8\n2 14\n7 11\n12 14\n5 3\n4 9\n10 7\n7 2\n2 4\n11 9\n14 7\n14 6\n12 4\n7 4\n8 15\n11 10\n4 10\n2 13\n2 12\n8 12\n12 5\n2 6\n1 10\n12 6\n10 15\n7 9\n5 11\n15 4\n2 10\n10 6\n6 8\n9 2\n1 5\n13 8\n11 14\n6 15\n11 15\n6 13\n6 4\n7 3\n9 14\n15 1\n8 9\n13 15\n2 5\n10 9\n6 5\n6 1\n11 12\n2 11\n3 6\n12 3\n11 8\n3 10\n5 15\n13 12\n3 4\n3 2\n1 3\n8 2\n3 11\n9 3\n14 4\n10 14\n11 4\n12 10\n7 8\n5 7\n1 9\n14 3\n1 12\n15 9\n12 9\n5 8\n4 5\n13 11\n13 14\n8 10\n4 8\n15 14\n9 6\n6 11\n10 5\n13 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 15,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 17 vertices and 128 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 8 and vertex 17.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 9 and vertex 17.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 17 and vertex 3.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 17 and vertex 14.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 10 and vertex 17.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 17 and vertex 1.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 5 and vertex 17.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 9 and vertex 11.\n",
    "graph_output": "17 128\n1 7\n7 15\n7 8\n1 16\n16 14\n14 6\n14 4\n8 2\n14 12\n6 5\n16 9\n2 11\n8 17\n15 10\n11 13\n14 3\n16 13\n5 2\n11 7\n11 4\n6 11\n4 17\n11 17\n3 7\n1 14\n9 17\n3 12\n15 17\n13 6\n15 11\n3 11\n6 15\n4 6\n4 15\n17 3\n4 7\n1 13\n1 6\n4 5\n9 12\n11 14\n9 13\n3 16\n9 10\n15 3\n16 4\n11 10\n10 4\n13 10\n17 14\n11 16\n12 5\n3 6\n1 11\n3 8\n16 8\n15 1\n15 16\n12 8\n8 10\n8 9\n2 14\n4 13\n10 17\n16 17\n1 12\n7 6\n15 14\n5 7\n15 12\n7 13\n9 7\n2 1\n9 14\n5 16\n4 1\n12 4\n9 4\n15 5\n10 6\n13 8\n11 12\n8 6\n5 8\n15 13\n10 14\n15 2\n2 7\n10 16\n16 7\n5 14\n12 7\n6 16\n5 10\n5 1\n12 10\n9 15\n1 9\n2 16\n17 1\n10 2\n5 17\n4 2\n3 4\n11 8\n6 17\n2 6\n13 12\n12 16\n8 14\n5 13\n8 4\n13 2\n5 11\n8 1\n9 2\n6 12\n6 9\n13 3\n5 9\n1 3\n12 17\n17 7\n8 15\n9 3\n2 3\n10 7\n9 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 11 and vertex 9 are connected.\n\nThis is an undirected graph with 15 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 11, 9, 2\nVertex 2: 5, 14, 4, 8, 15, 1\nVertex 3: 13, 14\nVertex 4: 2, 5, 14\nVertex 5: 2, 15, 8, 4, 14, 10\nVertex 6: 11, 10\nVertex 7: No connections\nVertex 8: 13, 11, 5, 2, 14, 9\nVertex 9: 1, 8, 12\nVertex 10: 13, 5, 6, 12\nVertex 11: 6, 14, 8, 1, 15\nVertex 12: 14, 10, 9\nVertex 13: 1, 8, 14, 3, 10\nVertex 14: 12, 2, 11, 13, 8, 5, 3, 4\nVertex 15: 5, 2, 11\n",
    "graph_output": "15 30\n1 13\n2 5\n12 14\n6 11\n14 2\n15 5\n8 13\n14 11\n2 4\n11 8\n5 8\n13 14\n8 2\n14 8\n13 3\n5 4\n13 10\n5 14\n1 11\n10 5\n6 10\n15 2\n9 1\n8 9\n3 14\n10 12\n11 15\n9 12\n2 1\n14 4\n",
    "vertices": [
      11,
      9
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 11 (source) to vertex 7 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 16 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2 with a capacity of 8.\nThere is an edge between vertex 2 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 6 and vertex 7 with a capacity of 7.\nThere is an edge between vertex 2 and vertex 4 with a capacity of 9.\nThere is an edge between vertex 6 and vertex 9 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 3 with a capacity of 10.\nThere is an edge between vertex 7 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 3 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 7 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 1.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 3 and vertex 2 with a capacity of 9.\n",
    "graph_output": "11 16\n1 2 8\n2 11 2\n1 6 9\n1 5 2\n6 7 7\n2 4 9\n6 9 2\n4 3 10\n7 10 9\n3 8 4\n7 3 8\n2 7 2\n2 10 1\n5 6 6\n7 8 9\n3 2 9\n",
    "vertices": [
      11,
      7
    ],
    "answer": 2,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 88 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 12 and vertex 14.\n",
    "graph_output": "15 88\n1 9\n1 11\n1 8\n11 5\n1 14\n5 15\n11 12\n8 7\n8 10\n8 2\n5 3\n3 13\n7 6\n14 4\n6 2\n10 13\n6 1\n14 2\n4 13\n9 6\n11 7\n7 4\n11 6\n7 3\n15 9\n5 6\n13 9\n15 2\n11 3\n6 4\n7 10\n14 3\n9 8\n12 13\n13 6\n9 2\n4 3\n4 11\n2 12\n14 7\n2 1\n5 8\n14 13\n15 3\n2 4\n10 15\n1 13\n4 8\n7 5\n3 1\n12 8\n2 10\n1 12\n7 12\n14 10\n7 13\n3 9\n15 14\n15 8\n15 1\n7 15\n13 15\n9 7\n12 10\n10 1\n8 14\n11 13\n4 9\n12 5\n2 3\n6 12\n6 8\n7 2\n11 2\n10 4\n1 7\n9 14\n10 3\n12 4\n13 2\n11 14\n15 4\n5 2\n1 4\n10 5\n12 9\n9 10\n12 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "natural"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 11 vertices and 13 edges\n\nEdges (Format: Node Node):\n11 10\n8 1\n5 7\n7 8\n6 9\n5 1\n10 3\n9 8\n6 5\n5 3\n8 4\n3 4\n4 5\n",
    "graph_output": "11 13\n11 10\n8 1\n5 7\n7 8\n6 9\n5 1\n10 3\n9 8\n6 5\n5 3\n8 4\n3 4\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 18 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 2, 5, 10\nVertex 2: 1, 7, 15, 4\nVertex 3: 8, 14\nVertex 4: 5, 2\nVertex 5: 1, 4\nVertex 6: 1, 11\nVertex 7: 2, 12, 13\nVertex 8: 9, 3\nVertex 9: 13, 8\nVertex 10: 13, 1\nVertex 11: 6\nVertex 12: 7\nVertex 13: 15, 10, 9, 14, 7\nVertex 14: 13, 3\nVertex 15: 2, 13\n",
    "graph_output": "15 18\n1 6\n1 2\n2 7\n2 15\n15 13\n13 10\n1 5\n7 12\n6 11\n13 9\n9 8\n8 3\n13 14\n5 4\n1 10\n14 3\n2 4\n13 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 11 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 1 and vertex 6.\n",
    "graph_output": "7 11\n1 4\n2 7\n5 4\n7 5\n6 2\n1 7\n6 5\n4 6\n3 2\n7 6\n1 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 20,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 45 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 9, 5, 12, 7, 6, 2, 3\nVertex 2: 12, 9, 10, 5, 8, 3, 11, 6, 1\nVertex 3: 2, 10, 1, 5, 12, 9\nVertex 4: 11, 12, 8, 6\nVertex 5: 6, 1, 9, 7, 2, 12, 10, 3\nVertex 6: 5, 8, 1, 10, 2, 9, 11, 4, 12\nVertex 7: 5, 9, 1, 11, 8, 12\nVertex 8: 11, 6, 2, 4, 9, 7\nVertex 9: 2, 12, 1, 5, 7, 8, 10, 6, 11, 3\nVertex 10: 1, 2, 5, 3, 6, 9, 12\nVertex 11: 8, 4, 2, 7, 12, 6, 9\nVertex 12: 2, 9, 1, 4, 5, 11, 7, 6, 3, 10\n",
    "graph_output": "12 45\n6 5\n2 12\n8 11\n1 10\n9 2\n11 4\n12 9\n8 6\n9 1\n5 1\n5 9\n12 1\n10 2\n5 7\n5 2\n8 2\n2 3\n12 4\n7 9\n2 11\n5 12\n5 10\n8 4\n7 1\n7 11\n8 9\n10 3\n11 12\n6 1\n6 10\n6 2\n7 8\n10 9\n9 6\n6 11\n12 7\n1 2\n6 4\n6 12\n3 1\n3 5\n3 12\n10 12\n11 9\n3 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 88 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 12 (weight=46), 3 (weight=43), 11 (weight=41), 13 (weight=72), 8 (weight=35), 5 (weight=26), 4 (weight=54), 6 (weight=24), 15 (weight=46), 2 (weight=12)\nVertex 2: 15 (weight=84), 4 (weight=18), 7 (weight=91), 12 (weight=6), 5 (weight=65), 10 (weight=31), 13 (weight=35), 6 (weight=48), 9 (weight=22), 14 (weight=56), 8 (weight=94), 1 (weight=12)\nVertex 3: 9 (weight=93), 14 (weight=57), 1 (weight=43), 5 (weight=9), 8 (weight=80), 7 (weight=70), 4 (weight=89), 12 (weight=14), 15 (weight=2), 11 (weight=42)\nVertex 4: 12 (weight=59), 7 (weight=41), 5 (weight=90), 2 (weight=18), 13 (weight=66), 15 (weight=54), 8 (weight=17), 3 (weight=89), 6 (weight=12), 1 (weight=54), 9 (weight=90), 11 (weight=4), 14 (weight=24)\nVertex 5: 11 (weight=62), 3 (weight=9), 4 (weight=90), 13 (weight=59), 10 (weight=88), 2 (weight=65), 8 (weight=42), 9 (weight=85), 6 (weight=90), 1 (weight=26), 7 (weight=45), 14 (weight=28), 12 (weight=65), 15 (weight=78)\nVertex 6: 13 (weight=85), 12 (weight=60), 11 (weight=5), 8 (weight=28), 14 (weight=100), 4 (weight=12), 5 (weight=90), 2 (weight=48), 7 (weight=33), 1 (weight=24), 9 (weight=20), 15 (weight=5)\nVertex 7: 12 (weight=60), 15 (weight=6), 11 (weight=7), 4 (weight=41), 2 (weight=91), 3 (weight=70), 8 (weight=43), 14 (weight=39), 5 (weight=45), 9 (weight=61), 10 (weight=57), 13 (weight=9), 6 (weight=33)\nVertex 8: 14 (weight=7), 3 (weight=80), 11 (weight=90), 5 (weight=42), 7 (weight=43), 4 (weight=17), 6 (weight=28), 1 (weight=35), 15 (weight=72), 10 (weight=34), 2 (weight=94), 9 (weight=59)\nVertex 9: 15 (weight=43), 3 (weight=93), 14 (weight=39), 12 (weight=81), 5 (weight=85), 11 (weight=66), 7 (weight=61), 10 (weight=23), 2 (weight=22), 4 (weight=90), 6 (weight=20), 8 (weight=59)\nVertex 10: 12 (weight=55), 14 (weight=48), 5 (weight=88), 11 (weight=30), 15 (weight=53), 2 (weight=31), 9 (weight=23), 7 (weight=57), 8 (weight=34)\nVertex 11: 7 (weight=7), 5 (weight=62), 14 (weight=60), 8 (weight=90), 6 (weight=5), 1 (weight=41), 15 (weight=17), 10 (weight=30), 12 (weight=7), 9 (weight=66), 13 (weight=93), 3 (weight=42), 4 (weight=4)\nVertex 12: 1 (weight=46), 7 (weight=60), 4 (weight=59), 10 (weight=55), 13 (weight=48), 6 (weight=60), 2 (weight=6), 9 (weight=81), 3 (weight=14), 11 (weight=7), 15 (weight=49), 5 (weight=65)\nVertex 13: 12 (weight=48), 6 (weight=85), 4 (weight=66), 5 (weight=59), 1 (weight=72), 15 (weight=25), 7 (weight=9), 11 (weight=93), 2 (weight=35)\nVertex 14: 15 (weight=26), 8 (weight=7), 3 (weight=57), 10 (weight=48), 11 (weight=60), 9 (weight=39), 6 (weight=100), 7 (weight=39), 5 (weight=28), 2 (weight=56), 4 (weight=24)\nVertex 15: 7 (weight=6), 9 (weight=43), 14 (weight=26), 2 (weight=84), 4 (weight=54), 11 (weight=17), 10 (weight=53), 13 (weight=25), 3 (weight=2), 12 (weight=49), 5 (weight=78), 8 (weight=72), 1 (weight=46), 6 (weight=5)\n",
    "graph_output": "15 88\n1 12 46\n12 7 60\n7 15 6\n15 9 43\n12 4 59\n12 10 55\n7 11 7\n15 14 26\n9 3 93\n14 8 7\n12 13 48\n11 5 62\n13 6 85\n15 2 84\n14 3 57\n3 1 43\n7 4 41\n3 5 9\n5 4 90\n12 6 60\n14 10 48\n4 2 18\n13 4 66\n15 4 54\n5 13 59\n7 2 91\n11 14 60\n8 3 80\n11 8 90\n12 2 6\n5 10 88\n11 6 5\n2 5 65\n3 7 70\n14 9 39\n11 1 41\n8 5 42\n9 12 81\n7 8 43\n4 8 17\n9 5 85\n11 15 17\n8 6 28\n1 13 72\n11 10 30\n4 3 89\n14 6 100\n6 4 12\n3 12 14\n8 1 35\n6 5 90\n11 12 7\n14 7 39\n10 15 53\n13 15 25\n15 3 2\n11 9 66\n5 1 26\n5 7 45\n10 2 31\n7 9 61\n10 9 23\n7 10 57\n13 7 9\n13 11 93\n5 14 28\n15 12 49\n2 13 35\n1 4 54\n6 2 48\n12 5 65\n6 7 33\n15 5 78\n9 2 22\n9 4 90\n2 14 56\n11 3 42\n1 6 24\n8 15 72\n4 11 4\n6 9 20\n8 10 34\n2 8 94\n1 15 46\n1 2 12\n9 8 59\n14 4 24\n15 6 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 132,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 16 vertices and 104 edges\n\nEdges (Format: Node Node):\n1 14\n14 2\n1 9\n2 8\n2 3\n9 12\n9 13\n1 4\n3 10\n2 15\n13 6\n1 5\n14 11\n12 16\n13 7\n8 9\n7 15\n1 2\n6 12\n4 10\n6 3\n2 7\n9 16\n6 15\n4 11\n11 10\n13 10\n15 10\n9 14\n5 16\n7 5\n8 4\n1 10\n12 5\n6 7\n6 9\n11 2\n6 8\n8 15\n9 5\n6 14\n15 9\n8 14\n15 3\n13 14\n16 14\n5 3\n14 5\n3 12\n9 10\n16 11\n1 15\n4 16\n15 12\n6 16\n10 16\n12 8\n3 4\n8 11\n15 11\n5 15\n1 11\n15 13\n11 7\n1 12\n3 16\n5 8\n1 3\n5 11\n14 15\n12 13\n14 4\n5 6\n16 13\n3 13\n8 16\n16 15\n2 5\n13 1\n2 4\n9 4\n12 11\n14 12\n5 13\n7 9\n6 11\n11 9\n8 13\n7 10\n8 3\n7 8\n4 5\n3 11\n7 4\n9 2\n10 8\n7 3\n12 4\n7 16\n14 3\n7 14\n12 2\n10 6\n12 10\n",
    "graph_output": "16 104\n1 14\n14 2\n1 9\n2 8\n2 3\n9 12\n9 13\n1 4\n3 10\n2 15\n13 6\n1 5\n14 11\n12 16\n13 7\n8 9\n7 15\n1 2\n6 12\n4 10\n6 3\n2 7\n9 16\n6 15\n4 11\n11 10\n13 10\n15 10\n9 14\n5 16\n7 5\n8 4\n1 10\n12 5\n6 7\n6 9\n11 2\n6 8\n8 15\n9 5\n6 14\n15 9\n8 14\n15 3\n13 14\n16 14\n5 3\n14 5\n3 12\n9 10\n16 11\n1 15\n4 16\n15 12\n6 16\n10 16\n12 8\n3 4\n8 11\n15 11\n5 15\n1 11\n15 13\n11 7\n1 12\n3 16\n5 8\n1 3\n5 11\n14 15\n12 13\n14 4\n5 6\n16 13\n3 13\n8 16\n16 15\n2 5\n13 1\n2 4\n9 4\n12 11\n14 12\n5 13\n7 9\n6 11\n11 9\n8 13\n7 10\n8 3\n7 8\n4 5\n3 11\n7 4\n9 2\n10 8\n7 3\n12 4\n7 16\n14 3\n7 14\n12 2\n10 6\n12 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 26 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   1   0   1   0   1   0   1   1   1   0   1   1   0 \n 2 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  1   1   0   0   1   0   0   0   0   1   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   1   1   1   0   0   0   0   1   0 \n 5 |  1   0   1   0   0   0   0   0   0   0   1   0   0   1   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   1   0   0   1   0 \n 7 |  1   0   0   1   0   0   0   0   0   1   0   0   0   0   0 \n 8 |  0   0   0   1   0   0   0   0   1   0   0   0   0   0   0 \n 9 |  1   0   0   1   0   0   0   1   0   0   0   0   0   1   0 \n10 |  1   0   1   0   0   0   1   0   0   0   0   0   0   0   0 \n11 |  1   0   0   0   1   1   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n13 |  1   0   0   0   0   0   0   0   0   0   0   0   0   1   1 \n14 |  1   0   0   1   1   1   0   0   1   0   0   1   1   0   1 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   1   1   0 \n",
    "graph_output": "15 26\n1 14\n14 12\n14 15\n14 6\n1 3\n15 13\n14 4\n6 11\n4 8\n1 10\n11 5\n10 7\n3 2\n8 9\n5 14\n7 1\n3 10\n13 1\n3 5\n9 14\n11 1\n4 9\n1 5\n13 14\n9 1\n7 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nUndirected Graph with 30 vertices and 29 edges\n\nEdges (Format: Node Node):\n1 2\n2 20\n2 15\n15 26\n15 13\n15 25\n26 8\n26 21\n26 4\n8 9\n25 27\n20 6\n6 3\n6 5\n21 11\n2 23\n1 10\n15 22\n27 12\n21 24\n3 16\n4 29\n21 7\n15 14\n8 28\n5 30\n22 18\n12 17\n17 19\n",
    "graph_output": "30 29\n1 2\n2 20\n2 15\n15 26\n15 13\n15 25\n26 8\n26 21\n26 4\n8 9\n25 27\n20 6\n6 3\n6 5\n21 11\n2 23\n1 10\n15 22\n27 12\n21 24\n3 16\n4 29\n21 7\n15 14\n8 28\n5 30\n22 18\n12 17\n17 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 15,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 18 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   1   1   1   0   0   0   0   0   0   1   0   0   0   1 \n 2 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   1 \n 3 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 4 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  1   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0 \n 6 |  1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   1   1   0   0   0   0   0   0   0   0   1   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n10 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   1   0   1   0   0   0   0   0   0   1   0   0   1   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n13 |  1   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n15 |  0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0 \n16 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  1   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n",
    "graph_output": "17 18\n1 5\n1 13\n5 7\n1 17\n1 4\n5 11\n17 2\n2 10\n17 9\n7 15\n2 16\n13 14\n1 6\n11 12\n13 8\n11 3\n6 7\n15 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 16 vertices and 17 edges\n\nEdges (Format: Node Node):\n1 7\n7 9\n1 6\n1 12\n1 3\n3 16\n3 15\n6 14\n16 13\n15 11\n15 8\n6 4\n7 5\n12 10\n14 2\n10 2\n13 14\n",
    "graph_output": "16 17\n1 7\n7 9\n1 6\n1 12\n1 3\n3 16\n3 15\n6 14\n16 13\n15 11\n15 8\n6 4\n7 5\n12 10\n14 2\n10 2\n13 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 22 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0 \n 2 |  0   0   1   0   0   0   0   0   0   1   0   0   0   1   0   0   0 \n 3 |  0   1   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 5 |  0   0   0   0   0   1   0   0   0   0   1   1   0   0   0   1   0 \n 6 |  0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   1   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   1   0   0   0   0   0   1   0   0   0   1   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   1   0 \n10 |  0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n11 |  1   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   1 \n12 |  1   0   0   1   1   0   0   0   0   0   0   0   0   1   0   0   0 \n13 |  0   0   0   0   0   1   0   1   0   0   0   0   0   0   1   0   0 \n14 |  0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n15 |  0   0   1   0   0   0   0   0   1   0   0   0   1   0   0   0   0 \n16 |  0   0   0   0   1   1   0   0   1   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n",
    "graph_output": "17 22\n12 5\n1 12\n8 3\n12 14\n5 16\n9 16\n13 8\n13 15\n16 6\n11 17\n11 1\n9 8\n6 5\n13 6\n10 2\n11 10\n5 11\n9 15\n3 15\n2 3\n4 12\n14 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 8 (source) to vertex 2 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 36 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 9 (weight=47, capacity=1), 6 (weight=99, capacity=8), 2 (weight=22, capacity=10), 7 (weight=23, capacity=7), 3 (weight=67, capacity=8), 5 (weight=80, capacity=5), 4 (weight=84, capacity=3), 8 (weight=62, capacity=3)\nVertex 2: 9 (weight=93, capacity=7), 5 (weight=47, capacity=4), 1 (weight=22, capacity=10), 8 (weight=78, capacity=7), 6 (weight=3, capacity=8), 7 (weight=37, capacity=8), 3 (weight=100, capacity=7), 4 (weight=61, capacity=6)\nVertex 3: 7 (weight=85, capacity=6), 9 (weight=80, capacity=7), 6 (weight=18, capacity=1), 4 (weight=73, capacity=10), 1 (weight=67, capacity=8), 2 (weight=100, capacity=7), 5 (weight=99, capacity=4), 8 (weight=23, capacity=3)\nVertex 4: 6 (weight=8, capacity=6), 5 (weight=21, capacity=1), 7 (weight=66, capacity=8), 3 (weight=73, capacity=10), 1 (weight=84, capacity=3), 8 (weight=26, capacity=8), 9 (weight=91, capacity=2), 2 (weight=61, capacity=6)\nVertex 5: 9 (weight=47, capacity=5), 6 (weight=63, capacity=7), 2 (weight=47, capacity=4), 7 (weight=11, capacity=4), 4 (weight=21, capacity=1), 8 (weight=86, capacity=3), 1 (weight=80, capacity=5), 3 (weight=99, capacity=4)\nVertex 6: 1 (weight=99, capacity=8), 8 (weight=82, capacity=2), 4 (weight=8, capacity=6), 5 (weight=63, capacity=7), 3 (weight=18, capacity=1), 2 (weight=3, capacity=8), 7 (weight=74, capacity=1), 9 (weight=51, capacity=4)\nVertex 7: 9 (weight=54, capacity=8), 3 (weight=85, capacity=6), 1 (weight=23, capacity=7), 5 (weight=11, capacity=4), 2 (weight=37, capacity=8), 4 (weight=66, capacity=8), 8 (weight=9, capacity=5), 6 (weight=74, capacity=1)\nVertex 8: 6 (weight=82, capacity=2), 9 (weight=70, capacity=5), 2 (weight=78, capacity=7), 5 (weight=86, capacity=3), 7 (weight=9, capacity=5), 4 (weight=26, capacity=8), 3 (weight=23, capacity=3), 1 (weight=62, capacity=3)\nVertex 9: 1 (weight=47, capacity=1), 2 (weight=93, capacity=7), 7 (weight=54, capacity=8), 5 (weight=47, capacity=5), 8 (weight=70, capacity=5), 3 (weight=80, capacity=7), 4 (weight=91, capacity=2), 6 (weight=51, capacity=4)\n",
    "graph_output": "9 36\n1 9 47 1\n1 6 99 8\n9 2 93 7\n6 8 82 2\n9 7 54 8\n9 5 47 5\n7 3 85 6\n6 4 8 6\n6 5 63 7\n8 9 70 5\n2 5 47 4\n2 1 22 10\n2 8 78 7\n7 1 23 7\n7 5 11 4\n5 4 21 1\n5 8 86 3\n3 9 80 7\n6 3 18 1\n6 2 3 8\n2 7 37 8\n4 7 66 8\n3 4 73 10\n3 1 67 8\n3 2 100 7\n5 1 80 5\n8 7 9 5\n5 3 99 4\n1 4 84 3\n8 4 26 8\n3 8 23 3\n8 1 62 3\n6 7 74 1\n4 9 91 2\n2 4 61 6\n9 6 51 4\n",
    "vertices": [
      8,
      2
    ],
    "answer": 3096,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 26 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   0   0   0   0   1   1   1   0   1   0   0   0   0 \n 2 |  1   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 3 |  0   0   0   1   1   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   1   0   1   0   0   0   1   0   0   0   0   0   0 \n 5 |  0   0   1   1   0   0   0   0   0   1   1   0   1   1   0 \n 6 |  0   0   0   0   0   0   0   0   1   0   0   1   0   0   1 \n 7 |  1   0   0   0   0   0   0   0   1   1   0   1   0   0   1 \n 8 |  1   0   0   0   0   0   0   0   1   1   0   0   0   0   0 \n 9 |  1   1   0   1   0   1   1   1   0   0   0   0   1   0   0 \n10 |  0   0   0   0   1   0   1   1   0   0   0   0   0   0   0 \n11 |  1   0   0   0   1   0   0   0   0   0   0   0   0   1   0 \n12 |  0   0   0   0   0   1   1   0   0   0   0   0   1   0   0 \n13 |  0   0   0   0   1   0   0   0   1   0   0   1   0   0   0 \n14 |  0   0   0   0   1   0   0   0   0   0   1   0   0   0   0 \n15 |  0   0   0   0   0   1   1   0   0   0   0   0   0   0   0 \n",
    "graph_output": "15 26\n5 10\n1 7\n2 1\n12 7\n4 9\n11 1\n12 6\n3 5\n2 9\n15 7\n7 10\n5 13\n5 4\n7 9\n8 10\n5 14\n9 6\n13 9\n3 4\n12 13\n5 11\n1 8\n14 11\n6 15\n9 8\n1 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 8 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 12 vertices and 47 edges\n\nEdges (Format: Node Node Capacity):\n1 12 3\n1 3 5\n3 10 4\n12 7 1\n12 11 7\n11 5 1\n11 9 6\n7 4 2\n4 6 7\n1 8 7\n10 2 3\n4 5 2\n8 9 7\n11 8 5\n2 4 9\n7 1 8\n8 2 1\n11 2 2\n6 9 3\n12 6 6\n5 10 7\n4 11 9\n7 8 5\n6 10 7\n7 2 8\n9 12 10\n7 11 2\n4 8 9\n4 12 1\n3 12 6\n6 2 10\n5 12 9\n10 11 9\n2 12 10\n7 3 2\n6 3 7\n5 6 7\n1 4 8\n2 9 4\n7 5 3\n1 10 2\n2 3 8\n9 3 8\n3 5 9\n5 9 8\n10 8 5\n5 8 8\n",
    "graph_output": "12 47\n1 12 3\n1 3 5\n3 10 4\n12 7 1\n12 11 7\n11 5 1\n11 9 6\n7 4 2\n4 6 7\n1 8 7\n10 2 3\n4 5 2\n8 9 7\n11 8 5\n2 4 9\n7 1 8\n8 2 1\n11 2 2\n6 9 3\n12 6 6\n5 10 7\n4 11 9\n7 8 5\n6 10 7\n7 2 8\n9 12 10\n7 11 2\n4 8 9\n4 12 1\n3 12 6\n6 2 10\n5 12 9\n10 11 9\n2 12 10\n7 3 2\n6 3 7\n5 6 7\n1 4 8\n2 9 4\n7 5 3\n1 10 2\n2 3 8\n9 3 8\n3 5 9\n5 9 8\n10 8 5\n5 8 8\n",
    "vertices": [
      8,
      4
    ],
    "answer": 47,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 68 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 6, 11, 5, 4, 7, 9, 12, 13, 2, 8\nVertex 2: 11, 13, 5, 12, 10, 7, 4, 6, 1, 3\nVertex 3: 1, 12, 11, 7, 13, 10, 8, 6, 5, 2, 4, 9\nVertex 4: 12, 11, 1, 2, 5, 10, 13, 7, 3\nVertex 5: 10, 2, 8, 1, 9, 4, 12, 6, 3, 7, 11, 13\nVertex 6: 1, 8, 9, 13, 10, 11, 2, 5, 3, 12\nVertex 7: 12, 8, 2, 10, 1, 3, 13, 9, 4, 11, 5\nVertex 8: 6, 7, 5, 9, 11, 3, 13, 1, 10, 12\nVertex 9: 10, 8, 6, 1, 5, 11, 7, 13, 3\nVertex 10: 5, 2, 7, 9, 3, 11, 4, 6, 12, 8\nVertex 11: 2, 3, 1, 4, 9, 10, 6, 8, 12, 7, 5\nVertex 12: 3, 4, 7, 2, 13, 5, 1, 10, 11, 6, 8\nVertex 13: 2, 3, 12, 6, 7, 1, 8, 4, 9, 5\n",
    "graph_output": "13 68\n1 3\n6 1\n12 3\n11 2\n10 5\n3 11\n12 4\n7 12\n8 6\n2 13\n2 5\n1 11\n8 7\n2 12\n11 4\n10 2\n7 2\n5 8\n5 1\n10 7\n9 10\n4 1\n9 8\n1 7\n3 7\n6 9\n3 13\n10 3\n12 13\n4 2\n6 13\n1 9\n5 9\n11 9\n11 10\n4 5\n4 10\n6 10\n6 11\n12 5\n11 8\n2 6\n12 1\n3 8\n12 10\n13 7\n5 6\n1 13\n1 2\n13 8\n3 6\n5 3\n7 9\n8 1\n8 10\n12 11\n2 3\n12 6\n4 13\n4 7\n9 13\n4 3\n3 9\n11 7\n5 7\n8 12\n11 5\n5 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 7 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (8\u00d78):\n\n      1   2   3   4   5   6   7   8\n   --------------------------------\n 1 |  0   0   0   0   0   1   1   0 \n 2 |  0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   1   1   0   0 \n 5 |  0   0   0   1   0   1   0   1 \n 6 |  1   0   0   1   1   0   0   0 \n 7 |  1   0   0   0   0   0   0   1 \n 8 |  0   0   0   0   1   0   1   0 \n",
    "graph_output": "8 7\n5 8\n4 5\n1 6\n8 7\n5 6\n1 7\n6 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 20 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   1   0   1   0   1   1   0   0   0   0   0 \n 2 |  0   0   0   0   0   1   1   0   1   0   0   1   0 \n 3 |  1   0   0   1   1   0   1   0   0   0   0   0   0 \n 4 |  0   0   1   0   0   0   0   0   1   0   1   0   0 \n 5 |  1   0   1   0   0   0   0   1   0   0   0   0   0 \n 6 |  0   1   0   0   0   0   1   1   0   0   0   1   1 \n 7 |  1   1   1   0   0   1   0   0   0   0   1   0   0 \n 8 |  1   0   0   0   1   1   0   0   0   0   0   0   0 \n 9 |  0   1   0   1   0   0   0   0   0   0   0   0   1 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   1   0   0   1   0   0   0   0   0   0 \n12 |  0   1   0   0   0   1   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   1   0   0   1   0   0   0   0 \n",
    "graph_output": "13 20\n7 2\n1 5\n2 6\n12 6\n11 7\n13 6\n9 2\n8 5\n7 3\n9 13\n3 5\n4 9\n6 8\n1 7\n1 3\n3 4\n12 2\n8 1\n11 4\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 132 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   0   1   0   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   0   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  0   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 7 |  0   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   0 \n16 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n17 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   0 \n",
    "graph_output": "17 132\n1 9\n1 8\n8 5\n9 16\n8 11\n9 13\n5 4\n11 2\n11 15\n9 17\n2 6\n13 12\n11 7\n8 10\n15 14\n15 3\n17 13\n17 14\n14 2\n17 6\n4 10\n2 17\n17 7\n3 8\n3 13\n3 17\n16 1\n4 1\n16 10\n2 5\n14 9\n6 12\n15 13\n3 16\n5 13\n15 5\n3 9\n6 14\n6 9\n16 13\n10 11\n11 12\n6 8\n10 15\n8 9\n2 1\n7 10\n12 15\n12 1\n13 11\n5 16\n6 16\n14 10\n11 14\n17 5\n11 5\n6 1\n11 17\n5 14\n5 12\n16 2\n8 17\n3 12\n7 8\n17 12\n9 4\n12 10\n17 4\n3 14\n12 2\n13 14\n8 12\n14 12\n2 15\n7 2\n6 5\n7 12\n11 16\n4 13\n8 14\n7 15\n10 17\n3 2\n4 16\n11 6\n5 7\n3 7\n2 13\n14 4\n1 11\n13 10\n7 16\n10 9\n3 5\n14 1\n3 6\n4 12\n7 6\n7 14\n14 16\n8 13\n10 6\n15 8\n9 7\n15 6\n9 11\n16 17\n2 9\n12 9\n10 2\n10 5\n12 16\n13 1\n8 4\n15 4\n1 15\n9 15\n3 1\n10 3\n7 4\n6 4\n4 2\n9 5\n10 1\n4 11\n15 16\n1 17\n2 8\n13 6\n11 3\n7 13\n16 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 3 and vertex 10 are connected.\n\nThis is an undirected graph with 17 vertices and 25 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 3 and vertex 16.\n",
    "graph_output": "17 25\n7 6\n6 13\n7 14\n17 12\n2 13\n11 2\n3 6\n9 10\n9 6\n10 5\n3 13\n5 4\n14 9\n9 4\n14 17\n14 13\n7 5\n2 5\n2 9\n12 7\n10 2\n11 3\n6 15\n15 13\n3 16\n",
    "vertices": [
      3,
      10
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 75 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   0 \n 2 |  1   0   1   1   1   1   0   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1 \n 7 |  1   0   1   1   1   1   0   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   0   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   0   0   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1 \n13 |  0   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "13 75\n3 7\n8 2\n8 4\n11 9\n2 9\n5 1\n3 6\n2 4\n11 3\n9 5\n4 5\n1 6\n12 7\n2 13\n9 6\n8 11\n13 12\n6 5\n5 7\n11 13\n13 5\n10 13\n3 13\n6 2\n11 7\n10 11\n7 13\n8 3\n1 9\n9 10\n11 12\n7 9\n4 1\n2 3\n1 8\n13 4\n6 11\n11 5\n4 10\n6 10\n4 3\n5 3\n2 11\n12 1\n12 10\n6 4\n3 9\n10 7\n3 12\n12 5\n12 4\n1 2\n8 12\n12 2\n1 7\n7 6\n1 3\n11 4\n3 10\n6 8\n4 7\n11 1\n4 9\n10 8\n9 13\n9 12\n6 13\n7 8\n10 1\n8 13\n5 2\n6 12\n10 2\n5 10\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 69 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 7 (weight=60), 13 (weight=48), 3 (weight=92), 11 (weight=19), 10 (weight=67), 12 (weight=25), 2 (weight=10), 8 (weight=27), 9 (weight=87), 5 (weight=32), 4 (weight=77), 6 (weight=44)\nVertex 2: 7 (weight=72), 8 (weight=21), 11 (weight=94), 5 (weight=17), 12 (weight=23), 1 (weight=10), 3 (weight=23), 9 (weight=32), 6 (weight=84), 10 (weight=50), 4 (weight=12)\nVertex 3: 7 (weight=10), 11 (weight=59), 6 (weight=71), 1 (weight=92), 9 (weight=100), 12 (weight=24), 5 (weight=64), 13 (weight=83), 4 (weight=58), 2 (weight=23), 10 (weight=33)\nVertex 4: 6 (weight=76), 10 (weight=65), 5 (weight=56), 7 (weight=99), 3 (weight=58), 13 (weight=15), 1 (weight=77), 12 (weight=38), 8 (weight=73), 2 (weight=12), 9 (weight=78)\nVertex 5: 11 (weight=89), 12 (weight=5), 9 (weight=8), 4 (weight=56), 3 (weight=64), 2 (weight=17), 10 (weight=68), 1 (weight=32), 8 (weight=35), 6 (weight=97), 13 (weight=72)\nVertex 6: 3 (weight=71), 4 (weight=76), 13 (weight=73), 7 (weight=24), 12 (weight=83), 8 (weight=53), 2 (weight=84), 1 (weight=44), 5 (weight=97), 10 (weight=73)\nVertex 7: 1 (weight=60), 3 (weight=10), 2 (weight=72), 6 (weight=24), 4 (weight=99), 8 (weight=23), 11 (weight=2), 12 (weight=88), 10 (weight=36), 13 (weight=55), 9 (weight=30)\nVertex 8: 2 (weight=21), 9 (weight=25), 11 (weight=75), 13 (weight=18), 6 (weight=53), 7 (weight=23), 12 (weight=25), 1 (weight=27), 10 (weight=81), 4 (weight=73), 5 (weight=35)\nVertex 9: 8 (weight=25), 5 (weight=8), 10 (weight=86), 3 (weight=100), 13 (weight=88), 1 (weight=87), 2 (weight=32), 4 (weight=78), 7 (weight=30)\nVertex 10: 11 (weight=2), 12 (weight=54), 9 (weight=86), 4 (weight=65), 1 (weight=67), 5 (weight=68), 7 (weight=36), 2 (weight=50), 8 (weight=81), 3 (weight=33), 6 (weight=73)\nVertex 11: 3 (weight=59), 10 (weight=2), 5 (weight=89), 8 (weight=75), 2 (weight=94), 1 (weight=19), 12 (weight=84), 7 (weight=2), 13 (weight=43)\nVertex 12: 5 (weight=5), 10 (weight=54), 3 (weight=24), 6 (weight=83), 2 (weight=23), 1 (weight=25), 11 (weight=84), 8 (weight=25), 7 (weight=88), 4 (weight=38), 13 (weight=82)\nVertex 13: 1 (weight=48), 6 (weight=73), 3 (weight=83), 8 (weight=18), 9 (weight=88), 11 (weight=43), 4 (weight=15), 7 (weight=55), 12 (weight=82), 5 (weight=72)\n",
    "graph_output": "13 69\n1 7 60\n7 3 10\n3 11 59\n11 10 2\n3 6 71\n7 2 72\n11 5 89\n5 12 5\n6 4 76\n1 13 48\n2 8 21\n8 9 25\n11 8 75\n9 5 8\n13 6 73\n1 3 92\n12 10 54\n7 6 24\n10 9 86\n4 10 65\n4 5 56\n9 3 100\n4 7 99\n12 3 24\n3 5 64\n13 3 83\n8 13 18\n11 2 94\n9 13 88\n6 12 83\n6 8 53\n1 11 19\n7 8 23\n2 5 17\n12 2 23\n10 1 67\n1 12 25\n12 11 84\n5 10 68\n7 11 2\n2 1 10\n11 13 43\n12 8 25\n3 4 58\n8 1 27\n7 12 88\n2 3 23\n9 1 87\n2 9 32\n13 4 15\n1 5 32\n10 7 36\n4 1 77\n6 2 84\n7 13 55\n10 2 50\n10 8 81\n4 12 38\n8 4 73\n6 1 44\n8 5 35\n5 6 97\n13 12 82\n2 4 12\n4 9 78\n10 3 33\n13 5 72\n10 6 73\n9 7 30\n",
    "vertices": [
      null,
      null
    ],
    "answer": 145,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 98 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   0   1 \n 3 |  0   1   0   1   1   1   0   1   1   1   0   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   0   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   0   0   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   0   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 9 |  1   1   1   0   1   1   1   1   0   1   1   1   1   1   1 \n10 |  1   1   1   1   0   1   1   1   1   0   1   1   1   1   1 \n11 |  1   1   0   1   0   1   1   1   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   0   1   1   1   1   1   1   1   1   1   1   1   0   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 98\n1 8\n8 15\n8 6\n1 7\n1 12\n7 11\n11 13\n7 10\n15 4\n13 14\n1 9\n1 2\n9 5\n10 3\n1 5\n2 13\n1 15\n8 5\n13 8\n10 6\n4 2\n14 9\n2 9\n2 15\n7 12\n3 14\n9 11\n11 1\n8 9\n15 9\n14 8\n11 8\n8 3\n12 9\n4 12\n11 6\n14 11\n10 1\n4 5\n2 5\n1 13\n7 5\n11 15\n5 12\n11 10\n10 12\n7 15\n2 10\n9 7\n6 15\n4 3\n7 6\n12 2\n4 13\n15 12\n8 12\n3 2\n12 6\n10 9\n3 6\n3 9\n8 2\n15 14\n10 14\n5 13\n14 5\n6 9\n6 2\n12 11\n11 4\n4 14\n5 6\n4 1\n6 14\n15 5\n12 13\n1 14\n8 4\n13 9\n7 2\n10 8\n13 7\n12 3\n4 7\n4 10\n13 15\n7 14\n14 12\n10 13\n8 7\n5 3\n10 15\n15 3\n6 1\n11 2\n4 6\n13 3\n13 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 18 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (14\u00d714):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14\n   --------------------------------------------------------\n 1 |  0   0  16   0  15   0   0   0  33   0   0  97   0   0 \n 2 |  0   0   0   0   0   0  59   0  87   0   0   0  10   0 \n 3 | 16   0   0   0   0   0   0   0   0   0   0  97   0   0 \n 4 |  0   0   0   0   0   0  55   0   0   0  51   0   0   0 \n 5 | 15   0   0   0   0   0   0  57   0   0   0   0   0  39 \n 6 |  0   0   0   0   0   0  60   0   0   0   0   0   0   0 \n 7 |  0  59   0  55   0  60   0   0   0   0  30   0   0   0 \n 8 |  0   0   0   0  57   0   0   0   0  37   0  85   0   0 \n 9 | 33  87   0   0   0   0   0   0   0   0   7   0   0   0 \n10 |  0   0   0   0   0   0   0  37   0   0   0   0   0  79 \n11 |  0   0   0  51   0   0  30   0   7   0   0   0   0   0 \n12 | 97   0  97   0   0   0   0  85   0   0   0   0   0   0 \n13 |  0  10   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0  39   0   0   0   0  79   0   0   0   0 \n",
    "graph_output": "14 18\n1 9 33\n1 5 15\n9 2 87\n1 3 16\n5 8 57\n2 13 10\n8 10 37\n9 11 7\n11 7 30\n5 14 39\n7 6 60\n11 4 51\n8 12 85\n14 10 79\n1 12 97\n12 3 97\n7 2 59\n7 4 55\n",
    "vertices": [
      null,
      null
    ],
    "answer": 499,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (31\u00d731):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31\n   ----------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   1   0   0   0   0   1   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0 \n 2 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 9 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   1 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n11 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  1   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1 \n15 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   1   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0 \n28 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n30 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n31 |  0   1   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "31 30\n1 4\n1 12\n1 9\n12 22\n12 6\n22 27\n6 8\n9 31\n9 19\n19 20\n1 25\n27 26\n31 14\n31 2\n4 28\n1 11\n14 21\n9 15\n26 30\n12 3\n9 18\n8 24\n26 13\n20 23\n2 7\n26 10\n25 16\n26 5\n1 29\n23 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 1 (source) to vertex 10 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 10 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 2 (weight=97, capacity=10), 5 (weight=34, capacity=9)\nVertex 2: 1 (weight=97, capacity=10), 4 (weight=25, capacity=1)\nVertex 3: 4 (weight=46, capacity=4), 8 (weight=71, capacity=1)\nVertex 4: 2 (weight=25, capacity=1), 10 (weight=36, capacity=5), 3 (weight=46, capacity=4), 7 (weight=20, capacity=2), 11 (weight=57, capacity=5)\nVertex 5: 1 (weight=34, capacity=9), 9 (weight=6, capacity=10), 6 (weight=6, capacity=10)\nVertex 6: 5 (weight=6, capacity=10)\nVertex 7: 4 (weight=20, capacity=2)\nVertex 8: 3 (weight=71, capacity=1)\nVertex 9: 5 (weight=6, capacity=10)\nVertex 10: 4 (weight=36, capacity=5)\nVertex 11: 4 (weight=57, capacity=5)\n",
    "graph_output": "11 10\n1 2 97 10\n1 5 34 9\n2 4 25 1\n4 10 36 5\n5 9 6 10\n4 3 46 4\n4 7 20 2\n5 6 6 10\n3 8 71 1\n4 11 57 5\n",
    "vertices": [
      1,
      10
    ],
    "answer": 158,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 24 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   0   1   1   0   0   0   0   0   1   0 \n 2 |  0   0   0   0   0   1   1   0   1   0   0   0   0 \n 3 |  0   0   0   0   1   0   0   1   0   1   0   1   1 \n 4 |  0   0   0   0   1   0   0   0   0   0   0   0   1 \n 5 |  1   0   1   1   0   0   0   0   1   1   1   0   0 \n 6 |  1   1   0   0   0   0   0   1   1   0   0   0   0 \n 7 |  0   1   0   0   0   0   0   0   1   0   1   1   0 \n 8 |  0   0   1   0   0   1   0   0   0   0   1   0   0 \n 9 |  0   1   0   0   1   1   1   0   0   0   0   0   0 \n10 |  0   0   1   0   1   0   0   0   0   0   1   0   0 \n11 |  0   0   0   0   1   0   1   1   0   1   0   0   1 \n12 |  1   0   1   0   0   0   1   0   0   0   0   0   0 \n13 |  0   0   1   1   0   0   0   0   0   0   1   0   0 \n",
    "graph_output": "13 24\n3 8\n13 4\n3 13\n2 6\n7 12\n7 11\n7 2\n11 5\n7 9\n4 5\n11 13\n10 3\n8 11\n9 5\n1 12\n3 5\n3 12\n2 9\n6 9\n1 5\n10 5\n1 6\n8 6\n11 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 6 (source) to vertex 8 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 17 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0  14  12   0  87   0  58   0   0 \n 2 | 14   0  49   0   0   0  47   0  54 \n 3 | 12  49   0  64  30   0  66   0   0 \n 4 |  0   0  64   0  26  82   0   0   0 \n 5 | 87   0  30  26   0   0   0  53   0 \n 6 |  0   0   0  82   0   0  50   0   0 \n 7 | 58  47  66   0   0  50   0  67  77 \n 8 |  0   0   0   0  53   0  67   0  44 \n 9 |  0  54   0   0   0   0  77  44   0 \n\nCapacity Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0   1   5   0   4   0   4   0   0 \n 2 |  1   0   2   0   0   0   5   0   6 \n 3 |  5   2   0   3   6   0   9   0   0 \n 4 |  0   0   3   0   7   6   0   0   0 \n 5 |  4   0   6   7   0   0   0  10   0 \n 6 |  0   0   0   6   0   0   4   0   0 \n 7 |  4   5   9   0   0   4   0   6   1 \n 8 |  0   0   0   0  10   0   6   0   5 \n 9 |  0   6   0   0   0   0   1   5   0 \n",
    "graph_output": "9 17\n1 7 58 4\n7 8 67 6\n8 9 44 5\n1 5 87 4\n5 4 26 7\n4 3 64 3\n3 2 49 2\n7 6 50 4\n5 8 53 10\n3 7 66 9\n2 7 47 5\n9 2 54 6\n6 4 82 6\n2 1 14 1\n3 5 30 6\n9 7 77 1\n1 3 12 5\n",
    "vertices": [
      6,
      8
    ],
    "answer": 1434,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 37 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9 with a weight of 49.\nThere is an edge between vertex 9 and vertex 4 with a weight of 81.\nThere is an edge between vertex 4 and vertex 6 with a weight of 57.\nThere is an edge between vertex 9 and vertex 8 with a weight of 11.\nThere is an edge between vertex 1 and vertex 11 with a weight of 59.\nThere is an edge between vertex 6 and vertex 2 with a weight of 99.\nThere is an edge between vertex 11 and vertex 10 with a weight of 62.\nThere is an edge between vertex 4 and vertex 5 with a weight of 26.\nThere is an edge between vertex 9 and vertex 3 with a weight of 24.\nThere is an edge between vertex 3 and vertex 7 with a weight of 34.\nThere is an edge between vertex 9 and vertex 5 with a weight of 40.\nThere is an edge between vertex 2 and vertex 5 with a weight of 24.\nThere is an edge between vertex 7 and vertex 11 with a weight of 5.\nThere is an edge between vertex 1 and vertex 8 with a weight of 3.\nThere is an edge between vertex 10 and vertex 9 with a weight of 75.\nThere is an edge between vertex 8 and vertex 10 with a weight of 26.\nThere is an edge between vertex 2 and vertex 9 with a weight of 22.\nThere is an edge between vertex 10 and vertex 4 with a weight of 20.\nThere is an edge between vertex 4 and vertex 8 with a weight of 37.\nThere is an edge between vertex 6 and vertex 5 with a weight of 18.\nThere is an edge between vertex 7 and vertex 10 with a weight of 99.\nThere is an edge between vertex 11 and vertex 8 with a weight of 15.\nThere is an edge between vertex 1 and vertex 2 with a weight of 27.\nThere is an edge between vertex 4 and vertex 11 with a weight of 18.\nThere is an edge between vertex 7 and vertex 8 with a weight of 23.\nThere is an edge between vertex 2 and vertex 3 with a weight of 16.\nThere is an edge between vertex 7 and vertex 2 with a weight of 15.\nThere is an edge between vertex 8 and vertex 2 with a weight of 27.\nThere is an edge between vertex 4 and vertex 3 with a weight of 62.\nThere is an edge between vertex 10 and vertex 3 with a weight of 10.\nThere is an edge between vertex 3 and vertex 1 with a weight of 40.\nThere is an edge between vertex 6 and vertex 7 with a weight of 99.\nThere is an edge between vertex 11 and vertex 2 with a weight of 76.\nThere is an edge between vertex 5 and vertex 1 with a weight of 92.\nThere is an edge between vertex 3 and vertex 11 with a weight of 34.\nThere is an edge between vertex 6 and vertex 1 with a weight of 24.\nThere is an edge between vertex 9 and vertex 11 with a weight of 25.\n",
    "graph_output": "11 37\n1 9 49\n9 4 81\n4 6 57\n9 8 11\n1 11 59\n6 2 99\n11 10 62\n4 5 26\n9 3 24\n3 7 34\n9 5 40\n2 5 24\n7 11 5\n1 8 3\n10 9 75\n8 10 26\n2 9 22\n10 4 20\n4 8 37\n6 5 18\n7 10 99\n11 8 15\n1 2 27\n4 11 18\n7 8 23\n2 3 16\n7 2 15\n8 2 27\n4 3 62\n10 3 10\n3 1 40\n6 7 99\n11 2 76\n5 1 92\n3 11 34\n6 1 24\n9 11 25\n",
    "vertices": [
      null,
      null
    ],
    "answer": 137,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 19 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 2, 4, 7, 5\nVertex 2: 6, 7, 4, 1, 5\nVertex 3: 5, 7, 6, 4\nVertex 4: 6, 2, 7, 1, 3, 5\nVertex 5: 3, 6, 2, 1, 7, 4\nVertex 6: 2, 5, 3, 1, 4, 7\nVertex 7: 2, 3, 6, 4, 1, 5\n",
    "graph_output": "7 19\n6 2\n7 2\n5 3\n5 6\n3 7\n3 6\n6 1\n4 6\n7 6\n2 4\n1 2\n7 4\n1 4\n3 4\n2 5\n7 1\n1 5\n5 7\n5 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 587,
    "description_type": "list"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 31 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 20.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 23.\nThere is an edge between vertex 20 and vertex 3.\nThere is an edge between vertex 1 and vertex 27.\nThere is an edge between vertex 27 and vertex 5.\nThere is an edge between vertex 23 and vertex 10.\nThere is an edge between vertex 27 and vertex 26.\nThere is an edge between vertex 3 and vertex 25.\nThere is an edge between vertex 26 and vertex 15.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 3 and vertex 21.\nThere is an edge between vertex 15 and vertex 28.\nThere is an edge between vertex 20 and vertex 17.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 10 and vertex 22.\nThere is an edge between vertex 17 and vertex 19.\nThere is an edge between vertex 4 and vertex 30.\nThere is an edge between vertex 22 and vertex 11.\nThere is an edge between vertex 22 and vertex 12.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 28 and vertex 2.\nThere is an edge between vertex 15 and vertex 31.\nThere is an edge between vertex 9 and vertex 29.\nThere is an edge between vertex 15 and vertex 18.\nThere is an edge between vertex 28 and vertex 24.\nThere is an edge between vertex 29 and vertex 14.\nThere is an edge between vertex 2 and vertex 13.\n",
    "graph_output": "31 30\n1 20\n1 8\n1 23\n20 3\n1 27\n27 5\n23 10\n27 26\n3 25\n26 15\n8 4\n5 7\n3 21\n15 28\n20 17\n7 16\n16 9\n10 22\n17 19\n4 30\n22 11\n22 12\n1 6\n28 2\n15 31\n9 29\n15 18\n28 24\n29 14\n2 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 11,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 111 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 2, 11, 3, 9, 12, 4, 8, 5, 16, 6, 14, 10, 7, 17\nVertex 2: 1, 14, 5, 13, 17, 4, 11, 6, 8, 3, 15, 12, 7, 10, 9, 16\nVertex 3: 1, 14, 9, 16, 6, 8, 2, 17, 13, 12, 4, 11, 15\nVertex 4: 15, 2, 10, 8, 6, 1, 14, 12, 17, 3, 5\nVertex 5: 2, 6, 16, 10, 13, 17, 11, 1, 12, 14, 4, 7, 9\nVertex 6: 5, 17, 12, 15, 13, 2, 4, 10, 11, 3, 1, 7, 9\nVertex 7: 16, 8, 12, 10, 11, 2, 15, 14, 6, 13, 1, 5\nVertex 8: 14, 4, 7, 10, 9, 3, 16, 1, 2, 15, 13\nVertex 9: 15, 1, 16, 8, 3, 11, 13, 14, 2, 6, 12, 17, 10, 5\nVertex 10: 5, 4, 8, 6, 11, 7, 14, 12, 15, 16, 2, 9, 1\nVertex 11: 1, 2, 14, 12, 6, 5, 9, 10, 17, 7, 13, 15, 3\nVertex 12: 16, 6, 1, 11, 7, 15, 10, 5, 17, 2, 4, 9, 3\nVertex 13: 2, 6, 5, 9, 16, 11, 3, 8, 15, 7, 17\nVertex 14: 2, 8, 16, 11, 3, 4, 10, 9, 1, 15, 7, 17, 5\nVertex 15: 1, 4, 9, 17, 6, 8, 12, 10, 2, 14, 7, 11, 13, 16, 3\nVertex 16: 5, 12, 7, 14, 9, 3, 8, 13, 1, 10, 17, 2, 15\nVertex 17: 2, 6, 15, 5, 12, 11, 3, 16, 4, 14, 9, 13, 1\n",
    "graph_output": "17 111\n1 15\n1 2\n2 14\n15 4\n2 5\n2 13\n5 6\n5 16\n5 10\n15 9\n2 17\n14 8\n1 11\n1 3\n16 12\n16 7\n2 4\n14 16\n10 4\n6 17\n1 9\n2 11\n6 12\n4 8\n11 14\n7 8\n17 15\n6 15\n13 6\n6 2\n12 1\n10 8\n6 4\n13 5\n9 16\n6 10\n11 12\n9 8\n12 7\n14 3\n9 3\n6 11\n16 3\n5 17\n5 11\n3 6\n1 4\n3 8\n4 14\n11 9\n16 8\n11 10\n1 8\n2 8\n10 7\n14 10\n9 13\n15 8\n12 15\n10 12\n1 5\n12 5\n12 17\n17 11\n10 15\n7 11\n3 2\n16 13\n15 2\n3 17\n16 1\n9 14\n2 12\n7 2\n16 10\n1 6\n17 16\n14 1\n15 14\n7 15\n13 11\n11 15\n14 7\n10 2\n7 6\n2 9\n3 13\n12 4\n9 6\n17 4\n14 17\n8 13\n2 16\n14 5\n9 12\n9 17\n15 13\n12 3\n10 9\n3 4\n5 4\n7 13\n17 13\n10 1\n1 7\n11 3\n16 15\n7 5\n3 15\n5 9\n17 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 17 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   1   0   0   1   1   0   0   1   0   0   0   0   1   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0 \n 3 |  1   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   1   0 \n 5 |  0   0   0   0   0   0   0   0   0   1   0   0   1   1   0   0   0 \n 6 |  1   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 7 |  1   0   1   0   0   0   0   0   0   0   1   0   0   0   1   0   0 \n 8 |  0   0   0   1   0   0   0   0   0   0   1   0   1   1   1   0   0 \n 9 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   1 \n10 |  1   0   0   1   1   0   0   0   0   0   1   0   0   0   0   0   1 \n11 |  0   1   0   0   0   0   1   1   0   1   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0 \n13 |  0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0 \n15 |  1   1   0   0   0   0   1   1   1   0   0   1   0   0   0   0   0 \n16 |  0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0 \n",
    "graph_output": "17 28\n1 10\n10 11\n10 5\n10 17\n11 8\n10 4\n8 13\n8 15\n15 12\n11 7\n4 16\n17 9\n7 3\n1 6\n11 2\n5 14\n16 12\n9 6\n2 15\n6 3\n8 14\n8 4\n9 15\n13 5\n15 7\n1 3\n7 1\n15 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 11 and vertex 9 are connected.\n\nUndirected Graph with 15 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 13\n2 5\n12 14\n6 11\n14 2\n15 5\n8 13\n14 11\n2 4\n11 8\n5 8\n13 14\n8 2\n14 8\n13 3\n5 4\n13 10\n5 14\n1 11\n10 5\n6 10\n15 2\n9 1\n8 9\n3 14\n10 12\n11 15\n9 12\n2 1\n14 4\n",
    "graph_output": "15 30\n1 13\n2 5\n12 14\n6 11\n14 2\n15 5\n8 13\n14 11\n2 4\n11 8\n5 8\n13 14\n8 2\n14 8\n13 3\n5 4\n13 10\n5 14\n1 11\n10 5\n6 10\n15 2\n9 1\n8 9\n3 14\n10 12\n11 15\n9 12\n2 1\n14 4\n",
    "vertices": [
      11,
      9
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 69 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 2, 11, 9, 5, 12, 4, 7, 10, 13\nVertex 2: 11, 3, 1, 9, 4, 7, 6, 10, 8, 13, 12\nVertex 3: 5, 2, 9, 4, 11, 12, 6, 8, 13\nVertex 4: 3, 6, 13, 2, 9, 11, 10, 7, 1, 8, 12, 5\nVertex 5: 3, 13, 12, 10, 9, 6, 7, 1, 8, 4\nVertex 6: 8, 10, 7, 5, 4, 9, 13, 2, 3, 11, 12\nVertex 7: 6, 5, 8, 13, 2, 4, 1, 10, 11\nVertex 8: 6, 13, 1, 7, 9, 11, 12, 3, 5, 10, 2, 4\nVertex 9: 3, 11, 5, 2, 1, 6, 4, 8, 13, 12\nVertex 10: 6, 5, 4, 11, 2, 8, 13, 12, 1, 7\nVertex 11: 2, 9, 3, 1, 13, 12, 8, 4, 10, 6, 7\nVertex 12: 5, 11, 13, 1, 8, 3, 9, 10, 2, 4, 6\nVertex 13: 5, 8, 4, 11, 6, 7, 12, 9, 10, 1, 2, 3\n",
    "graph_output": "13 69\n6 8\n3 5\n6 10\n5 13\n2 11\n3 2\n5 12\n5 10\n3 9\n13 8\n11 9\n4 3\n6 7\n5 9\n3 11\n1 8\n1 2\n1 11\n5 6\n9 2\n4 6\n13 4\n2 4\n11 13\n7 5\n9 1\n1 5\n7 8\n9 6\n13 6\n9 4\n13 7\n11 12\n13 12\n8 9\n7 2\n12 1\n8 11\n9 13\n11 4\n4 10\n2 6\n8 12\n12 3\n6 3\n10 11\n8 3\n4 7\n10 2\n9 12\n4 1\n8 5\n10 8\n1 7\n13 10\n10 12\n11 6\n1 10\n8 2\n7 10\n1 13\n11 7\n4 8\n13 2\n2 12\n12 4\n13 3\n5 4\n6 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 11 vertices and 17 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6 with a weight of 9.\nThere is an edge between vertex 6 and vertex 10 with a weight of 7.\nThere is an edge between vertex 1 and vertex 4 with a weight of 64.\nThere is an edge between vertex 4 and vertex 9 with a weight of 60.\nThere is an edge between vertex 4 and vertex 11 with a weight of 88.\nThere is an edge between vertex 11 and vertex 7 with a weight of 54.\nThere is an edge between vertex 10 and vertex 5 with a weight of 38.\nThere is an edge between vertex 11 and vertex 3 with a weight of 16.\nThere is an edge between vertex 5 and vertex 8 with a weight of 62.\nThere is an edge between vertex 9 and vertex 2 with a weight of 46.\nThere is an edge between vertex 5 and vertex 1 with a weight of 82.\nThere is an edge between vertex 5 and vertex 3 with a weight of 79.\nThere is an edge between vertex 3 and vertex 7 with a weight of 84.\nThere is an edge between vertex 8 and vertex 2 with a weight of 28.\nThere is an edge between vertex 10 and vertex 2 with a weight of 13.\nThere is an edge between vertex 1 and vertex 2 with a weight of 55.\nThere is an edge between vertex 7 and vertex 6 with a weight of 49.\n",
    "graph_output": "11 17\n1 6 9\n6 10 7\n1 4 64\n4 9 60\n4 11 88\n11 7 54\n10 5 38\n11 3 16\n5 8 62\n9 2 46\n5 1 82\n5 3 79\n3 7 84\n8 2 28\n10 2 13\n1 2 55\n7 6 49\n",
    "vertices": [
      null,
      null
    ],
    "answer": 324,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 6 (source) to vertex 13 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 26 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   0   0   0   0   1   0   0   1   0   1 \n 2 |  0   0   0   1   1   1   1   0   0   0   0   0   0 \n 3 |  0   0   0   1   1   0   0   0   0   1   0   0   0 \n 4 |  0   1   1   0   0   0   0   1   0   0   0   0   1 \n 5 |  0   1   1   0   0   0   0   1   1   1   0   1   0 \n 6 |  0   1   0   0   0   0   0   1   0   1   1   0   0 \n 7 |  0   1   0   0   0   0   0   1   1   0   0   0   0 \n 8 |  1   0   0   1   1   1   1   0   1   0   0   0   1 \n 9 |  0   0   0   0   1   0   1   1   0   0   0   1   1 \n10 |  0   0   1   0   1   1   0   0   0   0   0   1   0 \n11 |  1   0   0   0   0   1   0   0   0   0   0   0   0 \n12 |  0   0   0   0   1   0   0   0   1   1   0   0   0 \n13 |  1   0   0   1   0   0   0   1   1   0   0   0   0 \n\nCapacity Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   0   0   0   0   4   0   0   3   0   2 \n 2 |  0   0   0   1  10   3   5   0   0   0   0   0   0 \n 3 |  0   0   0   5   2   0   0   0   0   3   0   0   0 \n 4 |  0   1   5   0   0   0   0   7   0   0   0   0   6 \n 5 |  0  10   2   0   0   0   0   9  10   7   0   9   0 \n 6 |  0   3   0   0   0   0   0  10   0  10   8   0   0 \n 7 |  0   5   0   0   0   0   0   5   3   0   0   0   0 \n 8 |  4   0   0   7   9  10   5   0   6   0   0   0   6 \n 9 |  0   0   0   0  10   0   3   6   0   0   0   1   9 \n10 |  0   0   3   0   7  10   0   0   0   0   0   5   0 \n11 |  3   0   0   0   0   8   0   0   0   0   0   0   0 \n12 |  0   0   0   0   9   0   0   0   1   5   0   0   0 \n13 |  2   0   0   6   0   0   0   6   9   0   0   0   0 \n",
    "graph_output": "13 26\n1 8 4\n8 5 9\n5 2 10\n1 11 3\n5 10 7\n8 9 6\n9 12 1\n10 6 10\n2 7 5\n9 13 9\n5 3 2\n2 4 1\n13 4 6\n1 13 2\n2 6 3\n4 8 7\n6 11 8\n5 12 9\n10 12 5\n6 8 10\n7 8 5\n3 4 5\n7 9 3\n13 8 6\n10 3 3\n5 9 10\n",
    "vertices": [
      6,
      13
    ],
    "answer": 23,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 19 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0  17  32  23   0   0   0  61  29   0  69 \n 2 |  0   0  35   0   0   0   0  84   0   0   0   0 \n 3 | 17  35   0   0   0   0   0   0   0   0  75   0 \n 4 | 32   0   0   0   0   0   0   0   0   0   0   0 \n 5 | 23   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0  57   0   0  28   0  56 \n 7 |  0   0   0   0   0  57   0   0   0  96  35  14 \n 8 |  0  84   0   0   0   0   0   0  74   0  53   0 \n 9 | 61   0   0   0   0   0   0  74   0   0   0   0 \n10 | 29   0   0   0   0  28  96   0   0   0  82  45 \n11 |  0   0  75   0   0   0  35  53   0  82   0   0 \n12 | 69   0   0   0   0  56  14   0   0  45   0   0 \n",
    "graph_output": "12 19\n1 9 61\n1 5 23\n1 3 17\n1 10 29\n10 7 96\n9 8 74\n8 2 84\n7 12 14\n10 11 82\n7 6 57\n1 4 32\n11 3 75\n3 2 35\n6 10 28\n1 12 69\n10 12 45\n12 6 56\n8 11 53\n7 11 35\n",
    "vertices": [
      null,
      null
    ],
    "answer": 383,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 91 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 16, 7, 4, 5, 2, 8, 12, 14, 15, 10\nVertex 2: 13, 7, 11, 1, 12, 9, 15, 4, 3\nVertex 3: 13, 15, 12, 5, 4, 16, 11, 14, 6, 2, 7, 10\nVertex 4: 1, 13, 14, 15, 9, 3, 8, 5, 6, 2\nVertex 5: 1, 15, 3, 11, 12, 14, 10, 4, 16, 9, 13, 7\nVertex 6: 8, 12, 15, 13, 14, 9, 7, 11, 4, 16, 3\nVertex 7: 1, 14, 2, 9, 15, 8, 6, 16, 12, 5, 3\nVertex 8: 16, 6, 10, 13, 11, 4, 1, 7, 9, 15\nVertex 9: 13, 11, 4, 7, 2, 6, 8, 10, 14, 16, 5\nVertex 10: 8, 5, 13, 9, 11, 16, 14, 1, 12, 3, 15\nVertex 11: 13, 8, 16, 2, 9, 5, 3, 12, 14, 6, 10\nVertex 12: 6, 3, 14, 2, 13, 5, 1, 11, 7, 15, 16, 10\nVertex 13: 1, 3, 11, 9, 2, 8, 15, 4, 14, 6, 12, 10, 5, 16\nVertex 14: 7, 13, 4, 12, 5, 6, 11, 9, 3, 1, 10, 16\nVertex 15: 3, 13, 5, 4, 6, 7, 16, 2, 12, 1, 8, 10\nVertex 16: 1, 8, 11, 3, 5, 15, 7, 10, 6, 9, 13, 12, 14\n",
    "graph_output": "16 91\n1 13\n13 3\n1 16\n1 7\n7 14\n13 11\n13 9\n13 2\n3 15\n1 4\n16 8\n8 6\n8 10\n6 12\n1 5\n3 12\n8 13\n13 15\n13 4\n13 14\n4 14\n11 8\n16 11\n7 2\n12 14\n5 15\n2 11\n15 4\n3 5\n11 9\n6 15\n9 4\n7 9\n13 6\n3 4\n2 1\n2 12\n9 2\n13 12\n5 11\n12 5\n4 8\n16 3\n1 8\n15 7\n14 5\n5 10\n14 6\n8 7\n10 13\n1 12\n9 6\n3 11\n12 11\n8 9\n4 5\n14 11\n5 16\n7 6\n9 10\n15 16\n16 7\n9 14\n3 14\n15 2\n6 11\n12 7\n10 11\n12 15\n10 16\n1 14\n6 4\n6 16\n9 16\n9 5\n13 5\n1 15\n4 2\n16 13\n7 5\n6 3\n14 10\n10 1\n16 12\n14 16\n2 3\n12 10\n3 7\n15 8\n3 10\n15 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 17 and vertex 14 are connected.\n\nUndirected Graph with 17 vertices and 115 edges\n\nEdges (Format: Node Node):\n17 5\n8 17\n2 4\n4 16\n12 15\n13 11\n1 8\n3 1\n1 5\n13 10\n15 6\n6 1\n15 8\n13 3\n13 5\n11 9\n5 16\n13 16\n15 14\n14 9\n1 15\n11 14\n14 1\n8 11\n2 13\n2 17\n7 5\n6 4\n3 8\n15 7\n7 17\n8 2\n3 9\n6 12\n7 16\n9 7\n13 6\n9 8\n2 14\n17 6\n17 12\n16 15\n13 1\n12 2\n4 10\n3 17\n2 11\n10 14\n7 13\n7 4\n6 7\n17 4\n14 8\n5 4\n11 10\n8 13\n6 16\n14 5\n8 10\n5 10\n15 11\n16 1\n1 7\n7 2\n12 9\n9 16\n6 3\n11 7\n1 4\n16 2\n12 16\n10 9\n12 5\n4 11\n3 14\n17 9\n6 2\n17 11\n4 13\n15 2\n15 9\n10 15\n9 6\n4 12\n6 10\n2 1\n12 7\n1 10\n11 3\n3 15\n5 3\n3 12\n13 12\n8 16\n11 16\n8 7\n5 2\n15 17\n2 3\n9 2\n1 12\n5 15\n3 10\n7 3\n4 15\n10 17\n8 12\n14 12\n17 14\n16 17\n11 6\n11 1\n13 9\n13 14\n5 6\n",
    "graph_output": "17 115\n17 5\n8 17\n2 4\n4 16\n12 15\n13 11\n1 8\n3 1\n1 5\n13 10\n15 6\n6 1\n15 8\n13 3\n13 5\n11 9\n5 16\n13 16\n15 14\n14 9\n1 15\n11 14\n14 1\n8 11\n2 13\n2 17\n7 5\n6 4\n3 8\n15 7\n7 17\n8 2\n3 9\n6 12\n7 16\n9 7\n13 6\n9 8\n2 14\n17 6\n17 12\n16 15\n13 1\n12 2\n4 10\n3 17\n2 11\n10 14\n7 13\n7 4\n6 7\n17 4\n14 8\n5 4\n11 10\n8 13\n6 16\n14 5\n8 10\n5 10\n15 11\n16 1\n1 7\n7 2\n12 9\n9 16\n6 3\n11 7\n1 4\n16 2\n12 16\n10 9\n12 5\n4 11\n3 14\n17 9\n6 2\n17 11\n4 13\n15 2\n15 9\n10 15\n9 6\n4 12\n6 10\n2 1\n12 7\n1 10\n11 3\n3 15\n5 3\n3 12\n13 12\n8 16\n11 16\n8 7\n5 2\n15 17\n2 3\n9 2\n1 12\n5 15\n3 10\n7 3\n4 15\n10 17\n8 12\n14 12\n17 14\n16 17\n11 6\n11 1\n13 9\n13 14\n5 6\n",
    "vertices": [
      17,
      14
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 1 (source) to vertex 11 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 11 vertices and 40 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 10 83 9\n1 2 49 6\n2 7 26 9\n7 9 15 10\n2 6 5 2\n10 8 22 2\n1 11 52 6\n6 3 29 2\n7 5 61 4\n11 4 33 4\n2 11 6 6\n8 6 25 9\n11 9 86 2\n6 10 100 7\n7 10 68 3\n1 8 90 2\n3 10 32 3\n3 4 7 1\n2 8 72 7\n6 1 49 2\n8 11 33 10\n5 4 82 1\n9 10 45 8\n6 4 75 1\n1 7 28 6\n9 2 68 2\n5 9 71 10\n3 1 85 2\n9 6 34 9\n5 2 51 4\n7 3 32 1\n7 6 81 8\n7 8 43 8\n9 1 37 8\n3 8 4 4\n1 5 88 8\n3 2 80 1\n8 9 28 10\n7 4 46 5\n11 7 36 10\n",
    "graph_output": "11 40\n1 10 83 9\n1 2 49 6\n2 7 26 9\n7 9 15 10\n2 6 5 2\n10 8 22 2\n1 11 52 6\n6 3 29 2\n7 5 61 4\n11 4 33 4\n2 11 6 6\n8 6 25 9\n11 9 86 2\n6 10 100 7\n7 10 68 3\n1 8 90 2\n3 10 32 3\n3 4 7 1\n2 8 72 7\n6 1 49 2\n8 11 33 10\n5 4 82 1\n9 10 45 8\n6 4 75 1\n1 7 28 6\n9 2 68 2\n5 9 71 10\n3 1 85 2\n9 6 34 9\n5 2 51 4\n7 3 32 1\n7 6 81 8\n7 8 43 8\n9 1 37 8\n3 8 4 4\n1 5 88 8\n3 2 80 1\n8 9 28 10\n7 4 46 5\n11 7 36 10\n",
    "vertices": [
      1,
      11
    ],
    "answer": 3528,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 17 vertices and 21 edges\n\nEdges (Format: Node Node):\n14 3\n12 5\n14 9\n8 4\n12 2\n8 9\n15 13\n11 16\n7 13\n1 14\n6 15\n17 1\n16 14\n15 3\n2 9\n13 4\n17 9\n5 9\n6 14\n4 3\n8 3\n",
    "graph_output": "17 21\n14 3\n12 5\n14 9\n8 4\n12 2\n8 9\n15 13\n11 16\n7 13\n1 14\n6 15\n17 1\n16 14\n15 3\n2 9\n13 4\n17 9\n5 9\n6 14\n4 3\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 11 vertices and 40 edges\n\nEdges (Format: Node Node):\n7 10\n5 9\n1 11\n4 3\n2 11\n7 6\n3 11\n3 1\n11 4\n2 8\n9 1\n2 4\n9 4\n3 9\n7 9\n7 8\n10 5\n10 3\n5 1\n11 5\n2 3\n7 5\n11 10\n1 6\n4 8\n2 5\n5 6\n2 7\n5 3\n5 4\n8 6\n9 2\n10 6\n10 2\n11 7\n9 8\n1 8\n2 6\n9 10\n4 6\n",
    "graph_output": "11 40\n7 10\n5 9\n1 11\n4 3\n2 11\n7 6\n3 11\n3 1\n11 4\n2 8\n9 1\n2 4\n9 4\n3 9\n7 9\n7 8\n10 5\n10 3\n5 1\n11 5\n2 3\n7 5\n11 10\n1 6\n4 8\n2 5\n5 6\n2 7\n5 3\n5 4\n8 6\n9 2\n10 6\n10 2\n11 7\n9 8\n1 8\n2 6\n9 10\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 11 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 12 vertices and 64 edges\n\nEdges (Format: Node Node Capacity):\n1 2 10\n2 7 4\n2 5 3\n2 12 6\n2 11 6\n5 8 4\n5 4 7\n8 9 1\n7 6 1\n7 3 5\n7 10 5\n1 11 4\n11 6 6\n11 8 1\n8 1 3\n5 12 9\n12 10 8\n7 5 7\n11 3 3\n8 2 1\n12 1 8\n11 12 7\n6 5 9\n4 11 8\n11 5 8\n8 3 9\n4 2 3\n12 3 5\n2 10 3\n9 2 5\n10 4 1\n6 12 8\n1 10 8\n10 6 4\n1 4 6\n7 1 8\n5 1 6\n3 2 6\n7 4 10\n9 11 8\n9 4 4\n7 12 9\n9 3 6\n9 12 3\n9 6 5\n7 9 5\n3 1 8\n6 4 5\n10 9 3\n7 8 8\n3 6 5\n3 4 2\n2 6 1\n4 12 5\n8 10 7\n9 1 5\n4 8 1\n12 8 1\n3 10 2\n5 10 1\n11 10 9\n8 6 8\n11 7 3\n3 5 2\n",
    "graph_output": "12 64\n1 2 10\n2 7 4\n2 5 3\n2 12 6\n2 11 6\n5 8 4\n5 4 7\n8 9 1\n7 6 1\n7 3 5\n7 10 5\n1 11 4\n11 6 6\n11 8 1\n8 1 3\n5 12 9\n12 10 8\n7 5 7\n11 3 3\n8 2 1\n12 1 8\n11 12 7\n6 5 9\n4 11 8\n11 5 8\n8 3 9\n4 2 3\n12 3 5\n2 10 3\n9 2 5\n10 4 1\n6 12 8\n1 10 8\n10 6 4\n1 4 6\n7 1 8\n5 1 6\n3 2 6\n7 4 10\n9 11 8\n9 4 4\n7 12 9\n9 3 6\n9 12 3\n9 6 5\n7 9 5\n3 1 8\n6 4 5\n10 9 3\n7 8 8\n3 6 5\n3 4 2\n2 6 1\n4 12 5\n8 10 7\n9 1 5\n4 8 1\n12 8 1\n3 10 2\n5 10 1\n11 10 9\n8 6 8\n11 7 3\n3 5 2\n",
    "vertices": [
      11,
      6
    ],
    "answer": 52,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 1 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 77 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   0   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1 \n 8 |  1   1   1   0   1   1   1   0   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0 \n\nCapacity Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   4   6   8   3   3   4   4   1   4   9   7   6 \n 2 |  4   0   9   3   8  10   4   9   7   5  10   9   6 \n 3 |  6   9   0   7   4   4   1   6   2   5   6   8   8 \n 4 |  8   3   7   0   9   6   1   0   6   5   6   7   8 \n 5 |  3   8   4   9   0  10   2   2  10   9   5   1   6 \n 6 |  3  10   4   6  10   0   6   5   9   5   9   2   7 \n 7 |  4   4   1   1   2   6   0   5   2   4   3   4   4 \n 8 |  4   9   6   0   2   5   5   0   3   7   6   5   3 \n 9 |  1   7   2   6  10   9   2   3   0   9   7   2  10 \n10 |  4   5   5   5   9   5   4   7   9   0   8   1   9 \n11 |  9  10   6   6   5   9   3   6   7   8   0   8  10 \n12 |  7   9   8   7   1   2   4   5   2   1   8   0   7 \n13 |  6   6   8   8   6   7   4   3  10   9  10   7   0 \n",
    "graph_output": "13 77\n1 7 4\n1 6 3\n1 3 6\n7 12 4\n12 4 7\n6 13 7\n3 9 2\n3 10 5\n9 2 7\n6 5 10\n4 11 6\n1 8 4\n1 12 7\n11 8 6\n10 6 5\n7 10 4\n1 4 8\n9 5 10\n1 9 1\n6 3 4\n9 6 9\n4 2 3\n8 7 5\n2 10 5\n9 8 3\n11 12 8\n9 12 2\n9 13 10\n7 11 3\n5 8 2\n11 10 8\n3 12 8\n4 5 9\n5 3 4\n5 7 2\n2 7 4\n8 2 9\n9 10 9\n11 9 7\n6 8 5\n13 8 3\n3 8 6\n13 11 10\n3 11 6\n5 10 9\n4 7 1\n2 13 6\n13 3 8\n3 4 7\n13 1 6\n6 12 2\n12 2 9\n5 11 5\n3 7 1\n10 4 5\n2 11 10\n10 1 4\n10 12 1\n2 3 9\n13 12 7\n5 13 6\n8 10 7\n11 6 9\n1 2 4\n13 7 4\n2 5 8\n13 4 8\n4 9 6\n6 4 6\n10 13 9\n8 12 5\n12 5 1\n6 7 6\n6 2 10\n11 1 9\n1 5 3\n7 9 2\n",
    "vertices": [
      1,
      6
    ],
    "answer": 59,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 15 vertices and 98 edges\n\nEdges (Format: Node Node):\n1 8\n8 15\n8 6\n1 7\n1 12\n7 11\n11 13\n7 10\n15 4\n13 14\n1 9\n1 2\n9 5\n10 3\n1 5\n2 13\n1 15\n8 5\n13 8\n10 6\n4 2\n14 9\n2 9\n2 15\n7 12\n3 14\n9 11\n11 1\n8 9\n15 9\n14 8\n11 8\n8 3\n12 9\n4 12\n11 6\n14 11\n10 1\n4 5\n2 5\n1 13\n7 5\n11 15\n5 12\n11 10\n10 12\n7 15\n2 10\n9 7\n6 15\n4 3\n7 6\n12 2\n4 13\n15 12\n8 12\n3 2\n12 6\n10 9\n3 6\n3 9\n8 2\n15 14\n10 14\n5 13\n14 5\n6 9\n6 2\n12 11\n11 4\n4 14\n5 6\n4 1\n6 14\n15 5\n12 13\n1 14\n8 4\n13 9\n7 2\n10 8\n13 7\n12 3\n4 7\n4 10\n13 15\n7 14\n14 12\n10 13\n8 7\n5 3\n10 15\n15 3\n6 1\n11 2\n4 6\n13 3\n13 6\n",
    "graph_output": "15 98\n1 8\n8 15\n8 6\n1 7\n1 12\n7 11\n11 13\n7 10\n15 4\n13 14\n1 9\n1 2\n9 5\n10 3\n1 5\n2 13\n1 15\n8 5\n13 8\n10 6\n4 2\n14 9\n2 9\n2 15\n7 12\n3 14\n9 11\n11 1\n8 9\n15 9\n14 8\n11 8\n8 3\n12 9\n4 12\n11 6\n14 11\n10 1\n4 5\n2 5\n1 13\n7 5\n11 15\n5 12\n11 10\n10 12\n7 15\n2 10\n9 7\n6 15\n4 3\n7 6\n12 2\n4 13\n15 12\n8 12\n3 2\n12 6\n10 9\n3 6\n3 9\n8 2\n15 14\n10 14\n5 13\n14 5\n6 9\n6 2\n12 11\n11 4\n4 14\n5 6\n4 1\n6 14\n15 5\n12 13\n1 14\n8 4\n13 9\n7 2\n10 8\n13 7\n12 3\n4 7\n4 10\n13 15\n7 14\n14 12\n10 13\n8 7\n5 3\n10 15\n15 3\n6 1\n11 2\n4 6\n13 3\n13 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 24 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4 with a weight of 31.\nThere is an edge between vertex 4 and vertex 7 with a weight of 40.\nThere is an edge between vertex 7 and vertex 13 with a weight of 65.\nThere is an edge between vertex 7 and vertex 10 with a weight of 93.\nThere is an edge between vertex 7 and vertex 5 with a weight of 39.\nThere is an edge between vertex 13 and vertex 15 with a weight of 63.\nThere is an edge between vertex 1 and vertex 3 with a weight of 63.\nThere is an edge between vertex 7 and vertex 2 with a weight of 69.\nThere is an edge between vertex 13 and vertex 6 with a weight of 45.\nThere is an edge between vertex 1 and vertex 8 with a weight of 79.\nThere is an edge between vertex 6 and vertex 11 with a weight of 97.\nThere is an edge between vertex 15 and vertex 14 with a weight of 54.\nThere is an edge between vertex 13 and vertex 9 with a weight of 39.\nThere is an edge between vertex 11 and vertex 12 with a weight of 41.\nThere is an edge between vertex 13 and vertex 10 with a weight of 95.\nThere is an edge between vertex 10 and vertex 8 with a weight of 99.\nThere is an edge between vertex 10 and vertex 1 with a weight of 95.\nThere is an edge between vertex 12 and vertex 10 with a weight of 50.\nThere is an edge between vertex 6 and vertex 2 with a weight of 10.\nThere is an edge between vertex 3 and vertex 7 with a weight of 66.\nThere is an edge between vertex 5 and vertex 11 with a weight of 76.\nThere is an edge between vertex 4 and vertex 8 with a weight of 90.\nThere is an edge between vertex 12 and vertex 15 with a weight of 61.\nThere is an edge between vertex 12 and vertex 8 with a weight of 89.\n",
    "graph_output": "15 24\n1 4 31\n4 7 40\n7 13 65\n7 10 93\n7 5 39\n13 15 63\n1 3 63\n7 2 69\n13 6 45\n1 8 79\n6 11 97\n15 14 54\n13 9 39\n11 12 41\n13 10 95\n10 8 99\n10 1 95\n12 10 50\n6 2 10\n3 7 66\n5 11 76\n4 8 90\n12 15 61\n12 8 89\n",
    "vertices": [
      null,
      null
    ],
    "answer": 680,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 40 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 4 and vertex 6.\n",
    "graph_output": "11 40\n7 10\n5 9\n1 11\n4 3\n2 11\n7 6\n3 11\n3 1\n11 4\n2 8\n9 1\n2 4\n9 4\n3 9\n7 9\n7 8\n10 5\n10 3\n5 1\n11 5\n2 3\n7 5\n11 10\n1 6\n4 8\n2 5\n5 6\n2 7\n5 3\n5 4\n8 6\n9 2\n10 6\n10 2\n11 7\n9 8\n1 8\n2 6\n9 10\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 16 vertices and 17 edges\n\nEdges (Format: Node Node):\n1 14\n1 2\n14 8\n8 10\n8 12\n14 4\n4 5\n2 15\n5 11\n4 7\n10 13\n14 3\n10 16\n1 9\n8 6\n3 11\n3 1\n",
    "graph_output": "16 17\n1 14\n1 2\n14 8\n8 10\n8 12\n14 4\n4 5\n2 15\n5 11\n4 7\n10 13\n14 3\n10 16\n1 9\n8 6\n3 11\n3 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 45 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 3 and vertex 11 with a capacity of 4.\nThere is an edge between vertex 2 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 11 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 11 and vertex 8 with a capacity of 8.\nThere is an edge between vertex 11 and vertex 9 with a capacity of 7.\nThere is an edge between vertex 7 and vertex 6 with a capacity of 3.\nThere is an edge between vertex 8 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 8 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 11 with a capacity of 7.\nThere is an edge between vertex 11 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 5 with a capacity of 4.\nThere is an edge between vertex 8 and vertex 2 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 1 with a capacity of 9.\nThere is an edge between vertex 6 and vertex 1 with a capacity of 4.\nThere is an edge between vertex 7 and vertex 2 with a capacity of 7.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 10.\nThere is an edge between vertex 5 and vertex 4 with a capacity of 8.\nThere is an edge between vertex 8 and vertex 9 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 7 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 1 with a capacity of 1.\nThere is an edge between vertex 5 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 10 and vertex 3 with a capacity of 2.\nThere is an edge between vertex 7 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 9 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 1 with a capacity of 8.\nThere is an edge between vertex 10 and vertex 4 with a capacity of 7.\nThere is an edge between vertex 9 and vertex 6 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 3 with a capacity of 10.\nThere is an edge between vertex 4 and vertex 1 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 6.\nThere is an edge between vertex 8 and vertex 3 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 9 with a capacity of 8.\nThere is an edge between vertex 9 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 10 and vertex 2 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 5 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 10.\nThere is an edge between vertex 2 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 4 and vertex 11 with a capacity of 10.\n",
    "graph_output": "11 45\n1 3 1\n3 2 10\n3 11 4\n2 4 2\n11 7 5\n11 8 8\n11 9 7\n7 6 3\n8 10 4\n8 5 2\n1 11 7\n11 2 1\n2 5 4\n8 2 5\n9 1 9\n6 1 4\n7 2 7\n9 7 10\n5 4 8\n8 9 2\n4 7 2\n5 1 1\n5 9 9\n10 3 2\n7 10 10\n6 3 4\n4 9 1\n6 8 1\n2 1 8\n10 4 7\n9 6 9\n4 3 10\n4 1 10\n1 8 2\n4 8 2\n3 5 2\n5 6 6\n8 3 1\n2 9 8\n9 10 9\n10 2 6\n7 5 3\n7 8 10\n2 6 10\n4 11 10\n",
    "vertices": [
      3,
      4
    ],
    "answer": 34,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 26 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   1   1   0   0   1   0   0   1   0   0   0   0   0   1 \n 2 |  0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0 \n 3 |  1   0   0   0   0   0   1   0   1   0   1   0   0   0   0   0 \n 4 |  1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1 \n 5 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   1   0   1   1   0   0   1   0   0   0   0   0 \n 7 |  1   0   1   0   0   1   0   0   0   0   0   1   0   1   0   1 \n 8 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   1   1   0   0   0   0   0   0   0   0   0   0   1   0   0 \n10 |  1   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0 \n11 |  0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   1   0   0   1   0   0   0   0   0   0   0   1   1 \n13 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n14 |  0   0   0   0   0   0   1   0   1   1   0   0   0   0   0   1 \n15 |  0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0 \n16 |  1   0   0   1   0   0   1   0   0   0   0   1   1   1   0   0 \n",
    "graph_output": "16 26\n1 3\n1 10\n10 15\n1 4\n3 11\n3 9\n1 16\n16 7\n11 6\n6 5\n9 2\n6 8\n7 14\n2 13\n16 12\n16 13\n7 3\n1 7\n4 12\n16 4\n7 6\n14 9\n10 14\n12 15\n12 7\n14 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 130 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   0   1   1   1   0   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n 4 |  1   1   1   0   0   1   1   1   1   1   1   0   1   1   1   1   1 \n 5 |  1   1   1   0   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   0   1   1   1 \n10 |  1   0   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n11 |  1   1   0   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n12 |  1   1   1   0   1   1   1   1   1   1   1   0   1   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n14 |  1   0   1   1   1   1   1   1   0   1   1   1   1   0   1   1   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n16 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n17 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "17 130\n12 10\n1 5\n8 2\n17 3\n8 5\n14 17\n3 15\n11 14\n4 9\n17 7\n4 11\n13 14\n13 15\n3 2\n14 3\n16 2\n9 11\n13 11\n14 4\n3 7\n16 13\n4 10\n12 15\n5 3\n17 6\n2 6\n6 4\n15 5\n16 7\n2 9\n15 9\n17 8\n16 3\n15 8\n2 15\n13 8\n2 11\n6 13\n8 11\n8 16\n12 7\n4 2\n3 6\n16 12\n17 15\n17 9\n6 8\n2 1\n14 12\n16 9\n17 16\n13 3\n17 1\n5 10\n7 8\n8 4\n12 1\n5 12\n2 17\n9 1\n5 17\n13 4\n15 1\n2 12\n10 6\n16 1\n13 5\n6 5\n7 5\n14 8\n5 11\n6 7\n10 11\n2 13\n9 6\n17 13\n1 14\n15 4\n1 6\n16 4\n12 3\n14 6\n3 9\n17 12\n1 11\n16 5\n14 10\n12 13\n7 11\n17 11\n7 1\n10 3\n4 3\n16 6\n7 14\n17 10\n8 10\n4 17\n8 1\n5 9\n10 7\n15 11\n15 6\n13 10\n4 1\n8 9\n5 2\n14 16\n12 8\n1 3\n15 7\n12 6\n3 8\n11 6\n12 9\n15 14\n5 14\n2 7\n16 15\n11 12\n13 9\n9 10\n16 10\n13 1\n13 7\n7 9\n7 4\n11 16\n10 1\n15 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (31\u00d731):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31\n   ----------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   1   1   1   1   1   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 6 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 8 |  1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0 \n 9 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   1   0 \n11 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n20 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n21 |  0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0 \n22 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n28 |  0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n30 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n31 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0 \n",
    "graph_output": "31 30\n1 7\n1 8\n1 5\n8 22\n8 13\n1 20\n1 6\n20 17\n20 16\n5 29\n7 31\n29 21\n1 9\n31 19\n8 28\n16 24\n28 10\n10 25\n7 15\n21 14\n21 23\n10 30\n15 26\n31 27\n23 12\n19 3\n21 2\n1 4\n4 11\n7 18\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 105 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 105\n9 2\n11 15\n7 5\n11 2\n2 3\n7 4\n7 3\n10 11\n1 4\n13 5\n9 5\n15 1\n15 7\n13 3\n3 15\n13 2\n10 14\n9 6\n12 2\n12 14\n15 4\n8 10\n2 10\n6 14\n3 10\n4 8\n15 14\n9 1\n10 7\n1 5\n10 4\n6 12\n15 9\n7 8\n5 11\n14 8\n11 3\n9 8\n6 7\n9 13\n12 8\n6 4\n9 4\n3 5\n13 4\n1 13\n6 1\n4 5\n11 7\n7 9\n1 2\n9 12\n2 4\n14 11\n6 8\n4 14\n9 10\n10 1\n13 6\n9 14\n13 11\n3 4\n3 6\n12 3\n6 10\n14 2\n13 15\n14 3\n7 13\n10 13\n6 11\n12 7\n14 1\n12 1\n8 15\n9 11\n5 10\n7 14\n11 4\n3 8\n13 14\n10 15\n8 1\n8 5\n15 6\n7 1\n12 13\n11 1\n11 12\n1 3\n2 5\n10 12\n5 14\n8 11\n2 15\n2 7\n5 6\n12 15\n9 3\n5 12\n6 2\n8 13\n8 2\n12 4\n5 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 2 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 13 vertices and 69 edges\n\nEdges (Format: Node Node Capacity):\n1 3 10\n3 13 9\n3 12 2\n3 2 4\n3 9 9\n9 4 9\n1 6 6\n4 11 2\n6 10 9\n2 7 4\n11 5 2\n4 8 2\n6 5 4\n9 6 4\n8 11 3\n4 6 1\n6 7 6\n11 13 5\n12 8 10\n5 13 8\n5 3 7\n2 1 10\n3 8 5\n10 3 1\n2 11 7\n11 10 10\n7 1 7\n3 6 1\n2 9 9\n12 7 3\n7 10 10\n10 13 1\n7 8 1\n10 12 2\n5 1 1\n1 10 9\n13 9 5\n12 11 2\n2 12 6\n3 11 1\n7 4 4\n8 2 10\n8 1 7\n5 12 5\n3 4 10\n12 1 3\n11 7 1\n3 7 4\n4 12 1\n2 4 6\n6 8 9\n1 11 4\n1 9 8\n13 4 3\n8 9 8\n9 7 6\n7 5 3\n7 13 5\n4 10 5\n1 4 3\n13 2 6\n9 10 10\n9 11 8\n13 8 6\n5 4 2\n2 5 2\n6 13 10\n9 12 4\n12 6 4\n",
    "graph_output": "13 69\n1 3 10\n3 13 9\n3 12 2\n3 2 4\n3 9 9\n9 4 9\n1 6 6\n4 11 2\n6 10 9\n2 7 4\n11 5 2\n4 8 2\n6 5 4\n9 6 4\n8 11 3\n4 6 1\n6 7 6\n11 13 5\n12 8 10\n5 13 8\n5 3 7\n2 1 10\n3 8 5\n10 3 1\n2 11 7\n11 10 10\n7 1 7\n3 6 1\n2 9 9\n12 7 3\n7 10 10\n10 13 1\n7 8 1\n10 12 2\n5 1 1\n1 10 9\n13 9 5\n12 11 2\n2 12 6\n3 11 1\n7 4 4\n8 2 10\n8 1 7\n5 12 5\n3 4 10\n12 1 3\n11 7 1\n3 7 4\n4 12 1\n2 4 6\n6 8 9\n1 11 4\n1 9 8\n13 4 3\n8 9 8\n9 7 6\n7 5 3\n7 13 5\n4 10 5\n1 4 3\n13 2 6\n9 10 10\n9 11 8\n13 8 6\n5 4 2\n2 5 2\n6 13 10\n9 12 4\n12 6 4\n",
    "vertices": [
      2,
      4
    ],
    "answer": 48,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 86 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 14 with a weight of 81.\nThere is an edge between vertex 1 and vertex 13 with a weight of 19.\nThere is an edge between vertex 13 and vertex 6 with a weight of 99.\nThere is an edge between vertex 6 and vertex 9 with a weight of 18.\nThere is an edge between vertex 14 and vertex 3 with a weight of 10.\nThere is an edge between vertex 13 and vertex 4 with a weight of 75.\nThere is an edge between vertex 14 and vertex 5 with a weight of 24.\nThere is an edge between vertex 9 and vertex 15 with a weight of 14.\nThere is an edge between vertex 4 and vertex 7 with a weight of 83.\nThere is an edge between vertex 13 and vertex 8 with a weight of 46.\nThere is an edge between vertex 13 and vertex 2 with a weight of 85.\nThere is an edge between vertex 13 and vertex 11 with a weight of 84.\nThere is an edge between vertex 6 and vertex 10 with a weight of 65.\nThere is an edge between vertex 10 and vertex 12 with a weight of 55.\nThere is an edge between vertex 5 and vertex 15 with a weight of 83.\nThere is an edge between vertex 15 and vertex 3 with a weight of 79.\nThere is an edge between vertex 8 and vertex 14 with a weight of 45.\nThere is an edge between vertex 13 and vertex 5 with a weight of 57.\nThere is an edge between vertex 6 and vertex 7 with a weight of 51.\nThere is an edge between vertex 1 and vertex 9 with a weight of 2.\nThere is an edge between vertex 15 and vertex 6 with a weight of 55.\nThere is an edge between vertex 15 and vertex 1 with a weight of 17.\nThere is an edge between vertex 5 and vertex 12 with a weight of 8.\nThere is an edge between vertex 9 and vertex 5 with a weight of 100.\nThere is an edge between vertex 6 and vertex 4 with a weight of 1.\nThere is an edge between vertex 10 and vertex 2 with a weight of 59.\nThere is an edge between vertex 5 and vertex 3 with a weight of 82.\nThere is an edge between vertex 14 and vertex 13 with a weight of 56.\nThere is an edge between vertex 8 and vertex 7 with a weight of 23.\nThere is an edge between vertex 9 and vertex 10 with a weight of 80.\nThere is an edge between vertex 14 and vertex 15 with a weight of 69.\nThere is an edge between vertex 10 and vertex 14 with a weight of 4.\nThere is an edge between vertex 4 and vertex 1 with a weight of 83.\nThere is an edge between vertex 4 and vertex 11 with a weight of 41.\nThere is an edge between vertex 15 and vertex 4 with a weight of 39.\nThere is an edge between vertex 15 and vertex 2 with a weight of 70.\nThere is an edge between vertex 15 and vertex 8 with a weight of 29.\nThere is an edge between vertex 8 and vertex 5 with a weight of 81.\nThere is an edge between vertex 9 and vertex 14 with a weight of 82.\nThere is an edge between vertex 5 and vertex 7 with a weight of 66.\nThere is an edge between vertex 14 and vertex 11 with a weight of 55.\nThere is an edge between vertex 14 and vertex 4 with a weight of 53.\nThere is an edge between vertex 13 and vertex 15 with a weight of 6.\nThere is an edge between vertex 6 and vertex 1 with a weight of 73.\nThere is an edge between vertex 15 and vertex 10 with a weight of 98.\nThere is an edge between vertex 2 and vertex 14 with a weight of 53.\nThere is an edge between vertex 9 and vertex 11 with a weight of 40.\nThere is an edge between vertex 3 and vertex 1 with a weight of 71.\nThere is an edge between vertex 8 and vertex 6 with a weight of 76.\nThere is an edge between vertex 13 and vertex 7 with a weight of 45.\nThere is an edge between vertex 3 and vertex 4 with a weight of 90.\nThere is an edge between vertex 2 and vertex 9 with a weight of 7.\nThere is an edge between vertex 15 and vertex 11 with a weight of 56.\nThere is an edge between vertex 8 and vertex 11 with a weight of 90.\nThere is an edge between vertex 9 and vertex 4 with a weight of 79.\nThere is an edge between vertex 2 and vertex 7 with a weight of 62.\nThere is an edge between vertex 7 and vertex 3 with a weight of 84.\nThere is an edge between vertex 12 and vertex 8 with a weight of 41.\nThere is an edge between vertex 10 and vertex 8 with a weight of 96.\nThere is an edge between vertex 5 and vertex 1 with a weight of 81.\nThere is an edge between vertex 11 and vertex 12 with a weight of 28.\nThere is an edge between vertex 4 and vertex 12 with a weight of 76.\nThere is an edge between vertex 10 and vertex 4 with a weight of 92.\nThere is an edge between vertex 2 and vertex 11 with a weight of 57.\nThere is an edge between vertex 7 and vertex 14 with a weight of 59.\nThere is an edge between vertex 15 and vertex 12 with a weight of 20.\nThere is an edge between vertex 2 and vertex 6 with a weight of 89.\nThere is an edge between vertex 12 and vertex 14 with a weight of 62.\nThere is an edge between vertex 12 and vertex 1 with a weight of 30.\nThere is an edge between vertex 5 and vertex 11 with a weight of 19.\nThere is an edge between vertex 4 and vertex 2 with a weight of 41.\nThere is an edge between vertex 11 and vertex 3 with a weight of 67.\nThere is an edge between vertex 5 and vertex 2 with a weight of 9.\nThere is an edge between vertex 9 and vertex 8 with a weight of 69.\nThere is an edge between vertex 15 and vertex 7 with a weight of 46.\nThere is an edge between vertex 7 and vertex 11 with a weight of 87.\nThere is an edge between vertex 3 and vertex 12 with a weight of 41.\nThere is an edge between vertex 10 and vertex 5 with a weight of 30.\nThere is an edge between vertex 3 and vertex 13 with a weight of 17.\nThere is an edge between vertex 2 and vertex 1 with a weight of 68.\nThere is an edge between vertex 7 and vertex 10 with a weight of 20.\nThere is an edge between vertex 11 and vertex 1 with a weight of 17.\nThere is an edge between vertex 14 and vertex 6 with a weight of 43.\nThere is an edge between vertex 2 and vertex 3 with a weight of 27.\nThere is an edge between vertex 13 and vertex 12 with a weight of 68.\nThere is an edge between vertex 9 and vertex 12 with a weight of 16.\n",
    "graph_output": "15 86\n1 14 81\n1 13 19\n13 6 99\n6 9 18\n14 3 10\n13 4 75\n14 5 24\n9 15 14\n4 7 83\n13 8 46\n13 2 85\n13 11 84\n6 10 65\n10 12 55\n5 15 83\n15 3 79\n8 14 45\n13 5 57\n6 7 51\n1 9 2\n15 6 55\n15 1 17\n5 12 8\n9 5 100\n6 4 1\n10 2 59\n5 3 82\n14 13 56\n8 7 23\n9 10 80\n14 15 69\n10 14 4\n4 1 83\n4 11 41\n15 4 39\n15 2 70\n15 8 29\n8 5 81\n9 14 82\n5 7 66\n14 11 55\n14 4 53\n13 15 6\n6 1 73\n15 10 98\n2 14 53\n9 11 40\n3 1 71\n8 6 76\n13 7 45\n3 4 90\n2 9 7\n15 11 56\n8 11 90\n9 4 79\n2 7 62\n7 3 84\n12 8 41\n10 8 96\n5 1 81\n11 12 28\n4 12 76\n10 4 92\n2 11 57\n7 14 59\n15 12 20\n2 6 89\n12 14 62\n12 1 30\n5 11 19\n4 2 41\n11 3 67\n5 2 9\n9 8 69\n15 7 46\n7 11 87\n3 12 41\n10 5 30\n3 13 17\n2 1 68\n7 10 20\n11 1 17\n14 6 43\n2 3 27\n13 12 68\n9 12 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 156,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 17 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   0   0   0   0   1   0   1   1   0   0 \n 2 |  0   0   1   0   0   1   0   0   0   0   1   0   0 \n 3 |  0   1   0   1   1   0   0   0   0   0   1   0   1 \n 4 |  0   0   1   0   0   1   0   0   0   1   0   0   1 \n 5 |  0   0   1   0   0   0   1   0   0   0   0   0   0 \n 6 |  0   1   0   1   0   0   0   0   0   0   0   0   1 \n 7 |  0   0   0   0   1   0   0   0   0   0   0   1   0 \n 8 |  1   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  1   0   0   1   0   0   0   0   0   0   0   0   1 \n11 |  1   1   1   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   1   0   0   0   0   0   0 \n13 |  0   0   1   1   0   1   0   0   0   1   0   0   0 \n",
    "graph_output": "13 17\n6 4\n4 13\n3 2\n5 3\n1 8\n13 3\n6 13\n10 1\n3 4\n3 11\n12 7\n13 10\n10 4\n11 2\n6 2\n7 5\n1 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 2 and vertex 15 are connected.\n\nThis is an undirected graph with 16 vertices and 27 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 15, 9, 14\nVertex 2: 10, 13, 15, 4\nVertex 3: No connections\nVertex 4: 2, 14, 7, 8\nVertex 5: 10, 8\nVertex 6: 8\nVertex 7: 9, 4\nVertex 8: 14, 6, 9, 11, 5, 4\nVertex 9: 7, 12, 14, 1, 8, 16, 15\nVertex 10: 1, 5, 2, 14\nVertex 11: 12, 13, 8\nVertex 12: 9, 11, 16, 14\nVertex 13: 11, 2\nVertex 14: 9, 8, 10, 4, 1, 12\nVertex 15: 1, 2, 9\nVertex 16: 12, 9\n",
    "graph_output": "16 27\n7 9\n10 1\n15 1\n9 12\n12 11\n14 9\n8 14\n5 10\n2 10\n11 13\n13 2\n16 12\n2 15\n6 8\n14 10\n9 1\n4 2\n4 14\n9 8\n16 9\n8 11\n14 1\n7 4\n12 14\n5 8\n15 9\n8 4\n",
    "vertices": [
      2,
      15
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 12 vertices and 46 edges\n\nEdges (Format: Node Node Weight):\n1 3 68\n1 8 94\n3 7 1\n1 11 25\n3 6 33\n11 2 70\n6 4 97\n4 5 58\n8 10 100\n3 9 60\n8 12 70\n8 2 33\n7 5 78\n5 6 21\n11 4 56\n3 4 63\n11 5 49\n1 9 39\n1 2 12\n12 2 56\n4 8 83\n7 8 96\n11 9 15\n5 1 99\n7 4 19\n7 6 83\n3 11 28\n10 6 76\n3 10 54\n10 1 45\n6 2 14\n8 9 32\n2 3 75\n7 12 99\n11 8 70\n10 2 20\n12 4 89\n12 1 65\n2 4 2\n10 5 7\n9 10 27\n9 12 49\n3 5 21\n12 11 53\n1 7 93\n2 5 26\n",
    "graph_output": "12 46\n1 3 68\n1 8 94\n3 7 1\n1 11 25\n3 6 33\n11 2 70\n6 4 97\n4 5 58\n8 10 100\n3 9 60\n8 12 70\n8 2 33\n7 5 78\n5 6 21\n11 4 56\n3 4 63\n11 5 49\n1 9 39\n1 2 12\n12 2 56\n4 8 83\n7 8 96\n11 9 15\n5 1 99\n7 4 19\n7 6 83\n3 11 28\n10 6 76\n3 10 54\n10 1 45\n6 2 14\n8 9 32\n2 3 75\n7 12 99\n11 8 70\n10 2 20\n12 4 89\n12 1 65\n2 4 2\n10 5 7\n9 10 27\n9 12 49\n3 5 21\n12 11 53\n1 7 93\n2 5 26\n",
    "vertices": [
      null,
      null
    ],
    "answer": 197,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 50 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   0   1   1   1   1   1   1   1   1 \n 2 |  1   0   0   1   1   1   1   0   1   0   1 \n 3 |  0   0   0   0   1   1   1   1   1   1   1 \n 4 |  1   1   0   0   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1 \n 8 |  1   0   1   1   1   1   1   0   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1 \n10 |  1   0   1   1   1   1   1   1   1   0   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "11 50\n11 2\n2 9\n3 7\n11 10\n3 10\n2 1\n1 5\n1 4\n9 5\n10 1\n8 6\n10 9\n2 4\n3 9\n7 9\n9 1\n11 5\n8 5\n10 4\n8 7\n8 3\n10 7\n8 10\n5 10\n6 9\n11 3\n7 1\n11 9\n9 8\n6 4\n11 1\n6 7\n6 2\n8 4\n11 6\n11 7\n5 3\n5 2\n5 7\n1 6\n4 11\n4 9\n11 8\n6 10\n4 7\n2 7\n3 6\n5 6\n4 5\n1 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 126,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 12 vertices and 19 edges\n\nEdges (Format: Node Node Weight):\n1 9 61\n1 5 23\n1 3 17\n1 10 29\n10 7 96\n9 8 74\n8 2 84\n7 12 14\n10 11 82\n7 6 57\n1 4 32\n11 3 75\n3 2 35\n6 10 28\n1 12 69\n10 12 45\n12 6 56\n8 11 53\n7 11 35\n",
    "graph_output": "12 19\n1 9 61\n1 5 23\n1 3 17\n1 10 29\n10 7 96\n9 8 74\n8 2 84\n7 12 14\n10 11 82\n7 6 57\n1 4 32\n11 3 75\n3 2 35\n6 10 28\n1 12 69\n10 12 45\n12 6 56\n8 11 53\n7 11 35\n",
    "vertices": [
      null,
      null
    ],
    "answer": 383,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 19 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 12, 13, 10\nVertex 2: 8, 12, 3\nVertex 3: 5, 11, 7, 2\nVertex 4: No connections\nVertex 5: 3, 8, 9\nVertex 6: No connections\nVertex 7: 11, 3, 15\nVertex 8: 2, 11, 5\nVertex 9: 14, 12, 5\nVertex 10: 12, 15, 1\nVertex 11: 3, 7, 12, 8\nVertex 12: 1, 10, 2, 11, 9\nVertex 13: 1\nVertex 14: 9\nVertex 15: 10, 7\n",
    "graph_output": "15 19\n12 1\n3 5\n2 8\n11 3\n13 1\n10 12\n7 11\n3 7\n14 9\n15 10\n2 12\n11 12\n7 15\n3 2\n1 10\n9 12\n11 8\n8 5\n5 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 18 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a weight of 65.\nThere is an edge between vertex 3 and vertex 10 with a weight of 91.\nThere is an edge between vertex 3 and vertex 9 with a weight of 27.\nThere is an edge between vertex 1 and vertex 12 with a weight of 38.\nThere is an edge between vertex 1 and vertex 11 with a weight of 53.\nThere is an edge between vertex 11 and vertex 4 with a weight of 31.\nThere is an edge between vertex 1 and vertex 5 with a weight of 77.\nThere is an edge between vertex 11 and vertex 14 with a weight of 7.\nThere is an edge between vertex 5 and vertex 7 with a weight of 46.\nThere is an edge between vertex 1 and vertex 6 with a weight of 70.\nThere is an edge between vertex 5 and vertex 2 with a weight of 71.\nThere is an edge between vertex 11 and vertex 8 with a weight of 88.\nThere is an edge between vertex 6 and vertex 13 with a weight of 58.\nThere is an edge between vertex 7 and vertex 8 with a weight of 16.\nThere is an edge between vertex 4 and vertex 5 with a weight of 52.\nThere is an edge between vertex 8 and vertex 9 with a weight of 3.\nThere is an edge between vertex 14 and vertex 12 with a weight of 83.\nThere is an edge between vertex 3 and vertex 5 with a weight of 29.\n",
    "graph_output": "14 18\n1 3 65\n3 10 91\n3 9 27\n1 12 38\n1 11 53\n11 4 31\n1 5 77\n11 14 7\n5 7 46\n1 6 70\n5 2 71\n11 8 88\n6 13 58\n7 8 16\n4 5 52\n8 9 3\n14 12 83\n3 5 29\n",
    "vertices": [
      null,
      null
    ],
    "answer": 546,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 17 vertices and 22 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 9 and vertex 17.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 8 and vertex 17.\n",
    "graph_output": "17 22\n1 4\n1 9\n1 16\n9 8\n4 14\n4 2\n16 12\n2 7\n9 10\n14 11\n11 6\n9 17\n2 13\n12 3\n2 5\n1 15\n17 2\n15 9\n3 4\n5 8\n7 4\n8 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nUndirected Graph with 17 vertices and 31 edges\n\nEdges (Format: Node Node):\n1 5\n5 6\n6 7\n5 2\n2 15\n6 10\n10 9\n9 12\n6 4\n7 3\n7 13\n7 11\n11 14\n1 16\n3 8\n10 17\n12 17\n5 15\n8 16\n3 12\n17 15\n3 11\n5 14\n12 13\n8 5\n4 11\n8 1\n7 12\n4 13\n15 13\n8 17\n",
    "graph_output": "17 31\n1 5\n5 6\n6 7\n5 2\n2 15\n6 10\n10 9\n9 12\n6 4\n7 3\n7 13\n7 11\n11 14\n1 16\n3 8\n10 17\n12 17\n5 15\n8 16\n3 12\n17 15\n3 11\n5 14\n12 13\n8 5\n4 11\n8 1\n7 12\n4 13\n15 13\n8 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 9 (source) to vertex 6 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 12 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4 with a weight of 34 and a capacity of 3.\nThere is an edge between vertex 1 and vertex 8 with a weight of 31 and a capacity of 1.\nThere is an edge between vertex 1 and vertex 6 with a weight of 33 and a capacity of 9.\nThere is an edge between vertex 6 and vertex 9 with a weight of 90 and a capacity of 6.\nThere is an edge between vertex 4 and vertex 2 with a weight of 34 and a capacity of 7.\nThere is an edge between vertex 8 and vertex 10 with a weight of 25 and a capacity of 6.\nThere is an edge between vertex 10 and vertex 5 with a weight of 15 and a capacity of 8.\nThere is an edge between vertex 8 and vertex 7 with a weight of 23 and a capacity of 2.\nThere is an edge between vertex 4 and vertex 3 with a weight of 87 and a capacity of 2.\nThere is an edge between vertex 7 and vertex 4 with a weight of 48 and a capacity of 8.\nThere is an edge between vertex 4 and vertex 9 with a weight of 24 and a capacity of 3.\nThere is an edge between vertex 9 and vertex 7 with a weight of 29 and a capacity of 1.\n",
    "graph_output": "10 12\n1 4 34 3\n1 8 31 1\n1 6 33 9\n6 9 90 6\n4 2 34 7\n8 10 25 6\n10 5 15 8\n8 7 23 2\n4 3 87 2\n7 4 48 8\n4 9 24 3\n9 7 29 1\n",
    "vertices": [
      9,
      6
    ],
    "answer": 929,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 15 vertices and 23 edges\n\nEdges (Format: Node Node):\n14 12\n9 1\n5 11\n11 10\n11 12\n8 9\n2 3\n3 7\n1 10\n13 5\n11 14\n6 7\n14 7\n2 4\n3 12\n10 4\n14 3\n4 7\n3 9\n11 6\n14 6\n12 4\n11 3\n",
    "graph_output": "15 23\n14 12\n9 1\n5 11\n11 10\n11 12\n8 9\n2 3\n3 7\n1 10\n13 5\n11 14\n6 7\n14 7\n2 4\n3 12\n10 4\n14 3\n4 7\n3 9\n11 6\n14 6\n12 4\n11 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 7 vertices and 12 edges\n\nEdges (Format: Node Node):\n6 5\n7 6\n4 3\n2 4\n6 1\n6 2\n3 1\n7 5\n5 2\n1 5\n5 4\n7 2\n",
    "graph_output": "7 12\n6 5\n7 6\n4 3\n2 4\n6 1\n6 2\n3 1\n7 5\n5 2\n1 5\n5 4\n7 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 35,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 13 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 5\nVertex 2: No connections\nVertex 3: 10, 5, 4\nVertex 4: 8, 3, 5\nVertex 5: 7, 1, 6, 3, 4\nVertex 6: 9, 5\nVertex 7: 5, 8\nVertex 8: 1, 7, 9, 4\nVertex 9: 6, 8\nVertex 10: 11, 3\nVertex 11: 10\n",
    "graph_output": "11 13\n11 10\n8 1\n5 7\n7 8\n6 9\n5 1\n10 3\n9 8\n6 5\n5 3\n8 4\n3 4\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 31 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 22.\nThere is an edge between vertex 22 and vertex 12.\nThere is an edge between vertex 1 and vertex 21.\nThere is an edge between vertex 21 and vertex 7.\nThere is an edge between vertex 12 and vertex 28.\nThere is an edge between vertex 22 and vertex 3.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 21 and vertex 29.\nThere is an edge between vertex 1 and vertex 23.\nThere is an edge between vertex 29 and vertex 18.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 29 and vertex 5.\nThere is an edge between vertex 28 and vertex 20.\nThere is an edge between vertex 15 and vertex 25.\nThere is an edge between vertex 1 and vertex 27.\nThere is an edge between vertex 7 and vertex 26.\nThere is an edge between vertex 25 and vertex 4.\nThere is an edge between vertex 12 and vertex 30.\nThere is an edge between vertex 29 and vertex 2.\nThere is an edge between vertex 26 and vertex 19.\nThere is an edge between vertex 2 and vertex 24.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 2 and vertex 17.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 12 and vertex 31.\nThere is an edge between vertex 22 and vertex 16.\nThere is an edge between vertex 24 and vertex 14.\nThere is an edge between vertex 19 and vertex 9.\n",
    "graph_output": "31 30\n1 22\n22 12\n1 21\n21 7\n12 28\n22 3\n1 15\n1 11\n1 13\n21 29\n1 23\n29 18\n12 10\n29 5\n28 20\n15 25\n1 27\n7 26\n25 4\n12 30\n29 2\n26 19\n2 24\n11 6\n2 17\n3 8\n12 31\n22 16\n24 14\n19 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 2 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 15 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a weight of 60.\nThere is an edge between vertex 3 and vertex 4 with a weight of 89.\nThere is an edge between vertex 1 and vertex 11 with a weight of 34.\nThere is an edge between vertex 1 and vertex 10 with a weight of 66.\nThere is an edge between vertex 3 and vertex 7 with a weight of 96.\nThere is an edge between vertex 10 and vertex 12 with a weight of 87.\nThere is an edge between vertex 11 and vertex 13 with a weight of 95.\nThere is an edge between vertex 3 and vertex 14 with a weight of 33.\nThere is an edge between vertex 14 and vertex 5 with a weight of 77.\nThere is an edge between vertex 1 and vertex 8 with a weight of 49.\nThere is an edge between vertex 10 and vertex 9 with a weight of 74.\nThere is an edge between vertex 8 and vertex 2 with a weight of 15.\nThere is an edge between vertex 4 and vertex 6 with a weight of 38.\nThere is an edge between vertex 13 and vertex 10 with a weight of 9.\nThere is an edge between vertex 13 and vertex 8 with a weight of 4.\n",
    "graph_output": "14 15\n1 3 60\n3 4 89\n1 11 34\n1 10 66\n3 7 96\n10 12 87\n11 13 95\n3 14 33\n14 5 77\n1 8 49\n10 9 74\n8 2 15\n4 6 38\n13 10 9\n13 8 4\n",
    "vertices": [
      8,
      2
    ],
    "answer": 15,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 17 and vertex 3.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 17 and vertex 5.\n",
    "graph_output": "17 30\n10 12\n13 8\n4 10\n10 11\n14 3\n17 3\n7 4\n10 9\n4 12\n15 16\n12 15\n10 6\n11 16\n3 2\n6 17\n15 8\n9 4\n4 3\n14 16\n15 14\n4 5\n6 14\n13 6\n16 8\n11 9\n9 16\n11 12\n15 13\n7 5\n17 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 6 vertices and 10 edges\n\nEdges (Format: Node Node):\n1 4\n4 3\n1 6\n4 5\n5 2\n2 3\n2 6\n1 2\n6 5\n3 5\n",
    "graph_output": "6 10\n1 4\n4 3\n1 6\n4 5\n5 2\n2 3\n2 6\n1 2\n6 5\n3 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 130,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 103 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 10 with a weight of 43.\nThere is an edge between vertex 10 and vertex 5 with a weight of 90.\nThere is an edge between vertex 1 and vertex 7 with a weight of 36.\nThere is an edge between vertex 1 and vertex 6 with a weight of 38.\nThere is an edge between vertex 10 and vertex 9 with a weight of 31.\nThere is an edge between vertex 10 and vertex 13 with a weight of 30.\nThere is an edge between vertex 5 and vertex 8 with a weight of 33.\nThere is an edge between vertex 9 and vertex 4 with a weight of 84.\nThere is an edge between vertex 1 and vertex 15 with a weight of 70.\nThere is an edge between vertex 10 and vertex 11 with a weight of 46.\nThere is an edge between vertex 6 and vertex 14 with a weight of 50.\nThere is an edge between vertex 14 and vertex 2 with a weight of 92.\nThere is an edge between vertex 1 and vertex 3 with a weight of 58.\nThere is an edge between vertex 8 and vertex 12 with a weight of 43.\nThere is an edge between vertex 9 and vertex 3 with a weight of 34.\nThere is an edge between vertex 6 and vertex 3 with a weight of 64.\nThere is an edge between vertex 7 and vertex 4 with a weight of 25.\nThere is an edge between vertex 10 and vertex 6 with a weight of 26.\nThere is an edge between vertex 4 and vertex 8 with a weight of 5.\nThere is an edge between vertex 9 and vertex 1 with a weight of 57.\nThere is an edge between vertex 14 and vertex 7 with a weight of 58.\nThere is an edge between vertex 9 and vertex 2 with a weight of 9.\nThere is an edge between vertex 1 and vertex 13 with a weight of 85.\nThere is an edge between vertex 15 and vertex 2 with a weight of 50.\nThere is an edge between vertex 6 and vertex 13 with a weight of 13.\nThere is an edge between vertex 9 and vertex 7 with a weight of 89.\nThere is an edge between vertex 3 and vertex 14 with a weight of 67.\nThere is an edge between vertex 14 and vertex 12 with a weight of 8.\nThere is an edge between vertex 10 and vertex 14 with a weight of 8.\nThere is an edge between vertex 12 and vertex 4 with a weight of 44.\nThere is an edge between vertex 15 and vertex 4 with a weight of 3.\nThere is an edge between vertex 10 and vertex 12 with a weight of 99.\nThere is an edge between vertex 5 and vertex 6 with a weight of 40.\nThere is an edge between vertex 9 and vertex 6 with a weight of 93.\nThere is an edge between vertex 12 and vertex 6 with a weight of 10.\nThere is an edge between vertex 3 and vertex 13 with a weight of 28.\nThere is an edge between vertex 1 and vertex 12 with a weight of 61.\nThere is an edge between vertex 2 and vertex 1 with a weight of 9.\nThere is an edge between vertex 7 and vertex 8 with a weight of 34.\nThere is an edge between vertex 8 and vertex 9 with a weight of 16.\nThere is an edge between vertex 7 and vertex 6 with a weight of 21.\nThere is an edge between vertex 3 and vertex 4 with a weight of 80.\nThere is an edge between vertex 12 and vertex 13 with a weight of 60.\nThere is an edge between vertex 13 and vertex 11 with a weight of 18.\nThere is an edge between vertex 2 and vertex 8 with a weight of 45.\nThere is an edge between vertex 9 and vertex 15 with a weight of 90.\nThere is an edge between vertex 4 and vertex 1 with a weight of 59.\nThere is an edge between vertex 14 and vertex 1 with a weight of 28.\nThere is an edge between vertex 3 and vertex 5 with a weight of 17.\nThere is an edge between vertex 8 and vertex 3 with a weight of 85.\nThere is an edge between vertex 10 and vertex 2 with a weight of 58.\nThere is an edge between vertex 15 and vertex 13 with a weight of 21.\nThere is an edge between vertex 4 and vertex 13 with a weight of 83.\nThere is an edge between vertex 8 and vertex 1 with a weight of 100.\nThere is an edge between vertex 11 and vertex 2 with a weight of 68.\nThere is an edge between vertex 5 and vertex 4 with a weight of 66.\nThere is an edge between vertex 6 and vertex 8 with a weight of 68.\nThere is an edge between vertex 4 and vertex 14 with a weight of 85.\nThere is an edge between vertex 12 and vertex 5 with a weight of 21.\nThere is an edge between vertex 7 and vertex 3 with a weight of 41.\nThere is an edge between vertex 5 and vertex 15 with a weight of 37.\nThere is an edge between vertex 7 and vertex 11 with a weight of 64.\nThere is an edge between vertex 9 and vertex 14 with a weight of 42.\nThere is an edge between vertex 8 and vertex 11 with a weight of 53.\nThere is an edge between vertex 12 and vertex 15 with a weight of 47.\nThere is an edge between vertex 11 and vertex 12 with a weight of 18.\nThere is an edge between vertex 5 and vertex 2 with a weight of 100.\nThere is an edge between vertex 7 and vertex 2 with a weight of 2.\nThere is an edge between vertex 13 and vertex 8 with a weight of 94.\nThere is an edge between vertex 11 and vertex 9 with a weight of 9.\nThere is an edge between vertex 6 and vertex 4 with a weight of 13.\nThere is an edge between vertex 13 and vertex 9 with a weight of 21.\nThere is an edge between vertex 3 and vertex 12 with a weight of 19.\nThere is an edge between vertex 1 and vertex 11 with a weight of 87.\nThere is an edge between vertex 1 and vertex 5 with a weight of 33.\nThere is an edge between vertex 2 and vertex 3 with a weight of 2.\nThere is an edge between vertex 4 and vertex 11 with a weight of 32.\nThere is an edge between vertex 10 and vertex 3 with a weight of 19.\nThere is an edge between vertex 7 and vertex 15 with a weight of 61.\nThere is an edge between vertex 11 and vertex 6 with a weight of 74.\nThere is an edge between vertex 12 and vertex 7 with a weight of 96.\nThere is an edge between vertex 11 and vertex 14 with a weight of 52.\nThere is an edge between vertex 5 and vertex 9 with a weight of 42.\nThere is an edge between vertex 14 and vertex 13 with a weight of 93.\nThere is an edge between vertex 13 and vertex 5 with a weight of 32.\nThere is an edge between vertex 11 and vertex 5 with a weight of 26.\nThere is an edge between vertex 5 and vertex 7 with a weight of 85.\nThere is an edge between vertex 5 and vertex 14 with a weight of 92.\nThere is an edge between vertex 13 and vertex 2 with a weight of 35.\nThere is an edge between vertex 15 and vertex 6 with a weight of 58.\nThere is an edge between vertex 8 and vertex 10 with a weight of 39.\nThere is an edge between vertex 10 and vertex 7 with a weight of 53.\nThere is an edge between vertex 15 and vertex 11 with a weight of 8.\nThere is an edge between vertex 12 and vertex 2 with a weight of 29.\nThere is an edge between vertex 15 and vertex 14 with a weight of 15.\nThere is an edge between vertex 2 and vertex 4 with a weight of 37.\nThere is an edge between vertex 4 and vertex 10 with a weight of 74.\nThere is an edge between vertex 15 and vertex 10 with a weight of 15.\nThere is an edge between vertex 6 and vertex 2 with a weight of 82.\nThere is an edge between vertex 12 and vertex 9 with a weight of 67.\nThere is an edge between vertex 13 and vertex 7 with a weight of 30.\nThere is an edge between vertex 3 and vertex 11 with a weight of 49.\nThere is an edge between vertex 8 and vertex 14 with a weight of 50.\n",
    "graph_output": "15 103\n1 10 43\n10 5 90\n1 7 36\n1 6 38\n10 9 31\n10 13 30\n5 8 33\n9 4 84\n1 15 70\n10 11 46\n6 14 50\n14 2 92\n1 3 58\n8 12 43\n9 3 34\n6 3 64\n7 4 25\n10 6 26\n4 8 5\n9 1 57\n14 7 58\n9 2 9\n1 13 85\n15 2 50\n6 13 13\n9 7 89\n3 14 67\n14 12 8\n10 14 8\n12 4 44\n15 4 3\n10 12 99\n5 6 40\n9 6 93\n12 6 10\n3 13 28\n1 12 61\n2 1 9\n7 8 34\n8 9 16\n7 6 21\n3 4 80\n12 13 60\n13 11 18\n2 8 45\n9 15 90\n4 1 59\n14 1 28\n3 5 17\n8 3 85\n10 2 58\n15 13 21\n4 13 83\n8 1 100\n11 2 68\n5 4 66\n6 8 68\n4 14 85\n12 5 21\n7 3 41\n5 15 37\n7 11 64\n9 14 42\n8 11 53\n12 15 47\n11 12 18\n5 2 100\n7 2 2\n13 8 94\n11 9 9\n6 4 13\n13 9 21\n3 12 19\n1 11 87\n1 5 33\n2 3 2\n4 11 32\n10 3 19\n7 15 61\n11 6 74\n12 7 96\n11 14 52\n5 9 42\n14 13 93\n13 5 32\n11 5 26\n5 7 85\n5 14 92\n13 2 35\n15 6 58\n8 10 39\n10 7 53\n15 11 8\n12 2 29\n15 14 15\n2 4 37\n4 10 74\n15 10 15\n6 2 82\n12 9 67\n13 7 30\n3 11 49\n8 14 50\n",
    "vertices": [
      null,
      null
    ],
    "answer": 116,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 20 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 16\nVertex 2: 16, 12, 11\nVertex 3: 13, 6, 9, 14\nVertex 4: 15\nVertex 5: 16, 9\nVertex 6: 3, 15, 12\nVertex 7: 16, 13, 8, 14\nVertex 8: 7, 10\nVertex 9: 3, 5\nVertex 10: 8\nVertex 11: 1, 2\nVertex 12: 2, 6\nVertex 13: 7, 3, 16\nVertex 14: 7, 3\nVertex 15: 6, 4\nVertex 16: 1, 7, 5, 2, 13\n",
    "graph_output": "16 20\n1 11\n1 16\n16 7\n16 5\n16 2\n7 13\n13 3\n3 6\n7 8\n6 15\n2 12\n15 4\n3 9\n8 10\n7 14\n5 9\n2 11\n6 12\n3 14\n16 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 15 to vertex 6 in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 119 edges\n\nEdges (Format: Node Node Weight):\n1 8 22\n1 3 61\n8 9 38\n8 12 26\n8 5 79\n3 15 95\n1 13 86\n5 2 25\n12 4 3\n8 10 53\n12 11 37\n4 16 19\n3 7 41\n2 14 96\n13 6 11\n7 10 91\n12 2 31\n7 9 97\n6 11 57\n5 4 69\n12 16 58\n5 16 21\n1 12 41\n1 5 46\n5 6 43\n13 10 93\n11 15 86\n4 15 69\n10 4 42\n5 15 54\n9 15 86\n15 16 55\n7 14 81\n13 12 23\n16 6 81\n3 4 35\n13 15 100\n5 14 6\n8 2 22\n4 7 18\n9 14 11\n14 15 86\n2 4 49\n14 13 21\n11 2 46\n6 3 20\n12 6 89\n3 2 39\n3 16 68\n16 7 41\n8 3 98\n14 6 86\n10 15 10\n11 3 96\n5 12 6\n3 10 88\n13 3 31\n9 2 16\n6 15 87\n9 4 32\n8 6 67\n1 9 82\n16 9 93\n11 8 39\n15 8 73\n12 15 74\n6 10 75\n1 11 98\n6 2 89\n7 2 95\n4 11 71\n15 7 1\n12 7 69\n14 10 5\n6 7 21\n16 8 23\n2 1 37\n12 9 25\n10 2 24\n11 16 65\n16 13 12\n9 6 32\n4 14 27\n9 11 83\n6 1 33\n2 16 64\n8 13 10\n14 8 66\n4 6 68\n16 1 20\n14 1 38\n9 13 42\n11 5 45\n5 9 76\n4 1 37\n3 5 40\n8 4 35\n1 15 88\n3 9 96\n11 14 41\n10 5 19\n10 16 35\n11 10 53\n7 8 44\n9 10 54\n16 14 90\n15 2 4\n3 12 44\n11 13 2\n13 2 73\n11 7 59\n7 5 16\n1 10 47\n3 14 18\n7 1 28\n4 13 89\n7 13 29\n10 12 67\n14 12 99\n",
    "graph_output": "16 119\n1 8 22\n1 3 61\n8 9 38\n8 12 26\n8 5 79\n3 15 95\n1 13 86\n5 2 25\n12 4 3\n8 10 53\n12 11 37\n4 16 19\n3 7 41\n2 14 96\n13 6 11\n7 10 91\n12 2 31\n7 9 97\n6 11 57\n5 4 69\n12 16 58\n5 16 21\n1 12 41\n1 5 46\n5 6 43\n13 10 93\n11 15 86\n4 15 69\n10 4 42\n5 15 54\n9 15 86\n15 16 55\n7 14 81\n13 12 23\n16 6 81\n3 4 35\n13 15 100\n5 14 6\n8 2 22\n4 7 18\n9 14 11\n14 15 86\n2 4 49\n14 13 21\n11 2 46\n6 3 20\n12 6 89\n3 2 39\n3 16 68\n16 7 41\n8 3 98\n14 6 86\n10 15 10\n11 3 96\n5 12 6\n3 10 88\n13 3 31\n9 2 16\n6 15 87\n9 4 32\n8 6 67\n1 9 82\n16 9 93\n11 8 39\n15 8 73\n12 15 74\n6 10 75\n1 11 98\n6 2 89\n7 2 95\n4 11 71\n15 7 1\n12 7 69\n14 10 5\n6 7 21\n16 8 23\n2 1 37\n12 9 25\n10 2 24\n11 16 65\n16 13 12\n9 6 32\n4 14 27\n9 11 83\n6 1 33\n2 16 64\n8 13 10\n14 8 66\n4 6 68\n16 1 20\n14 1 38\n9 13 42\n11 5 45\n5 9 76\n4 1 37\n3 5 40\n8 4 35\n1 15 88\n3 9 96\n11 14 41\n10 5 19\n10 16 35\n11 10 53\n7 8 44\n9 10 54\n16 14 90\n15 2 4\n3 12 44\n11 13 2\n13 2 73\n11 7 59\n7 5 16\n1 10 47\n3 14 18\n7 1 28\n4 13 89\n7 13 29\n10 12 67\n14 12 99\n",
    "vertices": [
      15,
      6
    ],
    "answer": 22,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 16 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   1   0   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   1   0   0   1   1   0   1   1   0 \n 3 |  1   0   0   1   0   0   0   0   1   1   0   0 \n 4 |  0   1   1   0   0   0   0   1   0   1   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   1   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   1   0   0 \n 7 |  0   1   0   0   0   0   0   0   1   0   0   0 \n 8 |  0   1   0   1   0   0   0   0   0   0   1   0 \n 9 |  0   0   1   0   0   0   1   0   0   0   0   0 \n10 |  0   1   1   1   1   1   0   0   0   0   0   1 \n11 |  0   1   0   0   0   0   0   1   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   1   0   0 \n",
    "graph_output": "12 16\n9 7\n3 9\n3 1\n4 2\n8 4\n2 11\n10 5\n2 7\n2 8\n4 3\n10 3\n10 2\n6 10\n8 11\n10 12\n4 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 5,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nUndirected Graph with 6 vertices and 11 edges\n\nEdges (Format: Node Node):\n1 2\n1 6\n6 3\n1 4\n1 5\n6 5\n5 3\n6 4\n3 1\n4 3\n2 4\n",
    "graph_output": "6 11\n1 2\n1 6\n6 3\n1 4\n1 5\n6 5\n5 3\n6 4\n3 1\n4 3\n2 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 185,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 7 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 6 and vertex 4.\n",
    "graph_output": "8 7\n5 8\n4 5\n1 6\n8 7\n5 6\n1 7\n6 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 7 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 21 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7 with a weight of 65.\nThere is an edge between vertex 7 and vertex 13 with a weight of 96.\nThere is an edge between vertex 1 and vertex 2 with a weight of 14.\nThere is an edge between vertex 1 and vertex 9 with a weight of 10.\nThere is an edge between vertex 7 and vertex 3 with a weight of 71.\nThere is an edge between vertex 1 and vertex 11 with a weight of 96.\nThere is an edge between vertex 13 and vertex 5 with a weight of 39.\nThere is an edge between vertex 2 and vertex 14 with a weight of 63.\nThere is an edge between vertex 11 and vertex 10 with a weight of 38.\nThere is an edge between vertex 5 and vertex 12 with a weight of 69.\nThere is an edge between vertex 11 and vertex 8 with a weight of 46.\nThere is an edge between vertex 9 and vertex 4 with a weight of 36.\nThere is an edge between vertex 1 and vertex 15 with a weight of 55.\nThere is an edge between vertex 2 and vertex 6 with a weight of 90.\nThere is an edge between vertex 5 and vertex 8 with a weight of 38.\nThere is an edge between vertex 13 and vertex 1 with a weight of 76.\nThere is an edge between vertex 15 and vertex 6 with a weight of 39.\nThere is an edge between vertex 7 and vertex 4 with a weight of 28.\nThere is an edge between vertex 10 and vertex 13 with a weight of 50.\nThere is an edge between vertex 10 and vertex 15 with a weight of 58.\nThere is an edge between vertex 6 and vertex 7 with a weight of 58.\n",
    "graph_output": "15 21\n1 7 65\n7 13 96\n1 2 14\n1 9 10\n7 3 71\n1 11 96\n13 5 39\n2 14 63\n11 10 38\n5 12 69\n11 8 46\n9 4 36\n1 15 55\n2 6 90\n5 8 38\n13 1 76\n15 6 39\n7 4 28\n10 13 50\n10 15 58\n6 7 58\n",
    "vertices": [
      4,
      7
    ],
    "answer": 28,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 84 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 5, 15, 4, 11, 8, 10, 7, 14, 9, 13, 3, 12\nVertex 2: 1, 11, 7, 13, 6, 15, 4, 9, 5, 10, 8, 12, 14\nVertex 3: 11, 8, 15, 14, 6, 12, 5, 10, 1, 13\nVertex 4: 11, 7, 6, 8, 13, 5, 1, 2, 12, 15\nVertex 5: 1, 14, 4, 8, 15, 10, 12, 2, 11, 3, 6, 7, 9\nVertex 6: 4, 9, 10, 8, 2, 13, 3, 15, 14, 5, 11\nVertex 7: 4, 15, 11, 2, 1, 13, 8, 5, 9\nVertex 8: 4, 5, 10, 15, 3, 6, 1, 9, 7, 13, 2, 12\nVertex 9: 11, 6, 13, 10, 8, 1, 2, 5, 12, 7, 15\nVertex 10: 11, 12, 8, 6, 9, 5, 1, 15, 14, 2, 3, 13\nVertex 11: 2, 4, 9, 10, 3, 14, 7, 1, 12, 5, 15, 6\nVertex 12: 10, 14, 11, 4, 5, 3, 2, 8, 1, 9\nVertex 13: 4, 9, 2, 1, 6, 14, 15, 7, 10, 3, 8\nVertex 14: 5, 12, 11, 1, 3, 10, 13, 6, 2\nVertex 15: 1, 7, 8, 5, 3, 2, 10, 6, 13, 4, 11, 9\n",
    "graph_output": "15 84\n1 2\n2 11\n11 4\n1 5\n4 7\n1 15\n4 6\n11 9\n11 10\n10 12\n11 3\n4 8\n4 13\n5 14\n12 14\n5 4\n1 4\n9 6\n15 7\n5 8\n14 11\n10 8\n9 13\n15 8\n6 10\n7 11\n1 11\n5 15\n3 8\n7 2\n9 10\n5 10\n6 8\n2 13\n1 8\n15 3\n8 9\n10 1\n6 2\n1 7\n2 15\n4 2\n1 14\n15 10\n14 3\n1 9\n12 11\n10 14\n12 4\n2 9\n12 5\n1 13\n13 6\n14 13\n6 3\n2 5\n2 10\n11 5\n15 6\n3 12\n15 13\n14 6\n3 5\n10 3\n13 7\n10 13\n4 15\n3 1\n7 8\n11 15\n6 5\n5 7\n9 5\n6 11\n13 3\n13 8\n2 8\n12 2\n8 12\n14 2\n12 1\n12 9\n7 9\n9 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 17 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11\nVertex 2: 7\nVertex 3: 14\nVertex 4: 11, 6\nVertex 5: 12\nVertex 6: 4, 14, 9, 7, 8\nVertex 7: 16, 8, 2, 6\nVertex 8: 7, 6\nVertex 9: 6\nVertex 10: 13\nVertex 11: 1, 16, 4, 13\nVertex 12: 16, 5\nVertex 13: 11, 15, 10\nVertex 14: 6, 3\nVertex 15: 13\nVertex 16: 11, 12, 7\n",
    "graph_output": "16 17\n1 11\n11 16\n11 4\n11 13\n16 12\n12 5\n13 15\n16 7\n7 8\n4 6\n6 14\n7 2\n13 10\n14 3\n6 9\n7 6\n6 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 30 vertices and 29 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 20.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 30.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 30 and vertex 11.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 30 and vertex 21.\nThere is an edge between vertex 4 and vertex 24.\nThere is an edge between vertex 21 and vertex 2.\nThere is an edge between vertex 24 and vertex 5.\nThere is an edge between vertex 30 and vertex 27.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 30 and vertex 13.\nThere is an edge between vertex 24 and vertex 12.\nThere is an edge between vertex 5 and vertex 28.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 24 and vertex 17.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 30 and vertex 26.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 6 and vertex 19.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 20 and vertex 23.\nThere is an edge between vertex 3 and vertex 18.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 30 and vertex 29.\nThere is an edge between vertex 8 and vertex 25.\nThere is an edge between vertex 7 and vertex 22.\n",
    "graph_output": "30 29\n1 20\n1 4\n4 30\n1 3\n30 11\n1 8\n30 21\n4 24\n21 2\n24 5\n30 27\n4 6\n30 13\n24 12\n5 28\n11 7\n1 15\n24 17\n4 14\n30 26\n7 9\n6 19\n5 16\n20 23\n3 18\n4 10\n30 29\n8 25\n7 22\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 2 |  1   0   1   1   0   1   0   0   0   0   0   1   0   0   0   0 \n 3 |  0   1   0   0   1   0   0   0   0   0   0   0   0   0   1   0 \n 4 |  0   1   0   0   0   1   0   0   1   0   0   1   1   0   1   1 \n 5 |  0   0   1   0   0   1   0   1   0   0   1   1   0   1   0   0 \n 6 |  0   1   0   1   1   0   0   0   0   0   0   0   0   0   1   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   1 \n 8 |  0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0 \n 9 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0 \n11 |  1   0   0   0   1   0   0   0   0   1   0   1   0   0   1   0 \n12 |  0   1   0   1   1   0   0   0   0   0   1   0   0   0   0   0 \n13 |  0   0   0   1   0   0   1   1   0   1   0   0   0   0   0   0 \n14 |  0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0 \n15 |  0   0   1   1   0   1   0   0   0   0   1   0   0   0   0   0 \n16 |  0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "16 28\n4 6\n11 10\n15 4\n12 5\n8 13\n4 9\n3 2\n13 4\n11 1\n2 6\n3 15\n7 16\n12 4\n13 7\n5 3\n5 14\n11 15\n6 5\n6 15\n11 5\n4 2\n1 2\n13 10\n5 8\n4 16\n14 7\n12 2\n12 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 57 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 10, 12, 8, 2, 5, 7, 11, 6\nVertex 2: 4, 10, 8, 12, 6, 5, 1, 11, 9, 3, 7\nVertex 3: 7, 12, 9, 5, 10, 11, 4, 6, 2, 8\nVertex 4: 2, 1, 12, 7, 3, 6, 5\nVertex 5: 8, 3, 9, 6, 2, 7, 1, 4, 10, 12\nVertex 6: 11, 12, 5, 2, 3, 8, 4, 10, 7, 9, 1\nVertex 7: 3, 12, 4, 8, 10, 5, 9, 2, 1, 6, 11\nVertex 8: 5, 11, 2, 7, 12, 1, 6, 3, 10, 9\nVertex 9: 3, 5, 10, 12, 7, 2, 6, 8\nVertex 10: 2, 1, 3, 9, 7, 11, 8, 6, 5\nVertex 11: 6, 8, 3, 12, 10, 2, 1, 7\nVertex 12: 3, 4, 7, 1, 6, 8, 2, 9, 11, 5\n",
    "graph_output": "12 57\n8 5\n2 4\n3 7\n6 11\n4 1\n8 11\n3 12\n12 4\n2 10\n1 10\n7 12\n9 3\n7 4\n2 8\n7 8\n3 5\n5 9\n12 1\n10 3\n6 12\n12 8\n6 5\n12 2\n9 10\n2 6\n7 10\n2 5\n12 9\n1 8\n11 3\n12 11\n7 5\n3 4\n1 2\n9 7\n5 1\n10 11\n11 2\n3 6\n2 9\n3 2\n6 8\n3 8\n7 2\n4 6\n1 7\n8 10\n1 11\n6 10\n6 7\n5 4\n7 11\n9 6\n10 5\n6 1\n12 5\n9 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 143,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 100 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 1 and vertex 2.\n",
    "graph_output": "15 100\n11 13\n11 2\n5 11\n5 4\n12 11\n4 2\n10 6\n7 6\n3 7\n1 13\n8 9\n2 13\n1 15\n10 4\n9 14\n11 8\n12 1\n14 10\n12 10\n10 3\n5 9\n14 11\n4 14\n6 14\n15 7\n1 9\n7 5\n9 2\n12 13\n6 12\n7 1\n4 9\n10 13\n1 10\n4 6\n6 2\n5 8\n2 8\n2 10\n15 12\n5 10\n4 3\n13 15\n7 11\n13 4\n14 13\n12 8\n1 3\n8 7\n6 13\n15 4\n5 2\n11 1\n12 14\n13 7\n13 8\n3 8\n5 15\n7 12\n9 3\n4 8\n15 2\n1 6\n12 5\n4 11\n3 14\n11 9\n3 12\n8 1\n8 14\n10 9\n12 9\n13 3\n1 14\n15 11\n13 9\n10 8\n8 15\n7 9\n3 2\n1 4\n10 11\n11 6\n15 10\n6 5\n3 11\n4 12\n14 15\n9 15\n5 14\n5 3\n12 2\n9 6\n4 7\n15 6\n7 2\n5 1\n6 8\n2 14\n1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 5 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 20 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   1   1   0   0   0   1   1   0   0   0 \n 2 |  0   0   1   0   1   1   0   0   1   1   0   0 \n 3 |  1   1   0   0   0   1   0   0   0   1   0   0 \n 4 |  1   0   0   0   0   1   0   0   0   0   0   0 \n 5 |  0   1   0   0   0   1   0   0   0   0   0   0 \n 6 |  0   1   1   1   1   0   1   0   0   0   1   0 \n 7 |  0   0   0   0   0   1   0   1   0   1   0   0 \n 8 |  1   0   0   0   0   0   1   0   0   0   1   0 \n 9 |  1   1   0   0   0   0   0   0   0   1   0   1 \n10 |  0   1   1   0   0   0   1   0   1   0   0   0 \n11 |  0   0   0   0   0   1   0   1   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   1   0   0   0 \n\nCapacity Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   5   6   0   0   0   1   4   0   0   0 \n 2 |  0   0   4   0   4   2   0   0  10   7   0   0 \n 3 |  5   4   0   0   0   9   0   0   0   9   0   0 \n 4 |  6   0   0   0   0   4   0   0   0   0   0   0 \n 5 |  0   4   0   0   0  10   0   0   0   0   0   0 \n 6 |  0   2   9   4  10   0   2   0   0   0   6   0 \n 7 |  0   0   0   0   0   2   0   3   0   6   0   0 \n 8 |  1   0   0   0   0   0   3   0   0   0   1   0 \n 9 |  4  10   0   0   0   0   0   0   0   4   0   1 \n10 |  0   7   9   0   0   0   6   0   4   0   0   0 \n11 |  0   0   0   0   0   6   0   1   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   1   0   0   0 \n",
    "graph_output": "12 20\n1 8 1\n8 7 3\n8 11 1\n11 6 6\n1 9 4\n9 10 4\n6 5 10\n9 2 10\n9 12 1\n1 4 6\n2 3 4\n7 6 2\n3 10 9\n7 10 6\n6 2 2\n6 3 9\n5 2 4\n3 1 5\n4 6 4\n2 10 7\n",
    "vertices": [
      5,
      2
    ],
    "answer": 14,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 110 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   0   1   0   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n 3 |  1   1   0   1   1   1   0   1   1   1   1   1   1   1   0   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   0   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   0   1 \n 6 |  0   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   0   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 8 |  0   1   1   1   1   1   1   0   1   1   0   0   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   0   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   0   1   0   0   1   1   1   1   1 \n12 |  1   1   1   1   1   1   1   0   1   1   1   0   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n15 |  1   1   0   0   0   1   1   1   1   1   1   1   1   1   0   1 \n16 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "16 110\n1 13\n13 4\n1 9\n4 16\n1 3\n4 11\n13 12\n4 7\n3 10\n11 5\n11 14\n1 2\n5 6\n13 15\n15 8\n15 9\n3 14\n7 13\n6 2\n14 4\n1 16\n1 15\n5 2\n11 1\n8 10\n5 13\n10 13\n2 13\n7 12\n15 14\n16 6\n7 10\n2 10\n12 6\n7 9\n8 14\n2 8\n10 1\n10 14\n8 7\n13 11\n7 14\n6 13\n15 6\n14 13\n14 16\n6 4\n4 9\n11 16\n2 7\n10 4\n7 15\n11 2\n9 13\n8 13\n5 16\n14 6\n16 12\n15 16\n8 9\n12 5\n5 4\n7 16\n8 16\n7 11\n11 12\n9 12\n9 10\n12 15\n4 1\n8 6\n8 5\n3 6\n10 5\n5 7\n15 2\n8 4\n14 12\n6 11\n3 11\n12 10\n8 3\n4 3\n10 16\n9 16\n10 6\n3 16\n13 3\n1 14\n1 7\n14 9\n12 4\n12 1\n2 3\n14 2\n13 16\n11 9\n10 15\n2 4\n5 3\n6 7\n1 5\n11 15\n9 6\n12 3\n9 2\n3 9\n5 9\n2 12\n14 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 25 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 2 and vertex 4.\n",
    "graph_output": "16 25\n1 12\n12 13\n12 4\n12 5\n4 6\n4 3\n6 8\n3 2\n5 9\n4 11\n6 14\n9 7\n4 16\n14 15\n4 10\n2 8\n2 12\n2 10\n10 8\n16 11\n1 2\n9 13\n3 16\n3 10\n2 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 11 vertices and 44 edges\n\nEdges (Format: Node Node):\n3 11\n6 7\n4 2\n5 3\n8 9\n11 5\n3 2\n11 1\n1 10\n6 8\n6 3\n7 8\n1 3\n2 6\n7 3\n5 1\n3 10\n4 8\n7 9\n11 8\n1 7\n5 4\n2 10\n6 9\n10 6\n6 11\n8 2\n4 7\n11 10\n9 2\n10 5\n2 1\n11 7\n6 4\n4 9\n10 4\n6 1\n7 2\n7 5\n5 9\n8 3\n1 9\n11 2\n10 7\n",
    "graph_output": "11 44\n3 11\n6 7\n4 2\n5 3\n8 9\n11 5\n3 2\n11 1\n1 10\n6 8\n6 3\n7 8\n1 3\n2 6\n7 3\n5 1\n3 10\n4 8\n7 9\n11 8\n1 7\n5 4\n2 10\n6 9\n10 6\n6 11\n8 2\n4 7\n11 10\n9 2\n10 5\n2 1\n11 7\n6 4\n4 9\n10 4\n6 1\n7 2\n7 5\n5 9\n8 3\n1 9\n11 2\n10 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 11 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 11\nVertex 2: 10\nVertex 3: 10, 11\nVertex 4: 9, 10\nVertex 5: 9, 8\nVertex 6: 10, 11\nVertex 7: No connections\nVertex 8: 5\nVertex 9: 4, 5\nVertex 10: 1, 2, 3, 4, 6\nVertex 11: 1, 3, 6\n",
    "graph_output": "11 11\n4 9\n10 1\n10 2\n3 10\n4 10\n5 9\n11 1\n10 6\n5 8\n11 3\n11 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 4 and vertex 16 are connected.\n\nThis is an undirected graph with 16 vertices and 15 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 6\nVertex 2: 7\nVertex 3: 14, 8, 10\nVertex 4: 6, 15\nVertex 5: 8\nVertex 6: 11, 4, 1\nVertex 7: 2\nVertex 8: 3, 5, 16\nVertex 9: No connections\nVertex 10: 1, 3, 14\nVertex 11: 6\nVertex 12: 14, 13\nVertex 13: 14, 12\nVertex 14: 3, 13, 10, 12\nVertex 15: 4\nVertex 16: 8\n",
    "graph_output": "16 15\n11 6\n3 14\n1 10\n6 4\n3 8\n13 14\n6 1\n5 8\n3 10\n7 2\n4 15\n14 10\n8 16\n12 14\n12 13\n",
    "vertices": [
      4,
      16
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 21 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 5 and vertex 3.\n",
    "graph_output": "16 21\n1 6\n1 12\n1 7\n1 5\n1 11\n5 4\n12 9\n7 14\n7 3\n4 16\n11 15\n7 10\n6 13\n14 2\n13 8\n16 14\n6 15\n14 3\n9 16\n5 11\n5 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 4 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 21 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   1   0   0   0   1   0   1   0   1   1   0 \n 2 |  0   0   0   1   1   1   0   0   1   0   0   1   0 \n 3 |  1   0   0   0   1   1   0   1   0   0   0   0   0 \n 4 |  0   1   0   0   0   0   0   0   1   0   0   0   1 \n 5 |  0   1   1   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   1   1   0   0   0   0   1   1   0   0   1   0 \n 7 |  1   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   1   0   0   1   0   0   0   1   0   0   1 \n 9 |  1   1   0   1   0   1   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   1   0   0   1   0   0 \n11 |  1   0   0   0   0   0   0   0   0   1   0   0   0 \n12 |  1   1   0   0   0   1   0   0   0   0   0   0   0 \n13 |  0   0   0   1   0   0   0   1   0   0   0   0   0 \n\nCapacity Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   5   0   0   0   1   0   9   0   2   5   0 \n 2 |  0   0   0   2  10   1   0   0  10   0   0   7   0 \n 3 |  5   0   0   0   5   1   0   6   0   0   0   0   0 \n 4 |  0   2   0   0   0   0   0   0   5   0   0   0   7 \n 5 |  0  10   5   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   1   1   0   0   0   0   4  10   0   0   8   0 \n 7 |  1   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   6   0   0   4   0   0   0   1   0   0   2 \n 9 |  9  10   0   5   0  10   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   1   0   0   6   0   0 \n11 |  2   0   0   0   0   0   0   0   0   6   0   0   0 \n12 |  5   7   0   0   0   8   0   0   0   0   0   0   0 \n13 |  0   0   0   7   0   0   0   2   0   0   0   0   0 \n",
    "graph_output": "13 21\n1 9 9\n9 4 5\n1 3 5\n1 7 1\n9 2 10\n9 6 10\n2 12 7\n3 8 6\n2 5 10\n1 11 2\n11 10 6\n8 13 2\n4 2 2\n12 6 8\n13 4 7\n1 12 5\n6 8 4\n3 6 1\n6 2 1\n10 8 1\n3 5 5\n",
    "vertices": [
      4,
      10
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 19 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   1   0   0   0   0   0   1   1   0   1   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 5 |  0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0 \n 6 |  0   0   1   0   1   0   0   1   0   0   0   0   1   1   0   0 \n 7 |  1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 8 |  1   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n10 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n11 |  0   0   0   0   0   0   1   0   0   1   0   0   0   1   0   1 \n12 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   1   1   0   1   0   0   1   0   0   0   1   0 \n15 |  0   0   1   1   0   0   0   0   1   0   0   0   0   1   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n",
    "graph_output": "16 19\n16 11\n11 10\n14 8\n15 14\n8 1\n14 6\n3 15\n11 7\n4 15\n5 6\n12 3\n3 13\n11 14\n5 14\n3 6\n8 6\n9 15\n13 6\n1 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 11 (source) to vertex 9 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 47 edges\n\nEdges (Format: Node Node Capacity):\n1 10 1\n10 11 3\n1 8 3\n8 4 2\n4 3 3\n1 6 5\n6 7 1\n7 2 2\n1 5 1\n11 9 7\n4 2 10\n2 11 6\n10 7 5\n10 2 10\n9 10 9\n7 8 7\n11 3 1\n1 3 4\n11 7 6\n5 2 2\n5 11 1\n3 6 3\n3 7 5\n8 9 3\n1 9 4\n3 10 5\n1 4 1\n11 1 10\n11 8 8\n1 2 5\n7 1 5\n9 7 3\n4 10 9\n8 5 7\n6 10 2\n5 6 6\n9 6 7\n10 8 8\n10 5 7\n6 11 9\n9 5 2\n3 8 9\n5 7 4\n9 3 6\n5 3 4\n6 4 2\n2 8 8\n",
    "graph_output": "11 47\n1 10 1\n10 11 3\n1 8 3\n8 4 2\n4 3 3\n1 6 5\n6 7 1\n7 2 2\n1 5 1\n11 9 7\n4 2 10\n2 11 6\n10 7 5\n10 2 10\n9 10 9\n7 8 7\n11 3 1\n1 3 4\n11 7 6\n5 2 2\n5 11 1\n3 6 3\n3 7 5\n8 9 3\n1 9 4\n3 10 5\n1 4 1\n11 1 10\n11 8 8\n1 2 5\n7 1 5\n9 7 3\n4 10 9\n8 5 7\n6 10 2\n5 6 6\n9 6 7\n10 8 8\n10 5 7\n6 11 9\n9 5 2\n3 8 9\n5 7 4\n9 3 6\n5 3 4\n6 4 2\n2 8 8\n",
    "vertices": [
      11,
      9
    ],
    "answer": 41,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 15 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 4 and vertex 8.\n",
    "graph_output": "13 15\n1 7\n13 6\n13 7\n6 3\n4 13\n4 3\n9 7\n7 12\n11 5\n10 2\n12 2\n1 12\n9 12\n6 11\n4 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 103 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 17 and vertex 10.\nThere is an edge between vertex 9 and vertex 17.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 17 and vertex 6.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 5 and vertex 17.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 13 and vertex 17.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 12 and vertex 13.\n",
    "graph_output": "17 103\n5 12\n17 7\n11 10\n11 3\n2 13\n13 8\n2 4\n16 10\n11 6\n6 7\n9 15\n13 14\n7 8\n8 15\n9 1\n13 10\n2 7\n16 13\n4 14\n12 7\n3 13\n17 10\n9 17\n15 4\n15 16\n12 16\n10 4\n3 14\n10 2\n15 14\n6 5\n1 7\n3 9\n3 8\n5 10\n3 17\n13 15\n11 13\n15 10\n12 9\n12 2\n4 17\n1 17\n10 6\n2 8\n6 13\n15 5\n9 8\n5 4\n4 1\n4 11\n3 4\n14 8\n7 9\n16 6\n5 2\n8 11\n14 17\n17 8\n1 2\n4 13\n1 14\n11 9\n11 2\n5 8\n13 5\n14 9\n5 9\n12 11\n14 7\n6 1\n6 2\n16 1\n16 5\n16 14\n14 10\n17 2\n11 15\n2 15\n3 1\n16 17\n15 12\n17 6\n13 9\n10 9\n4 9\n6 8\n7 16\n5 1\n6 9\n5 17\n4 8\n16 8\n2 14\n4 16\n3 5\n16 3\n7 3\n13 1\n15 7\n13 17\n15 3\n12 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 12 vertices and 55 edges\n\nEdges (Format: Node Node):\n11 10\n6 1\n9 3\n8 12\n6 8\n2 1\n6 2\n12 10\n5 8\n7 11\n1 4\n5 10\n4 11\n12 4\n7 5\n1 10\n1 11\n1 12\n4 5\n7 9\n3 8\n5 9\n5 12\n4 9\n1 8\n11 9\n10 9\n9 1\n8 10\n11 8\n7 1\n3 7\n6 3\n8 2\n2 5\n5 11\n3 11\n10 6\n11 2\n4 3\n4 8\n1 3\n9 2\n4 7\n2 3\n3 5\n12 2\n10 7\n11 12\n6 9\n12 7\n9 12\n12 3\n8 9\n4 10\n",
    "graph_output": "12 55\n11 10\n6 1\n9 3\n8 12\n6 8\n2 1\n6 2\n12 10\n5 8\n7 11\n1 4\n5 10\n4 11\n12 4\n7 5\n1 10\n1 11\n1 12\n4 5\n7 9\n3 8\n5 9\n5 12\n4 9\n1 8\n11 9\n10 9\n9 1\n8 10\n11 8\n7 1\n3 7\n6 3\n8 2\n2 5\n5 11\n3 11\n10 6\n11 2\n4 3\n4 8\n1 3\n9 2\n4 7\n2 3\n3 5\n12 2\n10 7\n11 12\n6 9\n12 7\n9 12\n12 3\n8 9\n4 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 16 vertices and 115 edges\n\nEdges (Format: Node Node):\n15 16\n12 10\n10 16\n6 9\n2 8\n11 8\n5 11\n7 4\n2 12\n8 1\n13 12\n8 12\n5 16\n14 6\n15 5\n7 16\n6 11\n4 8\n14 12\n3 6\n16 8\n2 9\n16 14\n10 14\n2 16\n1 6\n11 16\n12 16\n13 15\n10 8\n3 2\n5 14\n9 8\n16 6\n10 9\n11 1\n2 10\n1 2\n15 7\n3 4\n8 14\n7 3\n3 10\n8 3\n4 11\n7 10\n9 4\n15 8\n6 5\n10 15\n12 11\n12 7\n11 15\n12 15\n11 14\n3 16\n6 8\n15 4\n13 6\n11 2\n6 15\n7 6\n12 5\n3 15\n4 10\n16 13\n1 13\n12 3\n11 9\n13 2\n11 3\n16 1\n7 5\n13 10\n16 4\n13 14\n4 6\n8 7\n3 9\n9 15\n5 13\n3 1\n11 7\n10 6\n5 4\n5 9\n2 5\n4 13\n1 4\n1 10\n7 2\n13 8\n5 8\n12 9\n5 3\n5 10\n9 14\n13 7\n2 14\n1 15\n7 9\n9 16\n15 14\n13 3\n14 7\n13 9\n11 13\n9 1\n7 1\n4 2\n2 6\n14 3\n14 1\n1 5\n10 11\n",
    "graph_output": "16 115\n15 16\n12 10\n10 16\n6 9\n2 8\n11 8\n5 11\n7 4\n2 12\n8 1\n13 12\n8 12\n5 16\n14 6\n15 5\n7 16\n6 11\n4 8\n14 12\n3 6\n16 8\n2 9\n16 14\n10 14\n2 16\n1 6\n11 16\n12 16\n13 15\n10 8\n3 2\n5 14\n9 8\n16 6\n10 9\n11 1\n2 10\n1 2\n15 7\n3 4\n8 14\n7 3\n3 10\n8 3\n4 11\n7 10\n9 4\n15 8\n6 5\n10 15\n12 11\n12 7\n11 15\n12 15\n11 14\n3 16\n6 8\n15 4\n13 6\n11 2\n6 15\n7 6\n12 5\n3 15\n4 10\n16 13\n1 13\n12 3\n11 9\n13 2\n11 3\n16 1\n7 5\n13 10\n16 4\n13 14\n4 6\n8 7\n3 9\n9 15\n5 13\n3 1\n11 7\n10 6\n5 4\n5 9\n2 5\n4 13\n1 4\n1 10\n7 2\n13 8\n5 8\n12 9\n5 3\n5 10\n9 14\n13 7\n2 14\n1 15\n7 9\n9 16\n15 14\n13 3\n14 7\n13 9\n11 13\n9 1\n7 1\n4 2\n2 6\n14 3\n14 1\n1 5\n10 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 70 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 6 and vertex 1.\n",
    "graph_output": "13 70\n3 11\n2 4\n1 7\n1 11\n3 6\n4 9\n8 1\n3 2\n3 13\n7 9\n3 7\n13 10\n10 5\n10 4\n6 5\n13 5\n12 13\n1 13\n4 12\n11 13\n8 13\n4 11\n8 9\n8 2\n3 12\n5 4\n2 13\n8 6\n10 9\n4 6\n8 10\n2 12\n5 11\n4 3\n10 12\n8 4\n9 13\n5 3\n10 1\n11 6\n11 8\n6 9\n4 7\n2 10\n9 3\n6 2\n9 5\n7 12\n1 9\n10 11\n1 3\n7 5\n6 7\n3 10\n8 7\n3 8\n11 12\n10 6\n9 2\n2 11\n7 2\n12 6\n1 2\n12 8\n1 5\n13 7\n5 12\n13 4\n6 13\n6 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 204,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 20 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1 \n 2 |  0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   1 \n 3 |  0   0   0   0   0   1   0   0   1   0   0   0   1   1   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 5 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1 \n 6 |  0   0   1   0   0   0   0   0   0   0   0   1   0   0   1   0 \n 7 |  0   0   0   0   0   0   0   1   0   0   0   0   1   1   0   1 \n 8 |  0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0 \n 9 |  0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n11 |  1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   1 \n14 |  0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0 \n16 |  1   1   0   0   1   0   1   0   0   0   0   0   1   0   0   0 \n",
    "graph_output": "16 20\n1 11\n1 16\n16 7\n16 5\n16 2\n7 13\n13 3\n3 6\n7 8\n6 15\n2 12\n15 4\n3 9\n8 10\n7 14\n5 9\n2 11\n6 12\n3 14\n16 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 107 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 17, 12, 13, 14, 7, 11, 6, 4, 2, 10, 16, 5, 8\nVertex 2: 10, 16, 11, 3, 8, 17, 12, 1, 5, 9, 15, 4, 13, 6\nVertex 3: 1, 6, 16, 8, 10, 7, 11, 2, 12, 5, 13, 15, 14, 17\nVertex 4: 14, 11, 8, 12, 16, 6, 7, 1, 5, 13, 17, 2, 15\nVertex 5: 14, 13, 3, 6, 4, 11, 2, 17, 8, 10, 1, 7, 12\nVertex 6: 7, 3, 8, 9, 12, 4, 1, 5, 13, 14, 15, 2, 11, 10\nVertex 7: 6, 14, 12, 3, 11, 1, 10, 16, 4, 8, 5, 9, 15\nVertex 8: 11, 15, 13, 9, 6, 3, 4, 2, 10, 16, 12, 5, 7, 1\nVertex 9: 8, 13, 17, 6, 12, 2, 15, 7\nVertex 10: 2, 16, 15, 3, 12, 7, 8, 11, 1, 14, 17, 5, 13, 6\nVertex 11: 8, 4, 17, 2, 3, 12, 7, 1, 10, 14, 16, 5, 15, 6\nVertex 12: 17, 7, 1, 11, 4, 6, 10, 9, 3, 2, 8, 14, 16, 15, 5\nVertex 13: 8, 9, 5, 1, 15, 4, 3, 6, 10, 2\nVertex 14: 15, 5, 7, 4, 17, 1, 16, 11, 12, 10, 3, 6\nVertex 15: 14, 8, 10, 13, 2, 11, 4, 3, 9, 12, 6, 7\nVertex 16: 10, 3, 2, 14, 4, 7, 11, 8, 12, 1\nVertex 17: 12, 1, 11, 14, 9, 2, 4, 5, 10, 3\n",
    "graph_output": "17 107\n15 14\n14 5\n2 10\n16 10\n11 8\n6 7\n14 7\n1 3\n12 17\n3 6\n15 8\n8 13\n8 9\n3 16\n17 1\n7 12\n15 10\n4 14\n8 6\n3 8\n13 9\n4 11\n16 2\n5 13\n12 1\n4 8\n17 11\n14 17\n11 2\n10 3\n13 1\n7 3\n3 11\n11 12\n12 4\n7 11\n9 17\n9 6\n1 14\n16 14\n2 3\n1 7\n12 6\n12 10\n1 11\n10 7\n4 16\n8 2\n12 9\n15 13\n6 4\n6 1\n10 8\n2 17\n7 16\n10 11\n3 12\n11 14\n5 3\n4 7\n4 1\n6 5\n2 12\n11 16\n1 2\n4 5\n16 8\n11 5\n12 8\n2 5\n2 9\n2 15\n12 14\n11 15\n10 1\n4 13\n17 4\n12 16\n16 1\n13 3\n5 17\n6 13\n10 14\n2 4\n15 4\n5 8\n15 3\n17 10\n14 3\n15 9\n5 10\n6 14\n15 12\n6 15\n7 8\n10 13\n3 17\n2 13\n5 1\n5 7\n5 12\n7 9\n2 6\n11 6\n15 7\n8 1\n6 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 15 vertices and 93 edges\n\nEdges (Format: Node Node):\n7 8\n4 13\n8 2\n3 12\n2 9\n9 14\n4 12\n12 2\n5 12\n11 4\n6 7\n1 3\n10 14\n3 7\n2 10\n6 14\n3 15\n7 11\n6 12\n8 12\n6 1\n13 9\n10 6\n3 11\n4 5\n14 15\n9 11\n2 1\n9 1\n14 13\n3 4\n7 14\n11 15\n3 8\n8 11\n15 8\n15 5\n14 8\n7 13\n9 3\n11 12\n5 6\n5 2\n6 11\n11 13\n13 8\n3 13\n13 15\n5 11\n10 11\n10 13\n5 7\n9 15\n4 2\n3 2\n5 9\n8 6\n6 13\n12 1\n15 1\n7 2\n10 8\n3 5\n15 4\n5 1\n8 9\n5 14\n7 9\n6 2\n12 14\n12 15\n6 9\n11 14\n1 13\n14 1\n7 12\n7 4\n2 15\n7 10\n12 10\n14 4\n4 10\n10 9\n3 14\n6 4\n1 10\n15 10\n3 6\n8 4\n1 7\n2 11\n15 7\n2 14\n",
    "graph_output": "15 93\n7 8\n4 13\n8 2\n3 12\n2 9\n9 14\n4 12\n12 2\n5 12\n11 4\n6 7\n1 3\n10 14\n3 7\n2 10\n6 14\n3 15\n7 11\n6 12\n8 12\n6 1\n13 9\n10 6\n3 11\n4 5\n14 15\n9 11\n2 1\n9 1\n14 13\n3 4\n7 14\n11 15\n3 8\n8 11\n15 8\n15 5\n14 8\n7 13\n9 3\n11 12\n5 6\n5 2\n6 11\n11 13\n13 8\n3 13\n13 15\n5 11\n10 11\n10 13\n5 7\n9 15\n4 2\n3 2\n5 9\n8 6\n6 13\n12 1\n15 1\n7 2\n10 8\n3 5\n15 4\n5 1\n8 9\n5 14\n7 9\n6 2\n12 14\n12 15\n6 9\n11 14\n1 13\n14 1\n7 12\n7 4\n2 15\n7 10\n12 10\n14 4\n4 10\n10 9\n3 14\n6 4\n1 10\n15 10\n3 6\n8 4\n1 7\n2 11\n15 7\n2 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 17 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 10, 13\nVertex 2: 6\nVertex 3: 6, 9, 14, 12\nVertex 4: 14\nVertex 5: 7, 8, 11\nVertex 6: 1, 3, 7, 2, 11, 17\nVertex 7: 6, 5, 15\nVertex 8: 5\nVertex 9: 3\nVertex 10: 1\nVertex 11: 6, 5\nVertex 12: 3\nVertex 13: 1\nVertex 14: 3, 4\nVertex 15: 7, 16\nVertex 16: 15\nVertex 17: 6\n",
    "graph_output": "17 17\n1 6\n1 10\n6 3\n6 7\n7 5\n7 15\n3 9\n15 16\n5 8\n3 14\n6 2\n3 12\n6 11\n14 4\n6 17\n1 13\n11 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 8 vertices and 27 edges\n\nEdges (Format: Node Node):\n4 2\n3 7\n4 8\n5 2\n1 7\n5 4\n8 3\n6 5\n3 6\n1 8\n5 7\n8 5\n6 4\n1 4\n3 1\n8 6\n7 4\n7 8\n1 6\n6 2\n8 2\n1 5\n7 6\n2 3\n4 3\n2 1\n3 5\n",
    "graph_output": "8 27\n4 2\n3 7\n4 8\n5 2\n1 7\n5 4\n8 3\n6 5\n3 6\n1 8\n5 7\n8 5\n6 4\n1 4\n3 1\n8 6\n7 4\n7 8\n1 6\n6 2\n8 2\n1 5\n7 6\n2 3\n4 3\n2 1\n3 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6062,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 13 vertices and 18 edges\n\nEdges (Format: Node Node Weight):\n1 13 74\n13 3 15\n13 10 37\n13 6 92\n6 2 39\n3 5 68\n10 12 72\n12 11 2\n12 9 48\n2 7 63\n5 8 15\n10 4 70\n11 1 44\n3 9 57\n11 4 92\n4 8 35\n13 12 33\n8 2 93\n",
    "graph_output": "13 18\n1 13 74\n13 3 15\n13 10 37\n13 6 92\n6 2 39\n3 5 68\n10 12 72\n12 11 2\n12 9 48\n2 7 63\n5 8 15\n10 4 70\n11 1 44\n3 9 57\n11 4 92\n4 8 35\n13 12 33\n8 2 93\n",
    "vertices": [
      null,
      null
    ],
    "answer": 492,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 53 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   7   0   0  30  78  46  18  17 100  15 \n 2 |  0   0  92  76  65  95   2   2  67  73   0   2   0 \n 3 |  0  92   0  84  82   0  18   0  66   0   0  55  86 \n 4 |  7  76  84   0   0  64  91   0   0  56   4   0  48 \n 5 |  0  65  82   0   0   0  77  38  38   0  74  62   0 \n 6 |  0  95   0  64   0   0  20  92  98  28   7   0   0 \n 7 | 30   2  18  91  77  20   0  15  23   0   0  60  24 \n 8 | 78   2   0   0  38  92  15   0   0  68  40  74  63 \n 9 | 46  67  66   0  38  98  23   0   0   3   0   0   0 \n10 | 18  73   0  56   0  28   0  68   3   0  53  17  71 \n11 | 17   0   0   4  74   7   0  40   0  53   0  73   3 \n12 |100   2  55   0  62   0  60  74   0  17  73   0  21 \n13 | 15   0  86  48   0   0  24  63   0  71   3  21   0 \n",
    "graph_output": "13 53\n1 8 78\n1 9 46\n8 5 38\n8 13 63\n1 11 17\n5 7 77\n9 3 66\n3 12 55\n12 10 17\n3 2 92\n11 6 7\n3 4 84\n2 10 73\n3 5 82\n11 12 73\n6 9 98\n1 12 100\n11 8 40\n7 2 2\n13 10 71\n6 2 95\n7 4 91\n12 8 74\n1 10 18\n12 13 21\n6 4 64\n3 13 86\n3 7 18\n12 2 2\n8 2 2\n13 1 15\n7 12 60\n7 6 20\n5 2 65\n8 6 92\n4 2 76\n5 12 62\n10 11 53\n13 7 24\n8 7 15\n5 9 38\n13 4 48\n7 9 23\n9 10 3\n11 13 3\n5 11 74\n4 10 56\n4 1 7\n4 11 4\n10 6 28\n1 7 30\n8 10 68\n2 9 67\n",
    "vertices": [
      null,
      null
    ],
    "answer": 123,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 91 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 6 and vertex 9.\n",
    "graph_output": "15 91\n1 15\n1 7\n7 12\n7 8\n15 5\n12 11\n15 6\n6 3\n1 2\n8 14\n5 13\n6 4\n7 9\n12 10\n11 6\n9 15\n4 10\n3 4\n10 14\n7 14\n9 10\n10 11\n6 2\n3 1\n8 1\n5 8\n13 1\n4 13\n12 2\n8 15\n9 13\n9 4\n7 13\n4 8\n5 11\n10 7\n9 5\n14 13\n15 13\n8 11\n9 11\n3 7\n6 1\n10 3\n6 12\n11 1\n8 12\n12 9\n9 2\n3 8\n7 11\n10 5\n14 3\n3 12\n13 12\n10 1\n14 4\n5 2\n11 3\n5 6\n1 9\n15 2\n5 3\n6 8\n3 13\n12 4\n13 10\n5 7\n13 11\n9 8\n7 4\n15 4\n6 14\n15 14\n8 13\n6 13\n8 2\n2 3\n1 14\n15 10\n12 1\n11 2\n10 8\n12 15\n7 15\n2 7\n2 13\n15 11\n2 4\n6 7\n6 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 3 to vertex 15 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 113 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2 with a weight of 33.\nThere is an edge between vertex 2 and vertex 4 with a weight of 30.\nThere is an edge between vertex 2 and vertex 14 with a weight of 56.\nThere is an edge between vertex 1 and vertex 15 with a weight of 37.\nThere is an edge between vertex 14 and vertex 12 with a weight of 26.\nThere is an edge between vertex 2 and vertex 11 with a weight of 22.\nThere is an edge between vertex 11 and vertex 6 with a weight of 53.\nThere is an edge between vertex 15 and vertex 5 with a weight of 60.\nThere is an edge between vertex 4 and vertex 9 with a weight of 30.\nThere is an edge between vertex 9 and vertex 16 with a weight of 81.\nThere is an edge between vertex 9 and vertex 13 with a weight of 5.\nThere is an edge between vertex 1 and vertex 7 with a weight of 56.\nThere is an edge between vertex 2 and vertex 10 with a weight of 47.\nThere is an edge between vertex 13 and vertex 3 with a weight of 87.\nThere is an edge between vertex 2 and vertex 8 with a weight of 71.\nThere is an edge between vertex 16 and vertex 3 with a weight of 46.\nThere is an edge between vertex 9 and vertex 11 with a weight of 44.\nThere is an edge between vertex 1 and vertex 10 with a weight of 97.\nThere is an edge between vertex 4 and vertex 14 with a weight of 50.\nThere is an edge between vertex 8 and vertex 6 with a weight of 79.\nThere is an edge between vertex 3 and vertex 8 with a weight of 15.\nThere is an edge between vertex 3 and vertex 6 with a weight of 71.\nThere is an edge between vertex 3 and vertex 12 with a weight of 30.\nThere is an edge between vertex 5 and vertex 16 with a weight of 80.\nThere is an edge between vertex 7 and vertex 13 with a weight of 42.\nThere is an edge between vertex 1 and vertex 13 with a weight of 82.\nThere is an edge between vertex 9 and vertex 1 with a weight of 35.\nThere is an edge between vertex 15 and vertex 11 with a weight of 3.\nThere is an edge between vertex 2 and vertex 6 with a weight of 78.\nThere is an edge between vertex 10 and vertex 11 with a weight of 39.\nThere is an edge between vertex 3 and vertex 1 with a weight of 82.\nThere is an edge between vertex 7 and vertex 16 with a weight of 83.\nThere is an edge between vertex 5 and vertex 3 with a weight of 17.\nThere is an edge between vertex 2 and vertex 12 with a weight of 93.\nThere is an edge between vertex 9 and vertex 12 with a weight of 80.\nThere is an edge between vertex 1 and vertex 4 with a weight of 83.\nThere is an edge between vertex 7 and vertex 11 with a weight of 65.\nThere is an edge between vertex 9 and vertex 3 with a weight of 74.\nThere is an edge between vertex 14 and vertex 3 with a weight of 26.\nThere is an edge between vertex 4 and vertex 15 with a weight of 84.\nThere is an edge between vertex 4 and vertex 13 with a weight of 75.\nThere is an edge between vertex 3 and vertex 7 with a weight of 47.\nThere is an edge between vertex 7 and vertex 14 with a weight of 58.\nThere is an edge between vertex 9 and vertex 5 with a weight of 88.\nThere is an edge between vertex 12 and vertex 4 with a weight of 79.\nThere is an edge between vertex 14 and vertex 1 with a weight of 25.\nThere is an edge between vertex 12 and vertex 1 with a weight of 14.\nThere is an edge between vertex 10 and vertex 5 with a weight of 21.\nThere is an edge between vertex 11 and vertex 14 with a weight of 38.\nThere is an edge between vertex 10 and vertex 12 with a weight of 39.\nThere is an edge between vertex 10 and vertex 16 with a weight of 2.\nThere is an edge between vertex 6 and vertex 14 with a weight of 43.\nThere is an edge between vertex 2 and vertex 9 with a weight of 26.\nThere is an edge between vertex 4 and vertex 6 with a weight of 48.\nThere is an edge between vertex 8 and vertex 7 with a weight of 36.\nThere is an edge between vertex 13 and vertex 16 with a weight of 1.\nThere is an edge between vertex 11 and vertex 3 with a weight of 17.\nThere is an edge between vertex 4 and vertex 3 with a weight of 27.\nThere is an edge between vertex 11 and vertex 8 with a weight of 13.\nThere is an edge between vertex 2 and vertex 15 with a weight of 58.\nThere is an edge between vertex 1 and vertex 16 with a weight of 60.\nThere is an edge between vertex 1 and vertex 11 with a weight of 8.\nThere is an edge between vertex 15 and vertex 3 with a weight of 85.\nThere is an edge between vertex 5 and vertex 11 with a weight of 83.\nThere is an edge between vertex 14 and vertex 5 with a weight of 29.\nThere is an edge between vertex 2 and vertex 7 with a weight of 88.\nThere is an edge between vertex 8 and vertex 15 with a weight of 72.\nThere is an edge between vertex 7 and vertex 15 with a weight of 84.\nThere is an edge between vertex 7 and vertex 5 with a weight of 4.\nThere is an edge between vertex 9 and vertex 7 with a weight of 29.\nThere is an edge between vertex 15 and vertex 14 with a weight of 13.\nThere is an edge between vertex 13 and vertex 15 with a weight of 22.\nThere is an edge between vertex 4 and vertex 8 with a weight of 44.\nThere is an edge between vertex 7 and vertex 12 with a weight of 99.\nThere is an edge between vertex 16 and vertex 11 with a weight of 26.\nThere is an edge between vertex 9 and vertex 10 with a weight of 10.\nThere is an edge between vertex 13 and vertex 12 with a weight of 99.\nThere is an edge between vertex 12 and vertex 16 with a weight of 24.\nThere is an edge between vertex 13 and vertex 5 with a weight of 44.\nThere is an edge between vertex 15 and vertex 9 with a weight of 47.\nThere is an edge between vertex 9 and vertex 8 with a weight of 54.\nThere is an edge between vertex 3 and vertex 2 with a weight of 66.\nThere is an edge between vertex 11 and vertex 12 with a weight of 97.\nThere is an edge between vertex 8 and vertex 14 with a weight of 39.\nThere is an edge between vertex 6 and vertex 10 with a weight of 82.\nThere is an edge between vertex 16 and vertex 15 with a weight of 78.\nThere is an edge between vertex 12 and vertex 6 with a weight of 5.\nThere is an edge between vertex 4 and vertex 5 with a weight of 61.\nThere is an edge between vertex 3 and vertex 10 with a weight of 24.\nThere is an edge between vertex 12 and vertex 15 with a weight of 84.\nThere is an edge between vertex 6 and vertex 15 with a weight of 68.\nThere is an edge between vertex 8 and vertex 12 with a weight of 94.\nThere is an edge between vertex 6 and vertex 5 with a weight of 61.\nThere is an edge between vertex 8 and vertex 5 with a weight of 4.\nThere is an edge between vertex 10 and vertex 8 with a weight of 45.\nThere is an edge between vertex 10 and vertex 13 with a weight of 25.\nThere is an edge between vertex 9 and vertex 14 with a weight of 96.\nThere is an edge between vertex 2 and vertex 13 with a weight of 27.\nThere is an edge between vertex 16 and vertex 14 with a weight of 24.\nThere is an edge between vertex 15 and vertex 10 with a weight of 86.\nThere is an edge between vertex 6 and vertex 7 with a weight of 3.\nThere is an edge between vertex 14 and vertex 10 with a weight of 47.\nThere is an edge between vertex 16 and vertex 6 with a weight of 36.\nThere is an edge between vertex 8 and vertex 16 with a weight of 28.\nThere is an edge between vertex 8 and vertex 1 with a weight of 17.\nThere is an edge between vertex 13 and vertex 11 with a weight of 9.\nThere is an edge between vertex 5 and vertex 1 with a weight of 66.\nThere is an edge between vertex 2 and vertex 5 with a weight of 94.\nThere is an edge between vertex 1 and vertex 6 with a weight of 95.\nThere is an edge between vertex 12 and vertex 5 with a weight of 95.\nThere is an edge between vertex 4 and vertex 16 with a weight of 66.\nThere is an edge between vertex 4 and vertex 10 with a weight of 1.\nThere is an edge between vertex 10 and vertex 7 with a weight of 80.\n",
    "graph_output": "16 113\n1 2 33\n2 4 30\n2 14 56\n1 15 37\n14 12 26\n2 11 22\n11 6 53\n15 5 60\n4 9 30\n9 16 81\n9 13 5\n1 7 56\n2 10 47\n13 3 87\n2 8 71\n16 3 46\n9 11 44\n1 10 97\n4 14 50\n8 6 79\n3 8 15\n3 6 71\n3 12 30\n5 16 80\n7 13 42\n1 13 82\n9 1 35\n15 11 3\n2 6 78\n10 11 39\n3 1 82\n7 16 83\n5 3 17\n2 12 93\n9 12 80\n1 4 83\n7 11 65\n9 3 74\n14 3 26\n4 15 84\n4 13 75\n3 7 47\n7 14 58\n9 5 88\n12 4 79\n14 1 25\n12 1 14\n10 5 21\n11 14 38\n10 12 39\n10 16 2\n6 14 43\n2 9 26\n4 6 48\n8 7 36\n13 16 1\n11 3 17\n4 3 27\n11 8 13\n2 15 58\n1 16 60\n1 11 8\n15 3 85\n5 11 83\n14 5 29\n2 7 88\n8 15 72\n7 15 84\n7 5 4\n9 7 29\n15 14 13\n13 15 22\n4 8 44\n7 12 99\n16 11 26\n9 10 10\n13 12 99\n12 16 24\n13 5 44\n15 9 47\n9 8 54\n3 2 66\n11 12 97\n8 14 39\n6 10 82\n16 15 78\n12 6 5\n4 5 61\n3 10 24\n12 15 84\n6 15 68\n8 12 94\n6 5 61\n8 5 4\n10 8 45\n10 13 25\n9 14 96\n2 13 27\n16 14 24\n15 10 86\n6 7 3\n14 10 47\n16 6 36\n8 16 28\n8 1 17\n13 11 9\n5 1 66\n2 5 94\n1 6 95\n12 5 95\n4 16 66\n4 10 1\n10 7 80\n",
    "vertices": [
      3,
      15
    ],
    "answer": 20,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 107 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   0   1   1   1   1   1   0   1   1 \n 2 |  1   0   1   1   1   1   0   1   1   1   1   1   1   0   1   1   1 \n 3 |  1   1   0   0   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 4 |  1   1   0   0   1   1   1   1   0   0   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   0   1   1   1   1   1   0   0   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   0   0 \n 7 |  1   0   1   1   1   1   0   1   1   1   1   1   0   1   1   1   0 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   0   1   1   0 \n 9 |  0   1   0   0   0   1   1   1   0   0   0   1   1   0   1   0   1 \n10 |  1   1   1   0   1   1   1   1   0   0   1   1   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   0   1   0   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   0   1   1   1   1 \n13 |  1   1   1   1   1   1   0   1   1   1   0   0   0   0   1   0   0 \n14 |  1   0   1   1   1   1   1   0   0   1   1   1   0   0   1   1   1 \n15 |  0   1   1   1   0   1   1   1   1   1   1   1   1   1   0   0   0 \n16 |  1   1   1   1   0   0   1   1   0   1   1   1   0   1   0   0   0 \n17 |  1   1   1   1   1   0   0   0   1   1   1   1   0   1   0   0   0 \n",
    "graph_output": "17 107\n15 14\n14 5\n2 10\n16 10\n11 8\n6 7\n14 7\n1 3\n12 17\n3 6\n15 8\n8 13\n8 9\n3 16\n17 1\n7 12\n15 10\n4 14\n8 6\n3 8\n13 9\n4 11\n16 2\n5 13\n12 1\n4 8\n17 11\n14 17\n11 2\n10 3\n13 1\n7 3\n3 11\n11 12\n12 4\n7 11\n9 17\n9 6\n1 14\n16 14\n2 3\n1 7\n12 6\n12 10\n1 11\n10 7\n4 16\n8 2\n12 9\n15 13\n6 4\n6 1\n10 8\n2 17\n7 16\n10 11\n3 12\n11 14\n5 3\n4 7\n4 1\n6 5\n2 12\n11 16\n1 2\n4 5\n16 8\n11 5\n12 8\n2 5\n2 9\n2 15\n12 14\n11 15\n10 1\n4 13\n17 4\n12 16\n16 1\n13 3\n5 17\n6 13\n10 14\n2 4\n15 4\n5 8\n15 3\n17 10\n14 3\n15 9\n5 10\n6 14\n15 12\n6 15\n7 8\n10 13\n3 17\n2 13\n5 1\n5 7\n5 12\n7 9\n2 6\n11 6\n15 7\n8 1\n6 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 75 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 6, 9, 4, 8, 12, 2, 7, 3, 11, 10\nVertex 2: 8, 9, 4, 13, 6, 3, 11, 1, 12, 5, 10\nVertex 3: 7, 6, 11, 13, 8, 2, 4, 5, 9, 12, 1, 10\nVertex 4: 8, 2, 5, 1, 13, 10, 3, 6, 12, 11, 7, 9\nVertex 5: 1, 9, 4, 6, 7, 13, 11, 3, 12, 2, 10, 8\nVertex 6: 3, 1, 9, 5, 2, 11, 10, 4, 7, 8, 13, 12\nVertex 7: 3, 12, 5, 11, 13, 9, 10, 1, 6, 4, 8\nVertex 8: 2, 4, 11, 3, 1, 12, 6, 10, 7, 13, 5\nVertex 9: 11, 2, 5, 6, 1, 10, 7, 3, 4, 13, 12\nVertex 10: 13, 11, 9, 4, 6, 12, 7, 3, 8, 1, 2, 5\nVertex 11: 9, 3, 8, 13, 7, 10, 12, 6, 5, 2, 4, 1\nVertex 12: 7, 13, 11, 1, 10, 3, 5, 4, 8, 2, 9, 6\nVertex 13: 2, 12, 11, 5, 10, 3, 7, 4, 9, 6, 8\n",
    "graph_output": "13 75\n3 7\n8 2\n8 4\n11 9\n2 9\n5 1\n3 6\n2 4\n11 3\n9 5\n4 5\n1 6\n12 7\n2 13\n9 6\n8 11\n13 12\n6 5\n5 7\n11 13\n13 5\n10 13\n3 13\n6 2\n11 7\n10 11\n7 13\n8 3\n1 9\n9 10\n11 12\n7 9\n4 1\n2 3\n1 8\n13 4\n6 11\n11 5\n4 10\n6 10\n4 3\n5 3\n2 11\n12 1\n12 10\n6 4\n3 9\n10 7\n3 12\n12 5\n12 4\n1 2\n8 12\n12 2\n1 7\n7 6\n1 3\n11 4\n3 10\n6 8\n4 7\n11 1\n4 9\n10 8\n9 13\n9 12\n6 13\n7 8\n10 1\n8 13\n5 2\n6 12\n10 2\n5 10\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 112 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 7, 9, 11, 17, 5, 6, 3, 15, 14, 8, 12, 10\nVertex 2: 1, 6, 8, 10, 12, 4, 14, 11, 3, 17, 16, 13, 5, 9, 7\nVertex 3: 6, 13, 1, 12, 2, 7, 17, 16, 11, 9, 15, 4, 14\nVertex 4: 9, 2, 15, 11, 7, 14, 13, 17, 12, 6, 3, 8, 16\nVertex 5: 17, 1, 16, 15, 11, 13, 12, 14, 9, 2, 8\nVertex 6: 2, 14, 3, 9, 1, 7, 11, 10, 16, 13, 17, 4\nVertex 7: 1, 13, 9, 14, 8, 4, 15, 6, 3, 11, 17, 16, 10, 12, 2\nVertex 8: 2, 15, 14, 7, 10, 1, 13, 16, 4, 5, 17\nVertex 9: 1, 4, 7, 6, 12, 13, 10, 15, 3, 5, 16, 17, 2\nVertex 10: 2, 15, 9, 12, 6, 8, 13, 14, 1, 11, 7, 16\nVertex 11: 1, 15, 4, 14, 2, 13, 6, 5, 16, 12, 7, 3, 17, 10\nVertex 12: 2, 9, 16, 14, 3, 10, 11, 5, 1, 4, 17, 15, 7\nVertex 13: 7, 9, 4, 11, 3, 14, 5, 6, 8, 10, 2, 15\nVertex 14: 6, 17, 16, 7, 2, 8, 11, 4, 12, 13, 15, 1, 5, 10, 3\nVertex 15: 8, 4, 11, 10, 7, 9, 17, 1, 5, 14, 16, 3, 13, 12\nVertex 16: 14, 5, 12, 11, 6, 3, 15, 7, 2, 9, 8, 4, 17, 10\nVertex 17: 14, 5, 1, 4, 15, 3, 11, 2, 7, 6, 12, 9, 16, 8\n",
    "graph_output": "17 112\n1 2\n2 6\n6 14\n2 8\n6 3\n2 10\n1 7\n1 9\n14 17\n9 4\n14 16\n1 11\n8 15\n17 5\n2 12\n7 13\n7 9\n2 4\n17 1\n9 6\n4 15\n14 7\n9 12\n5 1\n15 11\n15 10\n14 2\n8 14\n16 5\n13 9\n9 10\n11 4\n1 6\n8 7\n14 11\n7 4\n14 4\n11 2\n7 15\n13 4\n16 12\n4 17\n11 13\n13 3\n1 3\n6 7\n14 12\n3 12\n14 13\n2 3\n15 9\n15 17\n15 1\n6 11\n15 5\n12 10\n10 6\n5 11\n3 7\n14 15\n14 1\n10 8\n16 11\n8 1\n17 3\n13 5\n11 12\n16 6\n12 5\n11 7\n16 3\n11 3\n17 11\n1 12\n13 6\n2 17\n12 4\n16 15\n7 17\n14 5\n17 6\n3 9\n9 5\n16 7\n3 15\n8 13\n16 2\n13 10\n4 6\n16 9\n13 2\n12 17\n8 16\n10 14\n10 1\n4 3\n13 15\n5 2\n4 8\n16 4\n10 11\n9 17\n5 8\n15 12\n7 10\n17 16\n14 3\n2 9\n8 17\n12 7\n10 16\n2 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 16 vertices and 16 edges\n\nEdges (Format: Node Node):\n11 6\n14 9\n2 9\n3 2\n8 9\n2 13\n13 10\n2 8\n8 11\n13 14\n12 14\n16 13\n8 7\n1 11\n12 8\n4 1\n",
    "graph_output": "16 16\n11 6\n14 9\n2 9\n3 2\n8 9\n2 13\n13 10\n2 8\n8 11\n13 14\n12 14\n16 13\n8 7\n1 11\n12 8\n4 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 27 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 8, 4, 3, 6, 5, 2\nVertex 2: 4, 5, 6, 8, 3, 1\nVertex 3: 7, 8, 6, 1, 2, 4, 5\nVertex 4: 2, 8, 5, 6, 1, 7, 3\nVertex 5: 2, 4, 6, 7, 8, 1, 3\nVertex 6: 5, 3, 4, 8, 1, 2, 7\nVertex 7: 3, 1, 5, 4, 8, 6\nVertex 8: 4, 3, 1, 5, 6, 7, 2\n",
    "graph_output": "8 27\n4 2\n3 7\n4 8\n5 2\n1 7\n5 4\n8 3\n6 5\n3 6\n1 8\n5 7\n8 5\n6 4\n1 4\n3 1\n8 6\n7 4\n7 8\n1 6\n6 2\n8 2\n1 5\n7 6\n2 3\n4 3\n2 1\n3 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6062,
    "description_type": "list"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 16 and 25 in the given tree, with node 1 as the root.\n\nUndirected Graph with 29 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 29\n29 24\n29 26\n26 3\n26 22\n22 10\n10 5\n10 13\n24 12\n5 27\n26 20\n22 16\n20 7\n27 15\n29 23\n16 25\n10 6\n22 2\n27 9\n2 14\n15 11\n25 18\n25 17\n29 8\n2 28\n13 19\n5 21\n11 4\n",
    "graph_output": "29 28\n1 29\n29 24\n29 26\n26 3\n26 22\n22 10\n10 5\n10 13\n24 12\n5 27\n26 20\n22 16\n20 7\n27 15\n29 23\n16 25\n10 6\n22 2\n27 9\n2 14\n15 11\n25 18\n25 17\n29 8\n2 28\n13 19\n5 21\n11 4\n",
    "vertices": [
      16,
      25
    ],
    "answer": 16,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 5 (source) to vertex 4 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 23 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2 with a weight of 41 and a capacity of 8.\nThere is an edge between vertex 1 and vertex 4 with a weight of 55 and a capacity of 8.\nThere is an edge between vertex 1 and vertex 3 with a weight of 71 and a capacity of 9.\nThere is an edge between vertex 3 and vertex 6 with a weight of 83 and a capacity of 6.\nThere is an edge between vertex 3 and vertex 8 with a weight of 47 and a capacity of 9.\nThere is an edge between vertex 8 and vertex 5 with a weight of 98 and a capacity of 1.\nThere is an edge between vertex 6 and vertex 9 with a weight of 17 and a capacity of 5.\nThere is an edge between vertex 8 and vertex 7 with a weight of 12 and a capacity of 6.\nThere is an edge between vertex 7 and vertex 2 with a weight of 33 and a capacity of 5.\nThere is an edge between vertex 8 and vertex 9 with a weight of 86 and a capacity of 3.\nThere is an edge between vertex 8 and vertex 2 with a weight of 43 and a capacity of 10.\nThere is an edge between vertex 9 and vertex 4 with a weight of 88 and a capacity of 2.\nThere is an edge between vertex 7 and vertex 4 with a weight of 65 and a capacity of 8.\nThere is an edge between vertex 5 and vertex 9 with a weight of 34 and a capacity of 4.\nThere is an edge between vertex 1 and vertex 9 with a weight of 50 and a capacity of 7.\nThere is an edge between vertex 9 and vertex 7 with a weight of 7 and a capacity of 2.\nThere is an edge between vertex 5 and vertex 3 with a weight of 41 and a capacity of 8.\nThere is an edge between vertex 6 and vertex 2 with a weight of 77 and a capacity of 1.\nThere is an edge between vertex 7 and vertex 5 with a weight of 90 and a capacity of 7.\nThere is an edge between vertex 9 and vertex 2 with a weight of 3 and a capacity of 7.\nThere is an edge between vertex 1 and vertex 8 with a weight of 7 and a capacity of 7.\nThere is an edge between vertex 7 and vertex 1 with a weight of 95 and a capacity of 9.\nThere is an edge between vertex 8 and vertex 6 with a weight of 27 and a capacity of 6.\n",
    "graph_output": "9 23\n1 2 41 8\n1 4 55 8\n1 3 71 9\n3 6 83 6\n3 8 47 9\n8 5 98 1\n6 9 17 5\n8 7 12 6\n7 2 33 5\n8 9 86 3\n8 2 43 10\n9 4 88 2\n7 4 65 8\n5 9 34 4\n1 9 50 7\n9 7 7 2\n5 3 41 8\n6 2 77 1\n7 5 90 7\n9 2 3 7\n1 8 7 7\n7 1 95 9\n8 6 27 6\n",
    "vertices": [
      5,
      4
    ],
    "answer": 2603,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 17 vertices and 22 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   1   0   0   0   0   1   0   0   0   0   0   1   1   0 \n 2 |  0   0   0   1   1   0   1   0   0   0   0   0   1   0   0   0   1 \n 3 |  0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 4 |  1   1   1   0   0   0   1   0   0   0   0   0   0   1   0   0   0 \n 5 |  0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 7 |  0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   1 \n 9 |  1   0   0   0   0   0   0   1   0   1   0   0   0   0   1   0   1 \n10 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0 \n12 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n13 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0 \n15 |  1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n16 |  1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n17 |  0   1   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0 \n",
    "graph_output": "17 22\n1 4\n1 9\n1 16\n9 8\n4 14\n4 2\n16 12\n2 7\n9 10\n14 11\n11 6\n9 17\n2 13\n12 3\n2 5\n1 15\n17 2\n15 9\n3 4\n5 8\n7 4\n8 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 108 edges\n\nEdges (Format: Node Node):\n1 16\n16 5\n5 8\n1 12\n8 14\n12 7\n1 6\n1 13\n14 11\n6 2\n16 15\n15 9\n14 4\n12 10\n8 3\n10 1\n9 1\n13 12\n16 10\n10 3\n10 4\n7 5\n7 16\n2 12\n16 13\n6 13\n2 1\n3 1\n9 4\n7 15\n11 6\n2 8\n4 5\n9 16\n2 15\n11 12\n2 3\n8 12\n2 4\n5 6\n16 4\n7 6\n1 11\n8 6\n2 11\n3 4\n1 8\n9 13\n8 9\n9 5\n13 15\n5 15\n8 7\n16 11\n14 10\n6 10\n13 10\n14 6\n11 10\n8 11\n15 10\n8 10\n15 6\n4 8\n2 14\n16 2\n15 3\n12 15\n4 6\n15 11\n16 6\n16 8\n1 5\n7 10\n2 5\n12 6\n14 13\n5 10\n5 13\n11 3\n15 14\n3 12\n5 11\n2 9\n10 9\n11 9\n15 8\n5 12\n14 16\n15 4\n9 14\n5 14\n10 2\n4 13\n3 5\n3 16\n12 4\n9 7\n15 1\n11 7\n12 9\n13 7\n1 14\n1 4\n12 14\n2 13\n14 3\n4 11\n",
    "graph_output": "16 108\n1 16\n16 5\n5 8\n1 12\n8 14\n12 7\n1 6\n1 13\n14 11\n6 2\n16 15\n15 9\n14 4\n12 10\n8 3\n10 1\n9 1\n13 12\n16 10\n10 3\n10 4\n7 5\n7 16\n2 12\n16 13\n6 13\n2 1\n3 1\n9 4\n7 15\n11 6\n2 8\n4 5\n9 16\n2 15\n11 12\n2 3\n8 12\n2 4\n5 6\n16 4\n7 6\n1 11\n8 6\n2 11\n3 4\n1 8\n9 13\n8 9\n9 5\n13 15\n5 15\n8 7\n16 11\n14 10\n6 10\n13 10\n14 6\n11 10\n8 11\n15 10\n8 10\n15 6\n4 8\n2 14\n16 2\n15 3\n12 15\n4 6\n15 11\n16 6\n16 8\n1 5\n7 10\n2 5\n12 6\n14 13\n5 10\n5 13\n11 3\n15 14\n3 12\n5 11\n2 9\n10 9\n11 9\n15 8\n5 12\n14 16\n15 4\n9 14\n5 14\n10 2\n4 13\n3 5\n3 16\n12 4\n9 7\n15 1\n11 7\n12 9\n13 7\n1 14\n1 4\n12 14\n2 13\n14 3\n4 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 103 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 9, 7, 17, 4, 2, 14, 6, 16, 3, 5, 13\nVertex 2: 13, 4, 7, 10, 12, 8, 5, 1, 11, 6, 17, 15, 14\nVertex 3: 11, 13, 14, 9, 8, 17, 4, 1, 5, 16, 7, 15\nVertex 4: 2, 14, 15, 10, 17, 5, 1, 11, 3, 13, 9, 8, 16\nVertex 5: 12, 6, 10, 15, 4, 2, 8, 13, 9, 16, 1, 17, 3\nVertex 6: 11, 7, 5, 10, 13, 16, 1, 2, 17, 8, 9\nVertex 7: 17, 6, 8, 2, 12, 1, 9, 14, 16, 3, 15\nVertex 8: 13, 7, 15, 3, 2, 9, 14, 11, 17, 5, 6, 4, 16\nVertex 9: 15, 1, 17, 3, 12, 8, 7, 11, 14, 5, 13, 10, 4, 6\nVertex 10: 11, 16, 13, 17, 4, 2, 5, 15, 6, 14, 9\nVertex 11: 10, 3, 6, 13, 4, 8, 9, 2, 12, 15\nVertex 12: 5, 7, 16, 9, 2, 11, 15, 13\nVertex 13: 2, 8, 14, 10, 16, 3, 15, 11, 6, 4, 5, 9, 1, 17, 12\nVertex 14: 13, 4, 3, 15, 8, 17, 1, 9, 7, 16, 10, 2\nVertex 15: 9, 8, 4, 16, 14, 13, 10, 5, 11, 2, 12, 7, 3\nVertex 16: 10, 13, 15, 12, 6, 1, 5, 14, 17, 7, 8, 4, 3\nVertex 17: 7, 10, 9, 3, 4, 1, 14, 8, 2, 16, 6, 5, 13\n",
    "graph_output": "17 103\n5 12\n17 7\n11 10\n11 3\n2 13\n13 8\n2 4\n16 10\n11 6\n6 7\n9 15\n13 14\n7 8\n8 15\n9 1\n13 10\n2 7\n16 13\n4 14\n12 7\n3 13\n17 10\n9 17\n15 4\n15 16\n12 16\n10 4\n3 14\n10 2\n15 14\n6 5\n1 7\n3 9\n3 8\n5 10\n3 17\n13 15\n11 13\n15 10\n12 9\n12 2\n4 17\n1 17\n10 6\n2 8\n6 13\n15 5\n9 8\n5 4\n4 1\n4 11\n3 4\n14 8\n7 9\n16 6\n5 2\n8 11\n14 17\n17 8\n1 2\n4 13\n1 14\n11 9\n11 2\n5 8\n13 5\n14 9\n5 9\n12 11\n14 7\n6 1\n6 2\n16 1\n16 5\n16 14\n14 10\n17 2\n11 15\n2 15\n3 1\n16 17\n15 12\n17 6\n13 9\n10 9\n4 9\n6 8\n7 16\n5 1\n6 9\n5 17\n4 8\n16 8\n2 14\n4 16\n3 5\n16 3\n7 3\n13 1\n15 7\n13 17\n15 3\n12 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 16 edges\n\nEdges (Format: Node Node):\n1 9\n9 7\n1 5\n5 2\n9 10\n10 15\n9 8\n1 3\n5 13\n1 14\n8 12\n13 4\n10 11\n4 16\n13 6\n4 5\n",
    "graph_output": "16 16\n1 9\n9 7\n1 5\n5 2\n9 10\n10 15\n9 8\n1 3\n5 13\n1 14\n8 12\n13 4\n10 11\n4 16\n13 6\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 92 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   0   1   1   1 \n 3 |  0   1   0   1   1   0   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   0   1   0   1   1   1   1   1   0 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   0   1 \n 6 |  1   1   0   1   1   0   1   1   1   1   1   1   1   0   1 \n 7 |  1   1   1   0   1   1   0   1   1   1   1   0   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 9 |  1   1   1   0   1   1   1   1   0   1   0   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   0   1   1   0   1 \n11 |  1   1   1   1   1   1   1   1   0   0   0   1   1   1   1 \n12 |  1   0   1   1   1   1   0   1   1   1   1   0   1   0   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   1   0   0   1   1   1   0   1   0   1   0   1 \n15 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 92\n11 7\n4 14\n4 8\n8 15\n3 7\n10 9\n7 6\n4 11\n15 1\n4 13\n14 7\n10 12\n5 10\n3 10\n2 15\n9 2\n9 15\n15 3\n12 8\n11 8\n5 3\n11 6\n5 12\n5 15\n15 6\n1 4\n2 14\n2 8\n1 5\n14 13\n7 10\n2 11\n12 3\n1 6\n13 15\n4 2\n7 15\n11 5\n1 7\n13 7\n8 1\n1 12\n3 13\n2 7\n11 14\n13 9\n13 1\n5 2\n8 7\n15 14\n8 9\n11 3\n15 11\n10 15\n3 8\n5 7\n12 15\n12 13\n6 13\n14 8\n1 14\n9 3\n10 6\n9 7\n1 9\n10 8\n6 5\n2 1\n11 1\n12 6\n10 1\n12 9\n6 4\n13 11\n12 4\n2 6\n10 4\n2 10\n2 3\n8 5\n14 3\n13 5\n4 3\n8 13\n13 2\n9 5\n5 4\n9 14\n11 12\n6 8\n13 10\n9 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 17 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (7\u00d77):\n\n      1   2   3   4   5   6   7\n   ----------------------------\n 1 |  0   1   0   0   0   1   1 \n 2 |  1   0   0   1   1   1   1 \n 3 |  0   0   0   1   1   1   1 \n 4 |  0   1   1   0   1   1   1 \n 5 |  0   1   1   1   0   1   1 \n 6 |  1   1   1   1   1   0   1 \n 7 |  1   1   1   1   1   1   0 \n",
    "graph_output": "7 17\n4 3\n2 6\n4 2\n7 2\n7 3\n7 6\n6 3\n7 4\n1 6\n5 6\n7 1\n5 2\n1 2\n4 6\n5 4\n5 3\n5 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 274,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 115 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 9, 10, 14, 17, 4, 3, 2, 5, 12, 7, 13\nVertex 2: 9, 13, 14, 5, 7, 17, 1, 8, 4, 6, 11, 3, 10\nVertex 3: 4, 15, 16, 5, 17, 10, 1, 8, 2, 9, 11, 14\nVertex 4: 13, 11, 17, 3, 9, 10, 1, 8, 16, 5, 2, 6, 12, 7, 15\nVertex 5: 16, 8, 15, 9, 2, 3, 14, 4, 13, 1, 17, 7, 6\nVertex 6: 14, 8, 17, 13, 9, 10, 4, 2, 7, 12, 5\nVertex 7: 12, 17, 13, 2, 14, 11, 9, 10, 16, 8, 15, 4, 6, 1, 5\nVertex 8: 5, 13, 6, 15, 11, 17, 4, 7, 12, 2, 3, 10, 14, 16, 9\nVertex 9: 1, 2, 14, 5, 17, 4, 7, 6, 11, 16, 13, 12, 3, 10, 8\nVertex 10: 14, 15, 1, 13, 3, 16, 4, 17, 7, 11, 12, 6, 8, 9, 2\nVertex 11: 1, 4, 12, 8, 7, 13, 10, 9, 16, 17, 15, 2, 3, 14\nVertex 12: 17, 7, 11, 14, 10, 8, 4, 9, 15, 1, 13, 6\nVertex 13: 4, 2, 7, 8, 15, 10, 11, 6, 5, 16, 9, 14, 17, 12, 1\nVertex 14: 10, 6, 2, 16, 9, 12, 1, 7, 5, 15, 8, 13, 11, 3\nVertex 15: 16, 10, 3, 5, 13, 8, 14, 7, 11, 12, 4, 17\nVertex 16: 15, 5, 3, 14, 10, 17, 7, 4, 9, 13, 11, 8\nVertex 17: 12, 7, 4, 9, 1, 3, 2, 6, 10, 16, 8, 11, 5, 13, 15\n",
    "graph_output": "17 115\n14 10\n16 15\n15 10\n12 17\n7 12\n17 7\n13 4\n1 11\n9 1\n11 4\n16 5\n17 4\n4 3\n2 9\n14 6\n2 13\n14 2\n10 1\n7 13\n8 5\n8 13\n15 3\n8 6\n5 15\n16 3\n11 12\n16 14\n13 15\n9 14\n5 9\n10 13\n9 17\n2 5\n12 14\n14 1\n15 8\n5 3\n1 17\n7 2\n7 14\n3 17\n11 8\n3 10\n11 7\n17 2\n4 9\n13 11\n16 10\n17 6\n7 9\n10 4\n10 17\n5 14\n13 6\n10 7\n1 4\n17 16\n7 16\n10 11\n17 8\n6 9\n4 8\n15 14\n9 11\n12 10\n4 16\n8 7\n8 12\n10 6\n7 15\n3 1\n4 5\n1 2\n13 5\n2 8\n16 9\n3 8\n2 4\n16 13\n4 6\n2 6\n8 10\n13 9\n16 11\n5 1\n4 12\n17 11\n14 8\n8 16\n11 15\n9 12\n14 13\n4 7\n15 12\n7 6\n17 5\n12 1\n15 4\n11 2\n17 13\n17 15\n2 3\n9 3\n12 13\n12 6\n10 9\n3 11\n14 11\n1 7\n9 8\n13 1\n7 5\n6 5\n3 14\n2 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 24 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 13, 15\nVertex 2: 10, 3\nVertex 3: 2, 9, 15, 6\nVertex 4: 13\nVertex 5: 14, 8, 16\nVertex 6: 8, 12, 11, 3, 9\nVertex 7: 13, 14\nVertex 8: 10, 6, 16, 5\nVertex 9: 3, 6\nVertex 10: 1, 8, 2, 14\nVertex 11: 6, 12\nVertex 12: 6, 11\nVertex 13: 1, 4, 7, 16\nVertex 14: 16, 5, 7, 10\nVertex 15: 1, 3\nVertex 16: 8, 14, 13, 5\n",
    "graph_output": "16 24\n1 10\n10 8\n8 6\n6 12\n1 13\n8 16\n10 2\n13 4\n13 7\n6 11\n16 14\n2 3\n1 15\n14 5\n3 9\n14 7\n3 15\n16 13\n10 14\n6 3\n6 9\n5 8\n5 16\n11 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 31 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 10 and vertex 17.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 17 and vertex 15.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 8 and vertex 17.\n",
    "graph_output": "17 31\n1 5\n5 6\n6 7\n5 2\n2 15\n6 10\n10 9\n9 12\n6 4\n7 3\n7 13\n7 11\n11 14\n1 16\n3 8\n10 17\n12 17\n5 15\n8 16\n3 12\n17 15\n3 11\n5 14\n12 13\n8 5\n4 11\n8 1\n7 12\n4 13\n15 13\n8 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 20 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   0   0   0   0   0   1   0   0   0   1 \n 2 |  0   0   0   0   1   1   0   0   0   1   0   0 \n 3 |  0   0   0   1   0   1   1   0   0   0   0   0 \n 4 |  0   0   1   0   0   0   0   0   0   0   1   0 \n 5 |  0   1   0   0   0   1   0   0   1   1   0   1 \n 6 |  0   1   1   0   1   0   1   0   0   0   0   1 \n 7 |  0   0   1   0   0   1   0   0   0   0   1   1 \n 8 |  1   0   0   0   0   0   0   0   0   1   0   1 \n 9 |  0   0   0   0   1   0   0   0   0   0   0   0 \n10 |  0   1   0   0   1   0   0   1   0   0   0   1 \n11 |  0   0   0   1   0   0   1   0   0   0   0   0 \n12 |  1   0   0   0   1   1   1   1   0   1   0   0 \n",
    "graph_output": "12 20\n3 7\n2 10\n6 2\n12 10\n5 2\n7 11\n11 4\n5 12\n12 8\n9 5\n7 12\n3 6\n8 1\n8 10\n12 1\n5 10\n3 4\n12 6\n5 6\n6 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 17, 23\nVertex 2: 23\nVertex 3: 5, 10\nVertex 4: 29\nVertex 5: 19, 3, 13\nVertex 6: 18\nVertex 7: 14\nVertex 8: 17, 26\nVertex 9: 27\nVertex 10: 3, 16\nVertex 11: 28\nVertex 12: 17, 28, 27\nVertex 13: 5\nVertex 14: 28, 7\nVertex 15: 28\nVertex 16: 10\nVertex 17: 1, 18, 20, 12, 8, 24\nVertex 18: 17, 6\nVertex 19: 27, 5, 30\nVertex 20: 17\nVertex 21: 28, 29\nVertex 22: 26\nVertex 23: 1, 2\nVertex 24: 17\nVertex 25: 27\nVertex 26: 8, 22\nVertex 27: 12, 19, 25, 9\nVertex 28: 12, 14, 21, 15, 11\nVertex 29: 21, 4\nVertex 30: 19\n",
    "graph_output": "30 29\n1 17\n17 18\n1 23\n17 20\n17 12\n12 28\n12 27\n27 19\n23 2\n17 8\n8 26\n19 5\n28 14\n14 7\n27 25\n17 24\n28 21\n21 29\n29 4\n5 3\n28 15\n26 22\n18 6\n3 10\n10 16\n5 13\n27 9\n28 11\n19 30\n",
    "vertices": [
      null,
      null
    ],
    "answer": 12,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 16 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 9 and vertex 3.\n",
    "graph_output": "11 16\n7 10\n11 9\n1 11\n5 11\n10 3\n2 10\n1 2\n1 4\n1 6\n3 1\n10 9\n11 4\n9 6\n6 11\n5 4\n9 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 103 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   0   1   1   0   1   1   1   1   1   1   1   1 \n 2 |  1   0   0   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 3 |  1   0   0   1   1   1   1   0   1   1   0   1   1   1   0   1   1 \n 4 |  1   1   1   0   1   0   0   0   0   1   0   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   0   1   1   1   1   1   1   0   0   1 \n 6 |  0   1   1   0   1   0   1   1   0   1   1   1   1   1   1   1   0 \n 7 |  1   1   1   0   1   1   0   1   1   1   1   0   1   0   0   0   1 \n 8 |  1   1   0   0   0   1   1   0   1   1   1   1   1   0   0   0   1 \n 9 |  0   0   1   0   1   0   1   1   0   1   1   1   1   1   0   0   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   0   1   1 \n11 |  1   1   0   0   1   1   1   1   1   1   0   0   1   1   1   0   0 \n12 |  1   1   1   1   1   1   0   1   1   1   0   0   1   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   0 \n14 |  1   1   1   1   1   1   0   0   1   1   1   1   1   0   0   1   1 \n15 |  1   1   0   1   0   1   0   0   0   0   1   1   1   0   0   0   1 \n16 |  1   1   1   1   0   1   0   0   0   1   0   1   1   1   0   0   1 \n17 |  1   1   1   1   1   0   1   1   1   1   0   1   0   1   1   1   0 \n",
    "graph_output": "17 103\n1 15\n15 2\n1 12\n2 11\n12 13\n2 7\n1 16\n11 10\n12 14\n2 5\n7 9\n11 8\n7 17\n5 6\n17 4\n7 3\n13 1\n13 15\n6 16\n6 13\n14 2\n17 14\n10 17\n17 16\n8 9\n12 10\n17 12\n12 15\n1 7\n1 5\n13 9\n17 2\n1 10\n15 4\n9 10\n6 3\n4 3\n11 13\n13 2\n4 13\n11 7\n6 11\n7 6\n1 4\n4 16\n1 14\n16 10\n16 2\n17 8\n10 2\n7 13\n8 7\n4 12\n5 4\n8 10\n3 17\n12 2\n15 17\n13 16\n3 13\n1 2\n5 17\n14 3\n5 11\n2 6\n9 5\n3 1\n5 7\n12 9\n3 9\n1 11\n16 3\n10 4\n8 13\n6 8\n5 3\n12 3\n5 14\n6 14\n12 6\n5 13\n15 6\n14 9\n5 10\n13 14\n17 9\n10 13\n8 2\n6 10\n16 14\n7 10\n14 10\n12 5\n16 12\n8 1\n2 4\n11 15\n12 8\n14 4\n3 10\n14 11\n1 17\n11 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 1 (source) to vertex 11 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 40 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 10 with a weight of 83 and a capacity of 9.\nThere is an edge between vertex 1 and vertex 2 with a weight of 49 and a capacity of 6.\nThere is an edge between vertex 2 and vertex 7 with a weight of 26 and a capacity of 9.\nThere is an edge between vertex 7 and vertex 9 with a weight of 15 and a capacity of 10.\nThere is an edge between vertex 2 and vertex 6 with a weight of 5 and a capacity of 2.\nThere is an edge between vertex 10 and vertex 8 with a weight of 22 and a capacity of 2.\nThere is an edge between vertex 1 and vertex 11 with a weight of 52 and a capacity of 6.\nThere is an edge between vertex 6 and vertex 3 with a weight of 29 and a capacity of 2.\nThere is an edge between vertex 7 and vertex 5 with a weight of 61 and a capacity of 4.\nThere is an edge between vertex 11 and vertex 4 with a weight of 33 and a capacity of 4.\nThere is an edge between vertex 2 and vertex 11 with a weight of 6 and a capacity of 6.\nThere is an edge between vertex 8 and vertex 6 with a weight of 25 and a capacity of 9.\nThere is an edge between vertex 11 and vertex 9 with a weight of 86 and a capacity of 2.\nThere is an edge between vertex 6 and vertex 10 with a weight of 100 and a capacity of 7.\nThere is an edge between vertex 7 and vertex 10 with a weight of 68 and a capacity of 3.\nThere is an edge between vertex 1 and vertex 8 with a weight of 90 and a capacity of 2.\nThere is an edge between vertex 3 and vertex 10 with a weight of 32 and a capacity of 3.\nThere is an edge between vertex 3 and vertex 4 with a weight of 7 and a capacity of 1.\nThere is an edge between vertex 2 and vertex 8 with a weight of 72 and a capacity of 7.\nThere is an edge between vertex 6 and vertex 1 with a weight of 49 and a capacity of 2.\nThere is an edge between vertex 8 and vertex 11 with a weight of 33 and a capacity of 10.\nThere is an edge between vertex 5 and vertex 4 with a weight of 82 and a capacity of 1.\nThere is an edge between vertex 9 and vertex 10 with a weight of 45 and a capacity of 8.\nThere is an edge between vertex 6 and vertex 4 with a weight of 75 and a capacity of 1.\nThere is an edge between vertex 1 and vertex 7 with a weight of 28 and a capacity of 6.\nThere is an edge between vertex 9 and vertex 2 with a weight of 68 and a capacity of 2.\nThere is an edge between vertex 5 and vertex 9 with a weight of 71 and a capacity of 10.\nThere is an edge between vertex 3 and vertex 1 with a weight of 85 and a capacity of 2.\nThere is an edge between vertex 9 and vertex 6 with a weight of 34 and a capacity of 9.\nThere is an edge between vertex 5 and vertex 2 with a weight of 51 and a capacity of 4.\nThere is an edge between vertex 7 and vertex 3 with a weight of 32 and a capacity of 1.\nThere is an edge between vertex 7 and vertex 6 with a weight of 81 and a capacity of 8.\nThere is an edge between vertex 7 and vertex 8 with a weight of 43 and a capacity of 8.\nThere is an edge between vertex 9 and vertex 1 with a weight of 37 and a capacity of 8.\nThere is an edge between vertex 3 and vertex 8 with a weight of 4 and a capacity of 4.\nThere is an edge between vertex 1 and vertex 5 with a weight of 88 and a capacity of 8.\nThere is an edge between vertex 3 and vertex 2 with a weight of 80 and a capacity of 1.\nThere is an edge between vertex 8 and vertex 9 with a weight of 28 and a capacity of 10.\nThere is an edge between vertex 7 and vertex 4 with a weight of 46 and a capacity of 5.\nThere is an edge between vertex 11 and vertex 7 with a weight of 36 and a capacity of 10.\n",
    "graph_output": "11 40\n1 10 83 9\n1 2 49 6\n2 7 26 9\n7 9 15 10\n2 6 5 2\n10 8 22 2\n1 11 52 6\n6 3 29 2\n7 5 61 4\n11 4 33 4\n2 11 6 6\n8 6 25 9\n11 9 86 2\n6 10 100 7\n7 10 68 3\n1 8 90 2\n3 10 32 3\n3 4 7 1\n2 8 72 7\n6 1 49 2\n8 11 33 10\n5 4 82 1\n9 10 45 8\n6 4 75 1\n1 7 28 6\n9 2 68 2\n5 9 71 10\n3 1 85 2\n9 6 34 9\n5 2 51 4\n7 3 32 1\n7 6 81 8\n7 8 43 8\n9 1 37 8\n3 8 4 4\n1 5 88 8\n3 2 80 1\n8 9 28 10\n7 4 46 5\n11 7 36 10\n",
    "vertices": [
      1,
      11
    ],
    "answer": 3528,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 98 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 7, 12, 9, 2, 5, 15, 11, 10, 13, 4, 14, 6\nVertex 2: 1, 13, 4, 9, 15, 5, 10, 12, 3, 8, 6, 7, 11\nVertex 3: 10, 14, 8, 4, 2, 6, 9, 12, 5, 15, 13\nVertex 4: 15, 2, 12, 5, 3, 13, 11, 14, 1, 8, 7, 10, 6\nVertex 5: 9, 1, 8, 4, 2, 7, 12, 13, 14, 6, 15, 3\nVertex 6: 8, 10, 11, 15, 7, 12, 3, 9, 2, 5, 14, 1, 4, 13\nVertex 7: 1, 11, 10, 12, 5, 15, 9, 6, 2, 13, 4, 14, 8\nVertex 8: 1, 15, 6, 5, 13, 9, 14, 11, 3, 12, 2, 4, 10, 7\nVertex 9: 1, 5, 14, 2, 11, 8, 15, 12, 7, 10, 3, 6, 13\nVertex 10: 7, 3, 6, 1, 11, 12, 2, 9, 14, 8, 4, 13, 15\nVertex 11: 7, 13, 9, 1, 8, 6, 14, 15, 10, 12, 4, 2\nVertex 12: 1, 7, 9, 4, 5, 10, 2, 15, 8, 6, 11, 13, 3, 14\nVertex 13: 11, 14, 2, 8, 1, 4, 5, 12, 9, 7, 15, 10, 3, 6\nVertex 14: 13, 9, 3, 8, 11, 15, 10, 5, 4, 6, 1, 7, 12\nVertex 15: 8, 4, 1, 2, 9, 11, 7, 6, 12, 14, 5, 13, 10, 3\n",
    "graph_output": "15 98\n1 8\n8 15\n8 6\n1 7\n1 12\n7 11\n11 13\n7 10\n15 4\n13 14\n1 9\n1 2\n9 5\n10 3\n1 5\n2 13\n1 15\n8 5\n13 8\n10 6\n4 2\n14 9\n2 9\n2 15\n7 12\n3 14\n9 11\n11 1\n8 9\n15 9\n14 8\n11 8\n8 3\n12 9\n4 12\n11 6\n14 11\n10 1\n4 5\n2 5\n1 13\n7 5\n11 15\n5 12\n11 10\n10 12\n7 15\n2 10\n9 7\n6 15\n4 3\n7 6\n12 2\n4 13\n15 12\n8 12\n3 2\n12 6\n10 9\n3 6\n3 9\n8 2\n15 14\n10 14\n5 13\n14 5\n6 9\n6 2\n12 11\n11 4\n4 14\n5 6\n4 1\n6 14\n15 5\n12 13\n1 14\n8 4\n13 9\n7 2\n10 8\n13 7\n12 3\n4 7\n4 10\n13 15\n7 14\n14 12\n10 13\n8 7\n5 3\n10 15\n15 3\n6 1\n11 2\n4 6\n13 3\n13 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 11 vertices and 43 edges\n\nEdges (Format: Node Node):\n3 9\n11 5\n9 11\n8 2\n2 10\n11 6\n7 6\n2 9\n11 3\n5 7\n9 1\n5 9\n10 6\n2 1\n3 7\n7 8\n3 4\n6 4\n4 7\n4 1\n8 4\n8 9\n8 3\n5 10\n4 10\n1 6\n1 3\n6 5\n11 7\n2 5\n10 1\n11 2\n10 11\n8 5\n2 6\n1 11\n8 6\n7 2\n3 10\n4 5\n1 5\n9 6\n1 8\n",
    "graph_output": "11 43\n3 9\n11 5\n9 11\n8 2\n2 10\n11 6\n7 6\n2 9\n11 3\n5 7\n9 1\n5 9\n10 6\n2 1\n3 7\n7 8\n3 4\n6 4\n4 7\n4 1\n8 4\n8 9\n8 3\n5 10\n4 10\n1 6\n1 3\n6 5\n11 7\n2 5\n10 1\n11 2\n10 11\n8 5\n2 6\n1 11\n8 6\n7 2\n3 10\n4 5\n1 5\n9 6\n1 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 18 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 13, 17, 4, 6\nVertex 2: 17, 10, 16\nVertex 3: 11\nVertex 4: 1\nVertex 5: 1, 7, 11\nVertex 6: 1, 7\nVertex 7: 5, 15, 6\nVertex 8: 13\nVertex 9: 17\nVertex 10: 2\nVertex 11: 5, 12, 3, 15\nVertex 12: 11\nVertex 13: 1, 14, 8\nVertex 14: 13\nVertex 15: 7, 11\nVertex 16: 2\nVertex 17: 1, 2, 9\n",
    "graph_output": "17 18\n1 5\n1 13\n5 7\n1 17\n1 4\n5 11\n17 2\n2 10\n17 9\n7 15\n2 16\n13 14\n1 6\n11 12\n13 8\n11 3\n6 7\n15 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 100 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 8 and vertex 15.\n",
    "graph_output": "16 100\n1 14\n1 3\n1 13\n3 8\n14 6\n13 16\n6 5\n8 7\n1 11\n3 12\n16 4\n16 15\n4 2\n8 9\n12 10\n8 1\n9 16\n14 9\n5 16\n10 1\n15 10\n13 11\n12 14\n2 13\n11 15\n5 15\n12 15\n8 2\n10 7\n4 12\n11 2\n6 3\n5 7\n10 11\n8 13\n9 12\n9 11\n4 5\n14 11\n6 8\n1 4\n5 8\n15 1\n3 16\n11 3\n7 12\n6 1\n6 2\n1 2\n12 16\n14 8\n15 6\n3 5\n5 13\n4 10\n7 3\n1 5\n2 14\n4 15\n3 13\n14 4\n12 5\n15 14\n6 7\n9 13\n10 9\n9 7\n9 1\n6 10\n6 4\n10 16\n9 5\n2 7\n2 15\n8 11\n16 14\n2 3\n4 3\n12 1\n4 8\n12 8\n8 10\n5 10\n14 5\n12 11\n9 6\n11 16\n13 12\n10 3\n15 13\n6 11\n13 6\n13 7\n6 16\n15 9\n12 2\n7 1\n11 5\n16 7\n8 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 20, 3, 27, 30\nVertex 2: 14, 18\nVertex 3: 1, 9, 26, 28, 11, 19\nVertex 4: 28\nVertex 5: 9, 24\nVertex 6: 12\nVertex 7: 19\nVertex 8: 15, 10, 21\nVertex 9: 3, 5, 13\nVertex 10: 8\nVertex 11: 3\nVertex 12: 17, 6\nVertex 13: 9\nVertex 14: 22, 2\nVertex 15: 1, 8, 17\nVertex 16: 26\nVertex 17: 15, 12\nVertex 18: 2\nVertex 19: 3, 7\nVertex 20: 1\nVertex 21: 8\nVertex 22: 28, 14, 23\nVertex 23: 22\nVertex 24: 5\nVertex 25: 26\nVertex 26: 3, 25, 16, 29\nVertex 27: 1\nVertex 28: 3, 22, 4\nVertex 29: 26\nVertex 30: 1\n",
    "graph_output": "30 29\n1 15\n15 8\n1 20\n1 3\n3 9\n1 27\n3 26\n3 28\n28 22\n15 17\n3 11\n17 12\n28 4\n1 30\n22 14\n26 25\n8 10\n26 16\n14 2\n8 21\n22 23\n9 5\n26 29\n3 19\n5 24\n2 18\n12 6\n9 13\n19 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 17 vertices and 103 edges\n\nEdges (Format: Node Node):\n5 12\n17 7\n11 10\n11 3\n2 13\n13 8\n2 4\n16 10\n11 6\n6 7\n9 15\n13 14\n7 8\n8 15\n9 1\n13 10\n2 7\n16 13\n4 14\n12 7\n3 13\n17 10\n9 17\n15 4\n15 16\n12 16\n10 4\n3 14\n10 2\n15 14\n6 5\n1 7\n3 9\n3 8\n5 10\n3 17\n13 15\n11 13\n15 10\n12 9\n12 2\n4 17\n1 17\n10 6\n2 8\n6 13\n15 5\n9 8\n5 4\n4 1\n4 11\n3 4\n14 8\n7 9\n16 6\n5 2\n8 11\n14 17\n17 8\n1 2\n4 13\n1 14\n11 9\n11 2\n5 8\n13 5\n14 9\n5 9\n12 11\n14 7\n6 1\n6 2\n16 1\n16 5\n16 14\n14 10\n17 2\n11 15\n2 15\n3 1\n16 17\n15 12\n17 6\n13 9\n10 9\n4 9\n6 8\n7 16\n5 1\n6 9\n5 17\n4 8\n16 8\n2 14\n4 16\n3 5\n16 3\n7 3\n13 1\n15 7\n13 17\n15 3\n12 13\n",
    "graph_output": "17 103\n5 12\n17 7\n11 10\n11 3\n2 13\n13 8\n2 4\n16 10\n11 6\n6 7\n9 15\n13 14\n7 8\n8 15\n9 1\n13 10\n2 7\n16 13\n4 14\n12 7\n3 13\n17 10\n9 17\n15 4\n15 16\n12 16\n10 4\n3 14\n10 2\n15 14\n6 5\n1 7\n3 9\n3 8\n5 10\n3 17\n13 15\n11 13\n15 10\n12 9\n12 2\n4 17\n1 17\n10 6\n2 8\n6 13\n15 5\n9 8\n5 4\n4 1\n4 11\n3 4\n14 8\n7 9\n16 6\n5 2\n8 11\n14 17\n17 8\n1 2\n4 13\n1 14\n11 9\n11 2\n5 8\n13 5\n14 9\n5 9\n12 11\n14 7\n6 1\n6 2\n16 1\n16 5\n16 14\n14 10\n17 2\n11 15\n2 15\n3 1\n16 17\n15 12\n17 6\n13 9\n10 9\n4 9\n6 8\n7 16\n5 1\n6 9\n5 17\n4 8\n16 8\n2 14\n4 16\n3 5\n16 3\n7 3\n13 1\n15 7\n13 17\n15 3\n12 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 100 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   0   1   1   1   1   0   1   1   1   1   1   0   1   1 \n 3 |  1   0   0   1   1   1   1   1   1   0   0   0   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   0   1 \n 5 |  1   1   1   1   0   0   1   1   1   0   1   1   1   1   1   1 \n 6 |  0   1   1   1   0   0   0   0   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   0   0   0   1   1   1   1   1   1   1   1 \n 8 |  1   0   1   1   1   0   0   0   1   1   1   1   1   0   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   0   0   1   1   1 \n10 |  1   1   0   1   0   1   1   1   1   0   1   1   1   1   1   0 \n11 |  1   1   0   1   1   1   1   1   1   1   0   1   1   1   1   0 \n12 |  1   1   0   1   1   1   1   1   0   1   1   0   1   1   1   0 \n13 |  1   1   1   1   1   1   1   1   0   1   1   1   0   1   1   0 \n14 |  1   0   1   1   1   1   1   0   1   1   1   1   1   0   1   1 \n15 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   0   1 \n16 |  1   1   1   1   1   1   1   1   1   0   0   0   0   1   1   0 \n",
    "graph_output": "16 100\n1 7\n7 10\n1 3\n10 2\n7 12\n3 15\n1 13\n7 5\n5 8\n3 6\n5 11\n8 16\n2 4\n3 14\n4 9\n3 8\n15 12\n16 14\n9 10\n1 10\n16 1\n12 10\n8 4\n5 16\n11 8\n9 11\n3 16\n16 9\n15 14\n2 13\n11 1\n14 4\n2 16\n13 3\n1 2\n11 10\n2 9\n14 7\n16 7\n7 3\n14 12\n4 10\n6 9\n9 1\n4 12\n16 6\n15 8\n15 2\n15 13\n12 2\n14 10\n13 5\n11 12\n9 7\n1 14\n11 4\n7 15\n9 3\n2 7\n13 14\n4 3\n5 4\n5 2\n4 6\n15 11\n8 12\n6 11\n6 14\n11 7\n1 8\n11 13\n9 8\n16 15\n12 1\n14 11\n6 13\n5 14\n5 12\n5 1\n12 6\n13 4\n15 10\n4 1\n6 10\n4 16\n5 9\n7 4\n10 8\n7 13\n15 5\n11 2\n1 15\n15 6\n6 2\n8 13\n15 9\n9 14\n13 12\n3 5\n13 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 18 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 14 and vertex 13.\n",
    "graph_output": "15 18\n1 11\n1 2\n2 4\n11 5\n2 9\n1 7\n5 3\n11 10\n3 15\n2 12\n2 14\n7 8\n2 6\n9 13\n8 10\n4 5\n4 13\n14 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 3 (source) to vertex 5 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 14 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a weight of 2 and a capacity of 3.\nThere is an edge between vertex 3 and vertex 7 with a weight of 89 and a capacity of 6.\nThere is an edge between vertex 1 and vertex 2 with a weight of 98 and a capacity of 7.\nThere is an edge between vertex 1 and vertex 4 with a weight of 38 and a capacity of 4.\nThere is an edge between vertex 4 and vertex 9 with a weight of 97 and a capacity of 8.\nThere is an edge between vertex 2 and vertex 8 with a weight of 24 and a capacity of 7.\nThere is an edge between vertex 8 and vertex 10 with a weight of 89 and a capacity of 8.\nThere is an edge between vertex 1 and vertex 5 with a weight of 21 and a capacity of 1.\nThere is an edge between vertex 1 and vertex 6 with a weight of 96 and a capacity of 10.\nThere is an edge between vertex 10 and vertex 7 with a weight of 56 and a capacity of 10.\nThere is an edge between vertex 9 and vertex 10 with a weight of 43 and a capacity of 1.\nThere is an edge between vertex 2 and vertex 5 with a weight of 22 and a capacity of 9.\nThere is an edge between vertex 6 and vertex 3 with a weight of 17 and a capacity of 2.\nThere is an edge between vertex 6 and vertex 2 with a weight of 49 and a capacity of 6.\n",
    "graph_output": "10 14\n1 3 2 3\n3 7 89 6\n1 2 98 7\n1 4 38 4\n4 9 97 8\n2 8 24 7\n8 10 89 8\n1 5 21 1\n1 6 96 10\n10 7 56 10\n9 10 43 1\n2 5 22 9\n6 3 17 2\n6 2 49 6\n",
    "vertices": [
      3,
      5
    ],
    "answer": 1843,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 12 vertices and 16 edges\n\nEdges (Format: Node Node):\n9 7\n3 9\n3 1\n4 2\n8 4\n2 11\n10 5\n2 7\n2 8\n4 3\n10 3\n10 2\n6 10\n8 11\n10 12\n4 10\n",
    "graph_output": "12 16\n9 7\n3 9\n3 1\n4 2\n8 4\n2 11\n10 5\n2 7\n2 8\n4 3\n10 3\n10 2\n6 10\n8 11\n10 12\n4 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 5,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 6 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 4 and vertex 2.\n",
    "graph_output": "6 6\n4 3\n5 3\n4 6\n5 1\n3 1\n4 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 31 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 3 and vertex 24.\nThere is an edge between vertex 10 and vertex 21.\nThere is an edge between vertex 21 and vertex 20.\nThere is an edge between vertex 20 and vertex 5.\nThere is an edge between vertex 20 and vertex 17.\nThere is an edge between vertex 24 and vertex 6.\nThere is an edge between vertex 10 and vertex 28.\nThere is an edge between vertex 28 and vertex 13.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 10 and vertex 19.\nThere is an edge between vertex 5 and vertex 29.\nThere is an edge between vertex 19 and vertex 18.\nThere is an edge between vertex 29 and vertex 25.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 24 and vertex 12.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 21 and vertex 22.\nThere is an edge between vertex 21 and vertex 15.\nThere is an edge between vertex 29 and vertex 26.\nThere is an edge between vertex 2 and vertex 30.\nThere is an edge between vertex 26 and vertex 31.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 18 and vertex 23.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 3 and vertex 27.\n",
    "graph_output": "31 30\n1 10\n1 2\n2 3\n3 24\n10 21\n21 20\n20 5\n20 17\n24 6\n10 28\n28 13\n6 8\n10 7\n10 19\n5 29\n19 18\n29 25\n3 4\n24 12\n1 16\n21 22\n21 15\n29 26\n2 30\n26 31\n3 11\n8 9\n18 23\n2 14\n3 27\n",
    "vertices": [
      null,
      null
    ],
    "answer": 19,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nUndirected Graph with 31 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 20\n1 8\n1 23\n20 3\n1 27\n27 5\n23 10\n27 26\n3 25\n26 15\n8 4\n5 7\n3 21\n15 28\n20 17\n7 16\n16 9\n10 22\n17 19\n4 30\n22 11\n22 12\n1 6\n28 2\n15 31\n9 29\n15 18\n28 24\n29 14\n2 13\n",
    "graph_output": "31 30\n1 20\n1 8\n1 23\n20 3\n1 27\n27 5\n23 10\n27 26\n3 25\n26 15\n8 4\n5 7\n3 21\n15 28\n20 17\n7 16\n16 9\n10 22\n17 19\n4 30\n22 11\n22 12\n1 6\n28 2\n15 31\n9 29\n15 18\n28 24\n29 14\n2 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 11,
    "description_type": "structured"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 55 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 2, 4, 10, 11, 12, 8, 9, 7, 3\nVertex 2: 1, 6, 8, 5, 11, 9, 3, 12\nVertex 3: 9, 8, 7, 6, 11, 4, 1, 2, 5, 12\nVertex 4: 1, 11, 12, 5, 9, 3, 8, 7, 10\nVertex 5: 8, 10, 7, 4, 9, 12, 2, 11, 3\nVertex 6: 1, 8, 2, 3, 10, 9\nVertex 7: 11, 5, 9, 1, 3, 4, 10, 12\nVertex 8: 12, 6, 5, 3, 1, 10, 11, 2, 4, 9\nVertex 9: 3, 7, 5, 4, 11, 10, 1, 2, 6, 12, 8\nVertex 10: 11, 12, 5, 1, 9, 8, 6, 7, 4\nVertex 11: 10, 7, 4, 1, 9, 8, 5, 3, 2, 12\nVertex 12: 8, 10, 4, 1, 5, 2, 11, 7, 9, 3\n",
    "graph_output": "12 55\n11 10\n6 1\n9 3\n8 12\n6 8\n2 1\n6 2\n12 10\n5 8\n7 11\n1 4\n5 10\n4 11\n12 4\n7 5\n1 10\n1 11\n1 12\n4 5\n7 9\n3 8\n5 9\n5 12\n4 9\n1 8\n11 9\n10 9\n9 1\n8 10\n11 8\n7 1\n3 7\n6 3\n8 2\n2 5\n5 11\n3 11\n10 6\n11 2\n4 3\n4 8\n1 3\n9 2\n4 7\n2 3\n3 5\n12 2\n10 7\n11 12\n6 9\n12 7\n9 12\n12 3\n8 9\n4 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 8 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (6\u00d76):\n\n      1   2   3   4   5   6\n   ------------------------\n 1 |  0   1   1   0   1   1 \n 2 |  1   0   0   1   0   0 \n 3 |  1   0   0   0   1   1 \n 4 |  0   1   0   0   1   0 \n 5 |  1   0   1   1   0   0 \n 6 |  1   0   1   0   0   0 \n",
    "graph_output": "6 8\n2 4\n5 3\n1 5\n6 1\n5 4\n1 3\n3 6\n2 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 29 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 12 and vertex 26.\nThere is an edge between vertex 26 and vertex 20.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 1 and vertex 23.\nThere is an edge between vertex 5 and vertex 24.\nThere is an edge between vertex 8 and vertex 28.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 23 and vertex 22.\nThere is an edge between vertex 26 and vertex 17.\nThere is an edge between vertex 11 and vertex 21.\nThere is an edge between vertex 9 and vertex 19.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 28 and vertex 27.\nThere is an edge between vertex 28 and vertex 7.\nThere is an edge between vertex 13 and vertex 18.\nThere is an edge between vertex 3 and vertex 29.\nThere is an edge between vertex 16 and vertex 25.\n",
    "graph_output": "29 28\n1 8\n1 3\n3 2\n2 14\n8 12\n12 5\n12 26\n26 20\n14 11\n2 9\n1 23\n5 24\n8 28\n8 13\n23 22\n26 17\n11 21\n9 19\n13 10\n5 6\n12 4\n14 15\n10 16\n28 27\n28 7\n13 18\n3 29\n16 25\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 2 and vertex 1 are connected.\n\nUndirected Graph with 15 vertices and 86 edges\n\nEdges (Format: Node Node):\n5 11\n1 3\n13 15\n4 14\n11 15\n10 2\n15 6\n13 3\n1 2\n4 10\n9 5\n7 11\n14 5\n8 6\n15 14\n6 14\n12 9\n14 3\n10 7\n4 3\n14 10\n9 8\n1 4\n9 11\n1 10\n15 9\n1 13\n1 14\n14 7\n7 6\n8 4\n3 6\n5 13\n8 11\n9 2\n9 7\n7 2\n8 7\n12 11\n6 4\n7 1\n10 8\n5 1\n7 15\n2 12\n13 6\n10 11\n9 10\n8 13\n13 11\n13 9\n1 9\n10 3\n3 7\n10 13\n2 15\n4 9\n11 3\n4 13\n5 10\n6 11\n9 3\n12 15\n7 13\n3 2\n2 11\n3 12\n10 15\n8 12\n12 10\n4 5\n15 5\n7 12\n11 1\n12 1\n12 13\n6 1\n15 3\n14 13\n6 12\n2 13\n6 2\n8 3\n15 4\n8 1\n5 2\n",
    "graph_output": "15 86\n5 11\n1 3\n13 15\n4 14\n11 15\n10 2\n15 6\n13 3\n1 2\n4 10\n9 5\n7 11\n14 5\n8 6\n15 14\n6 14\n12 9\n14 3\n10 7\n4 3\n14 10\n9 8\n1 4\n9 11\n1 10\n15 9\n1 13\n1 14\n14 7\n7 6\n8 4\n3 6\n5 13\n8 11\n9 2\n9 7\n7 2\n8 7\n12 11\n6 4\n7 1\n10 8\n5 1\n7 15\n2 12\n13 6\n10 11\n9 10\n8 13\n13 11\n13 9\n1 9\n10 3\n3 7\n10 13\n2 15\n4 9\n11 3\n4 13\n5 10\n6 11\n9 3\n12 15\n7 13\n3 2\n2 11\n3 12\n10 15\n8 12\n12 10\n4 5\n15 5\n7 12\n11 1\n12 1\n12 13\n6 1\n15 3\n14 13\n6 12\n2 13\n6 2\n8 3\n15 4\n8 1\n5 2\n",
    "vertices": [
      2,
      1
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 11 and 7 in the given tree, with node 1 as the root.\n\nUndirected Graph with 29 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 8\n8 21\n1 2\n21 4\n2 15\n8 6\n21 10\n2 29\n2 17\n4 22\n15 24\n4 20\n4 27\n15 3\n3 25\n21 5\n10 9\n25 18\n18 16\n6 14\n14 12\n15 28\n6 23\n12 19\n1 7\n20 11\n22 13\n11 26\n",
    "graph_output": "29 28\n1 8\n8 21\n1 2\n21 4\n2 15\n8 6\n21 10\n2 29\n2 17\n4 22\n15 24\n4 20\n4 27\n15 3\n3 25\n21 5\n10 9\n25 18\n18 16\n6 14\n14 12\n15 28\n6 23\n12 19\n1 7\n20 11\n22 13\n11 26\n",
    "vertices": [
      11,
      7
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 13 vertices and 17 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7 with a weight of 16.\nThere is an edge between vertex 1 and vertex 12 with a weight of 95.\nThere is an edge between vertex 7 and vertex 11 with a weight of 63.\nThere is an edge between vertex 12 and vertex 3 with a weight of 20.\nThere is an edge between vertex 3 and vertex 10 with a weight of 44.\nThere is an edge between vertex 12 and vertex 4 with a weight of 61.\nThere is an edge between vertex 12 and vertex 8 with a weight of 42.\nThere is an edge between vertex 12 and vertex 2 with a weight of 58.\nThere is an edge between vertex 4 and vertex 9 with a weight of 51.\nThere is an edge between vertex 11 and vertex 5 with a weight of 69.\nThere is an edge between vertex 11 and vertex 13 with a weight of 88.\nThere is an edge between vertex 12 and vertex 6 with a weight of 64.\nThere is an edge between vertex 1 and vertex 4 with a weight of 75.\nThere is an edge between vertex 13 and vertex 5 with a weight of 27.\nThere is an edge between vertex 10 and vertex 5 with a weight of 68.\nThere is an edge between vertex 3 and vertex 11 with a weight of 10.\nThere is an edge between vertex 7 and vertex 9 with a weight of 53.\n",
    "graph_output": "13 17\n1 7 16\n1 12 95\n7 11 63\n12 3 20\n3 10 44\n12 4 61\n12 8 42\n12 2 58\n4 9 51\n11 5 69\n11 13 88\n12 6 64\n1 4 75\n13 5 27\n10 5 68\n3 11 10\n7 9 53\n",
    "vertices": [
      null,
      null
    ],
    "answer": 515,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 5 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 20 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 2 (weight=62, capacity=6), 3 (weight=11, capacity=7), 5 (weight=32, capacity=10)\nVertex 2: 1 (weight=62, capacity=6), 7 (weight=32, capacity=5), 6 (weight=93, capacity=10), 5 (weight=57, capacity=9), 3 (weight=85, capacity=1)\nVertex 3: 7 (weight=56, capacity=2), 5 (weight=27, capacity=2), 1 (weight=11, capacity=7), 4 (weight=36, capacity=4), 6 (weight=96, capacity=7), 2 (weight=85, capacity=1)\nVertex 4: 7 (weight=28, capacity=5), 3 (weight=36, capacity=4), 6 (weight=20, capacity=3), 5 (weight=7, capacity=9), 9 (weight=11, capacity=8)\nVertex 5: 2 (weight=57, capacity=9), 9 (weight=97, capacity=10), 3 (weight=27, capacity=2), 4 (weight=7, capacity=9), 7 (weight=73, capacity=6), 1 (weight=32, capacity=10)\nVertex 6: 2 (weight=93, capacity=10), 8 (weight=32, capacity=9), 4 (weight=20, capacity=3), 3 (weight=96, capacity=7)\nVertex 7: 2 (weight=32, capacity=5), 4 (weight=28, capacity=5), 3 (weight=56, capacity=2), 8 (weight=50, capacity=7), 5 (weight=73, capacity=6)\nVertex 8: 6 (weight=32, capacity=9), 7 (weight=50, capacity=7), 9 (weight=24, capacity=4)\nVertex 9: 5 (weight=97, capacity=10), 8 (weight=24, capacity=4), 4 (weight=11, capacity=8)\n",
    "graph_output": "9 20\n1 2 62 6\n2 7 32 5\n2 6 93 10\n7 4 28 5\n6 8 32 9\n2 5 57 9\n5 9 97 10\n7 3 56 2\n5 3 27 2\n3 1 11 7\n7 8 50 7\n4 3 36 4\n6 4 20 3\n6 3 96 7\n3 2 85 1\n9 8 24 4\n5 4 7 9\n5 7 73 6\n4 9 11 8\n5 1 32 10\n",
    "vertices": [
      4,
      5
    ],
    "answer": 2193,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 11 and vertex 9 are connected.\n\nThis is an undirected graph with 15 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 14 and vertex 4.\n",
    "graph_output": "15 30\n1 13\n2 5\n12 14\n6 11\n14 2\n15 5\n8 13\n14 11\n2 4\n11 8\n5 8\n13 14\n8 2\n14 8\n13 3\n5 4\n13 10\n5 14\n1 11\n10 5\n6 10\n15 2\n9 1\n8 9\n3 14\n10 12\n11 15\n9 12\n2 1\n14 4\n",
    "vertices": [
      11,
      9
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 24 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 6 and vertex 13.\n",
    "graph_output": "15 24\n5 1\n3 9\n9 5\n9 1\n15 4\n1 13\n9 13\n12 8\n2 10\n6 5\n2 1\n6 8\n10 3\n4 3\n13 2\n6 4\n11 14\n13 10\n4 10\n7 5\n2 7\n15 14\n6 7\n6 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 8 and vertex 2 are connected.\n\nUndirected Graph with 17 vertices and 105 edges\n\nEdges (Format: Node Node):\n8 10\n12 1\n9 10\n1 13\n5 4\n7 11\n6 3\n12 2\n14 6\n17 13\n15 3\n1 7\n2 10\n17 7\n16 9\n1 16\n4 3\n15 8\n9 14\n14 13\n1 10\n16 8\n15 6\n6 13\n14 5\n1 9\n14 15\n4 2\n14 12\n6 12\n10 14\n11 16\n16 13\n15 2\n5 2\n5 15\n5 8\n4 13\n5 10\n16 3\n11 17\n13 12\n17 8\n12 7\n8 4\n7 4\n7 16\n6 8\n3 14\n17 14\n13 11\n2 8\n12 8\n17 6\n4 17\n12 10\n8 14\n11 4\n17 15\n7 9\n12 15\n3 17\n8 3\n9 2\n6 1\n10 11\n6 10\n16 2\n8 7\n17 5\n17 2\n14 2\n7 6\n15 13\n10 16\n5 12\n15 4\n4 14\n14 7\n10 7\n15 7\n12 11\n6 2\n17 10\n12 16\n5 1\n6 9\n3 9\n16 14\n1 15\n10 15\n1 17\n6 4\n16 4\n8 9\n14 1\n1 11\n11 14\n11 6\n4 10\n12 3\n17 16\n3 1\n17 12\n3 10\n",
    "graph_output": "17 105\n8 10\n12 1\n9 10\n1 13\n5 4\n7 11\n6 3\n12 2\n14 6\n17 13\n15 3\n1 7\n2 10\n17 7\n16 9\n1 16\n4 3\n15 8\n9 14\n14 13\n1 10\n16 8\n15 6\n6 13\n14 5\n1 9\n14 15\n4 2\n14 12\n6 12\n10 14\n11 16\n16 13\n15 2\n5 2\n5 15\n5 8\n4 13\n5 10\n16 3\n11 17\n13 12\n17 8\n12 7\n8 4\n7 4\n7 16\n6 8\n3 14\n17 14\n13 11\n2 8\n12 8\n17 6\n4 17\n12 10\n8 14\n11 4\n17 15\n7 9\n12 15\n3 17\n8 3\n9 2\n6 1\n10 11\n6 10\n16 2\n8 7\n17 5\n17 2\n14 2\n7 6\n15 13\n10 16\n5 12\n15 4\n4 14\n14 7\n10 7\n15 7\n12 11\n6 2\n17 10\n12 16\n5 1\n6 9\n3 9\n16 14\n1 15\n10 15\n1 17\n6 4\n16 4\n8 9\n14 1\n1 11\n11 14\n11 6\n4 10\n12 3\n17 16\n3 1\n17 12\n3 10\n",
    "vertices": [
      8,
      2
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 2 and vertex 1 are connected.\n\nThis is an undirected graph with 15 vertices and 86 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 5 and vertex 2.\n",
    "graph_output": "15 86\n5 11\n1 3\n13 15\n4 14\n11 15\n10 2\n15 6\n13 3\n1 2\n4 10\n9 5\n7 11\n14 5\n8 6\n15 14\n6 14\n12 9\n14 3\n10 7\n4 3\n14 10\n9 8\n1 4\n9 11\n1 10\n15 9\n1 13\n1 14\n14 7\n7 6\n8 4\n3 6\n5 13\n8 11\n9 2\n9 7\n7 2\n8 7\n12 11\n6 4\n7 1\n10 8\n5 1\n7 15\n2 12\n13 6\n10 11\n9 10\n8 13\n13 11\n13 9\n1 9\n10 3\n3 7\n10 13\n2 15\n4 9\n11 3\n4 13\n5 10\n6 11\n9 3\n12 15\n7 13\n3 2\n2 11\n3 12\n10 15\n8 12\n12 10\n4 5\n15 5\n7 12\n11 1\n12 1\n12 13\n6 1\n15 3\n14 13\n6 12\n2 13\n6 2\n8 3\n15 4\n8 1\n5 2\n",
    "vertices": [
      2,
      1
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 126 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   0   1   1   0   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   0   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  0   1   1   1   1   0   1   1   1   1   0   1   1   1   1   1   1 \n 7 |  1   0   1   1   1   1   0   1   0   1   1   1   1   1   0   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 9 |  0   1   1   1   1   1   0   1   0   1   0   1   1   0   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   0   1   1   1   1   1   1 \n11 |  1   1   1   1   1   0   1   1   0   0   0   1   1   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n14 |  1   1   1   1   1   1   1   1   0   1   1   1   1   0   1   1   1 \n15 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   0   1   1 \n16 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1   0   1 \n17 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "17 126\n6 9\n4 13\n12 11\n6 16\n11 7\n12 3\n8 16\n4 15\n6 10\n8 6\n16 14\n6 7\n8 11\n11 5\n7 8\n13 17\n7 3\n9 10\n8 13\n1 4\n3 10\n11 13\n15 6\n1 17\n14 7\n5 4\n14 10\n9 15\n17 4\n14 15\n12 5\n9 4\n14 11\n8 2\n1 11\n6 2\n3 8\n6 13\n2 16\n16 1\n5 10\n17 5\n9 12\n3 5\n17 12\n2 11\n10 7\n8 10\n7 17\n10 16\n8 17\n17 15\n17 14\n1 2\n16 11\n12 16\n13 10\n2 17\n3 4\n15 10\n17 9\n1 13\n16 13\n15 5\n5 14\n4 11\n15 1\n17 16\n2 3\n4 12\n13 5\n8 12\n10 2\n12 15\n1 12\n9 13\n13 7\n11 17\n4 8\n14 3\n16 15\n14 2\n3 6\n8 9\n1 5\n8 5\n7 16\n5 2\n12 6\n15 11\n4 2\n13 3\n3 9\n9 2\n10 12\n3 11\n13 2\n1 3\n7 5\n2 15\n12 7\n14 8\n6 5\n14 12\n6 14\n15 13\n10 1\n1 8\n7 4\n3 15\n10 4\n14 4\n8 15\n6 4\n10 17\n7 1\n2 12\n6 17\n1 14\n16 3\n13 14\n13 12\n16 9\n9 5\n5 16\n3 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 32 edges\n\nEdges (Format: Node Node Weight):\n1 16 97\n1 13 4\n13 2 18\n2 6 31\n2 3 20\n16 11 62\n6 4 38\n2 15 48\n11 5 30\n16 14 18\n3 10 61\n5 8 44\n5 7 85\n4 9 28\n13 12 4\n1 7 29\n2 4 88\n5 6 65\n2 16 78\n16 10 23\n14 12 25\n8 2 99\n9 6 34\n7 2 57\n8 15 38\n13 10 51\n9 3 43\n14 4 75\n5 16 82\n10 11 75\n14 7 33\n7 3 94\n",
    "graph_output": "16 32\n1 16 97\n1 13 4\n13 2 18\n2 6 31\n2 3 20\n16 11 62\n6 4 38\n2 15 48\n11 5 30\n16 14 18\n3 10 61\n5 8 44\n5 7 85\n4 9 28\n13 12 4\n1 7 29\n2 4 88\n5 6 65\n2 16 78\n16 10 23\n14 12 25\n8 2 99\n9 6 34\n7 2 57\n8 15 38\n13 10 51\n9 3 43\n14 4 75\n5 16 82\n10 11 75\n14 7 33\n7 3 94\n",
    "vertices": [
      null,
      null
    ],
    "answer": 394,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 14 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 6 and vertex 10.\n",
    "graph_output": "12 14\n1 8\n7 4\n9 8\n12 1\n11 8\n2 9\n10 4\n12 3\n3 11\n1 11\n5 11\n1 2\n11 9\n6 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 3 (source) to vertex 8 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 52 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   1   1   1   1   1   0   1   1   1   0 \n 2 |  1   0   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1 \n 7 |  0   1   1   1   1   1   0   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   0 \n 9 |  1   1   1   1   1   1   1   1   0   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1 \n11 |  0   1   1   1   1   1   1   0   1   1   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   5   3   7   1   2   0   2   8   3   0 \n 2 |  5   0   4   7   6   2   1   9   7   5  10 \n 3 |  3   4   0   7   8   7   5  10   1   4   3 \n 4 |  7   7   7   0   6   1   3   6   9   8   9 \n 5 |  1   6   8   6   0  10   9   2   3   9   2 \n 6 |  2   2   7   1  10   0   7   2  10   1   1 \n 7 |  0   1   5   3   9   7   0   4   5   5   7 \n 8 |  2   9  10   6   2   2   4   0   4   4   0 \n 9 |  8   7   1   9   3  10   5   4   0   5   2 \n10 |  3   5   4   8   9   1   5   4   5   0   9 \n11 |  0  10   3   9   2   1   7   0   2   9   0 \n",
    "graph_output": "11 52\n1 2 5\n1 6 2\n2 11 10\n6 8 2\n2 3 4\n6 10 1\n3 7 5\n2 4 7\n10 9 5\n2 5 6\n3 9 1\n11 6 1\n9 11 2\n6 2 2\n1 8 2\n4 1 7\n8 10 4\n5 11 2\n9 1 8\n6 5 10\n9 6 10\n5 10 9\n7 2 1\n8 4 6\n4 9 9\n10 1 3\n10 2 5\n7 5 9\n8 5 2\n11 3 3\n11 7 7\n4 5 6\n7 6 7\n3 5 8\n1 3 3\n6 4 1\n8 7 4\n4 10 8\n4 7 3\n11 4 9\n4 3 7\n10 3 4\n9 2 7\n8 9 4\n1 5 1\n8 2 9\n10 11 9\n9 5 3\n10 7 5\n6 3 7\n7 9 5\n3 8 10\n",
    "vertices": [
      3,
      8
    ],
    "answer": 43,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 66 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 7, 4, 13, 11, 9, 5, 10, 12, 8, 3, 2\nVertex 2: 12, 4, 9, 11, 5, 10, 8, 3, 1, 6\nVertex 3: 12, 8, 11, 10, 6, 4, 13, 5, 2, 1\nVertex 4: 10, 1, 2, 7, 8, 6, 3, 9, 5, 12, 11\nVertex 5: 13, 7, 8, 1, 12, 4, 2, 3, 10, 11\nVertex 6: 1, 8, 10, 7, 11, 4, 3, 9, 12, 13, 2\nVertex 7: 1, 4, 11, 6, 12, 5, 8, 13, 10, 9\nVertex 8: 3, 6, 4, 7, 5, 12, 13, 2, 11, 1\nVertex 9: 11, 2, 12, 1, 7, 6, 4, 10\nVertex 10: 4, 12, 6, 3, 7, 13, 1, 9, 2, 5\nVertex 11: 9, 3, 1, 7, 2, 6, 13, 4, 12, 8, 5\nVertex 12: 3, 10, 2, 9, 7, 5, 8, 6, 1, 4, 11\nVertex 13: 1, 5, 11, 7, 10, 8, 6, 3\n",
    "graph_output": "13 66\n4 10\n9 11\n6 1\n1 7\n12 3\n8 3\n3 11\n12 10\n6 8\n4 1\n2 12\n1 13\n4 2\n6 10\n7 4\n2 9\n12 9\n1 11\n7 11\n6 7\n7 12\n10 3\n11 2\n6 11\n4 8\n5 13\n5 7\n13 11\n8 7\n13 7\n9 1\n5 8\n6 4\n1 5\n7 10\n7 9\n6 3\n9 6\n10 13\n1 10\n4 3\n5 12\n9 4\n8 12\n9 10\n12 6\n4 5\n1 12\n13 8\n4 12\n4 11\n6 13\n2 5\n10 2\n3 13\n12 11\n3 5\n8 2\n8 11\n3 2\n1 8\n3 1\n10 5\n2 1\n5 11\n6 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 26 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 12, 15, 2, 11, 8\nVertex 2: 4, 11, 1, 13, 3\nVertex 3: 12, 15, 5, 2, 10, 8\nVertex 4: 8, 2\nVertex 5: 14, 3, 10\nVertex 6: 9, 14\nVertex 7: No connections\nVertex 8: 4, 12, 1, 3\nVertex 9: 6\nVertex 10: 14, 3, 13, 11, 5\nVertex 11: 14, 13, 2, 1, 10\nVertex 12: 14, 1, 3, 8\nVertex 13: 11, 2, 10\nVertex 14: 11, 10, 12, 5, 6\nVertex 15: 1, 3\n",
    "graph_output": "15 26\n14 11\n14 10\n14 12\n13 11\n12 1\n8 4\n3 12\n15 1\n14 5\n15 3\n4 2\n2 11\n1 2\n2 13\n5 3\n2 3\n3 10\n6 9\n8 12\n13 10\n11 1\n1 8\n10 11\n6 14\n3 8\n10 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 14 to vertex 1 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 94 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0  45  23  88  88  19  19  53  99  66  51  47   0  56  96 \n 2 | 45   0  87  56  39  52  28  23  33  71  51   6  58  10  91 \n 3 | 23  87   0   3  66   0  51  63  81   2   4  14   8  90   0 \n 4 | 88  56   3   0  87  85  70  72  94  69  51  58  32   0  44 \n 5 | 88  39  66  87   0   0  82  80  23  38  82  78  12   0  42 \n 6 | 19  52   0  85   0   0  90  89  22   9  70  81  77  22  77 \n 7 | 19  28  51  70  82  90   0  88  54  69  99   5  11   0   6 \n 8 | 53  23  63  72  80  89  88   0  29  31   5  68   0  88  10 \n 9 | 99  33  81  94  23  22  54  29   0  90  46   0  39   0  75 \n10 | 66  71   2  69  38   9  69  31  90   0  86  80  18  15  78 \n11 | 51  51   4  51  82  70  99   5  46  86   0  76  43  64  76 \n12 | 47   6  14  58  78  81   5  68   0  80  76   0  28  21   9 \n13 |  0  58   8  32  12  77  11   0  39  18  43  28   0   2  70 \n14 | 56  10  90   0   0  22   0  88   0  15  64  21   2   0   0 \n15 | 96  91   0  44  42  77   6  10  75  78  76   9  70   0   0 \n",
    "graph_output": "15 94\n1 2 45\n2 7 28\n7 13 11\n13 12 28\n2 6 52\n2 15 91\n1 14 56\n1 5 88\n14 10 15\n12 3 14\n7 11 99\n12 8 68\n1 4 88\n3 9 81\n10 6 9\n7 5 82\n12 6 81\n10 2 71\n9 6 22\n13 2 58\n10 8 31\n15 8 10\n6 8 89\n9 5 23\n15 9 75\n4 5 87\n11 1 51\n10 7 69\n7 1 19\n5 10 38\n2 11 51\n7 4 70\n10 15 78\n11 8 5\n1 12 47\n12 4 58\n4 9 94\n1 15 96\n11 13 43\n2 3 87\n4 2 56\n4 8 72\n2 8 23\n4 11 51\n1 8 53\n13 15 70\n7 15 6\n13 4 32\n14 13 2\n11 12 76\n3 4 3\n3 8 63\n10 4 69\n11 10 86\n8 14 88\n3 7 51\n14 6 22\n10 9 90\n14 2 10\n14 3 90\n13 10 18\n5 3 66\n5 13 12\n6 1 19\n13 3 8\n5 12 78\n1 3 23\n10 3 2\n10 1 66\n6 13 77\n15 11 76\n12 10 80\n3 11 4\n8 9 29\n15 4 44\n9 7 54\n9 13 39\n8 7 88\n11 14 64\n6 4 85\n9 2 33\n14 12 21\n9 1 99\n12 15 9\n5 8 80\n5 11 82\n2 5 39\n2 12 6\n9 11 46\n11 6 70\n12 7 5\n15 5 42\n6 7 90\n6 15 77\n",
    "vertices": [
      14,
      1
    ],
    "answer": 32,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 15 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 8 and vertex 10.\n",
    "graph_output": "12 15\n10 7\n11 9\n8 4\n9 5\n7 6\n9 6\n8 9\n5 7\n12 8\n3 10\n4 11\n7 2\n11 3\n10 9\n8 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 16, 7, 23, 21\nVertex 2: 18, 13\nVertex 3: 4\nVertex 4: 23, 17, 27, 12, 26, 3, 24\nVertex 5: 12\nVertex 6: 9\nVertex 7: 1\nVertex 8: 20\nVertex 9: 20, 30, 6\nVertex 10: 12\nVertex 11: 27, 15\nVertex 12: 4, 5, 10\nVertex 13: 2\nVertex 14: 23\nVertex 15: 11\nVertex 16: 1\nVertex 17: 4\nVertex 18: 23, 2\nVertex 19: 20\nVertex 20: 23, 9, 28, 25, 8, 19\nVertex 21: 1\nVertex 22: 27\nVertex 23: 1, 18, 4, 20, 14\nVertex 24: 4\nVertex 25: 20\nVertex 26: 4\nVertex 27: 4, 11, 22\nVertex 28: 20, 29\nVertex 29: 28\nVertex 30: 9\n",
    "graph_output": "30 29\n1 16\n1 7\n1 23\n23 18\n23 4\n4 17\n4 27\n27 11\n23 20\n1 21\n18 2\n4 12\n2 13\n12 5\n20 9\n11 15\n23 14\n4 26\n20 28\n20 25\n9 30\n12 10\n4 3\n20 8\n9 6\n28 29\n20 19\n27 22\n4 24\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 15 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: No connections\nVertex 2: 7\nVertex 3: 10, 11\nVertex 4: 8, 11\nVertex 5: 9, 7\nVertex 6: 7, 9\nVertex 7: 10, 6, 5, 2\nVertex 8: 4, 9, 12, 10\nVertex 9: 11, 5, 6, 8, 10\nVertex 10: 7, 3, 9, 8\nVertex 11: 9, 4, 3\nVertex 12: 8\n",
    "graph_output": "12 15\n10 7\n11 9\n8 4\n9 5\n7 6\n9 6\n8 9\n5 7\n12 8\n3 10\n4 11\n7 2\n11 3\n10 9\n8 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 15 vertices and 18 edges\n\nEdges (Format: Node Node):\n1 2\n10 9\n4 3\n13 11\n5 6\n6 12\n9 14\n7 1\n4 15\n12 5\n1 10\n10 14\n9 8\n9 3\n1 11\n4 9\n6 4\n15 1\n",
    "graph_output": "15 18\n1 2\n10 9\n4 3\n13 11\n5 6\n6 12\n9 14\n7 1\n4 15\n12 5\n1 10\n10 14\n9 8\n9 3\n1 11\n4 9\n6 4\n15 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 32 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 2 and vertex 8.\n",
    "graph_output": "16 32\n1 11\n11 13\n13 2\n1 7\n1 8\n11 16\n7 3\n7 14\n13 6\n3 15\n13 9\n13 5\n11 10\n10 4\n16 12\n5 1\n11 8\n2 5\n3 5\n2 11\n8 15\n2 12\n7 15\n1 10\n5 4\n12 11\n13 4\n14 16\n1 3\n12 1\n15 11\n2 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 11 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 104 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a weight of 41.\nThere is an edge between vertex 3 and vertex 10 with a weight of 20.\nThere is an edge between vertex 3 and vertex 13 with a weight of 91.\nThere is an edge between vertex 1 and vertex 15 with a weight of 89.\nThere is an edge between vertex 1 and vertex 6 with a weight of 96.\nThere is an edge between vertex 6 and vertex 4 with a weight of 92.\nThere is an edge between vertex 10 and vertex 5 with a weight of 73.\nThere is an edge between vertex 10 and vertex 7 with a weight of 22.\nThere is an edge between vertex 4 and vertex 8 with a weight of 54.\nThere is an edge between vertex 4 and vertex 2 with a weight of 42.\nThere is an edge between vertex 10 and vertex 16 with a weight of 1.\nThere is an edge between vertex 5 and vertex 11 with a weight of 98.\nThere is an edge between vertex 3 and vertex 12 with a weight of 79.\nThere is an edge between vertex 13 and vertex 9 with a weight of 28.\nThere is an edge between vertex 15 and vertex 14 with a weight of 51.\nThere is an edge between vertex 1 and vertex 4 with a weight of 38.\nThere is an edge between vertex 11 and vertex 15 with a weight of 16.\nThere is an edge between vertex 3 and vertex 7 with a weight of 14.\nThere is an edge between vertex 2 and vertex 16 with a weight of 22.\nThere is an edge between vertex 12 and vertex 13 with a weight of 56.\nThere is an edge between vertex 11 and vertex 8 with a weight of 78.\nThere is an edge between vertex 11 and vertex 9 with a weight of 8.\nThere is an edge between vertex 9 and vertex 6 with a weight of 73.\nThere is an edge between vertex 5 and vertex 3 with a weight of 62.\nThere is an edge between vertex 14 and vertex 11 with a weight of 44.\nThere is an edge between vertex 2 and vertex 5 with a weight of 44.\nThere is an edge between vertex 15 and vertex 10 with a weight of 86.\nThere is an edge between vertex 7 and vertex 1 with a weight of 91.\nThere is an edge between vertex 10 and vertex 4 with a weight of 37.\nThere is an edge between vertex 12 and vertex 11 with a weight of 20.\nThere is an edge between vertex 9 and vertex 1 with a weight of 92.\nThere is an edge between vertex 11 and vertex 13 with a weight of 18.\nThere is an edge between vertex 3 and vertex 15 with a weight of 56.\nThere is an edge between vertex 5 and vertex 9 with a weight of 24.\nThere is an edge between vertex 14 and vertex 7 with a weight of 37.\nThere is an edge between vertex 12 and vertex 2 with a weight of 2.\nThere is an edge between vertex 1 and vertex 2 with a weight of 51.\nThere is an edge between vertex 14 and vertex 1 with a weight of 62.\nThere is an edge between vertex 2 and vertex 7 with a weight of 78.\nThere is an edge between vertex 6 and vertex 14 with a weight of 99.\nThere is an edge between vertex 11 and vertex 10 with a weight of 92.\nThere is an edge between vertex 1 and vertex 5 with a weight of 27.\nThere is an edge between vertex 2 and vertex 10 with a weight of 87.\nThere is an edge between vertex 6 and vertex 12 with a weight of 48.\nThere is an edge between vertex 13 and vertex 14 with a weight of 34.\nThere is an edge between vertex 7 and vertex 15 with a weight of 41.\nThere is an edge between vertex 3 and vertex 14 with a weight of 91.\nThere is an edge between vertex 7 and vertex 12 with a weight of 29.\nThere is an edge between vertex 11 and vertex 6 with a weight of 48.\nThere is an edge between vertex 2 and vertex 6 with a weight of 67.\nThere is an edge between vertex 3 and vertex 4 with a weight of 8.\nThere is an edge between vertex 7 and vertex 9 with a weight of 48.\nThere is an edge between vertex 9 and vertex 10 with a weight of 5.\nThere is an edge between vertex 1 and vertex 11 with a weight of 33.\nThere is an edge between vertex 11 and vertex 7 with a weight of 21.\nThere is an edge between vertex 9 and vertex 16 with a weight of 86.\nThere is an edge between vertex 15 and vertex 5 with a weight of 73.\nThere is an edge between vertex 7 and vertex 8 with a weight of 47.\nThere is an edge between vertex 8 and vertex 2 with a weight of 91.\nThere is an edge between vertex 5 and vertex 7 with a weight of 36.\nThere is an edge between vertex 15 and vertex 8 with a weight of 25.\nThere is an edge between vertex 14 and vertex 12 with a weight of 90.\nThere is an edge between vertex 16 and vertex 12 with a weight of 26.\nThere is an edge between vertex 1 and vertex 10 with a weight of 62.\nThere is an edge between vertex 9 and vertex 15 with a weight of 73.\nThere is an edge between vertex 11 and vertex 2 with a weight of 68.\nThere is an edge between vertex 12 and vertex 8 with a weight of 79.\nThere is an edge between vertex 4 and vertex 13 with a weight of 75.\nThere is an edge between vertex 7 and vertex 6 with a weight of 98.\nThere is an edge between vertex 9 and vertex 2 with a weight of 5.\nThere is an edge between vertex 8 and vertex 1 with a weight of 61.\nThere is an edge between vertex 15 and vertex 4 with a weight of 76.\nThere is an edge between vertex 16 and vertex 6 with a weight of 48.\nThere is an edge between vertex 6 and vertex 10 with a weight of 62.\nThere is an edge between vertex 9 and vertex 12 with a weight of 58.\nThere is an edge between vertex 13 and vertex 7 with a weight of 37.\nThere is an edge between vertex 12 and vertex 5 with a weight of 28.\nThere is an edge between vertex 14 and vertex 5 with a weight of 32.\nThere is an edge between vertex 13 and vertex 16 with a weight of 20.\nThere is an edge between vertex 15 and vertex 12 with a weight of 13.\nThere is an edge between vertex 10 and vertex 8 with a weight of 39.\nThere is an edge between vertex 14 and vertex 4 with a weight of 21.\nThere is an edge between vertex 9 and vertex 3 with a weight of 17.\nThere is an edge between vertex 16 and vertex 4 with a weight of 45.\nThere is an edge between vertex 13 and vertex 6 with a weight of 50.\nThere is an edge between vertex 4 and vertex 9 with a weight of 62.\nThere is an edge between vertex 16 and vertex 3 with a weight of 10.\nThere is an edge between vertex 11 and vertex 3 with a weight of 51.\nThere is an edge between vertex 5 and vertex 6 with a weight of 57.\nThere is an edge between vertex 13 and vertex 10 with a weight of 24.\nThere is an edge between vertex 12 and vertex 4 with a weight of 26.\nThere is an edge between vertex 12 and vertex 10 with a weight of 16.\nThere is an edge between vertex 13 and vertex 15 with a weight of 23.\nThere is an edge between vertex 14 and vertex 9 with a weight of 3.\nThere is an edge between vertex 8 and vertex 14 with a weight of 56.\nThere is an edge between vertex 5 and vertex 16 with a weight of 11.\nThere is an edge between vertex 8 and vertex 13 with a weight of 84.\nThere is an edge between vertex 4 and vertex 7 with a weight of 2.\nThere is an edge between vertex 2 and vertex 3 with a weight of 57.\nThere is an edge between vertex 14 and vertex 16 with a weight of 38.\nThere is an edge between vertex 11 and vertex 4 with a weight of 75.\nThere is an edge between vertex 15 and vertex 2 with a weight of 44.\nThere is an edge between vertex 11 and vertex 16 with a weight of 66.\nThere is an edge between vertex 8 and vertex 3 with a weight of 61.\n",
    "graph_output": "16 104\n1 3 41\n3 10 20\n3 13 91\n1 15 89\n1 6 96\n6 4 92\n10 5 73\n10 7 22\n4 8 54\n4 2 42\n10 16 1\n5 11 98\n3 12 79\n13 9 28\n15 14 51\n1 4 38\n11 15 16\n3 7 14\n2 16 22\n12 13 56\n11 8 78\n11 9 8\n9 6 73\n5 3 62\n14 11 44\n2 5 44\n15 10 86\n7 1 91\n10 4 37\n12 11 20\n9 1 92\n11 13 18\n3 15 56\n5 9 24\n14 7 37\n12 2 2\n1 2 51\n14 1 62\n2 7 78\n6 14 99\n11 10 92\n1 5 27\n2 10 87\n6 12 48\n13 14 34\n7 15 41\n3 14 91\n7 12 29\n11 6 48\n2 6 67\n3 4 8\n7 9 48\n9 10 5\n1 11 33\n11 7 21\n9 16 86\n15 5 73\n7 8 47\n8 2 91\n5 7 36\n15 8 25\n14 12 90\n16 12 26\n1 10 62\n9 15 73\n11 2 68\n12 8 79\n4 13 75\n7 6 98\n9 2 5\n8 1 61\n15 4 76\n16 6 48\n6 10 62\n9 12 58\n13 7 37\n12 5 28\n14 5 32\n13 16 20\n15 12 13\n10 8 39\n14 4 21\n9 3 17\n16 4 45\n13 6 50\n4 9 62\n16 3 10\n11 3 51\n5 6 57\n13 10 24\n12 4 26\n12 10 16\n13 15 23\n14 9 3\n8 14 56\n5 16 11\n8 13 84\n4 7 2\n2 3 57\n14 16 38\n11 4 75\n15 2 44\n11 16 66\n8 3 61\n",
    "vertices": [
      4,
      11
    ],
    "answer": 23,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 15 vertices and 91 edges\n\nEdges (Format: Node Node):\n1 15\n1 7\n7 12\n7 8\n15 5\n12 11\n15 6\n6 3\n1 2\n8 14\n5 13\n6 4\n7 9\n12 10\n11 6\n9 15\n4 10\n3 4\n10 14\n7 14\n9 10\n10 11\n6 2\n3 1\n8 1\n5 8\n13 1\n4 13\n12 2\n8 15\n9 13\n9 4\n7 13\n4 8\n5 11\n10 7\n9 5\n14 13\n15 13\n8 11\n9 11\n3 7\n6 1\n10 3\n6 12\n11 1\n8 12\n12 9\n9 2\n3 8\n7 11\n10 5\n14 3\n3 12\n13 12\n10 1\n14 4\n5 2\n11 3\n5 6\n1 9\n15 2\n5 3\n6 8\n3 13\n12 4\n13 10\n5 7\n13 11\n9 8\n7 4\n15 4\n6 14\n15 14\n8 13\n6 13\n8 2\n2 3\n1 14\n15 10\n12 1\n11 2\n10 8\n12 15\n7 15\n2 7\n2 13\n15 11\n2 4\n6 7\n6 9\n",
    "graph_output": "15 91\n1 15\n1 7\n7 12\n7 8\n15 5\n12 11\n15 6\n6 3\n1 2\n8 14\n5 13\n6 4\n7 9\n12 10\n11 6\n9 15\n4 10\n3 4\n10 14\n7 14\n9 10\n10 11\n6 2\n3 1\n8 1\n5 8\n13 1\n4 13\n12 2\n8 15\n9 13\n9 4\n7 13\n4 8\n5 11\n10 7\n9 5\n14 13\n15 13\n8 11\n9 11\n3 7\n6 1\n10 3\n6 12\n11 1\n8 12\n12 9\n9 2\n3 8\n7 11\n10 5\n14 3\n3 12\n13 12\n10 1\n14 4\n5 2\n11 3\n5 6\n1 9\n15 2\n5 3\n6 8\n3 13\n12 4\n13 10\n5 7\n13 11\n9 8\n7 4\n15 4\n6 14\n15 14\n8 13\n6 13\n8 2\n2 3\n1 14\n15 10\n12 1\n11 2\n10 8\n12 15\n7 15\n2 7\n2 13\n15 11\n2 4\n6 7\n6 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 13 vertices and 17 edges\n\nEdges (Format: Node Node):\n6 4\n4 13\n3 2\n5 3\n1 8\n13 3\n6 13\n10 1\n3 4\n3 11\n12 7\n13 10\n10 4\n11 2\n6 2\n7 5\n1 11\n",
    "graph_output": "13 17\n6 4\n4 13\n3 2\n5 3\n1 8\n13 3\n6 13\n10 1\n3 4\n3 11\n12 7\n13 10\n10 4\n11 2\n6 2\n7 5\n1 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "structured"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 12 vertices and 61 edges\n\nEdges (Format: Node Node):\n7 1\n3 4\n12 8\n6 4\n8 7\n10 8\n5 12\n11 7\n8 1\n11 12\n1 6\n4 8\n5 10\n2 3\n5 3\n9 6\n12 10\n11 9\n9 3\n4 12\n9 2\n6 8\n6 3\n5 6\n12 3\n4 1\n4 11\n6 10\n6 2\n4 9\n4 2\n7 6\n10 11\n3 1\n5 7\n3 8\n12 9\n1 5\n10 7\n10 4\n9 5\n8 2\n7 9\n5 8\n5 11\n2 12\n1 11\n3 7\n2 11\n3 10\n2 7\n11 3\n10 2\n10 1\n8 11\n12 6\n7 4\n12 1\n8 9\n4 5\n10 9\n",
    "graph_output": "12 61\n7 1\n3 4\n12 8\n6 4\n8 7\n10 8\n5 12\n11 7\n8 1\n11 12\n1 6\n4 8\n5 10\n2 3\n5 3\n9 6\n12 10\n11 9\n9 3\n4 12\n9 2\n6 8\n6 3\n5 6\n12 3\n4 1\n4 11\n6 10\n6 2\n4 9\n4 2\n7 6\n10 11\n3 1\n5 7\n3 8\n12 9\n1 5\n10 7\n10 4\n9 5\n8 2\n7 9\n5 8\n5 11\n2 12\n1 11\n3 7\n2 11\n3 10\n2 7\n11 3\n10 2\n10 1\n8 11\n12 6\n7 4\n12 1\n8 9\n4 5\n10 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 1 (source) to vertex 11 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 40 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 10 (weight=83, capacity=9), 2 (weight=49, capacity=6), 11 (weight=52, capacity=6), 8 (weight=90, capacity=2), 6 (weight=49, capacity=2), 7 (weight=28, capacity=6), 3 (weight=85, capacity=2), 9 (weight=37, capacity=8), 5 (weight=88, capacity=8)\nVertex 2: 1 (weight=49, capacity=6), 7 (weight=26, capacity=9), 6 (weight=5, capacity=2), 11 (weight=6, capacity=6), 8 (weight=72, capacity=7), 9 (weight=68, capacity=2), 5 (weight=51, capacity=4), 3 (weight=80, capacity=1)\nVertex 3: 6 (weight=29, capacity=2), 10 (weight=32, capacity=3), 4 (weight=7, capacity=1), 1 (weight=85, capacity=2), 7 (weight=32, capacity=1), 8 (weight=4, capacity=4), 2 (weight=80, capacity=1)\nVertex 4: 11 (weight=33, capacity=4), 3 (weight=7, capacity=1), 5 (weight=82, capacity=1), 6 (weight=75, capacity=1), 7 (weight=46, capacity=5)\nVertex 5: 7 (weight=61, capacity=4), 4 (weight=82, capacity=1), 9 (weight=71, capacity=10), 2 (weight=51, capacity=4), 1 (weight=88, capacity=8)\nVertex 6: 2 (weight=5, capacity=2), 3 (weight=29, capacity=2), 8 (weight=25, capacity=9), 10 (weight=100, capacity=7), 1 (weight=49, capacity=2), 4 (weight=75, capacity=1), 9 (weight=34, capacity=9), 7 (weight=81, capacity=8)\nVertex 7: 2 (weight=26, capacity=9), 9 (weight=15, capacity=10), 5 (weight=61, capacity=4), 10 (weight=68, capacity=3), 1 (weight=28, capacity=6), 3 (weight=32, capacity=1), 6 (weight=81, capacity=8), 8 (weight=43, capacity=8), 4 (weight=46, capacity=5), 11 (weight=36, capacity=10)\nVertex 8: 10 (weight=22, capacity=2), 6 (weight=25, capacity=9), 1 (weight=90, capacity=2), 2 (weight=72, capacity=7), 11 (weight=33, capacity=10), 7 (weight=43, capacity=8), 3 (weight=4, capacity=4), 9 (weight=28, capacity=10)\nVertex 9: 7 (weight=15, capacity=10), 11 (weight=86, capacity=2), 10 (weight=45, capacity=8), 2 (weight=68, capacity=2), 5 (weight=71, capacity=10), 6 (weight=34, capacity=9), 1 (weight=37, capacity=8), 8 (weight=28, capacity=10)\nVertex 10: 1 (weight=83, capacity=9), 8 (weight=22, capacity=2), 6 (weight=100, capacity=7), 7 (weight=68, capacity=3), 3 (weight=32, capacity=3), 9 (weight=45, capacity=8)\nVertex 11: 1 (weight=52, capacity=6), 4 (weight=33, capacity=4), 2 (weight=6, capacity=6), 9 (weight=86, capacity=2), 8 (weight=33, capacity=10), 7 (weight=36, capacity=10)\n",
    "graph_output": "11 40\n1 10 83 9\n1 2 49 6\n2 7 26 9\n7 9 15 10\n2 6 5 2\n10 8 22 2\n1 11 52 6\n6 3 29 2\n7 5 61 4\n11 4 33 4\n2 11 6 6\n8 6 25 9\n11 9 86 2\n6 10 100 7\n7 10 68 3\n1 8 90 2\n3 10 32 3\n3 4 7 1\n2 8 72 7\n6 1 49 2\n8 11 33 10\n5 4 82 1\n9 10 45 8\n6 4 75 1\n1 7 28 6\n9 2 68 2\n5 9 71 10\n3 1 85 2\n9 6 34 9\n5 2 51 4\n7 3 32 1\n7 6 81 8\n7 8 43 8\n9 1 37 8\n3 8 4 4\n1 5 88 8\n3 2 80 1\n8 9 28 10\n7 4 46 5\n11 7 36 10\n",
    "vertices": [
      1,
      11
    ],
    "answer": 3528,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 21 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 6, 8, 4, 7\nVertex 2: 1, 5, 4, 7, 3\nVertex 3: 7, 6, 2, 5, 4, 8\nVertex 4: 2, 6, 7, 1, 3\nVertex 5: 2, 8, 6, 3\nVertex 6: 1, 4, 8, 3, 5, 7\nVertex 7: 2, 3, 8, 4, 1, 6\nVertex 8: 5, 1, 7, 6, 3\n",
    "graph_output": "8 21\n1 2\n2 5\n5 8\n1 6\n2 4\n2 7\n7 3\n8 1\n4 6\n7 8\n7 4\n8 6\n3 6\n6 5\n3 2\n4 1\n5 3\n4 3\n1 7\n8 3\n6 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 28203,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 26 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 1 and vertex 12.\n",
    "graph_output": "16 26\n7 4\n15 10\n10 13\n2 14\n14 16\n5 16\n16 10\n7 13\n9 10\n1 14\n8 5\n13 11\n3 6\n11 15\n4 3\n12 5\n4 15\n12 3\n3 9\n16 9\n4 6\n2 15\n2 3\n6 9\n14 6\n1 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 1 (source) to vertex 11 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 40 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0  49  85   0  88  49  28  90  37  83  52 \n 2 | 49   0  80   0  51   5  26  72  68   0   6 \n 3 | 85  80   0   7   0  29  32   4   0  32   0 \n 4 |  0   0   7   0  82  75  46   0   0   0  33 \n 5 | 88  51   0  82   0   0  61   0  71   0   0 \n 6 | 49   5  29  75   0   0  81  25  34 100   0 \n 7 | 28  26  32  46  61  81   0  43  15  68  36 \n 8 | 90  72   4   0   0  25  43   0  28  22  33 \n 9 | 37  68   0   0  71  34  15  28   0  45  86 \n10 | 83   0  32   0   0 100  68  22  45   0   0 \n11 | 52   6   0  33   0   0  36  33  86   0   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   6   2   0   8   2   6   2   8   9   6 \n 2 |  6   0   1   0   4   2   9   7   2   0   6 \n 3 |  2   1   0   1   0   2   1   4   0   3   0 \n 4 |  0   0   1   0   1   1   5   0   0   0   4 \n 5 |  8   4   0   1   0   0   4   0  10   0   0 \n 6 |  2   2   2   1   0   0   8   9   9   7   0 \n 7 |  6   9   1   5   4   8   0   8  10   3  10 \n 8 |  2   7   4   0   0   9   8   0  10   2  10 \n 9 |  8   2   0   0  10   9  10  10   0   8   2 \n10 |  9   0   3   0   0   7   3   2   8   0   0 \n11 |  6   6   0   4   0   0  10  10   2   0   0 \n",
    "graph_output": "11 40\n1 10 83 9\n1 2 49 6\n2 7 26 9\n7 9 15 10\n2 6 5 2\n10 8 22 2\n1 11 52 6\n6 3 29 2\n7 5 61 4\n11 4 33 4\n2 11 6 6\n8 6 25 9\n11 9 86 2\n6 10 100 7\n7 10 68 3\n1 8 90 2\n3 10 32 3\n3 4 7 1\n2 8 72 7\n6 1 49 2\n8 11 33 10\n5 4 82 1\n9 10 45 8\n6 4 75 1\n1 7 28 6\n9 2 68 2\n5 9 71 10\n3 1 85 2\n9 6 34 9\n5 2 51 4\n7 3 32 1\n7 6 81 8\n7 8 43 8\n9 1 37 8\n3 8 4 4\n1 5 88 8\n3 2 80 1\n8 9 28 10\n7 4 46 5\n11 7 36 10\n",
    "vertices": [
      1,
      11
    ],
    "answer": 3528,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 11 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 20 edges\n\nEdges (Format: Node Node Capacity):\n1 4 1\n4 8 9\n1 11 1\n11 6 3\n8 3 5\n11 10 10\n10 2 3\n3 7 10\n7 9 2\n9 5 2\n6 2 8\n2 4 9\n6 1 4\n11 3 9\n11 7 10\n7 5 10\n6 10 7\n9 6 9\n4 11 7\n10 3 5\n",
    "graph_output": "11 20\n1 4 1\n4 8 9\n1 11 1\n11 6 3\n8 3 5\n11 10 10\n10 2 3\n3 7 10\n7 9 2\n9 5 2\n6 2 8\n2 4 9\n6 1 4\n11 3 9\n11 7 10\n7 5 10\n6 10 7\n9 6 9\n4 11 7\n10 3 5\n",
    "vertices": [
      11,
      6
    ],
    "answer": 24,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 19, 25, 16\nVertex 2: 7, 4\nVertex 3: 16\nVertex 4: 2\nVertex 5: 27\nVertex 6: 29\nVertex 7: 27, 2, 29\nVertex 8: 16, 21\nVertex 9: 16\nVertex 10: 13\nVertex 11: 25\nVertex 12: 23, 13\nVertex 13: 12, 10\nVertex 14: 28\nVertex 15: 16\nVertex 16: 1, 8, 15, 3, 9\nVertex 17: 23\nVertex 18: 19\nVertex 19: 1, 23, 24, 22, 20, 18\nVertex 20: 19\nVertex 21: 8, 30\nVertex 22: 19\nVertex 23: 19, 17, 12\nVertex 24: 19\nVertex 25: 1, 28, 27, 26, 11\nVertex 26: 25\nVertex 27: 25, 7, 5\nVertex 28: 25, 14, 31\nVertex 29: 7, 6\nVertex 30: 21\nVertex 31: 28\n",
    "graph_output": "31 30\n1 19\n1 25\n25 28\n25 27\n19 23\n23 17\n28 14\n1 16\n16 8\n27 7\n7 2\n25 26\n16 15\n7 29\n27 5\n2 4\n23 12\n8 21\n21 30\n12 13\n19 24\n19 22\n25 11\n16 3\n19 20\n29 6\n28 31\n13 10\n16 9\n19 18\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 118 edges\n\nEdges (Format: Node Node):\n1 9\n9 7\n9 12\n9 3\n12 11\n11 5\n3 14\n7 2\n2 4\n14 16\n2 13\n4 8\n8 15\n1 6\n1 10\n6 4\n16 2\n8 14\n4 7\n3 12\n4 16\n11 10\n4 3\n9 6\n7 3\n8 6\n12 8\n2 11\n12 6\n7 6\n8 13\n15 5\n6 2\n3 15\n11 1\n8 1\n12 7\n7 1\n1 16\n12 16\n5 16\n8 11\n7 15\n15 1\n12 15\n3 8\n2 3\n7 8\n11 7\n14 1\n9 4\n1 3\n9 2\n7 10\n4 13\n7 13\n15 11\n13 3\n4 1\n10 4\n5 8\n16 9\n15 16\n9 11\n15 10\n11 3\n16 3\n12 10\n4 14\n3 5\n9 10\n10 6\n1 2\n7 5\n4 11\n1 12\n7 16\n14 12\n15 4\n14 10\n3 6\n6 16\n13 15\n8 2\n2 12\n13 12\n10 3\n9 14\n16 13\n4 12\n5 6\n13 1\n9 5\n4 5\n12 5\n8 10\n13 10\n2 14\n2 15\n5 13\n10 16\n6 11\n13 14\n6 14\n8 16\n9 13\n9 15\n5 1\n13 6\n15 6\n11 13\n14 11\n7 14\n2 10\n10 5\n5 2\n11 16\n15 14\n",
    "graph_output": "16 118\n1 9\n9 7\n9 12\n9 3\n12 11\n11 5\n3 14\n7 2\n2 4\n14 16\n2 13\n4 8\n8 15\n1 6\n1 10\n6 4\n16 2\n8 14\n4 7\n3 12\n4 16\n11 10\n4 3\n9 6\n7 3\n8 6\n12 8\n2 11\n12 6\n7 6\n8 13\n15 5\n6 2\n3 15\n11 1\n8 1\n12 7\n7 1\n1 16\n12 16\n5 16\n8 11\n7 15\n15 1\n12 15\n3 8\n2 3\n7 8\n11 7\n14 1\n9 4\n1 3\n9 2\n7 10\n4 13\n7 13\n15 11\n13 3\n4 1\n10 4\n5 8\n16 9\n15 16\n9 11\n15 10\n11 3\n16 3\n12 10\n4 14\n3 5\n9 10\n10 6\n1 2\n7 5\n4 11\n1 12\n7 16\n14 12\n15 4\n14 10\n3 6\n6 16\n13 15\n8 2\n2 12\n13 12\n10 3\n9 14\n16 13\n4 12\n5 6\n13 1\n9 5\n4 5\n12 5\n8 10\n13 10\n2 14\n2 15\n5 13\n10 16\n6 11\n13 14\n6 14\n8 16\n9 13\n9 15\n5 1\n13 6\n15 6\n11 13\n14 11\n7 14\n2 10\n10 5\n5 2\n11 16\n15 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 14 to vertex 1 in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 94 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2 with a weight of 45.\nThere is an edge between vertex 2 and vertex 7 with a weight of 28.\nThere is an edge between vertex 7 and vertex 13 with a weight of 11.\nThere is an edge between vertex 13 and vertex 12 with a weight of 28.\nThere is an edge between vertex 2 and vertex 6 with a weight of 52.\nThere is an edge between vertex 2 and vertex 15 with a weight of 91.\nThere is an edge between vertex 1 and vertex 14 with a weight of 56.\nThere is an edge between vertex 1 and vertex 5 with a weight of 88.\nThere is an edge between vertex 14 and vertex 10 with a weight of 15.\nThere is an edge between vertex 12 and vertex 3 with a weight of 14.\nThere is an edge between vertex 7 and vertex 11 with a weight of 99.\nThere is an edge between vertex 12 and vertex 8 with a weight of 68.\nThere is an edge between vertex 1 and vertex 4 with a weight of 88.\nThere is an edge between vertex 3 and vertex 9 with a weight of 81.\nThere is an edge between vertex 10 and vertex 6 with a weight of 9.\nThere is an edge between vertex 7 and vertex 5 with a weight of 82.\nThere is an edge between vertex 12 and vertex 6 with a weight of 81.\nThere is an edge between vertex 10 and vertex 2 with a weight of 71.\nThere is an edge between vertex 9 and vertex 6 with a weight of 22.\nThere is an edge between vertex 13 and vertex 2 with a weight of 58.\nThere is an edge between vertex 10 and vertex 8 with a weight of 31.\nThere is an edge between vertex 15 and vertex 8 with a weight of 10.\nThere is an edge between vertex 6 and vertex 8 with a weight of 89.\nThere is an edge between vertex 9 and vertex 5 with a weight of 23.\nThere is an edge between vertex 15 and vertex 9 with a weight of 75.\nThere is an edge between vertex 4 and vertex 5 with a weight of 87.\nThere is an edge between vertex 11 and vertex 1 with a weight of 51.\nThere is an edge between vertex 10 and vertex 7 with a weight of 69.\nThere is an edge between vertex 7 and vertex 1 with a weight of 19.\nThere is an edge between vertex 5 and vertex 10 with a weight of 38.\nThere is an edge between vertex 2 and vertex 11 with a weight of 51.\nThere is an edge between vertex 7 and vertex 4 with a weight of 70.\nThere is an edge between vertex 10 and vertex 15 with a weight of 78.\nThere is an edge between vertex 11 and vertex 8 with a weight of 5.\nThere is an edge between vertex 1 and vertex 12 with a weight of 47.\nThere is an edge between vertex 12 and vertex 4 with a weight of 58.\nThere is an edge between vertex 4 and vertex 9 with a weight of 94.\nThere is an edge between vertex 1 and vertex 15 with a weight of 96.\nThere is an edge between vertex 11 and vertex 13 with a weight of 43.\nThere is an edge between vertex 2 and vertex 3 with a weight of 87.\nThere is an edge between vertex 4 and vertex 2 with a weight of 56.\nThere is an edge between vertex 4 and vertex 8 with a weight of 72.\nThere is an edge between vertex 2 and vertex 8 with a weight of 23.\nThere is an edge between vertex 4 and vertex 11 with a weight of 51.\nThere is an edge between vertex 1 and vertex 8 with a weight of 53.\nThere is an edge between vertex 13 and vertex 15 with a weight of 70.\nThere is an edge between vertex 7 and vertex 15 with a weight of 6.\nThere is an edge between vertex 13 and vertex 4 with a weight of 32.\nThere is an edge between vertex 14 and vertex 13 with a weight of 2.\nThere is an edge between vertex 11 and vertex 12 with a weight of 76.\nThere is an edge between vertex 3 and vertex 4 with a weight of 3.\nThere is an edge between vertex 3 and vertex 8 with a weight of 63.\nThere is an edge between vertex 10 and vertex 4 with a weight of 69.\nThere is an edge between vertex 11 and vertex 10 with a weight of 86.\nThere is an edge between vertex 8 and vertex 14 with a weight of 88.\nThere is an edge between vertex 3 and vertex 7 with a weight of 51.\nThere is an edge between vertex 14 and vertex 6 with a weight of 22.\nThere is an edge between vertex 10 and vertex 9 with a weight of 90.\nThere is an edge between vertex 14 and vertex 2 with a weight of 10.\nThere is an edge between vertex 14 and vertex 3 with a weight of 90.\nThere is an edge between vertex 13 and vertex 10 with a weight of 18.\nThere is an edge between vertex 5 and vertex 3 with a weight of 66.\nThere is an edge between vertex 5 and vertex 13 with a weight of 12.\nThere is an edge between vertex 6 and vertex 1 with a weight of 19.\nThere is an edge between vertex 13 and vertex 3 with a weight of 8.\nThere is an edge between vertex 5 and vertex 12 with a weight of 78.\nThere is an edge between vertex 1 and vertex 3 with a weight of 23.\nThere is an edge between vertex 10 and vertex 3 with a weight of 2.\nThere is an edge between vertex 10 and vertex 1 with a weight of 66.\nThere is an edge between vertex 6 and vertex 13 with a weight of 77.\nThere is an edge between vertex 15 and vertex 11 with a weight of 76.\nThere is an edge between vertex 12 and vertex 10 with a weight of 80.\nThere is an edge between vertex 3 and vertex 11 with a weight of 4.\nThere is an edge between vertex 8 and vertex 9 with a weight of 29.\nThere is an edge between vertex 15 and vertex 4 with a weight of 44.\nThere is an edge between vertex 9 and vertex 7 with a weight of 54.\nThere is an edge between vertex 9 and vertex 13 with a weight of 39.\nThere is an edge between vertex 8 and vertex 7 with a weight of 88.\nThere is an edge between vertex 11 and vertex 14 with a weight of 64.\nThere is an edge between vertex 6 and vertex 4 with a weight of 85.\nThere is an edge between vertex 9 and vertex 2 with a weight of 33.\nThere is an edge between vertex 14 and vertex 12 with a weight of 21.\nThere is an edge between vertex 9 and vertex 1 with a weight of 99.\nThere is an edge between vertex 12 and vertex 15 with a weight of 9.\nThere is an edge between vertex 5 and vertex 8 with a weight of 80.\nThere is an edge between vertex 5 and vertex 11 with a weight of 82.\nThere is an edge between vertex 2 and vertex 5 with a weight of 39.\nThere is an edge between vertex 2 and vertex 12 with a weight of 6.\nThere is an edge between vertex 9 and vertex 11 with a weight of 46.\nThere is an edge between vertex 11 and vertex 6 with a weight of 70.\nThere is an edge between vertex 12 and vertex 7 with a weight of 5.\nThere is an edge between vertex 15 and vertex 5 with a weight of 42.\nThere is an edge between vertex 6 and vertex 7 with a weight of 90.\nThere is an edge between vertex 6 and vertex 15 with a weight of 77.\n",
    "graph_output": "15 94\n1 2 45\n2 7 28\n7 13 11\n13 12 28\n2 6 52\n2 15 91\n1 14 56\n1 5 88\n14 10 15\n12 3 14\n7 11 99\n12 8 68\n1 4 88\n3 9 81\n10 6 9\n7 5 82\n12 6 81\n10 2 71\n9 6 22\n13 2 58\n10 8 31\n15 8 10\n6 8 89\n9 5 23\n15 9 75\n4 5 87\n11 1 51\n10 7 69\n7 1 19\n5 10 38\n2 11 51\n7 4 70\n10 15 78\n11 8 5\n1 12 47\n12 4 58\n4 9 94\n1 15 96\n11 13 43\n2 3 87\n4 2 56\n4 8 72\n2 8 23\n4 11 51\n1 8 53\n13 15 70\n7 15 6\n13 4 32\n14 13 2\n11 12 76\n3 4 3\n3 8 63\n10 4 69\n11 10 86\n8 14 88\n3 7 51\n14 6 22\n10 9 90\n14 2 10\n14 3 90\n13 10 18\n5 3 66\n5 13 12\n6 1 19\n13 3 8\n5 12 78\n1 3 23\n10 3 2\n10 1 66\n6 13 77\n15 11 76\n12 10 80\n3 11 4\n8 9 29\n15 4 44\n9 7 54\n9 13 39\n8 7 88\n11 14 64\n6 4 85\n9 2 33\n14 12 21\n9 1 99\n12 15 9\n5 8 80\n5 11 82\n2 5 39\n2 12 6\n9 11 46\n11 6 70\n12 7 5\n15 5 42\n6 7 90\n6 15 77\n",
    "vertices": [
      14,
      1
    ],
    "answer": 32,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 90 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 11 and vertex 8.\n",
    "graph_output": "15 90\n1 11\n1 10\n1 12\n12 15\n15 9\n15 3\n15 14\n3 6\n6 13\n11 7\n15 4\n14 2\n15 8\n11 5\n4 14\n5 8\n12 11\n12 8\n5 3\n5 13\n5 7\n3 9\n1 9\n14 12\n1 3\n14 1\n11 14\n9 14\n10 6\n2 5\n7 14\n8 10\n4 5\n14 8\n13 8\n2 12\n12 3\n7 4\n5 6\n3 14\n6 4\n13 1\n6 8\n12 6\n5 10\n15 11\n4 3\n2 8\n9 5\n6 1\n6 14\n4 1\n15 13\n6 15\n5 14\n14 13\n3 2\n13 9\n10 13\n12 5\n15 1\n13 3\n7 12\n1 8\n11 3\n4 10\n6 9\n2 10\n2 15\n1 7\n13 11\n12 9\n2 13\n3 7\n13 12\n15 5\n6 2\n4 11\n2 4\n2 11\n7 9\n4 12\n7 15\n7 13\n6 11\n15 10\n9 10\n1 2\n8 3\n11 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 17 vertices and 34 edges\n\nEdges (Format: Node Node):\n6 5\n12 10\n16 15\n17 4\n11 2\n5 1\n8 14\n16 3\n1 10\n5 14\n13 7\n16 13\n12 4\n2 10\n6 7\n1 3\n2 1\n10 4\n14 15\n11 12\n16 10\n4 1\n15 11\n8 3\n9 16\n13 17\n5 16\n3 7\n15 1\n11 4\n12 6\n13 2\n13 8\n13 3\n",
    "graph_output": "17 34\n6 5\n12 10\n16 15\n17 4\n11 2\n5 1\n8 14\n16 3\n1 10\n5 14\n13 7\n16 13\n12 4\n2 10\n6 7\n1 3\n2 1\n10 4\n14 15\n11 12\n16 10\n4 1\n15 11\n8 3\n9 16\n13 17\n5 16\n3 7\n15 1\n11 4\n12 6\n13 2\n13 8\n13 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 4 and vertex 2 are connected.\n\nThis is an undirected graph with 16 vertices and 31 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   1   1   1   0   0   0   1   0   0   1   0   0 \n 2 |  0   0   0   1   0   0   0   0   0   1   0   0   0   0   1   0 \n 3 |  0   0   0   1   1   0   1   1   0   0   0   1   0   0   0   0 \n 4 |  0   1   1   0   1   0   0   0   0   0   0   0   0   0   1   0 \n 5 |  1   0   1   1   0   0   0   0   0   1   0   0   0   0   1   1 \n 6 |  1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1 \n 7 |  1   0   1   0   0   0   0   1   0   1   0   0   1   0   1   1 \n 8 |  0   0   1   0   0   0   1   0   0   1   0   1   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   1 \n10 |  0   1   0   0   1   1   1   1   0   0   0   0   0   0   0   0 \n11 |  1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n12 |  0   0   1   0   0   0   0   1   1   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   1   0   1   0   1   0   0   0   0   0 \n14 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   1   0   1   1   0   1   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   1   1   1   0   1   0   0   0   0   0   0   0 \n",
    "graph_output": "16 31\n5 15\n13 7\n5 4\n8 7\n1 14\n1 7\n5 1\n10 5\n7 10\n3 5\n10 8\n12 9\n16 6\n13 11\n9 16\n13 9\n3 4\n2 15\n15 7\n6 1\n8 12\n4 2\n3 12\n16 7\n15 4\n6 10\n10 2\n3 8\n16 5\n11 1\n7 3\n",
    "vertices": [
      4,
      2
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 85 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 7 (weight=92), 3 (weight=63), 13 (weight=47), 4 (weight=70), 12 (weight=52), 11 (weight=62), 10 (weight=12), 8 (weight=28), 5 (weight=7), 14 (weight=38), 6 (weight=75)\nVertex 2: 10 (weight=55), 11 (weight=68), 14 (weight=96), 8 (weight=94), 6 (weight=79), 4 (weight=6), 12 (weight=28), 13 (weight=42), 9 (weight=83), 3 (weight=21), 5 (weight=12)\nVertex 3: 1 (weight=63), 12 (weight=88), 14 (weight=23), 6 (weight=44), 11 (weight=76), 9 (weight=8), 8 (weight=3), 4 (weight=11), 5 (weight=90), 2 (weight=21), 10 (weight=11), 7 (weight=60), 13 (weight=89)\nVertex 4: 12 (weight=65), 9 (weight=3), 5 (weight=5), 1 (weight=70), 2 (weight=6), 7 (weight=30), 11 (weight=7), 3 (weight=11), 13 (weight=45), 6 (weight=97), 8 (weight=36), 14 (weight=58), 10 (weight=30)\nVertex 5: 7 (weight=67), 6 (weight=22), 4 (weight=5), 14 (weight=49), 10 (weight=78), 9 (weight=18), 11 (weight=84), 3 (weight=90), 8 (weight=75), 12 (weight=49), 1 (weight=7), 2 (weight=12)\nVertex 6: 9 (weight=8), 10 (weight=8), 5 (weight=22), 8 (weight=4), 3 (weight=44), 7 (weight=66), 2 (weight=79), 13 (weight=95), 12 (weight=54), 4 (weight=97), 14 (weight=97), 11 (weight=39), 1 (weight=75)\nVertex 7: 1 (weight=92), 9 (weight=84), 5 (weight=67), 8 (weight=11), 14 (weight=79), 6 (weight=66), 12 (weight=33), 10 (weight=23), 4 (weight=30), 13 (weight=23), 3 (weight=60), 11 (weight=33)\nVertex 8: 7 (weight=11), 10 (weight=90), 2 (weight=94), 6 (weight=4), 12 (weight=56), 3 (weight=3), 5 (weight=75), 1 (weight=28), 13 (weight=53), 4 (weight=36), 9 (weight=22), 14 (weight=83), 11 (weight=24)\nVertex 9: 7 (weight=84), 10 (weight=1), 13 (weight=80), 6 (weight=8), 4 (weight=3), 11 (weight=84), 3 (weight=8), 2 (weight=83), 5 (weight=18), 12 (weight=80), 8 (weight=22)\nVertex 10: 9 (weight=1), 2 (weight=55), 11 (weight=69), 6 (weight=8), 8 (weight=90), 12 (weight=20), 5 (weight=78), 7 (weight=23), 1 (weight=12), 3 (weight=11), 13 (weight=21), 4 (weight=30)\nVertex 11: 10 (weight=69), 2 (weight=68), 9 (weight=84), 3 (weight=76), 1 (weight=62), 4 (weight=7), 5 (weight=84), 14 (weight=80), 6 (weight=39), 13 (weight=34), 12 (weight=87), 7 (weight=33), 8 (weight=24)\nVertex 12: 3 (weight=88), 4 (weight=65), 13 (weight=24), 7 (weight=33), 10 (weight=20), 1 (weight=52), 14 (weight=2), 8 (weight=56), 2 (weight=28), 6 (weight=54), 9 (weight=80), 5 (weight=49), 11 (weight=87)\nVertex 13: 9 (weight=80), 12 (weight=24), 1 (weight=47), 6 (weight=95), 14 (weight=80), 2 (weight=42), 4 (weight=45), 8 (weight=53), 7 (weight=23), 10 (weight=21), 3 (weight=89), 11 (weight=34)\nVertex 14: 3 (weight=23), 2 (weight=96), 7 (weight=79), 13 (weight=80), 5 (weight=49), 12 (weight=2), 6 (weight=97), 11 (weight=80), 4 (weight=58), 1 (weight=38), 8 (weight=83)\n",
    "graph_output": "14 85\n1 7 92\n1 3 63\n7 9 84\n9 10 1\n10 2 55\n3 12 88\n12 4 65\n7 5 67\n9 13 80\n9 6 8\n3 14 23\n7 8 11\n10 11 69\n6 10 8\n10 8 90\n5 6 22\n4 9 3\n12 13 24\n11 2 68\n2 14 96\n8 2 94\n14 7 79\n1 13 47\n8 6 4\n3 6 44\n7 6 66\n11 9 84\n5 4 5\n11 3 76\n2 6 79\n6 13 95\n13 14 80\n7 12 33\n4 1 70\n12 10 20\n12 1 52\n14 5 49\n12 14 2\n5 10 78\n8 12 56\n3 9 8\n10 7 23\n3 8 3\n2 4 6\n12 2 28\n7 4 30\n1 11 62\n1 10 12\n13 2 42\n9 2 83\n5 9 18\n4 11 7\n4 3 11\n12 6 54\n5 11 84\n5 3 90\n8 5 75\n8 1 28\n9 12 80\n3 2 21\n13 4 45\n13 8 53\n4 6 97\n10 3 11\n6 14 97\n7 13 23\n12 5 49\n1 5 7\n3 7 60\n8 4 36\n11 14 80\n5 2 12\n14 4 58\n10 13 21\n1 14 38\n13 3 89\n6 11 39\n11 13 34\n9 8 22\n8 14 83\n11 12 87\n7 11 33\n8 11 24\n6 1 75\n10 4 30\n",
    "vertices": [
      null,
      null
    ],
    "answer": 98,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 16 vertices and 99 edges\n\nEdges (Format: Node Node):\n3 1\n6 16\n11 3\n11 7\n9 8\n8 5\n14 11\n11 15\n9 12\n2 13\n1 5\n6 9\n4 5\n16 13\n13 3\n14 9\n9 2\n5 11\n7 9\n14 4\n1 12\n11 1\n15 4\n9 11\n13 5\n7 10\n11 10\n11 13\n9 5\n12 16\n12 7\n2 3\n13 15\n2 5\n7 6\n11 6\n2 15\n7 14\n5 12\n8 10\n6 1\n16 11\n2 14\n16 4\n14 1\n9 3\n4 7\n15 8\n10 12\n10 13\n8 6\n4 3\n8 2\n14 10\n14 13\n9 16\n4 9\n4 10\n15 7\n4 1\n6 14\n16 3\n14 8\n5 15\n16 2\n11 8\n3 12\n2 4\n7 5\n1 2\n7 16\n9 13\n12 2\n15 12\n6 10\n10 5\n13 8\n9 10\n15 3\n13 1\n3 10\n6 13\n13 12\n10 2\n16 14\n9 1\n14 12\n1 8\n14 3\n7 13\n12 6\n3 8\n13 4\n4 12\n8 12\n11 2\n6 2\n4 11\n7 3\n",
    "graph_output": "16 99\n3 1\n6 16\n11 3\n11 7\n9 8\n8 5\n14 11\n11 15\n9 12\n2 13\n1 5\n6 9\n4 5\n16 13\n13 3\n14 9\n9 2\n5 11\n7 9\n14 4\n1 12\n11 1\n15 4\n9 11\n13 5\n7 10\n11 10\n11 13\n9 5\n12 16\n12 7\n2 3\n13 15\n2 5\n7 6\n11 6\n2 15\n7 14\n5 12\n8 10\n6 1\n16 11\n2 14\n16 4\n14 1\n9 3\n4 7\n15 8\n10 12\n10 13\n8 6\n4 3\n8 2\n14 10\n14 13\n9 16\n4 9\n4 10\n15 7\n4 1\n6 14\n16 3\n14 8\n5 15\n16 2\n11 8\n3 12\n2 4\n7 5\n1 2\n7 16\n9 13\n12 2\n15 12\n6 10\n10 5\n13 8\n9 10\n15 3\n13 1\n3 10\n6 13\n13 12\n10 2\n16 14\n9 1\n14 12\n1 8\n14 3\n7 13\n12 6\n3 8\n13 4\n4 12\n8 12\n11 2\n6 2\n4 11\n7 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 49 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 8 and vertex 1.\n",
    "graph_output": "11 49\n10 9\n6 10\n9 3\n3 6\n9 7\n8 4\n4 5\n11 7\n5 6\n10 7\n9 11\n2 11\n7 2\n8 2\n2 10\n4 10\n11 8\n6 1\n6 4\n7 4\n9 1\n7 3\n3 8\n11 1\n2 3\n9 4\n2 5\n9 2\n1 4\n2 4\n5 1\n10 5\n5 7\n4 3\n11 5\n5 8\n5 9\n3 5\n6 9\n3 11\n9 8\n6 8\n7 1\n10 1\n3 10\n6 2\n11 6\n11 4\n8 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 24 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0 \n 2 |  0   0   0   1   1   0   1   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 4 |  0   1   0   0   1   0   1   0   0   0   0   0   0   0   0   0 \n 5 |  0   1   0   1   0   0   0   1   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 7 |  0   1   0   1   0   0   0   0   1   0   0   1   1   0   0   0 \n 8 |  1   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0 \n 9 |  0   0   0   0   0   1   1   0   0   0   0   0   0   1   0   1 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   1 \n11 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1 \n12 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   1 \n13 |  1   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0 \n14 |  0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   1 \n15 |  0   0   0   0   0   0   0   0   0   1   0   1   1   0   0   0 \n16 |  0   0   1   0   0   0   0   0   1   1   1   1   0   1   0   0 \n",
    "graph_output": "16 24\n15 10\n7 13\n2 4\n16 12\n8 11\n9 14\n1 8\n5 2\n16 3\n10 16\n7 12\n16 9\n13 1\n16 11\n7 2\n9 7\n4 5\n13 15\n15 12\n10 14\n6 9\n7 4\n5 8\n14 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 113 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 7 and vertex 6.\n",
    "graph_output": "16 113\n16 15\n3 11\n14 1\n7 8\n7 4\n8 9\n4 9\n3 6\n13 3\n12 16\n11 14\n9 16\n5 13\n3 8\n15 6\n7 11\n8 10\n8 2\n7 2\n13 1\n10 7\n12 10\n16 4\n4 10\n9 3\n14 12\n11 16\n5 2\n8 16\n16 5\n15 14\n9 10\n1 2\n14 3\n5 7\n6 8\n10 16\n3 16\n9 14\n4 5\n14 2\n13 15\n6 16\n11 13\n12 8\n13 9\n2 16\n6 14\n4 11\n7 15\n15 8\n3 1\n10 15\n10 14\n6 4\n2 13\n4 1\n11 6\n14 16\n1 16\n10 3\n1 9\n5 14\n6 1\n13 12\n15 4\n8 5\n15 2\n13 10\n4 14\n15 5\n13 16\n12 4\n7 13\n11 9\n1 15\n1 11\n4 3\n6 5\n11 12\n15 3\n14 7\n11 15\n8 11\n13 4\n12 9\n5 11\n10 6\n5 12\n5 3\n8 13\n2 9\n7 16\n14 13\n9 5\n12 6\n1 8\n1 10\n3 2\n5 1\n4 2\n14 8\n6 9\n4 8\n3 7\n7 1\n13 6\n12 15\n5 10\n1 12\n9 7\n10 2\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 118 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 3 and vertex 14.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 15 and vertex 14.\n",
    "graph_output": "16 118\n1 9\n9 7\n9 12\n9 3\n12 11\n11 5\n3 14\n7 2\n2 4\n14 16\n2 13\n4 8\n8 15\n1 6\n1 10\n6 4\n16 2\n8 14\n4 7\n3 12\n4 16\n11 10\n4 3\n9 6\n7 3\n8 6\n12 8\n2 11\n12 6\n7 6\n8 13\n15 5\n6 2\n3 15\n11 1\n8 1\n12 7\n7 1\n1 16\n12 16\n5 16\n8 11\n7 15\n15 1\n12 15\n3 8\n2 3\n7 8\n11 7\n14 1\n9 4\n1 3\n9 2\n7 10\n4 13\n7 13\n15 11\n13 3\n4 1\n10 4\n5 8\n16 9\n15 16\n9 11\n15 10\n11 3\n16 3\n12 10\n4 14\n3 5\n9 10\n10 6\n1 2\n7 5\n4 11\n1 12\n7 16\n14 12\n15 4\n14 10\n3 6\n6 16\n13 15\n8 2\n2 12\n13 12\n10 3\n9 14\n16 13\n4 12\n5 6\n13 1\n9 5\n4 5\n12 5\n8 10\n13 10\n2 14\n2 15\n5 13\n10 16\n6 11\n13 14\n6 14\n8 16\n9 13\n9 15\n5 1\n13 6\n15 6\n11 13\n14 11\n7 14\n2 10\n10 5\n5 2\n11 16\n15 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 15 vertices and 81 edges\n\nEdges (Format: Node Node):\n11 10\n2 15\n10 8\n6 2\n8 5\n1 13\n9 10\n15 3\n15 5\n5 11\n9 11\n2 3\n12 6\n9 1\n11 15\n5 14\n7 14\n7 2\n3 5\n9 12\n11 8\n5 2\n8 1\n4 11\n11 6\n8 14\n12 8\n8 3\n4 3\n1 12\n7 9\n11 3\n9 15\n6 1\n4 6\n7 11\n9 5\n15 1\n8 15\n2 12\n2 10\n15 12\n1 4\n7 10\n4 14\n14 12\n11 13\n5 1\n10 3\n11 1\n2 1\n14 1\n3 6\n14 9\n5 12\n9 4\n6 5\n5 7\n8 13\n13 4\n15 10\n13 15\n13 6\n3 1\n7 1\n12 7\n10 13\n13 12\n14 3\n14 15\n9 6\n6 8\n14 11\n5 10\n10 4\n15 7\n1 10\n12 11\n6 10\n13 7\n6 7\n",
    "graph_output": "15 81\n11 10\n2 15\n10 8\n6 2\n8 5\n1 13\n9 10\n15 3\n15 5\n5 11\n9 11\n2 3\n12 6\n9 1\n11 15\n5 14\n7 14\n7 2\n3 5\n9 12\n11 8\n5 2\n8 1\n4 11\n11 6\n8 14\n12 8\n8 3\n4 3\n1 12\n7 9\n11 3\n9 15\n6 1\n4 6\n7 11\n9 5\n15 1\n8 15\n2 12\n2 10\n15 12\n1 4\n7 10\n4 14\n14 12\n11 13\n5 1\n10 3\n11 1\n2 1\n14 1\n3 6\n14 9\n5 12\n9 4\n6 5\n5 7\n8 13\n13 4\n15 10\n13 15\n13 6\n3 1\n7 1\n12 7\n10 13\n13 12\n14 3\n14 15\n9 6\n6 8\n14 11\n5 10\n10 4\n15 7\n1 10\n12 11\n6 10\n13 7\n6 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 102 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   0   1   1   1   1   0   1   1   0   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n 3 |  0   1   0   1   1   1   1   1   1   1   0   0   1   0   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   0   1   1   1   1   1   1   0   0 \n 5 |  1   1   1   1   0   0   0   0   1   0   1   0   1   1   1   0   1 \n 6 |  1   1   1   1   0   0   1   1   1   1   1   1   0   1   1   1   0 \n 7 |  1   1   1   1   0   1   0   1   0   1   1   0   1   1   1   0   0 \n 8 |  0   1   1   1   0   1   1   0   1   1   1   1   0   1   1   1   1 \n 9 |  1   1   1   0   1   1   0   1   0   1   1   1   1   1   0   1   0 \n10 |  1   1   1   1   0   1   1   1   1   0   0   1   1   0   1   1   0 \n11 |  0   0   0   1   1   1   1   1   1   0   0   0   1   0   1   1   1 \n12 |  1   1   0   1   0   1   0   1   1   1   0   0   0   1   1   1   1 \n13 |  1   1   1   1   1   0   1   0   1   1   1   0   0   0   1   0   1 \n14 |  1   1   0   1   1   1   1   1   1   0   0   1   0   0   1   0   1 \n15 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   0   1   1 \n16 |  1   1   1   0   0   1   0   1   1   1   1   1   0   0   1   0   1 \n17 |  1   1   1   0   1   0   0   1   0   0   1   1   1   1   1   1   0 \n",
    "graph_output": "17 102\n1 6\n6 16\n1 12\n6 7\n6 3\n3 13\n6 15\n6 4\n3 5\n7 11\n6 8\n8 14\n13 10\n5 9\n13 17\n10 2\n2 9\n15 13\n15 1\n8 17\n2 15\n16 9\n5 13\n13 9\n14 2\n3 16\n11 16\n13 11\n8 7\n3 4\n8 2\n16 1\n13 4\n16 15\n4 5\n5 1\n14 7\n15 12\n11 9\n7 1\n15 7\n3 7\n3 15\n8 4\n3 10\n17 15\n1 14\n2 7\n2 4\n10 6\n7 13\n9 6\n10 16\n3 9\n2 3\n7 4\n4 11\n14 4\n1 13\n5 11\n2 13\n15 11\n8 3\n5 17\n14 9\n1 2\n10 9\n8 9\n5 2\n16 2\n15 8\n10 12\n14 5\n1 9\n17 3\n1 17\n17 14\n16 12\n7 10\n12 2\n12 6\n6 11\n11 17\n17 2\n2 6\n12 14\n17 16\n4 1\n4 10\n8 12\n14 6\n15 14\n8 16\n10 8\n15 4\n12 9\n5 15\n12 17\n10 15\n12 4\n8 11\n1 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 16 vertices and 19 edges\n\nEdges (Format: Node Node):\n11 13\n11 3\n1 11\n14 7\n4 10\n5 11\n6 3\n12 14\n5 7\n12 2\n7 12\n4 13\n1 10\n3 8\n8 7\n11 15\n11 10\n15 5\n10 13\n",
    "graph_output": "16 19\n11 13\n11 3\n1 11\n14 7\n4 10\n5 11\n6 3\n12 14\n5 7\n12 2\n7 12\n4 13\n1 10\n3 8\n8 7\n11 15\n11 10\n15 5\n10 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 7 vertices and 19 edges\n\nEdges (Format: Node Node):\n6 2\n7 2\n5 3\n5 6\n3 7\n3 6\n6 1\n4 6\n7 6\n2 4\n1 2\n7 4\n1 4\n3 4\n2 5\n7 1\n1 5\n5 7\n5 4\n",
    "graph_output": "7 19\n6 2\n7 2\n5 3\n5 6\n3 7\n3 6\n6 1\n4 6\n7 6\n2 4\n1 2\n7 4\n1 4\n3 4\n2 5\n7 1\n1 5\n5 7\n5 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 587,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 6 (source) to vertex 8 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 9 vertices and 17 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 7 58 4\n7 8 67 6\n8 9 44 5\n1 5 87 4\n5 4 26 7\n4 3 64 3\n3 2 49 2\n7 6 50 4\n5 8 53 10\n3 7 66 9\n2 7 47 5\n9 2 54 6\n6 4 82 6\n2 1 14 1\n3 5 30 6\n9 7 77 1\n1 3 12 5\n",
    "graph_output": "9 17\n1 7 58 4\n7 8 67 6\n8 9 44 5\n1 5 87 4\n5 4 26 7\n4 3 64 3\n3 2 49 2\n7 6 50 4\n5 8 53 10\n3 7 66 9\n2 7 47 5\n9 2 54 6\n6 4 82 6\n2 1 14 1\n3 5 30 6\n9 7 77 1\n1 3 12 5\n",
    "vertices": [
      6,
      8
    ],
    "answer": 1434,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 23 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   1   0   0   0   0   0   0   1   1   0   0   0   0   0 \n 2 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  1   0   1   0   1   1   1   0   0   1   0   0   0   0   1   0   1 \n 5 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   1   0   1   0   0   0   0   1   0   0   1   1   0   0   0   0 \n 7 |  0   0   0   1   0   0   0   0   0   1   0   0   0   1   0   1   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0 \n 9 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0 \n11 |  1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n12 |  1   0   0   0   0   1   0   1   0   0   1   0   0   0   0   0   0 \n13 |  0   0   0   0   0   1   0   1   0   0   0   0   0   0   1   0   0 \n14 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   1   0 \n15 |  0   0   0   1   0   0   0   0   0   0   0   0   1   1   0   0   0 \n16 |  0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0 \n17 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "17 23\n1 4\n4 6\n6 13\n4 15\n6 2\n4 3\n4 10\n13 8\n6 9\n4 17\n10 7\n6 12\n7 14\n12 11\n7 16\n4 5\n7 4\n1 12\n16 14\n15 13\n8 12\n11 1\n15 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 7 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 8 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 8 (weight=80, capacity=4), 3 (weight=7, capacity=2)\nVertex 2: 3 (weight=32, capacity=6)\nVertex 3: 1 (weight=7, capacity=2), 4 (weight=98, capacity=1), 2 (weight=32, capacity=6)\nVertex 4: 3 (weight=98, capacity=1)\nVertex 5: 6 (weight=36, capacity=6), 7 (weight=42, capacity=3)\nVertex 6: 8 (weight=97, capacity=5), 5 (weight=36, capacity=6)\nVertex 7: 5 (weight=42, capacity=3), 9 (weight=36, capacity=1)\nVertex 8: 1 (weight=80, capacity=4), 6 (weight=97, capacity=5)\nVertex 9: 7 (weight=36, capacity=1)\n",
    "graph_output": "9 8\n1 8 80 4\n8 6 97 5\n1 3 7 2\n6 5 36 6\n5 7 42 3\n7 9 36 1\n3 4 98 1\n3 2 32 6\n",
    "vertices": [
      4,
      7
    ],
    "answer": 360,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 34 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 10, 3, 2, 4, 15\nVertex 2: 11, 10, 1, 13\nVertex 3: 16, 1, 8, 7, 13\nVertex 4: 17, 12, 10, 1, 11\nVertex 5: 6, 1, 14, 16\nVertex 6: 5, 7, 12\nVertex 7: 13, 6, 3\nVertex 8: 14, 3, 13\nVertex 9: 16\nVertex 10: 12, 1, 2, 4, 16\nVertex 11: 2, 12, 15, 4\nVertex 12: 10, 4, 11, 6\nVertex 13: 7, 16, 17, 2, 8, 3\nVertex 14: 8, 5, 15\nVertex 15: 16, 14, 11, 1\nVertex 16: 15, 3, 13, 10, 9, 5\nVertex 17: 4, 13\n",
    "graph_output": "17 34\n6 5\n12 10\n16 15\n17 4\n11 2\n5 1\n8 14\n16 3\n1 10\n5 14\n13 7\n16 13\n12 4\n2 10\n6 7\n1 3\n2 1\n10 4\n14 15\n11 12\n16 10\n4 1\n15 11\n8 3\n9 16\n13 17\n5 16\n3 7\n15 1\n11 4\n12 6\n13 2\n13 8\n13 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 99 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 8 and vertex 11.\n",
    "graph_output": "16 99\n1 2\n2 9\n1 6\n1 4\n4 15\n9 8\n15 14\n14 7\n1 16\n14 10\n10 12\n6 5\n10 13\n15 11\n11 3\n8 2\n15 6\n12 13\n2 4\n1 12\n16 11\n16 2\n2 10\n14 3\n12 5\n16 8\n3 10\n4 10\n8 1\n3 7\n2 7\n8 12\n3 1\n8 15\n2 6\n15 16\n15 12\n5 14\n3 16\n13 7\n9 15\n9 14\n9 5\n9 1\n7 10\n14 4\n9 13\n6 7\n7 15\n1 5\n13 1\n10 16\n5 11\n2 15\n12 7\n7 5\n13 4\n11 9\n16 14\n2 13\n11 12\n6 9\n8 3\n16 12\n8 13\n6 3\n6 4\n8 14\n14 12\n12 3\n10 9\n5 4\n5 16\n15 13\n12 6\n4 11\n5 15\n10 5\n4 7\n13 14\n5 2\n2 11\n7 8\n3 5\n1 10\n16 9\n1 14\n8 4\n9 4\n5 13\n3 15\n6 10\n11 7\n7 9\n11 14\n1 7\n16 7\n11 6\n8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 16 vertices and 113 edges\n\nEdges (Format: Node Node):\n8 12\n6 7\n5 11\n10 2\n8 14\n14 2\n7 12\n2 7\n1 2\n16 6\n8 2\n15 11\n13 2\n8 4\n11 16\n10 9\n7 1\n15 10\n3 7\n5 2\n8 16\n13 7\n9 2\n5 16\n15 3\n15 9\n6 8\n3 13\n14 1\n14 12\n14 9\n11 2\n9 13\n3 14\n7 10\n15 16\n5 13\n16 12\n11 9\n13 10\n2 15\n16 7\n16 10\n12 4\n11 13\n3 11\n12 13\n5 6\n6 11\n7 4\n12 6\n6 1\n5 1\n11 8\n5 3\n12 11\n14 10\n8 10\n1 9\n4 14\n6 13\n4 15\n14 6\n4 9\n14 5\n16 9\n9 5\n3 8\n7 9\n3 4\n2 16\n11 7\n5 7\n15 14\n1 10\n4 11\n11 14\n12 1\n6 9\n3 1\n11 1\n12 2\n15 5\n10 6\n2 4\n12 5\n15 8\n9 8\n14 16\n2 3\n15 6\n4 5\n3 6\n6 2\n1 16\n10 11\n1 13\n14 7\n12 9\n12 15\n4 6\n16 13\n4 13\n12 3\n16 3\n3 9\n7 15\n13 14\n4 1\n10 12\n8 7\n13 8\n15 13\n",
    "graph_output": "16 113\n8 12\n6 7\n5 11\n10 2\n8 14\n14 2\n7 12\n2 7\n1 2\n16 6\n8 2\n15 11\n13 2\n8 4\n11 16\n10 9\n7 1\n15 10\n3 7\n5 2\n8 16\n13 7\n9 2\n5 16\n15 3\n15 9\n6 8\n3 13\n14 1\n14 12\n14 9\n11 2\n9 13\n3 14\n7 10\n15 16\n5 13\n16 12\n11 9\n13 10\n2 15\n16 7\n16 10\n12 4\n11 13\n3 11\n12 13\n5 6\n6 11\n7 4\n12 6\n6 1\n5 1\n11 8\n5 3\n12 11\n14 10\n8 10\n1 9\n4 14\n6 13\n4 15\n14 6\n4 9\n14 5\n16 9\n9 5\n3 8\n7 9\n3 4\n2 16\n11 7\n5 7\n15 14\n1 10\n4 11\n11 14\n12 1\n6 9\n3 1\n11 1\n12 2\n15 5\n10 6\n2 4\n12 5\n15 8\n9 8\n14 16\n2 3\n15 6\n4 5\n3 6\n6 2\n1 16\n10 11\n1 13\n14 7\n12 9\n12 15\n4 6\n16 13\n4 13\n12 3\n16 3\n3 9\n7 15\n13 14\n4 1\n10 12\n8 7\n13 8\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 15 vertices and 20 edges\n\nEdges (Format: Node Node):\n3 15\n10 9\n14 9\n8 7\n1 14\n11 7\n15 8\n13 8\n1 7\n1 12\n9 7\n8 6\n2 9\n6 5\n13 5\n5 4\n14 6\n2 10\n7 5\n3 13\n",
    "graph_output": "15 20\n3 15\n10 9\n14 9\n8 7\n1 14\n11 7\n15 8\n13 8\n1 7\n1 12\n9 7\n8 6\n2 9\n6 5\n13 5\n5 4\n14 6\n2 10\n7 5\n3 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 20 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 7 and vertex 6.\n",
    "graph_output": "13 20\n7 2\n1 5\n2 6\n12 6\n11 7\n13 6\n9 2\n8 5\n7 3\n9 13\n3 5\n4 9\n6 8\n1 7\n1 3\n3 4\n12 2\n8 1\n11 4\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 29, 24, 10, 21\nVertex 2: 17\nVertex 3: 8\nVertex 4: 27\nVertex 5: 21, 25\nVertex 6: 29, 13\nVertex 7: 24, 12\nVertex 8: 29, 18, 28, 27, 3\nVertex 9: 28, 22\nVertex 10: 1, 23\nVertex 11: 28\nVertex 12: 7, 26\nVertex 13: 6\nVertex 14: 17\nVertex 15: 29, 20\nVertex 16: 24\nVertex 17: 24, 2, 14\nVertex 18: 8\nVertex 19: 21\nVertex 20: 15\nVertex 21: 1, 5, 19\nVertex 22: 9\nVertex 23: 10\nVertex 24: 1, 17, 7, 16\nVertex 25: 5\nVertex 26: 12\nVertex 27: 8, 4\nVertex 28: 8, 9, 11\nVertex 29: 1, 8, 15, 6\n",
    "graph_output": "29 28\n1 29\n1 24\n29 8\n1 10\n24 17\n29 15\n8 18\n29 6\n1 21\n24 7\n10 23\n8 28\n8 27\n8 3\n24 16\n6 13\n7 12\n12 26\n15 20\n27 4\n21 5\n17 2\n28 9\n28 11\n9 22\n5 25\n17 14\n21 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "list"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 7 (source) to vertex 9 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 42 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 6 (weight=30, capacity=2), 8 (weight=56, capacity=10), 4 (weight=12, capacity=1), 2 (weight=1, capacity=8), 10 (weight=25, capacity=1), 11 (weight=10, capacity=7), 3 (weight=38, capacity=8), 9 (weight=78, capacity=4), 7 (weight=42, capacity=1)\nVertex 2: 1 (weight=1, capacity=8), 5 (weight=60, capacity=9), 3 (weight=8, capacity=3), 8 (weight=42, capacity=3), 9 (weight=47, capacity=8), 7 (weight=60, capacity=7), 11 (weight=59, capacity=2)\nVertex 3: 5 (weight=3, capacity=8), 1 (weight=38, capacity=8), 2 (weight=8, capacity=3), 10 (weight=30, capacity=2), 7 (weight=76, capacity=2), 4 (weight=56, capacity=4), 11 (weight=71, capacity=6)\nVertex 4: 1 (weight=12, capacity=1), 9 (weight=56, capacity=3), 7 (weight=77, capacity=7), 11 (weight=43, capacity=10), 6 (weight=79, capacity=9), 10 (weight=98, capacity=7), 3 (weight=56, capacity=4), 5 (weight=90, capacity=10), 8 (weight=41, capacity=2)\nVertex 5: 2 (weight=60, capacity=9), 3 (weight=3, capacity=8), 9 (weight=5, capacity=8), 8 (weight=76, capacity=7), 6 (weight=44, capacity=6), 4 (weight=90, capacity=10), 7 (weight=10, capacity=7), 10 (weight=16, capacity=6)\nVertex 6: 1 (weight=30, capacity=2), 9 (weight=59, capacity=2), 7 (weight=69, capacity=6), 4 (weight=79, capacity=9), 5 (weight=44, capacity=6), 8 (weight=39, capacity=1), 10 (weight=59, capacity=4)\nVertex 7: 4 (weight=77, capacity=7), 10 (weight=44, capacity=6), 6 (weight=69, capacity=6), 11 (weight=73, capacity=8), 8 (weight=22, capacity=10), 3 (weight=76, capacity=2), 1 (weight=42, capacity=1), 5 (weight=10, capacity=7), 2 (weight=60, capacity=7), 9 (weight=52, capacity=2)\nVertex 8: 1 (weight=56, capacity=10), 11 (weight=55, capacity=6), 7 (weight=22, capacity=10), 5 (weight=76, capacity=7), 9 (weight=48, capacity=1), 6 (weight=39, capacity=1), 2 (weight=42, capacity=3), 4 (weight=41, capacity=2)\nVertex 9: 4 (weight=56, capacity=3), 6 (weight=59, capacity=2), 5 (weight=5, capacity=8), 1 (weight=78, capacity=4), 8 (weight=48, capacity=1), 2 (weight=47, capacity=8), 7 (weight=52, capacity=2)\nVertex 10: 1 (weight=25, capacity=1), 7 (weight=44, capacity=6), 3 (weight=30, capacity=2), 4 (weight=98, capacity=7), 6 (weight=59, capacity=4), 5 (weight=16, capacity=6)\nVertex 11: 8 (weight=55, capacity=6), 4 (weight=43, capacity=10), 7 (weight=73, capacity=8), 1 (weight=10, capacity=7), 3 (weight=71, capacity=6), 2 (weight=59, capacity=2)\n",
    "graph_output": "11 42\n1 6 30 2\n1 8 56 10\n1 4 12 1\n4 9 56 3\n1 2 1 8\n1 10 25 1\n2 5 60 9\n8 11 55 6\n4 7 77 7\n5 3 3 8\n11 4 43 10\n10 7 44 6\n9 6 59 2\n7 6 69 6\n7 11 73 8\n6 4 79 9\n11 1 10 7\n3 1 38 8\n2 3 8 3\n10 3 30 2\n7 8 22 10\n7 3 76 2\n5 9 5 8\n5 8 76 7\n5 6 44 6\n1 9 78 4\n9 8 48 1\n7 1 42 1\n8 6 39 1\n10 4 98 7\n2 8 42 3\n6 10 59 4\n9 2 47 8\n3 4 56 4\n5 4 90 10\n7 5 10 7\n3 11 71 6\n7 2 60 7\n9 7 52 2\n8 4 41 2\n11 2 59 2\n10 5 16 6\n",
    "vertices": [
      7,
      9
    ],
    "answer": 2376,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 11 vertices and 50 edges\n\nEdges (Format: Node Node):\n7 3\n8 11\n11 5\n8 7\n3 1\n6 3\n9 8\n4 9\n2 1\n6 8\n10 8\n7 10\n9 2\n3 9\n7 4\n10 2\n9 7\n5 1\n10 5\n6 7\n5 3\n4 10\n1 10\n10 9\n4 2\n10 11\n9 1\n10 6\n3 4\n4 11\n8 5\n11 9\n11 6\n1 11\n2 8\n10 3\n11 7\n2 7\n7 5\n9 6\n4 1\n2 6\n5 4\n2 11\n4 6\n7 1\n1 8\n2 3\n5 6\n4 8\n",
    "graph_output": "11 50\n7 3\n8 11\n11 5\n8 7\n3 1\n6 3\n9 8\n4 9\n2 1\n6 8\n10 8\n7 10\n9 2\n3 9\n7 4\n10 2\n9 7\n5 1\n10 5\n6 7\n5 3\n4 10\n1 10\n10 9\n4 2\n10 11\n9 1\n10 6\n3 4\n4 11\n8 5\n11 9\n11 6\n1 11\n2 8\n10 3\n11 7\n2 7\n7 5\n9 6\n4 1\n2 6\n5 4\n2 11\n4 6\n7 1\n1 8\n2 3\n5 6\n4 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 16 vertices and 23 edges\n\nEdges (Format: Node Node):\n1 6\n1 14\n14 9\n6 11\n1 16\n11 12\n16 2\n14 8\n12 4\n6 10\n6 7\n9 5\n12 13\n11 15\n16 3\n3 6\n10 2\n12 8\n4 10\n10 3\n2 6\n2 13\n5 1\n",
    "graph_output": "16 23\n1 6\n1 14\n14 9\n6 11\n1 16\n11 12\n16 2\n14 8\n12 4\n6 10\n6 7\n9 5\n12 13\n11 15\n16 3\n3 6\n10 2\n12 8\n4 10\n10 3\n2 6\n2 13\n5 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 1 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 20 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 10 (weight=10, capacity=4), 7 (weight=85, capacity=8), 8 (weight=9, capacity=5), 4 (weight=35, capacity=4), 2 (weight=48, capacity=9)\nVertex 2: 5 (weight=4, capacity=2), 8 (weight=56, capacity=9), 6 (weight=85, capacity=6), 9 (weight=46, capacity=8), 7 (weight=62, capacity=3), 1 (weight=48, capacity=9)\nVertex 3: 10 (weight=100, capacity=1), 4 (weight=55, capacity=3), 9 (weight=46, capacity=8)\nVertex 4: 8 (weight=62, capacity=2), 3 (weight=55, capacity=3), 1 (weight=35, capacity=4), 10 (weight=28, capacity=10)\nVertex 5: 7 (weight=94, capacity=2), 2 (weight=4, capacity=2)\nVertex 6: 2 (weight=85, capacity=6), 7 (weight=41, capacity=5)\nVertex 7: 1 (weight=85, capacity=8), 5 (weight=94, capacity=2), 9 (weight=65, capacity=3), 2 (weight=62, capacity=3), 6 (weight=41, capacity=5)\nVertex 8: 2 (weight=56, capacity=9), 4 (weight=62, capacity=2), 9 (weight=24, capacity=9), 1 (weight=9, capacity=5)\nVertex 9: 7 (weight=65, capacity=3), 2 (weight=46, capacity=8), 8 (weight=24, capacity=9), 3 (weight=46, capacity=8), 10 (weight=11, capacity=2)\nVertex 10: 1 (weight=10, capacity=4), 3 (weight=100, capacity=1), 4 (weight=28, capacity=10), 9 (weight=11, capacity=2)\n",
    "graph_output": "10 20\n1 10 10 4\n1 7 85 8\n7 5 94 2\n5 2 4 2\n7 9 65 3\n10 3 100 1\n2 8 56 9\n2 6 85 6\n8 4 62 2\n2 9 46 8\n4 3 55 3\n9 8 24 9\n2 7 62 3\n1 8 9 5\n1 4 35 4\n4 10 28 10\n7 6 41 5\n9 3 46 8\n9 10 11 2\n1 2 48 9\n",
    "vertices": [
      4,
      1
    ],
    "answer": 1370,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 15 to vertex 13 in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 31 edges\n\nEdges (Format: Node Node Weight):\n1 12 3\n12 10 64\n10 8 75\n12 7 41\n7 15 35\n12 5 12\n5 3 16\n1 4 6\n4 13 16\n8 14 29\n4 2 9\n3 9 54\n1 6 26\n5 16 91\n13 11 79\n12 13 8\n9 6 81\n7 11 66\n10 5 97\n14 13 74\n16 14 9\n11 3 23\n12 14 29\n4 15 44\n9 15 23\n10 6 67\n14 4 66\n10 11 32\n5 7 5\n7 10 52\n3 4 45\n",
    "graph_output": "16 31\n1 12 3\n12 10 64\n10 8 75\n12 7 41\n7 15 35\n12 5 12\n5 3 16\n1 4 6\n4 13 16\n8 14 29\n4 2 9\n3 9 54\n1 6 26\n5 16 91\n13 11 79\n12 13 8\n9 6 81\n7 11 66\n10 5 97\n14 13 74\n16 14 9\n11 3 23\n12 14 29\n4 15 44\n9 15 23\n10 6 67\n14 4 66\n10 11 32\n5 7 5\n7 10 52\n3 4 45\n",
    "vertices": [
      15,
      13
    ],
    "answer": 60,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 13 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 56 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13 with a capacity of 9.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 3 with a capacity of 4.\nThere is an edge between vertex 9 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 2 with a capacity of 8.\nThere is an edge between vertex 13 and vertex 8 with a capacity of 3.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 11 with a capacity of 7.\nThere is an edge between vertex 8 and vertex 10 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 12 with a capacity of 4.\nThere is an edge between vertex 2 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 5 and vertex 10 with a capacity of 6.\nThere is an edge between vertex 4 and vertex 1 with a capacity of 6.\nThere is an edge between vertex 9 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 12 and vertex 13 with a capacity of 1.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 8 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 4 and vertex 8 with a capacity of 3.\nThere is an edge between vertex 10 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 11 and vertex 6 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 2 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 8 and vertex 1 with a capacity of 2.\nThere is an edge between vertex 12 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 11 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 6 and vertex 12 with a capacity of 5.\nThere is an edge between vertex 10 and vertex 13 with a capacity of 2.\nThere is an edge between vertex 10 and vertex 12 with a capacity of 7.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 6.\nThere is an edge between vertex 8 and vertex 2 with a capacity of 2.\nThere is an edge between vertex 10 and vertex 1 with a capacity of 7.\nThere is an edge between vertex 10 and vertex 4 with a capacity of 10.\nThere is an edge between vertex 10 and vertex 3 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 10 and vertex 11 with a capacity of 4.\nThere is an edge between vertex 13 and vertex 6 with a capacity of 4.\nThere is an edge between vertex 5 and vertex 13 with a capacity of 4.\nThere is an edge between vertex 6 and vertex 2 with a capacity of 4.\nThere is an edge between vertex 2 and vertex 11 with a capacity of 7.\nThere is an edge between vertex 3 and vertex 6 with a capacity of 2.\nThere is an edge between vertex 13 and vertex 11 with a capacity of 3.\nThere is an edge between vertex 11 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 12 and vertex 8 with a capacity of 8.\nThere is an edge between vertex 12 and vertex 9 with a capacity of 2.\nThere is an edge between vertex 3 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 13 with a capacity of 8.\nThere is an edge between vertex 5 and vertex 2 with a capacity of 8.\nThere is an edge between vertex 7 and vertex 5 with a capacity of 1.\nThere is an edge between vertex 6 and vertex 1 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 13 with a capacity of 5.\nThere is an edge between vertex 5 and vertex 9 with a capacity of 10.\nThere is an edge between vertex 2 and vertex 12 with a capacity of 1.\nThere is an edge between vertex 13 and vertex 9 with a capacity of 9.\n",
    "graph_output": "13 56\n1 13 9\n1 9 3\n1 3 4\n9 6 10\n9 2 8\n13 8 3\n9 7 10\n9 4 1\n3 11 7\n8 10 2\n3 5 8\n1 12 4\n2 4 2\n5 10 6\n4 1 6\n9 8 5\n12 13 1\n1 5 9\n8 3 5\n6 8 5\n4 8 3\n10 6 10\n11 6 2\n3 2 5\n10 2 1\n8 1 2\n12 7 5\n11 9 5\n6 12 5\n10 13 2\n10 12 7\n2 7 6\n8 2 2\n10 1 7\n10 4 10\n10 3 3\n7 4 1\n10 11 4\n13 6 4\n5 13 4\n6 2 4\n2 11 7\n3 6 2\n13 11 3\n11 4 2\n12 8 8\n12 9 2\n3 4 2\n2 13 8\n5 2 8\n7 5 1\n6 1 5\n7 13 5\n5 9 10\n2 12 1\n13 9 9\n",
    "vertices": [
      13,
      4
    ],
    "answer": 27,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 13 vertices and 24 edges\n\nEdges (Format: Node Node):\n3 8\n13 4\n3 13\n2 6\n7 12\n7 11\n7 2\n11 5\n7 9\n4 5\n11 13\n10 3\n8 11\n9 5\n1 12\n3 5\n3 12\n2 9\n6 9\n1 5\n10 5\n1 6\n8 6\n11 10\n",
    "graph_output": "13 24\n3 8\n13 4\n3 13\n2 6\n7 12\n7 11\n7 2\n11 5\n7 9\n4 5\n11 13\n10 3\n8 11\n9 5\n1 12\n3 5\n3 12\n2 9\n6 9\n1 5\n10 5\n1 6\n8 6\n11 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 12 vertices and 65 edges\n\nEdges (Format: Node Node Weight):\n1 7 99\n1 6 26\n6 10 99\n6 3 62\n3 4 36\n6 12 79\n12 9 8\n7 11 57\n9 5 72\n9 8 50\n6 2 57\n3 9 28\n12 8 88\n5 7 8\n1 9 5\n7 10 52\n1 4 32\n5 2 94\n9 2 84\n7 3 26\n8 11 55\n2 7 44\n1 5 69\n11 9 43\n6 5 45\n12 3 100\n4 12 49\n11 1 76\n2 1 45\n4 11 51\n4 5 61\n2 3 80\n3 11 95\n11 12 72\n6 4 31\n4 9 79\n6 7 38\n8 1 32\n8 3 86\n7 4 44\n4 10 38\n6 8 40\n10 11 68\n8 10 100\n2 10 9\n5 12 25\n1 10 80\n8 4 15\n6 9 71\n5 8 62\n12 7 48\n4 2 59\n8 7 29\n10 3 52\n1 12 86\n5 11 21\n7 9 70\n2 12 73\n10 5 86\n3 1 43\n10 12 59\n9 10 59\n5 3 43\n8 2 30\n6 11 59\n",
    "graph_output": "12 65\n1 7 99\n1 6 26\n6 10 99\n6 3 62\n3 4 36\n6 12 79\n12 9 8\n7 11 57\n9 5 72\n9 8 50\n6 2 57\n3 9 28\n12 8 88\n5 7 8\n1 9 5\n7 10 52\n1 4 32\n5 2 94\n9 2 84\n7 3 26\n8 11 55\n2 7 44\n1 5 69\n11 9 43\n6 5 45\n12 3 100\n4 12 49\n11 1 76\n2 1 45\n4 11 51\n4 5 61\n2 3 80\n3 11 95\n11 12 72\n6 4 31\n4 9 79\n6 7 38\n8 1 32\n8 3 86\n7 4 44\n4 10 38\n6 8 40\n10 11 68\n8 10 100\n2 10 9\n5 12 25\n1 10 80\n8 4 15\n6 9 71\n5 8 62\n12 7 48\n4 2 59\n8 7 29\n10 3 52\n1 12 86\n5 11 21\n7 9 70\n2 12 73\n10 5 86\n3 1 43\n10 12 59\n9 10 59\n5 3 43\n8 2 30\n6 11 59\n",
    "vertices": [
      null,
      null
    ],
    "answer": 204,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 19 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 1 and vertex 6.\n",
    "graph_output": "7 19\n1 2\n1 7\n2 6\n6 4\n4 3\n2 5\n3 5\n5 1\n7 3\n2 7\n4 2\n5 4\n7 6\n7 5\n6 5\n3 2\n3 6\n4 7\n1 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8232,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 5 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 38 edges.\n\nThe graph has both weights and capacities on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights and capacities.\n\nAdjacency List:\n\nVertex 1: 8 (weight=14, capacity=8), 6 (weight=51, capacity=4), 9 (weight=40, capacity=6), 2 (weight=27, capacity=3), 10 (weight=2, capacity=1), 5 (weight=90, capacity=8), 7 (weight=1, capacity=7), 3 (weight=45, capacity=2), 4 (weight=86, capacity=7)\nVertex 2: 4 (weight=46, capacity=3), 7 (weight=94, capacity=10), 8 (weight=16, capacity=1), 9 (weight=13, capacity=9), 1 (weight=27, capacity=3), 6 (weight=64, capacity=1)\nVertex 3: 10 (weight=98, capacity=1), 5 (weight=60, capacity=4), 7 (weight=80, capacity=9), 9 (weight=45, capacity=9), 8 (weight=90, capacity=10), 6 (weight=66, capacity=7), 1 (weight=45, capacity=2)\nVertex 4: 8 (weight=70, capacity=7), 10 (weight=76, capacity=2), 2 (weight=46, capacity=3), 5 (weight=55, capacity=7), 7 (weight=23, capacity=9), 9 (weight=75, capacity=10), 6 (weight=16, capacity=1), 1 (weight=86, capacity=7)\nVertex 5: 3 (weight=60, capacity=4), 7 (weight=5, capacity=2), 4 (weight=55, capacity=7), 1 (weight=90, capacity=8), 9 (weight=22, capacity=9), 6 (weight=30, capacity=8)\nVertex 6: 1 (weight=51, capacity=4), 8 (weight=69, capacity=8), 10 (weight=69, capacity=3), 2 (weight=64, capacity=1), 4 (weight=16, capacity=1), 3 (weight=66, capacity=7), 7 (weight=95, capacity=4), 5 (weight=30, capacity=8)\nVertex 7: 2 (weight=94, capacity=10), 9 (weight=52, capacity=6), 3 (weight=80, capacity=9), 5 (weight=5, capacity=2), 10 (weight=28, capacity=1), 4 (weight=23, capacity=9), 1 (weight=1, capacity=7), 6 (weight=95, capacity=4), 8 (weight=22, capacity=6)\nVertex 8: 1 (weight=14, capacity=8), 4 (weight=70, capacity=7), 2 (weight=16, capacity=1), 6 (weight=69, capacity=8), 10 (weight=27, capacity=1), 9 (weight=67, capacity=1), 3 (weight=90, capacity=10), 7 (weight=22, capacity=6)\nVertex 9: 1 (weight=40, capacity=6), 7 (weight=52, capacity=6), 2 (weight=13, capacity=9), 3 (weight=45, capacity=9), 8 (weight=67, capacity=1), 4 (weight=75, capacity=10), 10 (weight=27, capacity=2), 5 (weight=22, capacity=9)\nVertex 10: 4 (weight=76, capacity=2), 3 (weight=98, capacity=1), 8 (weight=27, capacity=1), 6 (weight=69, capacity=3), 7 (weight=28, capacity=1), 1 (weight=2, capacity=1), 9 (weight=27, capacity=2)\n",
    "graph_output": "10 38\n1 8 14 8\n8 4 70 7\n1 6 51 4\n4 10 76 2\n10 3 98 1\n3 5 60 4\n4 2 46 3\n1 9 40 6\n2 7 94 10\n2 8 16 1\n9 7 52 6\n7 3 80 9\n6 8 69 8\n8 10 27 1\n2 9 13 9\n3 9 45 9\n7 5 5 2\n10 6 69 3\n4 5 55 7\n8 9 67 1\n1 2 27 3\n6 2 64 1\n10 7 28 1\n7 4 23 9\n1 10 2 1\n4 9 75 10\n1 5 90 8\n9 10 27 2\n1 7 1 7\n6 4 16 1\n9 5 22 9\n3 8 90 10\n3 6 66 7\n1 3 45 2\n6 7 95 4\n6 5 30 8\n1 4 86 7\n8 7 22 6\n",
    "vertices": [
      4,
      5
    ],
    "answer": 4161,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 11 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 64 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 2 (capacity=10), 11 (capacity=4), 8 (capacity=3), 12 (capacity=8), 10 (capacity=8), 4 (capacity=6), 7 (capacity=8), 5 (capacity=6), 3 (capacity=8), 9 (capacity=5)\nVertex 2: 1 (capacity=10), 7 (capacity=4), 5 (capacity=3), 12 (capacity=6), 11 (capacity=6), 8 (capacity=1), 4 (capacity=3), 10 (capacity=3), 9 (capacity=5), 3 (capacity=6), 6 (capacity=1)\nVertex 3: 7 (capacity=5), 11 (capacity=3), 8 (capacity=9), 12 (capacity=5), 2 (capacity=6), 9 (capacity=6), 1 (capacity=8), 6 (capacity=5), 4 (capacity=2), 10 (capacity=2), 5 (capacity=2)\nVertex 4: 5 (capacity=7), 11 (capacity=8), 2 (capacity=3), 10 (capacity=1), 1 (capacity=6), 7 (capacity=10), 9 (capacity=4), 6 (capacity=5), 3 (capacity=2), 12 (capacity=5), 8 (capacity=1)\nVertex 5: 2 (capacity=3), 8 (capacity=4), 4 (capacity=7), 12 (capacity=9), 7 (capacity=7), 6 (capacity=9), 11 (capacity=8), 1 (capacity=6), 10 (capacity=1), 3 (capacity=2)\nVertex 6: 7 (capacity=1), 11 (capacity=6), 5 (capacity=9), 12 (capacity=8), 10 (capacity=4), 9 (capacity=5), 4 (capacity=5), 3 (capacity=5), 2 (capacity=1), 8 (capacity=8)\nVertex 7: 2 (capacity=4), 6 (capacity=1), 3 (capacity=5), 10 (capacity=5), 5 (capacity=7), 1 (capacity=8), 4 (capacity=10), 12 (capacity=9), 9 (capacity=5), 8 (capacity=8), 11 (capacity=3)\nVertex 8: 5 (capacity=4), 9 (capacity=1), 11 (capacity=1), 1 (capacity=3), 2 (capacity=1), 3 (capacity=9), 7 (capacity=8), 10 (capacity=7), 4 (capacity=1), 12 (capacity=1), 6 (capacity=8)\nVertex 9: 8 (capacity=1), 2 (capacity=5), 11 (capacity=8), 4 (capacity=4), 3 (capacity=6), 12 (capacity=3), 6 (capacity=5), 7 (capacity=5), 10 (capacity=3), 1 (capacity=5)\nVertex 10: 7 (capacity=5), 12 (capacity=8), 2 (capacity=3), 4 (capacity=1), 1 (capacity=8), 6 (capacity=4), 9 (capacity=3), 8 (capacity=7), 3 (capacity=2), 5 (capacity=1), 11 (capacity=9)\nVertex 11: 2 (capacity=6), 1 (capacity=4), 6 (capacity=6), 8 (capacity=1), 3 (capacity=3), 12 (capacity=7), 4 (capacity=8), 5 (capacity=8), 9 (capacity=8), 10 (capacity=9), 7 (capacity=3)\nVertex 12: 2 (capacity=6), 5 (capacity=9), 10 (capacity=8), 1 (capacity=8), 11 (capacity=7), 3 (capacity=5), 6 (capacity=8), 7 (capacity=9), 9 (capacity=3), 4 (capacity=5), 8 (capacity=1)\n",
    "graph_output": "12 64\n1 2 10\n2 7 4\n2 5 3\n2 12 6\n2 11 6\n5 8 4\n5 4 7\n8 9 1\n7 6 1\n7 3 5\n7 10 5\n1 11 4\n11 6 6\n11 8 1\n8 1 3\n5 12 9\n12 10 8\n7 5 7\n11 3 3\n8 2 1\n12 1 8\n11 12 7\n6 5 9\n4 11 8\n11 5 8\n8 3 9\n4 2 3\n12 3 5\n2 10 3\n9 2 5\n10 4 1\n6 12 8\n1 10 8\n10 6 4\n1 4 6\n7 1 8\n5 1 6\n3 2 6\n7 4 10\n9 11 8\n9 4 4\n7 12 9\n9 3 6\n9 12 3\n9 6 5\n7 9 5\n3 1 8\n6 4 5\n10 9 3\n7 8 8\n3 6 5\n3 4 2\n2 6 1\n4 12 5\n8 10 7\n9 1 5\n4 8 1\n12 8 1\n3 10 2\n5 10 1\n11 10 9\n8 6 8\n11 7 3\n3 5 2\n",
    "vertices": [
      11,
      6
    ],
    "answer": 52,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 23 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 17 and vertex 14.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 14 and vertex 11.\n",
    "graph_output": "17 23\n15 4\n16 14\n3 15\n10 8\n14 6\n11 17\n4 8\n7 12\n8 15\n1 13\n17 14\n8 16\n14 7\n2 15\n11 13\n5 6\n10 3\n13 16\n3 2\n5 12\n17 4\n3 6\n14 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 16 vertices and 32 edges\n\nEdges (Format: Node Node):\n1 11\n11 13\n13 2\n1 7\n1 8\n11 16\n7 3\n7 14\n13 6\n3 15\n13 9\n13 5\n11 10\n10 4\n16 12\n5 1\n11 8\n2 5\n3 5\n2 11\n8 15\n2 12\n7 15\n1 10\n5 4\n12 11\n13 4\n14 16\n1 3\n12 1\n15 11\n2 8\n",
    "graph_output": "16 32\n1 11\n11 13\n13 2\n1 7\n1 8\n11 16\n7 3\n7 14\n13 6\n3 15\n13 9\n13 5\n11 10\n10 4\n16 12\n5 1\n11 8\n2 5\n3 5\n2 11\n8 15\n2 12\n7 15\n1 10\n5 4\n12 11\n13 4\n14 16\n1 3\n12 1\n15 11\n2 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nUndirected Graph with 15 vertices and 102 edges\n\nEdges (Format: Node Node):\n1 3\n3 2\n3 5\n5 13\n1 4\n4 7\n1 6\n2 15\n5 12\n3 9\n15 10\n15 11\n7 8\n9 14\n12 4\n7 12\n6 4\n3 13\n15 7\n9 12\n11 8\n3 12\n14 13\n3 11\n9 7\n9 1\n14 4\n15 14\n7 6\n13 4\n7 5\n14 6\n9 5\n4 5\n14 7\n3 15\n4 10\n2 9\n10 2\n13 2\n5 10\n4 11\n11 7\n10 3\n15 9\n13 1\n13 11\n13 10\n1 10\n6 3\n3 7\n11 2\n2 5\n1 12\n1 5\n9 11\n15 5\n8 10\n8 12\n6 9\n6 13\n2 4\n14 8\n8 1\n9 13\n8 5\n8 6\n4 9\n11 14\n6 15\n1 7\n12 2\n5 6\n12 15\n6 12\n1 11\n2 14\n12 11\n2 1\n11 10\n6 2\n1 14\n7 10\n7 13\n15 4\n3 14\n8 15\n8 3\n15 13\n13 8\n2 8\n4 3\n8 9\n14 12\n5 11\n13 12\n6 11\n10 12\n10 14\n4 8\n10 9\n1 15\n",
    "graph_output": "15 102\n1 3\n3 2\n3 5\n5 13\n1 4\n4 7\n1 6\n2 15\n5 12\n3 9\n15 10\n15 11\n7 8\n9 14\n12 4\n7 12\n6 4\n3 13\n15 7\n9 12\n11 8\n3 12\n14 13\n3 11\n9 7\n9 1\n14 4\n15 14\n7 6\n13 4\n7 5\n14 6\n9 5\n4 5\n14 7\n3 15\n4 10\n2 9\n10 2\n13 2\n5 10\n4 11\n11 7\n10 3\n15 9\n13 1\n13 11\n13 10\n1 10\n6 3\n3 7\n11 2\n2 5\n1 12\n1 5\n9 11\n15 5\n8 10\n8 12\n6 9\n6 13\n2 4\n14 8\n8 1\n9 13\n8 5\n8 6\n4 9\n11 14\n6 15\n1 7\n12 2\n5 6\n12 15\n6 12\n1 11\n2 14\n12 11\n2 1\n11 10\n6 2\n1 14\n7 10\n7 13\n15 4\n3 14\n8 15\n8 3\n15 13\n13 8\n2 8\n4 3\n8 9\n14 12\n5 11\n13 12\n6 11\n10 12\n10 14\n4 8\n10 9\n1 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 17 vertices and 107 edges\n\nEdges (Format: Node Node):\n1 4\n1 8\n8 13\n4 3\n3 14\n4 12\n1 2\n4 17\n13 16\n8 6\n8 9\n2 11\n3 10\n16 5\n10 7\n8 15\n13 1\n1 17\n11 7\n11 9\n8 7\n17 6\n4 16\n16 8\n17 3\n3 12\n4 7\n11 13\n5 13\n14 2\n10 9\n17 16\n13 2\n13 14\n3 5\n11 14\n15 13\n15 5\n17 12\n10 15\n7 12\n2 5\n17 9\n12 14\n2 16\n14 15\n1 6\n4 14\n10 6\n12 5\n14 5\n17 13\n7 1\n7 15\n8 2\n10 16\n8 10\n1 14\n1 5\n12 13\n6 4\n14 17\n6 15\n8 14\n4 11\n16 1\n15 3\n3 13\n17 7\n8 17\n11 17\n4 8\n4 13\n12 15\n9 15\n11 12\n15 11\n16 11\n16 6\n6 11\n3 6\n1 11\n17 5\n1 10\n15 17\n16 15\n2 9\n5 7\n9 1\n4 15\n5 4\n12 6\n6 7\n4 9\n7 3\n7 14\n16 7\n1 3\n1 15\n5 6\n11 5\n9 5\n3 8\n1 12\n2 3\n13 10\n10 14\n",
    "graph_output": "17 107\n1 4\n1 8\n8 13\n4 3\n3 14\n4 12\n1 2\n4 17\n13 16\n8 6\n8 9\n2 11\n3 10\n16 5\n10 7\n8 15\n13 1\n1 17\n11 7\n11 9\n8 7\n17 6\n4 16\n16 8\n17 3\n3 12\n4 7\n11 13\n5 13\n14 2\n10 9\n17 16\n13 2\n13 14\n3 5\n11 14\n15 13\n15 5\n17 12\n10 15\n7 12\n2 5\n17 9\n12 14\n2 16\n14 15\n1 6\n4 14\n10 6\n12 5\n14 5\n17 13\n7 1\n7 15\n8 2\n10 16\n8 10\n1 14\n1 5\n12 13\n6 4\n14 17\n6 15\n8 14\n4 11\n16 1\n15 3\n3 13\n17 7\n8 17\n11 17\n4 8\n4 13\n12 15\n9 15\n11 12\n15 11\n16 11\n16 6\n6 11\n3 6\n1 11\n17 5\n1 10\n15 17\n16 15\n2 9\n5 7\n9 1\n4 15\n5 4\n12 6\n6 7\n4 9\n7 3\n7 14\n16 7\n1 3\n1 15\n5 6\n11 5\n9 5\n3 8\n1 12\n2 3\n13 10\n10 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 115 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 10 and vertex 11.\n",
    "graph_output": "16 115\n15 16\n12 10\n10 16\n6 9\n2 8\n11 8\n5 11\n7 4\n2 12\n8 1\n13 12\n8 12\n5 16\n14 6\n15 5\n7 16\n6 11\n4 8\n14 12\n3 6\n16 8\n2 9\n16 14\n10 14\n2 16\n1 6\n11 16\n12 16\n13 15\n10 8\n3 2\n5 14\n9 8\n16 6\n10 9\n11 1\n2 10\n1 2\n15 7\n3 4\n8 14\n7 3\n3 10\n8 3\n4 11\n7 10\n9 4\n15 8\n6 5\n10 15\n12 11\n12 7\n11 15\n12 15\n11 14\n3 16\n6 8\n15 4\n13 6\n11 2\n6 15\n7 6\n12 5\n3 15\n4 10\n16 13\n1 13\n12 3\n11 9\n13 2\n11 3\n16 1\n7 5\n13 10\n16 4\n13 14\n4 6\n8 7\n3 9\n9 15\n5 13\n3 1\n11 7\n10 6\n5 4\n5 9\n2 5\n4 13\n1 4\n1 10\n7 2\n13 8\n5 8\n12 9\n5 3\n5 10\n9 14\n13 7\n2 14\n1 15\n7 9\n9 16\n15 14\n13 3\n14 7\n13 9\n11 13\n9 1\n7 1\n4 2\n2 6\n14 3\n14 1\n1 5\n10 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 26 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 1 and vertex 9.\n",
    "graph_output": "15 26\n5 10\n1 7\n2 1\n12 7\n4 9\n11 1\n12 6\n3 5\n2 9\n15 7\n7 10\n5 13\n5 4\n7 9\n8 10\n5 14\n9 6\n13 9\n3 4\n12 13\n5 11\n1 8\n14 11\n6 15\n9 8\n1 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 21 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 5, 10\nVertex 2: 11, 6, 14\nVertex 3: 16, 12\nVertex 4: 11, 14\nVertex 5: 1, 12, 11\nVertex 6: 2, 8\nVertex 7: 14, 13\nVertex 8: 12, 6\nVertex 9: 14\nVertex 10: 1, 12\nVertex 11: 5, 15, 16, 2, 4\nVertex 12: 5, 13, 8, 10, 3\nVertex 13: 12, 14, 7\nVertex 14: 13, 7, 9, 4, 2\nVertex 15: 11\nVertex 16: 11, 3\n",
    "graph_output": "16 21\n1 5\n5 12\n5 11\n11 15\n12 13\n11 16\n13 14\n14 7\n11 2\n12 8\n2 6\n16 3\n11 4\n1 10\n14 9\n10 12\n14 4\n13 7\n12 3\n14 2\n6 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 26 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 7 and vertex 4.\n",
    "graph_output": "15 26\n1 14\n14 12\n14 15\n14 6\n1 3\n15 13\n14 4\n6 11\n4 8\n1 10\n11 5\n10 7\n3 2\n8 9\n5 14\n7 1\n3 10\n13 1\n3 5\n9 14\n11 1\n4 9\n1 5\n13 14\n9 1\n7 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 7 vertices and 17 edges\n\nEdges (Format: Node Node):\n4 3\n2 6\n4 2\n7 2\n7 3\n7 6\n6 3\n7 4\n1 6\n5 6\n7 1\n5 2\n1 2\n4 6\n5 4\n5 3\n5 7\n",
    "graph_output": "7 17\n4 3\n2 6\n4 2\n7 2\n7 3\n7 6\n6 3\n7 4\n1 6\n5 6\n7 1\n5 2\n1 2\n4 6\n5 4\n5 3\n5 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 274,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 115 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   1   0   1   1   1   1   1   1   0   1   0   1 \n 2 |  1   0   0   1   1   1   1   1   0   0   1   1   0   1   1   1   1 \n 3 |  1   0   0   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n 4 |  1   1   1   0   1   0   0   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   0   1   0   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   0   0   0   1   1   1   1   1   1   1   1   1   1   1 \n 7 |  0   1   1   0   1   1   0   0   1   1   0   1   1   1   0   1   0 \n 8 |  1   1   1   1   0   1   0   0   0   1   1   1   1   1   1   1   1 \n 9 |  1   0   1   1   1   1   1   0   0   1   1   1   1   1   1   1   1 \n10 |  1   0   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n11 |  1   1   1   1   1   1   0   1   1   1   0   1   1   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   0   1   1   1 \n13 |  1   0   1   1   1   1   1   1   1   1   1   1   0   1   1   1   0 \n14 |  0   1   1   1   1   1   1   1   1   1   1   0   1   0   1   1   1 \n15 |  1   1   0   1   1   1   0   1   1   1   1   1   1   1   0   0   1 \n16 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   0   0   0 \n17 |  1   1   1   1   1   1   0   1   1   1   1   1   0   1   1   0   0 \n",
    "graph_output": "17 115\n7 13\n4 8\n12 13\n3 1\n13 10\n15 17\n1 17\n8 16\n15 6\n13 3\n6 14\n11 10\n1 4\n3 12\n8 15\n3 10\n3 9\n3 5\n5 7\n5 14\n8 2\n16 10\n17 5\n13 5\n14 8\n4 13\n12 11\n17 2\n14 17\n1 11\n13 11\n10 1\n16 13\n9 12\n7 3\n16 11\n6 10\n15 12\n16 6\n12 10\n13 6\n4 16\n6 7\n11 9\n1 9\n12 8\n3 4\n16 7\n5 2\n16 14\n3 16\n14 9\n11 6\n10 4\n10 8\n11 2\n2 1\n7 2\n14 15\n9 10\n10 15\n14 3\n1 12\n14 10\n6 9\n5 4\n9 7\n3 11\n13 1\n5 16\n17 8\n4 12\n7 12\n2 14\n15 2\n15 9\n3 6\n11 14\n6 12\n15 13\n10 7\n8 1\n13 14\n10 17\n15 5\n6 2\n5 11\n12 17\n14 4\n4 17\n11 17\n14 7\n1 5\n11 8\n4 9\n5 10\n8 6\n12 5\n5 9\n12 16\n3 8\n4 2\n15 4\n15 11\n6 17\n1 15\n2 12\n3 17\n6 1\n16 2\n9 16\n4 11\n13 9\n17 9\n13 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nUndirected Graph with 15 vertices and 19 edges\n\nEdges (Format: Node Node):\n12 1\n3 5\n2 8\n11 3\n13 1\n10 12\n7 11\n3 7\n14 9\n15 10\n2 12\n11 12\n7 15\n3 2\n1 10\n9 12\n11 8\n8 5\n5 9\n",
    "graph_output": "15 19\n12 1\n3 5\n2 8\n11 3\n13 1\n10 12\n7 11\n3 7\n14 9\n15 10\n2 12\n11 12\n7 15\n3 2\n1 10\n9 12\n11 8\n8 5\n5 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 15 and vertex 13 are connected.\n\nThis is an undirected graph with 15 vertices and 98 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   0   1   1   1   1 \n 3 |  0   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   0   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   0   1   1 \n 6 |  1   1   1   1   1   0   0   0   1   1   0   1   1   1   1 \n 7 |  1   1   1   1   1   0   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   0   1   0   1   1   1   1   1   1   1 \n 9 |  1   1   1   0   1   1   1   1   0   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n11 |  1   0   1   1   1   0   1   1   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n13 |  1   1   1   1   0   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n15 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 98\n9 1\n11 3\n10 4\n8 12\n7 15\n13 3\n8 4\n14 10\n4 3\n5 12\n8 10\n4 2\n5 15\n8 7\n11 12\n1 13\n8 14\n3 14\n13 8\n15 2\n10 3\n3 5\n9 13\n1 14\n10 1\n7 4\n9 11\n1 7\n5 8\n10 6\n4 1\n9 3\n12 3\n10 15\n5 14\n9 7\n4 12\n6 12\n13 6\n1 8\n5 1\n2 10\n10 9\n9 2\n9 6\n11 7\n2 8\n3 15\n15 1\n10 11\n6 4\n15 14\n14 12\n13 14\n12 15\n11 15\n9 5\n11 14\n4 11\n7 3\n2 5\n7 12\n10 12\n6 5\n2 1\n7 14\n8 15\n12 2\n3 8\n2 14\n1 12\n15 13\n12 13\n14 6\n14 9\n1 11\n5 7\n4 14\n7 10\n15 4\n9 12\n11 13\n9 15\n7 2\n5 4\n3 2\n11 8\n10 13\n1 6\n2 6\n15 6\n13 4\n11 5\n13 2\n6 3\n13 7\n9 8\n5 10\n",
    "vertices": [
      15,
      13
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 64 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 9, 4, 6, 12, 2, 5, 8, 10, 7, 11\nVertex 2: 10, 12, 3, 5, 1, 4, 7, 11, 6, 9, 8\nVertex 3: 5, 1, 4, 2, 10, 7, 9, 11, 12, 8\nVertex 4: 3, 7, 8, 10, 6, 1, 12, 11, 2, 5, 9\nVertex 5: 3, 10, 6, 2, 12, 4, 9, 1, 11, 7, 8\nVertex 6: 7, 10, 8, 4, 1, 5, 2, 12, 9, 11\nVertex 7: 6, 4, 11, 3, 10, 2, 12, 9, 5, 1, 8\nVertex 8: 4, 6, 12, 11, 9, 1, 3, 5, 2, 10, 7\nVertex 9: 10, 12, 1, 3, 11, 8, 5, 4, 7, 2, 6\nVertex 10: 9, 6, 2, 5, 4, 3, 7, 11, 1, 8\nVertex 11: 12, 8, 7, 9, 4, 3, 10, 5, 2, 6, 1\nVertex 12: 11, 2, 9, 8, 1, 4, 5, 7, 3, 6\n",
    "graph_output": "12 64\n11 12\n3 5\n9 10\n7 6\n3 1\n10 6\n10 2\n3 4\n4 7\n5 10\n4 8\n2 12\n6 8\n10 4\n12 9\n4 6\n9 1\n4 1\n1 6\n2 3\n12 8\n12 1\n10 3\n5 6\n11 8\n2 5\n4 12\n7 11\n1 2\n7 3\n3 9\n9 11\n11 4\n12 5\n4 2\n5 4\n7 10\n2 7\n9 8\n3 11\n10 11\n5 9\n1 5\n7 12\n11 5\n4 9\n11 2\n6 2\n3 12\n1 8\n6 12\n9 7\n3 8\n5 7\n2 9\n1 10\n9 6\n5 8\n6 11\n7 1\n2 8\n8 10\n7 8\n1 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 5 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 38 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8 with a weight of 14 and a capacity of 8.\nThere is an edge between vertex 8 and vertex 4 with a weight of 70 and a capacity of 7.\nThere is an edge between vertex 1 and vertex 6 with a weight of 51 and a capacity of 4.\nThere is an edge between vertex 4 and vertex 10 with a weight of 76 and a capacity of 2.\nThere is an edge between vertex 10 and vertex 3 with a weight of 98 and a capacity of 1.\nThere is an edge between vertex 3 and vertex 5 with a weight of 60 and a capacity of 4.\nThere is an edge between vertex 4 and vertex 2 with a weight of 46 and a capacity of 3.\nThere is an edge between vertex 1 and vertex 9 with a weight of 40 and a capacity of 6.\nThere is an edge between vertex 2 and vertex 7 with a weight of 94 and a capacity of 10.\nThere is an edge between vertex 2 and vertex 8 with a weight of 16 and a capacity of 1.\nThere is an edge between vertex 9 and vertex 7 with a weight of 52 and a capacity of 6.\nThere is an edge between vertex 7 and vertex 3 with a weight of 80 and a capacity of 9.\nThere is an edge between vertex 6 and vertex 8 with a weight of 69 and a capacity of 8.\nThere is an edge between vertex 8 and vertex 10 with a weight of 27 and a capacity of 1.\nThere is an edge between vertex 2 and vertex 9 with a weight of 13 and a capacity of 9.\nThere is an edge between vertex 3 and vertex 9 with a weight of 45 and a capacity of 9.\nThere is an edge between vertex 7 and vertex 5 with a weight of 5 and a capacity of 2.\nThere is an edge between vertex 10 and vertex 6 with a weight of 69 and a capacity of 3.\nThere is an edge between vertex 4 and vertex 5 with a weight of 55 and a capacity of 7.\nThere is an edge between vertex 8 and vertex 9 with a weight of 67 and a capacity of 1.\nThere is an edge between vertex 1 and vertex 2 with a weight of 27 and a capacity of 3.\nThere is an edge between vertex 6 and vertex 2 with a weight of 64 and a capacity of 1.\nThere is an edge between vertex 10 and vertex 7 with a weight of 28 and a capacity of 1.\nThere is an edge between vertex 7 and vertex 4 with a weight of 23 and a capacity of 9.\nThere is an edge between vertex 1 and vertex 10 with a weight of 2 and a capacity of 1.\nThere is an edge between vertex 4 and vertex 9 with a weight of 75 and a capacity of 10.\nThere is an edge between vertex 1 and vertex 5 with a weight of 90 and a capacity of 8.\nThere is an edge between vertex 9 and vertex 10 with a weight of 27 and a capacity of 2.\nThere is an edge between vertex 1 and vertex 7 with a weight of 1 and a capacity of 7.\nThere is an edge between vertex 6 and vertex 4 with a weight of 16 and a capacity of 1.\nThere is an edge between vertex 9 and vertex 5 with a weight of 22 and a capacity of 9.\nThere is an edge between vertex 3 and vertex 8 with a weight of 90 and a capacity of 10.\nThere is an edge between vertex 3 and vertex 6 with a weight of 66 and a capacity of 7.\nThere is an edge between vertex 1 and vertex 3 with a weight of 45 and a capacity of 2.\nThere is an edge between vertex 6 and vertex 7 with a weight of 95 and a capacity of 4.\nThere is an edge between vertex 6 and vertex 5 with a weight of 30 and a capacity of 8.\nThere is an edge between vertex 1 and vertex 4 with a weight of 86 and a capacity of 7.\nThere is an edge between vertex 8 and vertex 7 with a weight of 22 and a capacity of 6.\n",
    "graph_output": "10 38\n1 8 14 8\n8 4 70 7\n1 6 51 4\n4 10 76 2\n10 3 98 1\n3 5 60 4\n4 2 46 3\n1 9 40 6\n2 7 94 10\n2 8 16 1\n9 7 52 6\n7 3 80 9\n6 8 69 8\n8 10 27 1\n2 9 13 9\n3 9 45 9\n7 5 5 2\n10 6 69 3\n4 5 55 7\n8 9 67 1\n1 2 27 3\n6 2 64 1\n10 7 28 1\n7 4 23 9\n1 10 2 1\n4 9 75 10\n1 5 90 8\n9 10 27 2\n1 7 1 7\n6 4 16 1\n9 5 22 9\n3 8 90 10\n3 6 66 7\n1 3 45 2\n6 7 95 4\n6 5 30 8\n1 4 86 7\n8 7 22 6\n",
    "vertices": [
      4,
      5
    ],
    "answer": 4161,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 21 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   0   0   1   1   1   0   0   0   0   1 \n 2 |  0   0   1   0   1   0   1   0   1   1   0   1 \n 3 |  0   1   0   1   0   0   0   1   1   0   0   0 \n 4 |  0   0   1   0   0   0   0   1   0   0   0   0 \n 5 |  1   1   0   0   0   0   0   0   0   0   0   0 \n 6 |  1   0   0   0   0   0   0   0   0   0   0   1 \n 7 |  1   1   0   0   0   0   0   0   1   1   0   0 \n 8 |  0   0   1   1   0   0   0   0   1   0   0   0 \n 9 |  0   1   1   0   0   0   1   1   0   0   0   1 \n10 |  0   1   0   0   0   0   1   0   0   0   0   1 \n11 |  0   0   0   0   0   0   0   0   0   0   0   1 \n12 |  1   1   0   0   0   1   0   0   1   1   1   0 \n",
    "graph_output": "12 21\n12 10\n6 1\n1 12\n9 8\n1 7\n7 10\n11 12\n3 8\n2 12\n2 7\n4 3\n2 3\n12 6\n1 5\n3 9\n9 12\n2 9\n4 8\n9 7\n10 2\n2 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 23 and 3 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 30 vertices and 29 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 22.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 22 and vertex 17.\nThere is an edge between vertex 22 and vertex 18.\nThere is an edge between vertex 17 and vertex 26.\nThere is an edge between vertex 1 and vertex 29.\nThere is an edge between vertex 18 and vertex 25.\nThere is an edge between vertex 26 and vertex 4.\nThere is an edge between vertex 25 and vertex 28.\nThere is an edge between vertex 22 and vertex 23.\nThere is an edge between vertex 23 and vertex 14.\nThere is an edge between vertex 29 and vertex 3.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 18 and vertex 19.\nThere is an edge between vertex 19 and vertex 10.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 25 and vertex 16.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 29 and vertex 8.\nThere is an edge between vertex 16 and vertex 21.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 3 and vertex 27.\nThere is an edge between vertex 14 and vertex 20.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 28 and vertex 30.\nThere is an edge between vertex 5 and vertex 24.\nThere is an edge between vertex 27 and vertex 15.\nThere is an edge between vertex 26 and vertex 9.\n",
    "graph_output": "30 29\n1 22\n1 11\n22 17\n22 18\n17 26\n1 29\n18 25\n26 4\n25 28\n22 23\n23 14\n29 3\n14 2\n14 5\n18 19\n19 10\n11 6\n25 16\n16 7\n29 8\n16 21\n8 12\n3 27\n14 20\n1 13\n28 30\n5 24\n27 15\n26 9\n",
    "vertices": [
      23,
      3
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 9 to vertex 5 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 22 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 12 (weight=33), 14 (weight=20), 6 (weight=27), 5 (weight=71), 7 (weight=54)\nVertex 2: 9 (weight=27), 4 (weight=21)\nVertex 3: 14 (weight=57), 11 (weight=6)\nVertex 4: 14 (weight=77), 10 (weight=34), 5 (weight=21), 2 (weight=21), 6 (weight=46)\nVertex 5: 8 (weight=37), 4 (weight=21), 7 (weight=56), 1 (weight=71)\nVertex 6: 1 (weight=27), 10 (weight=1), 4 (weight=46)\nVertex 7: 14 (weight=24), 13 (weight=92), 5 (weight=56), 1 (weight=54), 12 (weight=6)\nVertex 8: 12 (weight=86), 5 (weight=37)\nVertex 9: 14 (weight=6), 2 (weight=27)\nVertex 10: 4 (weight=34), 6 (weight=1)\nVertex 11: 14 (weight=42), 3 (weight=6)\nVertex 12: 1 (weight=33), 8 (weight=86), 7 (weight=6)\nVertex 13: 7 (weight=92)\nVertex 14: 1 (weight=20), 9 (weight=6), 7 (weight=24), 3 (weight=57), 4 (weight=77), 11 (weight=42)\n",
    "graph_output": "14 22\n1 12 33\n1 14 20\n12 8 86\n14 9 6\n8 5 37\n14 7 24\n1 6 27\n9 2 27\n14 3 57\n14 4 77\n4 10 34\n14 11 42\n7 13 92\n6 10 1\n4 5 21\n5 7 56\n4 2 21\n6 4 46\n1 5 71\n7 1 54\n12 7 6\n3 11 6\n",
    "vertices": [
      9,
      5
    ],
    "answer": 69,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 87 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 7 and vertex 11.\n",
    "graph_output": "15 87\n1 9\n1 11\n1 5\n1 14\n14 6\n6 15\n6 3\n3 4\n14 8\n8 7\n1 12\n4 2\n2 10\n12 13\n10 15\n10 3\n10 12\n14 4\n10 4\n2 6\n10 5\n5 12\n3 12\n11 14\n3 1\n9 11\n1 7\n14 7\n3 9\n13 4\n10 6\n14 12\n8 13\n13 5\n14 13\n1 13\n1 10\n5 8\n15 4\n5 6\n8 11\n11 6\n11 13\n4 5\n13 2\n14 15\n8 1\n10 7\n11 10\n6 9\n2 14\n5 14\n14 9\n8 2\n3 2\n13 15\n4 9\n9 7\n6 7\n10 14\n10 9\n11 5\n15 12\n5 7\n13 9\n9 15\n7 12\n11 15\n12 4\n10 8\n13 7\n5 2\n15 2\n6 13\n5 9\n15 5\n6 12\n7 4\n2 1\n12 8\n15 7\n2 12\n4 11\n2 9\n13 3\n2 11\n7 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 17 vertices and 22 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 9, 16, 15\nVertex 2: 4, 7, 13, 5, 17\nVertex 3: 12, 4\nVertex 4: 1, 14, 2, 3, 7\nVertex 5: 2, 8\nVertex 6: 11\nVertex 7: 2, 4\nVertex 8: 9, 5, 17\nVertex 9: 1, 8, 10, 17, 15\nVertex 10: 9\nVertex 11: 14, 6\nVertex 12: 16, 3\nVertex 13: 2\nVertex 14: 4, 11\nVertex 15: 1, 9\nVertex 16: 1, 12\nVertex 17: 9, 2, 8\n",
    "graph_output": "17 22\n1 4\n1 9\n1 16\n9 8\n4 14\n4 2\n16 12\n2 7\n9 10\n14 11\n11 6\n9 17\n2 13\n12 3\n2 5\n1 15\n17 2\n15 9\n3 4\n5 8\n7 4\n8 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 66 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 1 and vertex 4.\n",
    "graph_output": "12 66\n2 7\n9 10\n12 7\n8 11\n6 11\n7 5\n2 8\n1 7\n2 10\n9 5\n12 2\n7 11\n10 6\n1 10\n8 10\n4 11\n10 3\n2 5\n7 8\n12 5\n2 3\n4 8\n3 7\n4 3\n3 12\n1 6\n3 8\n11 3\n2 4\n9 7\n1 2\n4 6\n6 7\n2 11\n8 1\n9 3\n6 3\n7 10\n9 12\n12 6\n4 12\n1 12\n5 1\n12 11\n4 5\n12 8\n4 10\n11 10\n11 5\n8 5\n6 9\n10 12\n6 8\n5 3\n1 9\n7 4\n2 6\n11 1\n10 5\n5 6\n9 11\n3 1\n8 9\n4 9\n2 9\n1 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 15 vertices and 90 edges\n\nEdges (Format: Node Node):\n1 11\n1 10\n1 12\n12 15\n15 9\n15 3\n15 14\n3 6\n6 13\n11 7\n15 4\n14 2\n15 8\n11 5\n4 14\n5 8\n12 11\n12 8\n5 3\n5 13\n5 7\n3 9\n1 9\n14 12\n1 3\n14 1\n11 14\n9 14\n10 6\n2 5\n7 14\n8 10\n4 5\n14 8\n13 8\n2 12\n12 3\n7 4\n5 6\n3 14\n6 4\n13 1\n6 8\n12 6\n5 10\n15 11\n4 3\n2 8\n9 5\n6 1\n6 14\n4 1\n15 13\n6 15\n5 14\n14 13\n3 2\n13 9\n10 13\n12 5\n15 1\n13 3\n7 12\n1 8\n11 3\n4 10\n6 9\n2 10\n2 15\n1 7\n13 11\n12 9\n2 13\n3 7\n13 12\n15 5\n6 2\n4 11\n2 4\n2 11\n7 9\n4 12\n7 15\n7 13\n6 11\n15 10\n9 10\n1 2\n8 3\n11 8\n",
    "graph_output": "15 90\n1 11\n1 10\n1 12\n12 15\n15 9\n15 3\n15 14\n3 6\n6 13\n11 7\n15 4\n14 2\n15 8\n11 5\n4 14\n5 8\n12 11\n12 8\n5 3\n5 13\n5 7\n3 9\n1 9\n14 12\n1 3\n14 1\n11 14\n9 14\n10 6\n2 5\n7 14\n8 10\n4 5\n14 8\n13 8\n2 12\n12 3\n7 4\n5 6\n3 14\n6 4\n13 1\n6 8\n12 6\n5 10\n15 11\n4 3\n2 8\n9 5\n6 1\n6 14\n4 1\n15 13\n6 15\n5 14\n14 13\n3 2\n13 9\n10 13\n12 5\n15 1\n13 3\n7 12\n1 8\n11 3\n4 10\n6 9\n2 10\n2 15\n1 7\n13 11\n12 9\n2 13\n3 7\n13 12\n15 5\n6 2\n4 11\n2 4\n2 11\n7 9\n4 12\n7 15\n7 13\n6 11\n15 10\n9 10\n1 2\n8 3\n11 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 30 vertices and 29 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 1 and vertex 20.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 1 and vertex 27.\nThere is an edge between vertex 3 and vertex 26.\nThere is an edge between vertex 3 and vertex 28.\nThere is an edge between vertex 28 and vertex 22.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 28 and vertex 4.\nThere is an edge between vertex 1 and vertex 30.\nThere is an edge between vertex 22 and vertex 14.\nThere is an edge between vertex 26 and vertex 25.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 26 and vertex 16.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 8 and vertex 21.\nThere is an edge between vertex 22 and vertex 23.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 26 and vertex 29.\nThere is an edge between vertex 3 and vertex 19.\nThere is an edge between vertex 5 and vertex 24.\nThere is an edge between vertex 2 and vertex 18.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 19 and vertex 7.\n",
    "graph_output": "30 29\n1 15\n15 8\n1 20\n1 3\n3 9\n1 27\n3 26\n3 28\n28 22\n15 17\n3 11\n17 12\n28 4\n1 30\n22 14\n26 25\n8 10\n26 16\n14 2\n8 21\n22 23\n9 5\n26 29\n3 19\n5 24\n2 18\n12 6\n9 13\n19 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 11 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 2, 3\nVertex 2: 5, 6, 1, 4\nVertex 3: 5, 4, 1\nVertex 4: 1, 6, 5, 2, 3\nVertex 5: 3, 4, 2, 6\nVertex 6: 4, 2, 5\n",
    "graph_output": "6 11\n3 5\n1 4\n4 6\n5 4\n2 5\n6 2\n1 2\n2 4\n6 5\n4 3\n3 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 35,
    "description_type": "list"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 2 and vertex 1 are connected.\n\nThis is an undirected graph with 15 vertices and 86 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 2, 4, 10, 13, 14, 7, 5, 9, 11, 12, 6, 8\nVertex 2: 10, 1, 9, 7, 12, 15, 3, 11, 13, 6, 5\nVertex 3: 1, 13, 14, 4, 6, 10, 7, 11, 9, 2, 12, 15, 8\nVertex 4: 14, 10, 3, 1, 8, 6, 9, 13, 5, 15\nVertex 5: 11, 9, 14, 13, 1, 10, 4, 15, 2\nVertex 6: 15, 8, 14, 7, 3, 4, 13, 11, 1, 12, 2\nVertex 7: 11, 10, 14, 6, 9, 2, 8, 1, 15, 3, 13, 12\nVertex 8: 6, 9, 4, 11, 7, 10, 13, 12, 3, 1\nVertex 9: 5, 12, 8, 11, 15, 2, 7, 10, 13, 1, 4, 3\nVertex 10: 2, 4, 7, 14, 1, 8, 11, 9, 3, 13, 5, 15, 12\nVertex 11: 5, 15, 7, 9, 8, 12, 10, 13, 3, 6, 2, 1\nVertex 12: 9, 11, 2, 15, 3, 8, 10, 7, 1, 13, 6\nVertex 13: 15, 3, 1, 5, 6, 8, 11, 9, 10, 4, 7, 12, 14, 2\nVertex 14: 4, 5, 15, 6, 3, 10, 1, 7, 13\nVertex 15: 13, 11, 6, 14, 9, 7, 2, 12, 10, 5, 3, 4\n",
    "graph_output": "15 86\n5 11\n1 3\n13 15\n4 14\n11 15\n10 2\n15 6\n13 3\n1 2\n4 10\n9 5\n7 11\n14 5\n8 6\n15 14\n6 14\n12 9\n14 3\n10 7\n4 3\n14 10\n9 8\n1 4\n9 11\n1 10\n15 9\n1 13\n1 14\n14 7\n7 6\n8 4\n3 6\n5 13\n8 11\n9 2\n9 7\n7 2\n8 7\n12 11\n6 4\n7 1\n10 8\n5 1\n7 15\n2 12\n13 6\n10 11\n9 10\n8 13\n13 11\n13 9\n1 9\n10 3\n3 7\n10 13\n2 15\n4 9\n11 3\n4 13\n5 10\n6 11\n9 3\n12 15\n7 13\n3 2\n2 11\n3 12\n10 15\n8 12\n12 10\n4 5\n15 5\n7 12\n11 1\n12 1\n12 13\n6 1\n15 3\n14 13\n6 12\n2 13\n6 2\n8 3\n15 4\n8 1\n5 2\n",
    "vertices": [
      2,
      1
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 16 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 1 and vertex 7.\n",
    "graph_output": "8 16\n1 4\n1 6\n1 5\n5 3\n3 2\n2 7\n7 8\n2 5\n4 6\n5 7\n2 1\n2 8\n4 2\n6 8\n7 3\n1 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2631,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 81 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 12, 15, 9, 13, 11, 2, 6, 14, 10, 3, 4\nVertex 2: 15, 13, 5, 1, 4, 11, 12, 14, 7, 3, 6\nVertex 3: 7, 14, 13, 11, 8, 1, 2, 12, 6\nVertex 4: 8, 5, 13, 2, 11, 9, 15, 7, 6, 10, 14, 1\nVertex 5: 15, 14, 8, 2, 4, 9, 10\nVertex 6: 12, 8, 10, 7, 9, 15, 1, 13, 11, 4, 3, 14, 2\nVertex 7: 1, 10, 3, 6, 14, 15, 12, 4, 9, 8, 2\nVertex 8: 6, 4, 15, 5, 10, 3, 11, 14, 7, 12\nVertex 9: 1, 5, 6, 4, 11, 15, 12, 7, 13, 10\nVertex 10: 7, 6, 11, 5, 14, 12, 8, 13, 1, 9, 4\nVertex 11: 12, 15, 1, 10, 4, 3, 9, 13, 14, 2, 6, 8\nVertex 12: 1, 6, 11, 7, 10, 13, 9, 2, 8, 3\nVertex 13: 1, 14, 2, 4, 3, 11, 12, 10, 9, 6, 15\nVertex 14: 3, 13, 5, 15, 7, 10, 11, 1, 8, 4, 2, 6\nVertex 15: 1, 2, 5, 8, 11, 14, 7, 6, 9, 4, 13\n",
    "graph_output": "15 81\n1 7\n1 12\n12 6\n6 8\n1 15\n1 9\n7 10\n7 3\n15 2\n12 11\n3 14\n1 13\n15 5\n8 4\n6 10\n14 13\n2 13\n8 15\n11 15\n14 5\n8 5\n1 11\n7 6\n2 5\n15 14\n4 5\n4 13\n2 1\n9 5\n10 11\n4 2\n7 14\n13 3\n5 10\n4 11\n9 6\n10 14\n9 4\n11 3\n9 11\n15 7\n12 7\n15 6\n15 9\n6 1\n13 11\n12 10\n14 11\n10 8\n1 14\n12 13\n4 15\n7 4\n10 13\n12 9\n7 9\n13 9\n11 2\n6 13\n11 6\n2 12\n1 10\n10 9\n8 3\n8 11\n6 4\n10 4\n8 14\n14 4\n1 3\n8 7\n14 2\n12 8\n2 7\n3 2\n4 1\n3 12\n3 6\n6 14\n2 6\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 15 to vertex 6 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 119 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8 with a weight of 22.\nThere is an edge between vertex 1 and vertex 3 with a weight of 61.\nThere is an edge between vertex 8 and vertex 9 with a weight of 38.\nThere is an edge between vertex 8 and vertex 12 with a weight of 26.\nThere is an edge between vertex 8 and vertex 5 with a weight of 79.\nThere is an edge between vertex 3 and vertex 15 with a weight of 95.\nThere is an edge between vertex 1 and vertex 13 with a weight of 86.\nThere is an edge between vertex 5 and vertex 2 with a weight of 25.\nThere is an edge between vertex 12 and vertex 4 with a weight of 3.\nThere is an edge between vertex 8 and vertex 10 with a weight of 53.\nThere is an edge between vertex 12 and vertex 11 with a weight of 37.\nThere is an edge between vertex 4 and vertex 16 with a weight of 19.\nThere is an edge between vertex 3 and vertex 7 with a weight of 41.\nThere is an edge between vertex 2 and vertex 14 with a weight of 96.\nThere is an edge between vertex 13 and vertex 6 with a weight of 11.\nThere is an edge between vertex 7 and vertex 10 with a weight of 91.\nThere is an edge between vertex 12 and vertex 2 with a weight of 31.\nThere is an edge between vertex 7 and vertex 9 with a weight of 97.\nThere is an edge between vertex 6 and vertex 11 with a weight of 57.\nThere is an edge between vertex 5 and vertex 4 with a weight of 69.\nThere is an edge between vertex 12 and vertex 16 with a weight of 58.\nThere is an edge between vertex 5 and vertex 16 with a weight of 21.\nThere is an edge between vertex 1 and vertex 12 with a weight of 41.\nThere is an edge between vertex 1 and vertex 5 with a weight of 46.\nThere is an edge between vertex 5 and vertex 6 with a weight of 43.\nThere is an edge between vertex 13 and vertex 10 with a weight of 93.\nThere is an edge between vertex 11 and vertex 15 with a weight of 86.\nThere is an edge between vertex 4 and vertex 15 with a weight of 69.\nThere is an edge between vertex 10 and vertex 4 with a weight of 42.\nThere is an edge between vertex 5 and vertex 15 with a weight of 54.\nThere is an edge between vertex 9 and vertex 15 with a weight of 86.\nThere is an edge between vertex 15 and vertex 16 with a weight of 55.\nThere is an edge between vertex 7 and vertex 14 with a weight of 81.\nThere is an edge between vertex 13 and vertex 12 with a weight of 23.\nThere is an edge between vertex 16 and vertex 6 with a weight of 81.\nThere is an edge between vertex 3 and vertex 4 with a weight of 35.\nThere is an edge between vertex 13 and vertex 15 with a weight of 100.\nThere is an edge between vertex 5 and vertex 14 with a weight of 6.\nThere is an edge between vertex 8 and vertex 2 with a weight of 22.\nThere is an edge between vertex 4 and vertex 7 with a weight of 18.\nThere is an edge between vertex 9 and vertex 14 with a weight of 11.\nThere is an edge between vertex 14 and vertex 15 with a weight of 86.\nThere is an edge between vertex 2 and vertex 4 with a weight of 49.\nThere is an edge between vertex 14 and vertex 13 with a weight of 21.\nThere is an edge between vertex 11 and vertex 2 with a weight of 46.\nThere is an edge between vertex 6 and vertex 3 with a weight of 20.\nThere is an edge between vertex 12 and vertex 6 with a weight of 89.\nThere is an edge between vertex 3 and vertex 2 with a weight of 39.\nThere is an edge between vertex 3 and vertex 16 with a weight of 68.\nThere is an edge between vertex 16 and vertex 7 with a weight of 41.\nThere is an edge between vertex 8 and vertex 3 with a weight of 98.\nThere is an edge between vertex 14 and vertex 6 with a weight of 86.\nThere is an edge between vertex 10 and vertex 15 with a weight of 10.\nThere is an edge between vertex 11 and vertex 3 with a weight of 96.\nThere is an edge between vertex 5 and vertex 12 with a weight of 6.\nThere is an edge between vertex 3 and vertex 10 with a weight of 88.\nThere is an edge between vertex 13 and vertex 3 with a weight of 31.\nThere is an edge between vertex 9 and vertex 2 with a weight of 16.\nThere is an edge between vertex 6 and vertex 15 with a weight of 87.\nThere is an edge between vertex 9 and vertex 4 with a weight of 32.\nThere is an edge between vertex 8 and vertex 6 with a weight of 67.\nThere is an edge between vertex 1 and vertex 9 with a weight of 82.\nThere is an edge between vertex 16 and vertex 9 with a weight of 93.\nThere is an edge between vertex 11 and vertex 8 with a weight of 39.\nThere is an edge between vertex 15 and vertex 8 with a weight of 73.\nThere is an edge between vertex 12 and vertex 15 with a weight of 74.\nThere is an edge between vertex 6 and vertex 10 with a weight of 75.\nThere is an edge between vertex 1 and vertex 11 with a weight of 98.\nThere is an edge between vertex 6 and vertex 2 with a weight of 89.\nThere is an edge between vertex 7 and vertex 2 with a weight of 95.\nThere is an edge between vertex 4 and vertex 11 with a weight of 71.\nThere is an edge between vertex 15 and vertex 7 with a weight of 1.\nThere is an edge between vertex 12 and vertex 7 with a weight of 69.\nThere is an edge between vertex 14 and vertex 10 with a weight of 5.\nThere is an edge between vertex 6 and vertex 7 with a weight of 21.\nThere is an edge between vertex 16 and vertex 8 with a weight of 23.\nThere is an edge between vertex 2 and vertex 1 with a weight of 37.\nThere is an edge between vertex 12 and vertex 9 with a weight of 25.\nThere is an edge between vertex 10 and vertex 2 with a weight of 24.\nThere is an edge between vertex 11 and vertex 16 with a weight of 65.\nThere is an edge between vertex 16 and vertex 13 with a weight of 12.\nThere is an edge between vertex 9 and vertex 6 with a weight of 32.\nThere is an edge between vertex 4 and vertex 14 with a weight of 27.\nThere is an edge between vertex 9 and vertex 11 with a weight of 83.\nThere is an edge between vertex 6 and vertex 1 with a weight of 33.\nThere is an edge between vertex 2 and vertex 16 with a weight of 64.\nThere is an edge between vertex 8 and vertex 13 with a weight of 10.\nThere is an edge between vertex 14 and vertex 8 with a weight of 66.\nThere is an edge between vertex 4 and vertex 6 with a weight of 68.\nThere is an edge between vertex 16 and vertex 1 with a weight of 20.\nThere is an edge between vertex 14 and vertex 1 with a weight of 38.\nThere is an edge between vertex 9 and vertex 13 with a weight of 42.\nThere is an edge between vertex 11 and vertex 5 with a weight of 45.\nThere is an edge between vertex 5 and vertex 9 with a weight of 76.\nThere is an edge between vertex 4 and vertex 1 with a weight of 37.\nThere is an edge between vertex 3 and vertex 5 with a weight of 40.\nThere is an edge between vertex 8 and vertex 4 with a weight of 35.\nThere is an edge between vertex 1 and vertex 15 with a weight of 88.\nThere is an edge between vertex 3 and vertex 9 with a weight of 96.\nThere is an edge between vertex 11 and vertex 14 with a weight of 41.\nThere is an edge between vertex 10 and vertex 5 with a weight of 19.\nThere is an edge between vertex 10 and vertex 16 with a weight of 35.\nThere is an edge between vertex 11 and vertex 10 with a weight of 53.\nThere is an edge between vertex 7 and vertex 8 with a weight of 44.\nThere is an edge between vertex 9 and vertex 10 with a weight of 54.\nThere is an edge between vertex 16 and vertex 14 with a weight of 90.\nThere is an edge between vertex 15 and vertex 2 with a weight of 4.\nThere is an edge between vertex 3 and vertex 12 with a weight of 44.\nThere is an edge between vertex 11 and vertex 13 with a weight of 2.\nThere is an edge between vertex 13 and vertex 2 with a weight of 73.\nThere is an edge between vertex 11 and vertex 7 with a weight of 59.\nThere is an edge between vertex 7 and vertex 5 with a weight of 16.\nThere is an edge between vertex 1 and vertex 10 with a weight of 47.\nThere is an edge between vertex 3 and vertex 14 with a weight of 18.\nThere is an edge between vertex 7 and vertex 1 with a weight of 28.\nThere is an edge between vertex 4 and vertex 13 with a weight of 89.\nThere is an edge between vertex 7 and vertex 13 with a weight of 29.\nThere is an edge between vertex 10 and vertex 12 with a weight of 67.\nThere is an edge between vertex 14 and vertex 12 with a weight of 99.\n",
    "graph_output": "16 119\n1 8 22\n1 3 61\n8 9 38\n8 12 26\n8 5 79\n3 15 95\n1 13 86\n5 2 25\n12 4 3\n8 10 53\n12 11 37\n4 16 19\n3 7 41\n2 14 96\n13 6 11\n7 10 91\n12 2 31\n7 9 97\n6 11 57\n5 4 69\n12 16 58\n5 16 21\n1 12 41\n1 5 46\n5 6 43\n13 10 93\n11 15 86\n4 15 69\n10 4 42\n5 15 54\n9 15 86\n15 16 55\n7 14 81\n13 12 23\n16 6 81\n3 4 35\n13 15 100\n5 14 6\n8 2 22\n4 7 18\n9 14 11\n14 15 86\n2 4 49\n14 13 21\n11 2 46\n6 3 20\n12 6 89\n3 2 39\n3 16 68\n16 7 41\n8 3 98\n14 6 86\n10 15 10\n11 3 96\n5 12 6\n3 10 88\n13 3 31\n9 2 16\n6 15 87\n9 4 32\n8 6 67\n1 9 82\n16 9 93\n11 8 39\n15 8 73\n12 15 74\n6 10 75\n1 11 98\n6 2 89\n7 2 95\n4 11 71\n15 7 1\n12 7 69\n14 10 5\n6 7 21\n16 8 23\n2 1 37\n12 9 25\n10 2 24\n11 16 65\n16 13 12\n9 6 32\n4 14 27\n9 11 83\n6 1 33\n2 16 64\n8 13 10\n14 8 66\n4 6 68\n16 1 20\n14 1 38\n9 13 42\n11 5 45\n5 9 76\n4 1 37\n3 5 40\n8 4 35\n1 15 88\n3 9 96\n11 14 41\n10 5 19\n10 16 35\n11 10 53\n7 8 44\n9 10 54\n16 14 90\n15 2 4\n3 12 44\n11 13 2\n13 2 73\n11 7 59\n7 5 16\n1 10 47\n3 14 18\n7 1 28\n4 13 89\n7 13 29\n10 12 67\n14 12 99\n",
    "vertices": [
      15,
      6
    ],
    "answer": 22,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 10 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 54 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 3 (capacity=2), 5 (capacity=5), 8 (capacity=8), 4 (capacity=9), 10 (capacity=7), 9 (capacity=8), 11 (capacity=1), 6 (capacity=6), 7 (capacity=5), 2 (capacity=4)\nVertex 2: 8 (capacity=5), 3 (capacity=9), 11 (capacity=5), 9 (capacity=2), 5 (capacity=10), 10 (capacity=3), 4 (capacity=2), 7 (capacity=4), 6 (capacity=7), 1 (capacity=4)\nVertex 3: 1 (capacity=2), 8 (capacity=2), 6 (capacity=7), 4 (capacity=2), 2 (capacity=9), 11 (capacity=8), 7 (capacity=5), 5 (capacity=8), 10 (capacity=5), 9 (capacity=5)\nVertex 4: 8 (capacity=10), 3 (capacity=2), 7 (capacity=9), 1 (capacity=9), 9 (capacity=7), 6 (capacity=1), 11 (capacity=8), 10 (capacity=10), 5 (capacity=6), 2 (capacity=2)\nVertex 5: 1 (capacity=5), 7 (capacity=5), 10 (capacity=2), 3 (capacity=8), 6 (capacity=5), 9 (capacity=9), 4 (capacity=6), 2 (capacity=10), 8 (capacity=1)\nVertex 6: 3 (capacity=7), 9 (capacity=3), 11 (capacity=6), 7 (capacity=3), 10 (capacity=10), 4 (capacity=1), 5 (capacity=5), 8 (capacity=4), 1 (capacity=6), 2 (capacity=7)\nVertex 7: 5 (capacity=5), 10 (capacity=1), 3 (capacity=5), 4 (capacity=9), 8 (capacity=3), 9 (capacity=3), 6 (capacity=3), 11 (capacity=3), 1 (capacity=5), 2 (capacity=4)\nVertex 8: 3 (capacity=2), 4 (capacity=10), 2 (capacity=5), 1 (capacity=8), 7 (capacity=3), 9 (capacity=6), 11 (capacity=5), 6 (capacity=4), 5 (capacity=1), 10 (capacity=7)\nVertex 9: 6 (capacity=3), 4 (capacity=7), 7 (capacity=3), 2 (capacity=2), 8 (capacity=6), 1 (capacity=8), 3 (capacity=5), 5 (capacity=9), 10 (capacity=6), 11 (capacity=10)\nVertex 10: 7 (capacity=1), 5 (capacity=2), 11 (capacity=10), 3 (capacity=5), 1 (capacity=7), 6 (capacity=10), 4 (capacity=10), 2 (capacity=3), 9 (capacity=6), 8 (capacity=7)\nVertex 11: 6 (capacity=6), 3 (capacity=8), 10 (capacity=10), 2 (capacity=5), 4 (capacity=8), 1 (capacity=1), 7 (capacity=3), 8 (capacity=5), 9 (capacity=10)\n",
    "graph_output": "11 54\n1 3 2\n1 5 5\n3 8 2\n5 7 5\n3 6 7\n6 9 3\n8 4 10\n6 11 6\n8 2 5\n7 10 1\n4 3 2\n3 2 9\n11 3 8\n10 5 2\n3 7 5\n4 7 9\n8 1 8\n4 1 9\n10 11 10\n4 9 7\n8 7 3\n2 11 5\n9 7 3\n2 9 2\n3 5 8\n10 3 5\n8 9 6\n10 1 7\n7 6 3\n9 1 8\n6 10 10\n4 6 1\n11 4 8\n11 1 1\n7 11 3\n9 3 5\n10 4 10\n5 6 5\n8 11 5\n9 5 9\n4 5 6\n6 8 4\n1 6 6\n5 2 10\n2 10 3\n10 9 6\n4 2 2\n11 9 10\n7 1 5\n7 2 4\n6 2 7\n5 8 1\n1 2 4\n10 8 7\n",
    "vertices": [
      10,
      2
    ],
    "answer": 51,
    "description_type": "list"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 29, 5, 8\nVertex 2: 10\nVertex 3: 29\nVertex 4: 18, 27, 24, 23\nVertex 5: 1\nVertex 6: 15, 18, 25, 9, 26\nVertex 7: 15\nVertex 8: 1\nVertex 9: 6\nVertex 10: 15, 2\nVertex 11: 19, 13\nVertex 12: 16\nVertex 13: 11\nVertex 14: 28\nVertex 15: 1, 10, 6, 21, 7\nVertex 16: 25, 17, 12\nVertex 17: 16\nVertex 18: 6, 4\nVertex 19: 24, 11\nVertex 20: 25\nVertex 21: 15\nVertex 22: 23\nVertex 23: 4, 22\nVertex 24: 4, 19\nVertex 25: 6, 16, 28, 20\nVertex 26: 6\nVertex 27: 4\nVertex 28: 25, 14\nVertex 29: 1, 3\n",
    "graph_output": "29 28\n1 15\n15 10\n15 6\n6 18\n1 29\n18 4\n6 25\n6 9\n4 27\n29 3\n10 2\n4 24\n24 19\n25 16\n16 17\n1 5\n25 28\n15 21\n6 26\n16 12\n4 23\n19 11\n15 7\n1 8\n25 20\n28 14\n23 22\n11 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 17,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 8 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 3, 5, 4\nVertex 2: 1, 4, 6\nVertex 3: 1, 5\nVertex 4: 2, 1, 5\nVertex 5: 1, 4, 3\nVertex 6: 2\n",
    "graph_output": "6 8\n1 2\n1 3\n2 4\n2 6\n1 5\n4 1\n4 5\n3 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 21,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 54 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 13 (capacity=3), 11 (capacity=10), 10 (capacity=9), 6 (capacity=8), 12 (capacity=4), 4 (capacity=6), 9 (capacity=7), 5 (capacity=9), 7 (capacity=5)\nVertex 2: 12 (capacity=1), 3 (capacity=5), 8 (capacity=2), 4 (capacity=6), 7 (capacity=3), 5 (capacity=9)\nVertex 3: 2 (capacity=5), 5 (capacity=9), 7 (capacity=8), 9 (capacity=6), 11 (capacity=8), 12 (capacity=7), 8 (capacity=8), 6 (capacity=8)\nVertex 4: 10 (capacity=4), 8 (capacity=3), 1 (capacity=6), 2 (capacity=6), 6 (capacity=4), 5 (capacity=8), 11 (capacity=9), 9 (capacity=6), 7 (capacity=5)\nVertex 5: 3 (capacity=9), 13 (capacity=4), 11 (capacity=9), 4 (capacity=8), 1 (capacity=9), 10 (capacity=4), 7 (capacity=5), 2 (capacity=9)\nVertex 6: 1 (capacity=8), 4 (capacity=4), 10 (capacity=1), 8 (capacity=3), 13 (capacity=3), 3 (capacity=8), 7 (capacity=1), 9 (capacity=1)\nVertex 7: 12 (capacity=8), 3 (capacity=8), 2 (capacity=3), 13 (capacity=8), 9 (capacity=6), 8 (capacity=7), 5 (capacity=5), 1 (capacity=5), 4 (capacity=5), 10 (capacity=7), 6 (capacity=1)\nVertex 8: 2 (capacity=2), 4 (capacity=3), 7 (capacity=7), 10 (capacity=9), 13 (capacity=6), 3 (capacity=8), 12 (capacity=4), 6 (capacity=3), 11 (capacity=5)\nVertex 9: 10 (capacity=9), 1 (capacity=7), 3 (capacity=6), 7 (capacity=6), 4 (capacity=6), 12 (capacity=9), 6 (capacity=1)\nVertex 10: 1 (capacity=9), 9 (capacity=9), 4 (capacity=4), 13 (capacity=4), 6 (capacity=1), 12 (capacity=8), 5 (capacity=4), 8 (capacity=9), 7 (capacity=7)\nVertex 11: 1 (capacity=10), 12 (capacity=3), 5 (capacity=9), 3 (capacity=8), 4 (capacity=9), 13 (capacity=2), 8 (capacity=5)\nVertex 12: 11 (capacity=3), 7 (capacity=8), 2 (capacity=1), 1 (capacity=4), 10 (capacity=8), 3 (capacity=7), 8 (capacity=4), 9 (capacity=9), 13 (capacity=9)\nVertex 13: 1 (capacity=3), 5 (capacity=4), 10 (capacity=4), 7 (capacity=8), 11 (capacity=2), 8 (capacity=6), 6 (capacity=3), 12 (capacity=9)\n",
    "graph_output": "13 54\n1 13 3\n1 11 10\n1 10 9\n11 12 3\n1 6 8\n12 7 8\n12 2 1\n10 9 9\n2 3 5\n10 4 4\n2 8 2\n3 5 9\n4 8 3\n12 1 4\n1 4 6\n4 2 6\n5 13 4\n4 6 4\n1 9 7\n13 10 4\n3 7 8\n7 2 3\n5 11 9\n5 4 8\n9 3 6\n7 13 8\n10 6 1\n10 12 8\n9 7 6\n3 11 8\n1 5 9\n4 11 9\n11 13 2\n5 10 4\n4 9 6\n8 7 7\n3 12 7\n5 7 5\n8 10 9\n8 13 6\n1 7 5\n7 4 5\n5 2 9\n8 3 8\n12 8 4\n6 8 3\n10 7 7\n12 9 9\n13 6 3\n11 8 5\n6 3 8\n12 13 9\n7 6 1\n6 9 1\n",
    "vertices": [
      3,
      2
    ],
    "answer": 26,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 13 vertices and 14 edges\n\nEdges (Format: Node Node):\n13 8\n9 12\n11 10\n10 7\n6 4\n9 11\n9 13\n5 11\n7 6\n1 4\n2 12\n12 3\n7 5\n9 10\n",
    "graph_output": "13 14\n13 8\n9 12\n11 10\n10 7\n6 4\n9 11\n9 13\n5 11\n7 6\n1 4\n2 12\n12 3\n7 5\n9 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 105 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 13 and vertex 17.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 10 and vertex 17.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 17 and vertex 6.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 17 and vertex 14.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 7 and vertex 13.\n",
    "graph_output": "17 105\n16 2\n6 3\n3 4\n13 1\n16 6\n9 12\n14 8\n16 10\n13 9\n15 6\n16 3\n1 12\n8 5\n11 10\n10 5\n16 5\n16 1\n14 12\n2 3\n15 2\n15 3\n8 7\n1 10\n3 13\n15 7\n6 13\n13 17\n4 14\n5 3\n11 16\n8 1\n15 10\n4 8\n4 16\n11 4\n2 10\n12 4\n3 7\n6 5\n9 16\n11 6\n6 2\n7 12\n2 7\n2 8\n15 9\n6 9\n10 13\n2 5\n2 1\n11 1\n4 2\n8 6\n1 14\n10 17\n10 7\n5 7\n13 16\n11 8\n15 17\n15 16\n12 15\n14 9\n4 10\n13 5\n13 8\n15 4\n16 12\n2 9\n2 14\n12 8\n17 7\n7 9\n10 8\n7 6\n8 9\n17 6\n11 17\n17 14\n17 4\n12 5\n5 9\n5 1\n13 12\n11 2\n13 11\n14 5\n16 8\n9 1\n1 3\n15 1\n12 6\n14 11\n15 8\n6 14\n14 3\n9 10\n5 4\n12 3\n17 9\n11 5\n12 11\n14 10\n14 13\n7 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 18, 20, 30, 11\nVertex 2: 5, 21, 3\nVertex 3: 2\nVertex 4: 20, 9, 25\nVertex 5: 17, 29, 2, 19\nVertex 6: 27\nVertex 7: 27, 10\nVertex 8: 18\nVertex 9: 4\nVertex 10: 7\nVertex 11: 1\nVertex 12: 23\nVertex 13: 23\nVertex 14: 27\nVertex 15: 30, 24\nVertex 16: 25\nVertex 17: 20, 5\nVertex 18: 1, 8\nVertex 19: 5\nVertex 20: 1, 17, 26, 23, 4, 28\nVertex 21: 2\nVertex 22: 23\nVertex 23: 20, 13, 12, 22\nVertex 24: 15\nVertex 25: 4, 16\nVertex 26: 20\nVertex 27: 30, 14, 7, 6\nVertex 28: 20\nVertex 29: 5\nVertex 30: 1, 27, 15\n",
    "graph_output": "30 29\n1 18\n1 20\n1 30\n30 27\n27 14\n18 8\n20 17\n20 26\n20 23\n20 4\n23 13\n17 5\n23 12\n4 9\n30 15\n15 24\n27 7\n1 11\n5 29\n5 2\n5 19\n2 21\n27 6\n4 25\n20 28\n7 10\n2 3\n23 22\n25 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 19,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 12 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 16 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 13 (capacity=5), 4 (capacity=8), 5 (capacity=9), 7 (capacity=4)\nVertex 2: 13 (capacity=10)\nVertex 3: 8 (capacity=10)\nVertex 4: 1 (capacity=8), 12 (capacity=5)\nVertex 5: 1 (capacity=9), 12 (capacity=8), 8 (capacity=9)\nVertex 6: 8 (capacity=10)\nVertex 7: 12 (capacity=6), 10 (capacity=3), 1 (capacity=4)\nVertex 8: 13 (capacity=9), 3 (capacity=10), 6 (capacity=10), 5 (capacity=9)\nVertex 9: 12 (capacity=10)\nVertex 10: 7 (capacity=3), 13 (capacity=9)\nVertex 11: 12 (capacity=9)\nVertex 12: 4 (capacity=5), 11 (capacity=9), 7 (capacity=6), 9 (capacity=10), 5 (capacity=8)\nVertex 13: 1 (capacity=5), 8 (capacity=9), 2 (capacity=10), 10 (capacity=9)\n",
    "graph_output": "13 16\n1 13 5\n1 4 8\n1 5 9\n4 12 5\n13 8 9\n8 3 10\n8 6 10\n12 11 9\n12 7 6\n13 2 10\n12 9 10\n7 10 3\n13 10 9\n5 12 8\n8 5 9\n7 1 4\n",
    "vertices": [
      3,
      12
    ],
    "answer": 10,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 50 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 5, 4, 10, 9, 7, 11, 6, 8\nVertex 2: 11, 9, 1, 4, 6, 5, 7\nVertex 3: 7, 10, 9, 8, 11, 5, 6\nVertex 4: 1, 2, 10, 6, 8, 11, 9, 7, 5\nVertex 5: 1, 9, 11, 8, 10, 3, 2, 7, 6, 4\nVertex 6: 8, 9, 4, 7, 2, 11, 1, 10, 3, 5\nVertex 7: 3, 9, 8, 10, 1, 6, 11, 5, 4, 2\nVertex 8: 6, 5, 7, 3, 10, 9, 4, 11, 1\nVertex 9: 2, 5, 10, 3, 7, 1, 6, 11, 8, 4\nVertex 10: 11, 3, 1, 9, 4, 7, 8, 5, 6\nVertex 11: 2, 10, 5, 3, 9, 1, 6, 7, 4, 8\n",
    "graph_output": "11 50\n11 2\n2 9\n3 7\n11 10\n3 10\n2 1\n1 5\n1 4\n9 5\n10 1\n8 6\n10 9\n2 4\n3 9\n7 9\n9 1\n11 5\n8 5\n10 4\n8 7\n8 3\n10 7\n8 10\n5 10\n6 9\n11 3\n7 1\n11 9\n9 8\n6 4\n11 1\n6 7\n6 2\n8 4\n11 6\n11 7\n5 3\n5 2\n5 7\n1 6\n4 11\n4 9\n11 8\n6 10\n4 7\n2 7\n3 6\n5 6\n4 5\n1 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 126,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 61 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 5, 11, 8, 9, 2, 4, 7, 13, 6, 10\nVertex 2: 3, 4, 6, 12, 1, 10, 9, 5, 7, 11\nVertex 3: 1, 12, 2, 11, 9, 13, 6, 4, 8\nVertex 4: 9, 12, 2, 7, 1, 5, 8, 13, 3\nVertex 5: 11, 1, 9, 13, 8, 4, 2, 7, 12, 6\nVertex 6: 13, 7, 8, 11, 2, 9, 1, 3, 5\nVertex 7: 6, 10, 13, 4, 1, 12, 5, 8, 11, 2\nVertex 8: 6, 11, 1, 9, 5, 4, 7, 3\nVertex 9: 4, 5, 8, 1, 10, 11, 13, 2, 6, 3, 12\nVertex 10: 12, 11, 7, 9, 2, 1\nVertex 11: 5, 10, 12, 1, 6, 8, 9, 3, 13, 7, 2\nVertex 12: 10, 11, 13, 3, 4, 2, 7, 5, 9\nVertex 13: 6, 12, 7, 5, 1, 9, 11, 3, 4\n",
    "graph_output": "13 61\n1 3\n6 13\n7 6\n10 12\n5 11\n11 10\n5 1\n7 10\n12 11\n12 13\n3 12\n9 4\n4 12\n1 11\n6 8\n13 7\n2 3\n9 5\n11 6\n4 2\n5 13\n11 8\n8 1\n9 8\n1 9\n8 5\n2 6\n10 9\n7 4\n12 2\n9 11\n1 2\n1 4\n1 7\n13 1\n10 2\n9 13\n11 3\n13 11\n5 4\n9 2\n7 12\n4 8\n5 2\n6 9\n7 5\n7 8\n11 7\n7 2\n1 6\n12 5\n3 9\n10 1\n13 3\n4 13\n6 3\n3 4\n3 8\n2 11\n5 6\n9 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 134,
    "description_type": "list"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 109 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 17 and vertex 3.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 2 and vertex 16.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 17 and vertex 6.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 13 and vertex 17.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 17 and vertex 10.\nThere is an edge between vertex 17 and vertex 16.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 17 and vertex 15.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 7 and vertex 9.\n",
    "graph_output": "17 109\n7 15\n10 6\n17 3\n17 7\n16 8\n13 7\n13 10\n12 7\n13 4\n7 1\n15 13\n5 7\n7 10\n2 6\n5 15\n2 16\n4 17\n3 5\n1 15\n1 16\n2 4\n11 15\n17 6\n9 2\n9 10\n3 6\n14 5\n3 7\n12 8\n2 14\n1 11\n1 8\n1 17\n13 3\n4 1\n14 17\n14 7\n13 17\n16 10\n2 3\n8 4\n5 1\n11 3\n5 2\n12 2\n11 14\n9 6\n1 6\n15 9\n15 16\n12 14\n16 14\n6 13\n4 7\n8 14\n3 15\n8 10\n4 11\n11 9\n4 15\n15 12\n17 12\n15 8\n17 10\n17 16\n11 8\n9 3\n11 6\n11 17\n13 5\n2 7\n17 2\n15 6\n3 12\n10 5\n7 11\n4 14\n10 1\n12 11\n12 6\n14 6\n13 8\n6 4\n17 15\n1 2\n13 14\n11 10\n4 9\n3 1\n14 15\n15 2\n5 11\n1 14\n17 8\n9 8\n3 16\n13 9\n8 5\n8 7\n12 10\n10 15\n6 8\n13 11\n10 3\n16 9\n1 13\n5 12\n4 16\n7 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 19 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 10 and vertex 13.\n",
    "graph_output": "16 19\n11 13\n11 3\n1 11\n14 7\n4 10\n5 11\n6 3\n12 14\n5 7\n12 2\n7 12\n4 13\n1 10\n3 8\n8 7\n11 15\n11 10\n15 5\n10 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 9 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 12 vertices and 61 edges\n\nEdges (Format: Node Node Capacity):\n1 3 8\n1 2 8\n3 10 5\n3 4 7\n4 12 3\n4 5 8\n1 9 2\n3 6 9\n4 11 9\n3 8 9\n11 7 8\n1 6 9\n7 3 4\n12 5 5\n10 9 10\n1 12 1\n5 2 5\n2 3 5\n1 11 8\n3 9 4\n11 6 9\n2 6 2\n12 9 4\n2 12 3\n10 5 3\n7 6 5\n1 8 7\n9 5 6\n8 10 3\n11 10 4\n6 8 3\n4 9 4\n5 7 3\n3 5 1\n2 10 9\n6 12 3\n7 8 4\n12 10 4\n10 6 9\n6 9 5\n5 8 5\n2 7 1\n8 12 7\n9 7 4\n4 2 4\n7 12 1\n11 8 9\n9 8 3\n4 8 3\n12 11 8\n9 2 6\n2 8 5\n7 10 5\n6 5 6\n6 4 4\n1 5 3\n11 9 5\n4 10 2\n4 1 3\n10 1 8\n5 11 1\n",
    "graph_output": "12 61\n1 3 8\n1 2 8\n3 10 5\n3 4 7\n4 12 3\n4 5 8\n1 9 2\n3 6 9\n4 11 9\n3 8 9\n11 7 8\n1 6 9\n7 3 4\n12 5 5\n10 9 10\n1 12 1\n5 2 5\n2 3 5\n1 11 8\n3 9 4\n11 6 9\n2 6 2\n12 9 4\n2 12 3\n10 5 3\n7 6 5\n1 8 7\n9 5 6\n8 10 3\n11 10 4\n6 8 3\n4 9 4\n5 7 3\n3 5 1\n2 10 9\n6 12 3\n7 8 4\n12 10 4\n10 6 9\n6 9 5\n5 8 5\n2 7 1\n8 12 7\n9 7 4\n4 2 4\n7 12 1\n11 8 9\n9 8 3\n4 8 3\n12 11 8\n9 2 6\n2 8 5\n7 10 5\n6 5 6\n6 4 4\n1 5 3\n11 9 5\n4 10 2\n4 1 3\n10 1 8\n5 11 1\n",
    "vertices": [
      9,
      6
    ],
    "answer": 53,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 112 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 13, 9, 2, 12, 11, 7, 8, 6, 15, 3, 14, 16, 10, 5\nVertex 2: 1, 6, 5, 10, 11, 15, 12, 13, 4, 16, 9, 8, 14, 7, 3\nVertex 3: 13, 4, 10, 15, 5, 8, 6, 14, 1, 16, 7, 11, 2\nVertex 4: 12, 15, 3, 8, 6, 2, 11, 13, 10, 14, 5, 16, 9\nVertex 5: 15, 13, 2, 12, 7, 3, 14, 6, 11, 8, 16, 9, 10, 1, 4\nVertex 6: 2, 15, 11, 7, 14, 1, 4, 13, 3, 5, 10, 9, 8, 16\nVertex 7: 1, 14, 10, 6, 11, 12, 5, 3, 16, 13, 9, 15, 8, 2\nVertex 8: 11, 15, 1, 16, 4, 12, 13, 3, 10, 5, 9, 2, 6, 7, 14\nVertex 9: 1, 14, 13, 10, 15, 11, 16, 2, 12, 6, 8, 5, 7, 4\nVertex 10: 11, 2, 9, 13, 7, 3, 15, 12, 6, 8, 4, 14, 1, 5\nVertex 11: 1, 8, 10, 2, 6, 7, 9, 4, 5, 14, 13, 16, 3, 12\nVertex 12: 1, 4, 14, 7, 5, 2, 8, 13, 10, 16, 9, 15, 11\nVertex 13: 1, 3, 16, 5, 9, 10, 12, 2, 8, 6, 15, 4, 11, 7\nVertex 14: 9, 7, 12, 6, 5, 15, 3, 1, 11, 4, 10, 16, 2, 8\nVertex 15: 8, 5, 4, 6, 2, 9, 10, 3, 1, 14, 16, 13, 7, 12\nVertex 16: 13, 8, 9, 2, 15, 12, 3, 5, 1, 7, 11, 6, 14, 4\n",
    "graph_output": "16 112\n1 13\n1 9\n13 3\n1 2\n13 16\n1 12\n1 11\n11 8\n12 4\n11 10\n9 14\n8 15\n1 7\n15 5\n2 6\n15 4\n5 13\n9 13\n7 14\n2 5\n6 15\n1 8\n14 12\n10 2\n10 9\n13 10\n2 11\n6 11\n7 10\n2 15\n6 7\n3 4\n7 11\n7 12\n15 9\n6 14\n5 12\n3 10\n8 16\n8 4\n15 10\n9 11\n15 3\n12 2\n8 12\n12 13\n7 5\n2 13\n8 13\n3 5\n6 1\n9 16\n4 6\n15 1\n4 2\n5 14\n14 15\n3 8\n10 12\n6 13\n6 3\n4 11\n5 6\n2 16\n9 2\n10 6\n15 16\n16 12\n3 14\n5 11\n12 9\n13 15\n10 8\n13 4\n4 10\n1 3\n5 8\n6 9\n3 16\n9 8\n8 2\n14 1\n3 7\n16 5\n14 11\n8 6\n13 11\n1 16\n7 16\n4 14\n5 9\n10 14\n16 11\n1 10\n13 7\n7 9\n10 5\n5 1\n3 11\n16 6\n5 4\n14 16\n16 4\n9 4\n7 15\n12 15\n7 8\n12 11\n2 14\n14 8\n2 7\n3 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 17 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 2, 9, 3\nVertex 2: 1, 15\nVertex 3: 14, 11, 1\nVertex 4: 14, 5, 7\nVertex 5: 4, 11\nVertex 6: 8\nVertex 7: 4\nVertex 8: 14, 10, 12, 6\nVertex 9: 1\nVertex 10: 8, 13, 16\nVertex 11: 5, 3\nVertex 12: 8\nVertex 13: 10\nVertex 14: 1, 8, 4, 3\nVertex 15: 2\nVertex 16: 10\n",
    "graph_output": "16 17\n1 14\n1 2\n14 8\n8 10\n8 12\n14 4\n4 5\n2 15\n5 11\n4 7\n10 13\n14 3\n10 16\n1 9\n8 6\n3 11\n3 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 12 vertices and 53 edges\n\nEdges (Format: Node Node Weight):\n1 12 47\n12 6 75\n6 2 65\n2 7 23\n7 10 21\n6 5 65\n7 8 34\n8 4 30\n10 9 69\n7 11 1\n7 3 88\n5 12 30\n1 9 64\n3 10 23\n1 6 24\n9 8 69\n4 2 74\n11 12 100\n7 1 18\n2 9 36\n11 6 15\n7 12 81\n4 9 77\n8 6 87\n12 10 4\n10 1 34\n7 5 44\n10 11 97\n4 5 22\n4 1 62\n8 5 27\n8 10 60\n11 8 89\n5 9 49\n2 3 43\n12 8 48\n10 5 61\n3 11 56\n3 4 16\n4 7 23\n8 1 48\n3 1 100\n9 3 15\n9 6 47\n4 11 100\n12 3 83\n5 2 53\n5 11 12\n7 6 95\n1 5 23\n2 1 65\n8 3 97\n9 7 2\n",
    "graph_output": "12 53\n1 12 47\n12 6 75\n6 2 65\n2 7 23\n7 10 21\n6 5 65\n7 8 34\n8 4 30\n10 9 69\n7 11 1\n7 3 88\n5 12 30\n1 9 64\n3 10 23\n1 6 24\n9 8 69\n4 2 74\n11 12 100\n7 1 18\n2 9 36\n11 6 15\n7 12 81\n4 9 77\n8 6 87\n12 10 4\n10 1 34\n7 5 44\n10 11 97\n4 5 22\n4 1 62\n8 5 27\n8 10 60\n11 8 89\n5 9 49\n2 3 43\n12 8 48\n10 5 61\n3 11 56\n3 4 16\n4 7 23\n8 1 48\n3 1 100\n9 3 15\n9 6 47\n4 11 100\n12 3 83\n5 2 53\n5 11 12\n7 6 95\n1 5 23\n2 1 65\n8 3 97\n9 7 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 156,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 4 and vertex 2 are connected.\n\nThis is an undirected graph with 16 vertices and 31 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 7 and vertex 3.\n",
    "graph_output": "16 31\n5 15\n13 7\n5 4\n8 7\n1 14\n1 7\n5 1\n10 5\n7 10\n3 5\n10 8\n12 9\n16 6\n13 11\n9 16\n13 9\n3 4\n2 15\n15 7\n6 1\n8 12\n4 2\n3 12\n16 7\n15 4\n6 10\n10 2\n3 8\n16 5\n11 1\n7 3\n",
    "vertices": [
      4,
      2
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 16 vertices and 26 edges\n\nEdges (Format: Node Node):\n7 4\n15 10\n10 13\n2 14\n14 16\n5 16\n16 10\n7 13\n9 10\n1 14\n8 5\n13 11\n3 6\n11 15\n4 3\n12 5\n4 15\n12 3\n3 9\n16 9\n4 6\n2 15\n2 3\n6 9\n14 6\n1 12\n",
    "graph_output": "16 26\n7 4\n15 10\n10 13\n2 14\n14 16\n5 16\n16 10\n7 13\n9 10\n1 14\n8 5\n13 11\n3 6\n11 15\n4 3\n12 5\n4 15\n12 3\n3 9\n16 9\n4 6\n2 15\n2 3\n6 9\n14 6\n1 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: No connections\nVertex 2: 3\nVertex 3: 14, 17, 2, 4\nVertex 4: 10, 7, 12, 9, 3, 5\nVertex 5: 4, 7, 17\nVertex 6: 10, 17, 14, 13\nVertex 7: 4, 5\nVertex 8: 13, 15, 16\nVertex 9: 10, 4, 11, 16\nVertex 10: 12, 4, 11, 9, 6\nVertex 11: 10, 16, 9, 12\nVertex 12: 10, 4, 15, 11\nVertex 13: 8, 6, 15\nVertex 14: 3, 16, 15, 6\nVertex 15: 16, 12, 8, 14, 13\nVertex 16: 15, 11, 14, 8, 9\nVertex 17: 3, 6, 5\n",
    "graph_output": "17 30\n10 12\n13 8\n4 10\n10 11\n14 3\n17 3\n7 4\n10 9\n4 12\n15 16\n12 15\n10 6\n11 16\n3 2\n6 17\n15 8\n9 4\n4 3\n14 16\n15 14\n4 5\n6 14\n13 6\n16 8\n11 9\n9 16\n11 12\n15 13\n7 5\n17 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 14 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10\nVertex 2: 3, 6\nVertex 3: 6, 2, 8\nVertex 4: 10, 11\nVertex 5: No connections\nVertex 6: 3, 2\nVertex 7: 11\nVertex 8: 9, 10, 3\nVertex 9: 8\nVertex 10: 4, 8, 1, 15\nVertex 11: 14, 4, 7\nVertex 12: 15, 13\nVertex 13: 12\nVertex 14: 11\nVertex 15: 10, 12\n",
    "graph_output": "15 14\n8 9\n14 11\n6 3\n2 3\n2 6\n4 10\n11 4\n8 10\n1 10\n15 10\n15 12\n3 8\n13 12\n11 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 31 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 1 and vertex 27.\nThere is an edge between vertex 17 and vertex 21.\nThere is an edge between vertex 13 and vertex 20.\nThere is an edge between vertex 17 and vertex 30.\nThere is an edge between vertex 10 and vertex 29.\nThere is an edge between vertex 30 and vertex 12.\nThere is an edge between vertex 12 and vertex 28.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 28 and vertex 18.\nThere is an edge between vertex 28 and vertex 15.\nThere is an edge between vertex 15 and vertex 31.\nThere is an edge between vertex 11 and vertex 25.\nThere is an edge between vertex 30 and vertex 16.\nThere is an edge between vertex 5 and vertex 24.\nThere is an edge between vertex 24 and vertex 22.\nThere is an edge between vertex 18 and vertex 9.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 7 and vertex 26.\nThere is an edge between vertex 29 and vertex 2.\nThere is an edge between vertex 30 and vertex 23.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 30 and vertex 19.\nThere is an edge between vertex 25 and vertex 4.\nThere is an edge between vertex 5 and vertex 3.\n",
    "graph_output": "31 30\n1 10\n10 7\n10 14\n14 17\n7 5\n7 13\n1 27\n17 21\n13 20\n17 30\n10 29\n30 12\n12 28\n13 11\n28 18\n28 15\n15 31\n11 25\n30 16\n5 24\n24 22\n18 9\n15 6\n7 26\n29 2\n30 23\n15 8\n30 19\n25 4\n5 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 12,
    "description_type": "natural"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 10 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   1   0 \n 2 |  0   0   0   1   0   0   1   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   1   0   0   0 \n 4 |  0   1   0   0   0   0   0   1   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   1   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   1   0   0   0   0   0   1   0   0   1 \n 8 |  0   0   1   1   0   0   1   0   0   1   0 \n 9 |  0   0   0   0   0   0   0   0   0   1   0 \n10 |  1   0   0   0   1   0   0   1   1   0   0 \n11 |  0   0   0   0   0   0   1   0   0   0   0 \n",
    "graph_output": "11 10\n2 4\n10 8\n7 2\n10 9\n7 8\n5 10\n11 7\n10 1\n3 8\n8 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 22 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 1 and vertex 10.\n",
    "graph_output": "11 22\n1 2\n5 10\n10 4\n5 1\n10 7\n3 1\n6 5\n6 2\n5 7\n11 1\n6 3\n3 10\n2 11\n5 9\n9 4\n6 7\n10 9\n11 4\n7 4\n7 9\n11 5\n1 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 11 vertices and 22 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   1   0   0 \n 2 |  0   0   1   1   0   1   0   0   0   1   1 \n 3 |  0   1   0   0   0   0   0   0   0   1   1 \n 4 |  0   1   0   0   1   0   1   1   0   1   0 \n 5 |  0   0   0   1   0   1   1   1   0   0   0 \n 6 |  0   1   0   0   1   0   0   0   1   1   1 \n 7 |  0   0   0   1   1   0   0   0   0   0   1 \n 8 |  0   0   0   1   1   0   0   0   1   1   1 \n 9 |  1   0   0   0   0   1   0   1   0   0   0 \n10 |  0   1   1   1   0   1   0   1   0   0   0 \n11 |  0   1   1   0   0   1   1   1   0   0   0 \n",
    "graph_output": "11 22\n8 9\n2 3\n11 7\n3 11\n6 2\n3 10\n8 11\n1 9\n4 7\n4 8\n5 7\n2 10\n8 10\n10 6\n6 11\n10 4\n5 6\n5 4\n5 8\n11 2\n6 9\n4 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 27 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 15, 11, 13\nVertex 2: 5, 9\nVertex 3: 11, 12, 14, 5\nVertex 4: 10\nVertex 5: 8, 2, 6, 12, 3\nVertex 6: 7, 15, 5, 16\nVertex 7: 15, 13, 6\nVertex 8: 10, 5, 16\nVertex 9: 13, 2\nVertex 10: 1, 4, 8, 11\nVertex 11: 1, 16, 3, 10, 14\nVertex 12: 3, 5, 15\nVertex 13: 7, 9, 1\nVertex 14: 3, 11\nVertex 15: 1, 7, 6, 12, 16\nVertex 16: 11, 15, 8, 6\n",
    "graph_output": "16 27\n1 10\n1 15\n1 11\n11 16\n10 4\n15 7\n10 8\n7 13\n7 6\n11 3\n13 9\n8 5\n5 2\n3 12\n3 14\n6 15\n11 10\n5 6\n5 12\n1 13\n5 3\n15 12\n15 16\n9 2\n16 8\n14 11\n16 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 12 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 4, 5\nVertex 2: 5, 8\nVertex 3: 7, 8, 4\nVertex 4: 1, 3, 5\nVertex 5: 8, 2, 1, 4\nVertex 6: 8\nVertex 7: 1, 8, 3\nVertex 8: 7, 5, 6, 3, 2\n",
    "graph_output": "8 12\n1 7\n7 8\n7 3\n8 5\n8 6\n5 2\n1 4\n3 8\n3 4\n5 1\n5 4\n8 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 195,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 4 (source) to vertex 8 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 53 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 8 (capacity=10), 5 (capacity=9), 10 (capacity=8), 9 (capacity=6), 7 (capacity=1), 6 (capacity=1), 4 (capacity=1), 3 (capacity=5), 11 (capacity=9)\nVertex 2: 4 (capacity=1), 9 (capacity=8), 5 (capacity=8), 8 (capacity=1), 3 (capacity=5), 11 (capacity=3), 10 (capacity=1), 7 (capacity=1), 6 (capacity=9)\nVertex 3: 8 (capacity=7), 7 (capacity=3), 6 (capacity=6), 2 (capacity=5), 5 (capacity=3), 1 (capacity=5), 11 (capacity=2), 9 (capacity=3), 10 (capacity=2)\nVertex 4: 8 (capacity=8), 2 (capacity=1), 10 (capacity=6), 1 (capacity=1), 11 (capacity=4), 9 (capacity=5), 5 (capacity=2), 6 (capacity=1), 7 (capacity=2)\nVertex 5: 1 (capacity=9), 11 (capacity=7), 7 (capacity=5), 2 (capacity=8), 3 (capacity=3), 6 (capacity=6), 9 (capacity=9), 8 (capacity=1), 4 (capacity=2), 10 (capacity=8)\nVertex 6: 11 (capacity=10), 3 (capacity=6), 7 (capacity=9), 8 (capacity=5), 1 (capacity=1), 5 (capacity=6), 9 (capacity=4), 10 (capacity=9), 2 (capacity=9), 4 (capacity=1)\nVertex 7: 8 (capacity=10), 9 (capacity=8), 5 (capacity=5), 3 (capacity=3), 1 (capacity=1), 6 (capacity=9), 10 (capacity=6), 11 (capacity=5), 2 (capacity=1), 4 (capacity=2)\nVertex 8: 1 (capacity=10), 7 (capacity=10), 3 (capacity=7), 4 (capacity=8), 2 (capacity=1), 6 (capacity=5), 9 (capacity=3), 10 (capacity=2), 5 (capacity=1), 11 (capacity=4)\nVertex 9: 1 (capacity=6), 7 (capacity=8), 2 (capacity=8), 8 (capacity=3), 6 (capacity=4), 5 (capacity=9), 10 (capacity=10), 3 (capacity=3), 11 (capacity=2), 4 (capacity=5)\nVertex 10: 1 (capacity=8), 4 (capacity=6), 7 (capacity=6), 8 (capacity=2), 9 (capacity=10), 11 (capacity=6), 6 (capacity=9), 2 (capacity=1), 5 (capacity=8), 3 (capacity=2)\nVertex 11: 5 (capacity=7), 6 (capacity=10), 4 (capacity=4), 7 (capacity=5), 3 (capacity=2), 8 (capacity=4), 2 (capacity=3), 10 (capacity=6), 9 (capacity=2), 1 (capacity=9)\n",
    "graph_output": "11 53\n1 8 10\n1 5 9\n1 10 8\n8 7 10\n8 3 7\n5 11 7\n11 6 10\n1 9 6\n8 4 8\n4 2 1\n9 7 8\n7 5 5\n3 7 3\n2 9 8\n5 2 8\n1 7 1\n10 4 6\n8 2 1\n6 3 6\n7 6 9\n6 8 5\n6 1 1\n3 2 5\n9 8 3\n4 1 1\n3 5 3\n10 7 6\n3 1 5\n11 4 4\n11 7 5\n5 6 6\n9 6 4\n3 11 2\n10 8 2\n5 9 9\n9 10 10\n5 8 1\n11 8 4\n11 2 3\n9 3 3\n11 10 6\n10 6 9\n10 2 1\n9 11 2\n11 1 9\n7 2 1\n9 4 5\n5 4 2\n5 10 8\n2 6 9\n4 6 1\n3 10 2\n4 7 2\n",
    "vertices": [
      4,
      8
    ],
    "answer": 30,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 92 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 4, 5, 6, 7, 8, 12, 13, 14, 9, 2, 11, 10\nVertex 2: 15, 9, 14, 8, 11, 4, 7, 5, 1, 6, 10, 3, 13\nVertex 3: 7, 10, 15, 5, 12, 13, 11, 8, 9, 2, 14, 4\nVertex 4: 14, 8, 11, 13, 1, 2, 6, 12, 10, 3, 5\nVertex 5: 10, 3, 12, 15, 1, 11, 2, 7, 6, 8, 13, 9, 4\nVertex 6: 7, 11, 15, 1, 13, 10, 5, 12, 4, 2, 8, 9\nVertex 7: 11, 3, 6, 14, 10, 15, 1, 13, 2, 8, 5, 9\nVertex 8: 4, 15, 12, 11, 2, 1, 7, 9, 3, 14, 10, 5, 13, 6\nVertex 9: 10, 2, 15, 13, 8, 3, 7, 1, 12, 5, 14, 6\nVertex 10: 9, 12, 5, 3, 7, 15, 6, 8, 1, 4, 2, 13\nVertex 11: 7, 4, 8, 6, 2, 5, 14, 3, 15, 1, 13, 12\nVertex 12: 10, 8, 5, 3, 1, 15, 13, 6, 9, 4, 11\nVertex 13: 4, 14, 15, 7, 3, 9, 1, 12, 6, 11, 5, 8, 2, 10\nVertex 14: 4, 7, 2, 13, 11, 15, 8, 1, 3, 9\nVertex 15: 8, 1, 2, 9, 3, 5, 6, 13, 7, 14, 11, 10, 12\n",
    "graph_output": "15 92\n11 7\n4 14\n4 8\n8 15\n3 7\n10 9\n7 6\n4 11\n15 1\n4 13\n14 7\n10 12\n5 10\n3 10\n2 15\n9 2\n9 15\n15 3\n12 8\n11 8\n5 3\n11 6\n5 12\n5 15\n15 6\n1 4\n2 14\n2 8\n1 5\n14 13\n7 10\n2 11\n12 3\n1 6\n13 15\n4 2\n7 15\n11 5\n1 7\n13 7\n8 1\n1 12\n3 13\n2 7\n11 14\n13 9\n13 1\n5 2\n8 7\n15 14\n8 9\n11 3\n15 11\n10 15\n3 8\n5 7\n12 15\n12 13\n6 13\n14 8\n1 14\n9 3\n10 6\n9 7\n1 9\n10 8\n6 5\n2 1\n11 1\n12 6\n10 1\n12 9\n6 4\n13 11\n12 4\n2 6\n10 4\n2 10\n2 3\n8 5\n14 3\n13 5\n4 3\n8 13\n13 2\n9 5\n5 4\n9 14\n11 12\n6 8\n13 10\n9 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 19 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 5 and vertex 4.\n",
    "graph_output": "7 19\n1 6\n1 7\n1 2\n6 5\n1 3\n3 4\n5 2\n2 6\n5 1\n6 4\n4 2\n3 7\n7 6\n7 2\n3 2\n5 7\n3 5\n6 3\n5 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8232,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (31\u00d731):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31\n   ----------------------------------------------------------------------------------------------------------------------------\n 1 |  0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 2 |  1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 3 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   1   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1 \n15 |  0   0   0   0   0   1   1   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   1   0   0   0 \n17 |  1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n20 |  1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   1   0   0 \n24 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n26 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n30 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n31 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "31 30\n1 4\n1 2\n2 3\n3 19\n4 6\n6 15\n1 20\n1 17\n6 12\n17 5\n2 25\n25 30\n15 10\n20 16\n15 7\n12 22\n16 28\n10 8\n20 13\n8 26\n10 24\n25 14\n19 23\n23 21\n8 18\n16 27\n14 31\n15 11\n23 29\n16 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 7 and vertex 13 are connected.\n\nThis is an undirected graph with 16 vertices and 96 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   0   1   1   1   1   1   0   1   1   1   1   1   1   0 \n 2 |  1   0   1   0   1   0   1   1   1   1   1   1   1   0   1   1 \n 3 |  0   1   0   1   1   1   1   1   1   1   1   1   0   0   0   1 \n 4 |  1   0   1   0   1   1   1   1   1   1   0   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   0   1   0   1   1   0   1   1   1   0 \n 6 |  1   0   1   1   1   0   1   0   1   1   0   1   1   1   1   0 \n 7 |  1   1   1   1   0   1   0   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   0   1   0   1   1   1   1   0   1   1   1 \n 9 |  0   1   1   1   0   1   1   1   0   1   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1   0 \n11 |  1   1   1   0   1   0   1   1   1   1   0   1   1   0   1   1 \n12 |  1   1   1   1   0   1   1   1   1   1   1   0   1   1   0   0 \n13 |  1   1   0   1   1   1   1   0   1   1   1   1   0   1   1   0 \n14 |  1   0   0   1   1   1   1   1   1   1   0   1   1   0   1   0 \n15 |  1   1   0   1   1   1   1   1   1   1   1   0   1   1   0   1 \n16 |  0   1   1   1   0   0   1   1   1   0   1   0   0   0   1   0 \n",
    "graph_output": "16 96\n10 15\n2 8\n9 12\n13 5\n2 11\n1 15\n8 10\n4 7\n13 4\n6 15\n15 7\n12 1\n8 11\n4 14\n1 4\n12 7\n15 8\n5 11\n11 12\n13 7\n8 1\n9 6\n7 16\n14 5\n10 9\n2 1\n15 13\n11 9\n15 2\n2 16\n8 16\n7 8\n1 7\n16 15\n10 7\n12 2\n7 9\n8 4\n15 11\n3 8\n13 6\n3 9\n3 2\n3 5\n7 11\n6 14\n9 4\n1 10\n11 3\n2 9\n4 15\n6 7\n16 11\n9 14\n2 5\n6 12\n10 14\n10 11\n11 1\n13 10\n4 5\n13 14\n3 7\n4 16\n8 12\n10 6\n9 15\n3 16\n6 4\n15 14\n2 13\n7 2\n8 9\n2 10\n9 13\n4 3\n10 4\n14 12\n1 14\n3 6\n13 11\n6 1\n6 5\n15 5\n4 12\n7 14\n12 10\n5 8\n5 1\n8 14\n5 10\n3 10\n16 9\n12 3\n1 13\n12 13\n",
    "vertices": [
      7,
      13
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 84 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (14\u00d714):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14\n   --------------------------------------------------------\n 1 |  0  13   2  56   5  88   0  97  22  64  59  32  85  20 \n 2 | 13   0  19  14  45  92  35  56  78  45  31  26  93   0 \n 3 |  2  19   0  85   0  29   0  29  17  62  83  92   2  35 \n 4 | 56  14  85   0  13  19   7  88  53  66  85  88  14  30 \n 5 |  5  45   0  13   0  79  11   0  60  91  72  72  72  26 \n 6 | 88  92  29  19  79   0  59  12  88  15   0  92  18  28 \n 7 |  0  35   0   7  11  59   0  47  94  60  55  84  44  73 \n 8 | 97  56  29  88   0  12  47   0  71   0   4   1  63  44 \n 9 | 22  78  17  53  60  88  94  71   0  53  98   8  11  86 \n10 | 64  45  62  66  91  15  60   0  53   0  76  50  41  66 \n11 | 59  31  83  85  72   0  55   4  98  76   0  61  82  83 \n12 | 32  26  92  88  72  92  84   1   8  50  61   0  49  61 \n13 | 85  93   2  14  72  18  44  63  11  41  82  49   0  47 \n14 | 20   0  35  30  26  28  73  44  86  66  83  61  47   0 \n",
    "graph_output": "14 84\n1 4 56\n4 7 7\n1 8 97\n4 6 19\n6 14 28\n4 12 88\n1 5 5\n1 13 85\n7 10 60\n5 9 60\n1 2 13\n8 3 29\n13 11 82\n6 13 18\n14 3 35\n9 13 11\n5 11 72\n11 14 83\n12 6 92\n14 1 20\n4 2 14\n11 3 83\n3 6 29\n7 11 55\n8 4 88\n13 5 72\n14 5 26\n11 2 31\n1 10 64\n13 10 41\n8 14 44\n2 5 45\n4 5 13\n6 9 88\n9 4 53\n12 2 26\n11 10 76\n10 3 62\n2 9 78\n14 12 61\n6 10 15\n4 13 14\n1 12 32\n3 13 2\n7 8 47\n12 10 50\n2 6 92\n9 1 22\n3 9 17\n7 6 59\n3 2 19\n8 6 12\n3 4 85\n7 9 94\n12 5 72\n2 10 45\n2 7 35\n12 7 84\n10 4 66\n11 8 4\n7 5 11\n10 5 91\n13 8 63\n9 12 8\n9 8 71\n13 12 49\n10 9 53\n2 8 56\n9 14 86\n1 6 88\n4 14 30\n3 12 92\n13 7 44\n5 6 79\n13 2 93\n11 4 85\n14 13 47\n12 8 1\n7 14 73\n12 11 61\n9 11 98\n11 1 59\n14 10 66\n3 1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 111,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 12 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 22 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (14\u00d714):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14\n   --------------------------------------------------------\n 1 |  0   0   0   7   0   0  50   0   3   0   0   0   0   8 \n 2 |  0   0   0  35   0  28   0   0   2   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0  43   0   0   0   0 \n 4 |  7  35   0   0  45   0   0   0  17  80  21  41  17   0 \n 5 |  0   0   0  45   0   0   0   0   0   0   0   0   0   0 \n 6 |  0  28   0   0   0   0  78   0  21   0   0  73   0   0 \n 7 | 50   0   0   0   0  78   0   0   0   0   0   0   0  20 \n 8 |  0   0   0   0   0   0   0   0   0  15   0   0  69   0 \n 9 |  3   2   0  17   0  21   0   0   0   0   0   0   0   0 \n10 |  0   0  43  80   0   0   0  15   0   0   0   6  74   0 \n11 |  0   0   0  21   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0  41   0  73   0   0   0   6   0   0   0   0 \n13 |  0   0   0  17   0   0   0  69   0  74   0   0   0   0 \n14 |  8   0   0   0   0   0  20   0   0   0   0   0   0   0 \n",
    "graph_output": "14 22\n1 4 7\n4 10 80\n4 13 17\n4 2 35\n1 14 8\n2 6 28\n4 5 45\n10 3 43\n14 7 20\n4 11 21\n4 9 17\n10 12 6\n10 8 15\n12 4 41\n10 13 74\n8 13 69\n1 7 50\n6 9 21\n9 2 2\n6 7 78\n1 9 3\n6 12 73\n",
    "vertices": [
      4,
      12
    ],
    "answer": 41,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 13 to vertex 9 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 16 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 16 (weight=40), 6 (weight=20), 15 (weight=32)\nVertex 2: 16 (weight=62), 7 (weight=90)\nVertex 3: 11 (weight=82), 4 (weight=54)\nVertex 4: 3 (weight=54), 14 (weight=100)\nVertex 5: 13 (weight=5), 10 (weight=18)\nVertex 6: 1 (weight=20), 8 (weight=11), 12 (weight=47)\nVertex 7: 2 (weight=90)\nVertex 8: 6 (weight=11), 11 (weight=12), 10 (weight=18)\nVertex 9: 10 (weight=42)\nVertex 10: 8 (weight=18), 9 (weight=42), 5 (weight=18)\nVertex 11: 8 (weight=12), 3 (weight=82), 13 (weight=92)\nVertex 12: 6 (weight=47)\nVertex 13: 11 (weight=92), 5 (weight=5)\nVertex 14: 4 (weight=100)\nVertex 15: 1 (weight=32)\nVertex 16: 1 (weight=40), 2 (weight=62)\n",
    "graph_output": "16 16\n1 16 40\n1 6 20\n6 8 11\n8 11 12\n11 3 82\n11 13 92\n16 2 62\n3 4 54\n8 10 18\n10 9 42\n2 7 90\n6 12 47\n13 5 5\n1 15 32\n4 14 100\n5 10 18\n",
    "vertices": [
      13,
      9
    ],
    "answer": 65,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nUndirected Graph with 17 vertices and 23 edges\n\nEdges (Format: Node Node):\n15 4\n16 14\n3 15\n10 8\n14 6\n11 17\n4 8\n7 12\n8 15\n1 13\n17 14\n8 16\n14 7\n2 15\n11 13\n5 6\n10 3\n13 16\n3 2\n5 12\n17 4\n3 6\n14 11\n",
    "graph_output": "17 23\n15 4\n16 14\n3 15\n10 8\n14 6\n11 17\n4 8\n7 12\n8 15\n1 13\n17 14\n8 16\n14 7\n2 15\n11 13\n5 6\n10 3\n13 16\n3 2\n5 12\n17 4\n3 6\n14 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 66 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "12 66\n2 7\n9 10\n12 7\n8 11\n6 11\n7 5\n2 8\n1 7\n2 10\n9 5\n12 2\n7 11\n10 6\n1 10\n8 10\n4 11\n10 3\n2 5\n7 8\n12 5\n2 3\n4 8\n3 7\n4 3\n3 12\n1 6\n3 8\n11 3\n2 4\n9 7\n1 2\n4 6\n6 7\n2 11\n8 1\n9 3\n6 3\n7 10\n9 12\n12 6\n4 12\n1 12\n5 1\n12 11\n4 5\n12 8\n4 10\n11 10\n11 5\n8 5\n6 9\n10 12\n6 8\n5 3\n1 9\n7 4\n2 6\n11 1\n10 5\n5 6\n9 11\n3 1\n8 9\n4 9\n2 9\n1 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 8 and vertex 2 are connected.\n\nThis is an undirected graph with 17 vertices and 105 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 12, 13, 7, 16, 10, 9, 6, 5, 15, 17, 14, 11, 3\nVertex 2: 12, 10, 4, 15, 5, 8, 9, 16, 17, 14, 6\nVertex 3: 6, 15, 4, 16, 14, 17, 8, 9, 12, 1, 10\nVertex 4: 5, 3, 2, 13, 8, 7, 17, 11, 15, 14, 6, 16, 10\nVertex 5: 4, 14, 2, 15, 8, 10, 17, 12, 1\nVertex 6: 3, 14, 15, 13, 12, 8, 17, 1, 10, 7, 2, 9, 4, 11\nVertex 7: 11, 1, 17, 12, 4, 16, 9, 8, 6, 14, 10, 15\nVertex 8: 10, 15, 16, 5, 17, 4, 6, 2, 12, 14, 3, 7, 9\nVertex 9: 10, 16, 14, 1, 7, 2, 6, 3, 8\nVertex 10: 8, 9, 2, 1, 14, 5, 12, 11, 6, 16, 7, 17, 15, 4, 3\nVertex 11: 7, 16, 17, 13, 4, 10, 12, 1, 14, 6\nVertex 12: 1, 2, 14, 6, 13, 7, 8, 10, 15, 5, 11, 16, 3, 17\nVertex 13: 1, 17, 14, 6, 16, 4, 12, 11, 15\nVertex 14: 6, 9, 13, 5, 15, 12, 10, 3, 17, 8, 2, 4, 7, 16, 1, 11\nVertex 15: 3, 8, 6, 14, 2, 5, 17, 12, 13, 4, 7, 1, 10\nVertex 16: 9, 1, 8, 11, 13, 3, 7, 2, 10, 12, 14, 4, 17\nVertex 17: 13, 7, 11, 8, 14, 6, 4, 15, 3, 5, 2, 10, 1, 16, 12\n",
    "graph_output": "17 105\n8 10\n12 1\n9 10\n1 13\n5 4\n7 11\n6 3\n12 2\n14 6\n17 13\n15 3\n1 7\n2 10\n17 7\n16 9\n1 16\n4 3\n15 8\n9 14\n14 13\n1 10\n16 8\n15 6\n6 13\n14 5\n1 9\n14 15\n4 2\n14 12\n6 12\n10 14\n11 16\n16 13\n15 2\n5 2\n5 15\n5 8\n4 13\n5 10\n16 3\n11 17\n13 12\n17 8\n12 7\n8 4\n7 4\n7 16\n6 8\n3 14\n17 14\n13 11\n2 8\n12 8\n17 6\n4 17\n12 10\n8 14\n11 4\n17 15\n7 9\n12 15\n3 17\n8 3\n9 2\n6 1\n10 11\n6 10\n16 2\n8 7\n17 5\n17 2\n14 2\n7 6\n15 13\n10 16\n5 12\n15 4\n4 14\n14 7\n10 7\n15 7\n12 11\n6 2\n17 10\n12 16\n5 1\n6 9\n3 9\n16 14\n1 15\n10 15\n1 17\n6 4\n16 4\n8 9\n14 1\n1 11\n11 14\n11 6\n4 10\n12 3\n17 16\n3 1\n17 12\n3 10\n",
    "vertices": [
      8,
      2
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 21 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   1   1   1   0   0   0   1   1   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 3 |  0   0   0   0   1   0   1   0   0   0   0   0   0   1   0   0 \n 4 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1 \n 5 |  1   0   1   1   0   0   0   0   0   0   1   0   0   0   0   0 \n 6 |  1   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0 \n 7 |  1   0   1   0   0   0   0   0   0   1   0   0   0   1   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1 \n10 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n11 |  1   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0 \n12 |  1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0 \n14 |  0   1   1   0   0   0   1   0   0   0   0   0   0   0   0   1 \n15 |  0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0 \n16 |  0   0   0   1   0   0   0   0   1   0   0   0   0   1   0   0 \n",
    "graph_output": "16 21\n1 6\n1 12\n1 7\n1 5\n1 11\n5 4\n12 9\n7 14\n7 3\n4 16\n11 15\n7 10\n6 13\n14 2\n13 8\n16 14\n6 15\n14 3\n9 16\n5 11\n5 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 6 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 16 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 2 with a capacity of 7.\nThere is an edge between vertex 7 and vertex 3 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 6 with a capacity of 3.\nThere is an edge between vertex 7 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 6 and vertex 5 with a capacity of 7.\nThere is an edge between vertex 5 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 11 and vertex 4 with a capacity of 7.\nThere is an edge between vertex 11 and vertex 5 with a capacity of 1.\nThere is an edge between vertex 5 and vertex 9 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 2.\nThere is an edge between vertex 11 and vertex 1 with a capacity of 4.\nThere is an edge between vertex 5 and vertex 7 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 3 with a capacity of 1.\n",
    "graph_output": "11 16\n1 7 3\n7 2 7\n7 3 1\n2 10 8\n1 9 6\n7 6 3\n7 11 2\n6 5 7\n5 8 9\n11 4 7\n11 5 1\n5 9 10\n1 10 2\n11 1 4\n5 7 2\n1 3 1\n",
    "vertices": [
      6,
      4
    ],
    "answer": 7,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 27 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 5 and vertex 14.\n",
    "graph_output": "16 27\n16 3\n9 11\n16 4\n15 4\n16 5\n14 1\n15 5\n7 14\n2 15\n4 13\n4 6\n11 3\n10 12\n16 14\n14 12\n15 9\n11 13\n6 3\n14 11\n11 5\n15 12\n9 2\n16 13\n3 4\n7 15\n3 10\n5 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 19 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (7\u00d77):\n\n      1   2   3   4   5   6   7\n   ----------------------------\n 1 |  0   1   0   1   1   1   1 \n 2 |  1   0   0   1   1   1   1 \n 3 |  0   0   0   1   1   1   1 \n 4 |  1   1   1   0   1   1   1 \n 5 |  1   1   1   1   0   1   1 \n 6 |  1   1   1   1   1   0   1 \n 7 |  1   1   1   1   1   1   0 \n",
    "graph_output": "7 19\n6 2\n7 2\n5 3\n5 6\n3 7\n3 6\n6 1\n4 6\n7 6\n2 4\n1 2\n7 4\n1 4\n3 4\n2 5\n7 1\n1 5\n5 7\n5 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 587,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 14 to vertex 10 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 89 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13 with a weight of 94.\nThere is an edge between vertex 1 and vertex 14 with a weight of 16.\nThere is an edge between vertex 13 and vertex 8 with a weight of 23.\nThere is an edge between vertex 8 and vertex 2 with a weight of 4.\nThere is an edge between vertex 1 and vertex 9 with a weight of 70.\nThere is an edge between vertex 2 and vertex 6 with a weight of 62.\nThere is an edge between vertex 1 and vertex 3 with a weight of 32.\nThere is an edge between vertex 6 and vertex 11 with a weight of 59.\nThere is an edge between vertex 13 and vertex 12 with a weight of 49.\nThere is an edge between vertex 1 and vertex 4 with a weight of 6.\nThere is an edge between vertex 3 and vertex 10 with a weight of 85.\nThere is an edge between vertex 2 and vertex 5 with a weight of 67.\nThere is an edge between vertex 12 and vertex 7 with a weight of 35.\nThere is an edge between vertex 4 and vertex 2 with a weight of 92.\nThere is an edge between vertex 5 and vertex 7 with a weight of 37.\nThere is an edge between vertex 6 and vertex 5 with a weight of 41.\nThere is an edge between vertex 12 and vertex 3 with a weight of 81.\nThere is an edge between vertex 2 and vertex 9 with a weight of 15.\nThere is an edge between vertex 7 and vertex 3 with a weight of 66.\nThere is an edge between vertex 5 and vertex 9 with a weight of 31.\nThere is an edge between vertex 10 and vertex 12 with a weight of 78.\nThere is an edge between vertex 8 and vertex 14 with a weight of 22.\nThere is an edge between vertex 14 and vertex 2 with a weight of 40.\nThere is an edge between vertex 10 and vertex 7 with a weight of 95.\nThere is an edge between vertex 12 and vertex 4 with a weight of 11.\nThere is an edge between vertex 6 and vertex 1 with a weight of 100.\nThere is an edge between vertex 11 and vertex 4 with a weight of 69.\nThere is an edge between vertex 7 and vertex 2 with a weight of 30.\nThere is an edge between vertex 1 and vertex 2 with a weight of 37.\nThere is an edge between vertex 3 and vertex 6 with a weight of 3.\nThere is an edge between vertex 12 and vertex 14 with a weight of 68.\nThere is an edge between vertex 8 and vertex 1 with a weight of 50.\nThere is an edge between vertex 11 and vertex 9 with a weight of 38.\nThere is an edge between vertex 5 and vertex 10 with a weight of 19.\nThere is an edge between vertex 2 and vertex 13 with a weight of 6.\nThere is an edge between vertex 14 and vertex 6 with a weight of 91.\nThere is an edge between vertex 12 and vertex 6 with a weight of 40.\nThere is an edge between vertex 9 and vertex 7 with a weight of 33.\nThere is an edge between vertex 3 and vertex 11 with a weight of 14.\nThere is an edge between vertex 13 and vertex 6 with a weight of 50.\nThere is an edge between vertex 1 and vertex 5 with a weight of 20.\nThere is an edge between vertex 4 and vertex 7 with a weight of 60.\nThere is an edge between vertex 9 and vertex 10 with a weight of 71.\nThere is an edge between vertex 11 and vertex 10 with a weight of 57.\nThere is an edge between vertex 13 and vertex 5 with a weight of 23.\nThere is an edge between vertex 10 and vertex 1 with a weight of 8.\nThere is an edge between vertex 9 and vertex 3 with a weight of 12.\nThere is an edge between vertex 14 and vertex 9 with a weight of 89.\nThere is an edge between vertex 8 and vertex 5 with a weight of 91.\nThere is an edge between vertex 3 and vertex 2 with a weight of 22.\nThere is an edge between vertex 2 and vertex 12 with a weight of 28.\nThere is an edge between vertex 4 and vertex 8 with a weight of 61.\nThere is an edge between vertex 12 and vertex 11 with a weight of 56.\nThere is an edge between vertex 8 and vertex 10 with a weight of 92.\nThere is an edge between vertex 3 and vertex 8 with a weight of 39.\nThere is an edge between vertex 10 and vertex 14 with a weight of 90.\nThere is an edge between vertex 4 and vertex 14 with a weight of 1.\nThere is an edge between vertex 11 and vertex 14 with a weight of 4.\nThere is an edge between vertex 7 and vertex 6 with a weight of 98.\nThere is an edge between vertex 13 and vertex 9 with a weight of 67.\nThere is an edge between vertex 4 and vertex 5 with a weight of 29.\nThere is an edge between vertex 6 and vertex 8 with a weight of 55.\nThere is an edge between vertex 11 and vertex 2 with a weight of 57.\nThere is an edge between vertex 13 and vertex 10 with a weight of 5.\nThere is an edge between vertex 9 and vertex 8 with a weight of 56.\nThere is an edge between vertex 4 and vertex 9 with a weight of 9.\nThere is an edge between vertex 6 and vertex 4 with a weight of 5.\nThere is an edge between vertex 11 and vertex 7 with a weight of 23.\nThere is an edge between vertex 3 and vertex 13 with a weight of 80.\nThere is an edge between vertex 3 and vertex 14 with a weight of 41.\nThere is an edge between vertex 12 and vertex 1 with a weight of 41.\nThere is an edge between vertex 11 and vertex 5 with a weight of 36.\nThere is an edge between vertex 7 and vertex 1 with a weight of 76.\nThere is an edge between vertex 4 and vertex 10 with a weight of 86.\nThere is an edge between vertex 8 and vertex 11 with a weight of 21.\nThere is an edge between vertex 3 and vertex 5 with a weight of 31.\nThere is an edge between vertex 7 and vertex 8 with a weight of 60.\nThere is an edge between vertex 4 and vertex 13 with a weight of 25.\nThere is an edge between vertex 14 and vertex 7 with a weight of 47.\nThere is an edge between vertex 3 and vertex 4 with a weight of 95.\nThere is an edge between vertex 9 and vertex 6 with a weight of 60.\nThere is an edge between vertex 12 and vertex 9 with a weight of 8.\nThere is an edge between vertex 14 and vertex 13 with a weight of 62.\nThere is an edge between vertex 12 and vertex 8 with a weight of 77.\nThere is an edge between vertex 6 and vertex 10 with a weight of 23.\nThere is an edge between vertex 11 and vertex 1 with a weight of 54.\nThere is an edge between vertex 5 and vertex 12 with a weight of 17.\nThere is an edge between vertex 13 and vertex 7 with a weight of 23.\nThere is an edge between vertex 5 and vertex 14 with a weight of 98.\n",
    "graph_output": "14 89\n1 13 94\n1 14 16\n13 8 23\n8 2 4\n1 9 70\n2 6 62\n1 3 32\n6 11 59\n13 12 49\n1 4 6\n3 10 85\n2 5 67\n12 7 35\n4 2 92\n5 7 37\n6 5 41\n12 3 81\n2 9 15\n7 3 66\n5 9 31\n10 12 78\n8 14 22\n14 2 40\n10 7 95\n12 4 11\n6 1 100\n11 4 69\n7 2 30\n1 2 37\n3 6 3\n12 14 68\n8 1 50\n11 9 38\n5 10 19\n2 13 6\n14 6 91\n12 6 40\n9 7 33\n3 11 14\n13 6 50\n1 5 20\n4 7 60\n9 10 71\n11 10 57\n13 5 23\n10 1 8\n9 3 12\n14 9 89\n8 5 91\n3 2 22\n2 12 28\n4 8 61\n12 11 56\n8 10 92\n3 8 39\n10 14 90\n4 14 1\n11 14 4\n7 6 98\n13 9 67\n4 5 29\n6 8 55\n11 2 57\n13 10 5\n9 8 56\n4 9 9\n6 4 5\n11 7 23\n3 13 80\n3 14 41\n12 1 41\n11 5 36\n7 1 76\n4 10 86\n8 11 21\n3 5 31\n7 8 60\n4 13 25\n14 7 47\n3 4 95\n9 6 60\n12 9 8\n14 13 62\n12 8 77\n6 10 23\n11 1 54\n5 12 17\n13 7 23\n5 14 98\n",
    "vertices": [
      14,
      10
    ],
    "answer": 15,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 11 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (7\u00d77):\n\n      1   2   3   4   5   6   7\n   ----------------------------\n 1 |  0   0   0   1   0   1   1 \n 2 |  0   0   1   0   0   1   1 \n 3 |  0   1   0   0   0   0   0 \n 4 |  1   0   0   0   1   1   0 \n 5 |  0   0   0   1   0   1   1 \n 6 |  1   1   0   1   1   0   1 \n 7 |  1   1   0   0   1   1   0 \n",
    "graph_output": "7 11\n1 4\n2 7\n5 4\n7 5\n6 2\n1 7\n6 5\n4 6\n3 2\n7 6\n1 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 20,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   1   0   0   1   1   0   0   1   0   0   0   0   1   1   0 \n 2 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1 \n 3 |  1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 4 |  0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0 \n 5 |  0   0   0   1   0   0   0   0   0   1   0   0   0   1   0   0   0 \n 6 |  1   0   0   0   0   0   0   0   0   0   1   1   1   1   0   1   1 \n 7 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 8 |  0   0   0   0   0   0   0   0   1   0   0   1   0   1   0   0   0 \n 9 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0 \n10 |  1   1   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   1   0   1   0   0   0   0   1   1   0   1   0 \n13 |  0   0   0   0   0   1   0   0   0   0   0   1   0   0   1   1   0 \n14 |  0   0   0   0   1   1   0   1   0   0   0   1   0   0   0   1   0 \n15 |  1   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0 \n16 |  1   0   0   0   0   1   0   0   0   0   0   1   1   1   0   0   0 \n17 |  0   1   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "17 30\n1 6\n6 14\n14 8\n14 16\n8 9\n14 5\n5 4\n1 7\n6 11\n14 12\n12 13\n1 3\n1 10\n10 2\n13 15\n2 17\n6 16\n7 17\n6 13\n10 4\n10 5\n12 16\n12 6\n16 13\n15 1\n9 15\n6 17\n3 11\n8 12\n1 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nUndirected Graph with 6 vertices and 14 edges\n\nEdges (Format: Node Node):\n5 2\n5 4\n1 4\n2 3\n2 1\n1 5\n4 2\n6 3\n3 4\n5 6\n6 4\n3 5\n1 6\n6 2\n",
    "graph_output": "6 14\n5 2\n5 4\n1 4\n2 3\n2 1\n1 5\n4 2\n6 3\n3 4\n5 6\n6 4\n3 5\n1 6\n6 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 133,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 17 vertices and 128 edges\n\nEdges (Format: Node Node):\n1 3\n3 6\n6 13\n13 5\n1 7\n7 14\n13 10\n5 11\n13 17\n6 2\n11 9\n13 15\n9 4\n13 12\n13 16\n13 8\n14 3\n14 5\n1 5\n3 10\n14 17\n14 2\n8 17\n4 3\n8 5\n7 13\n4 12\n7 17\n6 15\n9 16\n10 5\n12 14\n15 8\n4 11\n11 10\n5 15\n9 6\n6 12\n1 12\n16 12\n12 7\n6 5\n3 8\n7 4\n8 6\n8 9\n2 12\n1 15\n8 12\n11 13\n1 8\n2 4\n6 16\n1 14\n14 6\n17 10\n16 17\n16 7\n2 3\n11 12\n12 17\n9 5\n9 2\n3 12\n16 14\n5 7\n14 8\n4 15\n12 5\n2 15\n9 10\n13 4\n11 3\n1 11\n8 16\n9 13\n10 2\n4 6\n15 17\n15 14\n10 7\n15 11\n6 11\n7 11\n17 1\n10 8\n4 5\n17 5\n3 16\n6 10\n10 4\n7 15\n9 17\n16 1\n1 9\n1 13\n2 17\n11 17\n7 9\n7 8\n3 13\n5 3\n2 5\n10 12\n3 9\n17 6\n16 15\n7 3\n8 2\n1 10\n17 3\n12 9\n8 11\n15 10\n14 11\n12 15\n16 2\n13 14\n3 15\n11 16\n1 2\n15 9\n8 4\n6 7\n2 7\n14 9\n2 13\n5 16\n",
    "graph_output": "17 128\n1 3\n3 6\n6 13\n13 5\n1 7\n7 14\n13 10\n5 11\n13 17\n6 2\n11 9\n13 15\n9 4\n13 12\n13 16\n13 8\n14 3\n14 5\n1 5\n3 10\n14 17\n14 2\n8 17\n4 3\n8 5\n7 13\n4 12\n7 17\n6 15\n9 16\n10 5\n12 14\n15 8\n4 11\n11 10\n5 15\n9 6\n6 12\n1 12\n16 12\n12 7\n6 5\n3 8\n7 4\n8 6\n8 9\n2 12\n1 15\n8 12\n11 13\n1 8\n2 4\n6 16\n1 14\n14 6\n17 10\n16 17\n16 7\n2 3\n11 12\n12 17\n9 5\n9 2\n3 12\n16 14\n5 7\n14 8\n4 15\n12 5\n2 15\n9 10\n13 4\n11 3\n1 11\n8 16\n9 13\n10 2\n4 6\n15 17\n15 14\n10 7\n15 11\n6 11\n7 11\n17 1\n10 8\n4 5\n17 5\n3 16\n6 10\n10 4\n7 15\n9 17\n16 1\n1 9\n1 13\n2 17\n11 17\n7 9\n7 8\n3 13\n5 3\n2 5\n10 12\n3 9\n17 6\n16 15\n7 3\n8 2\n1 10\n17 3\n12 9\n8 11\n15 10\n14 11\n12 15\n16 2\n13 14\n3 15\n11 16\n1 2\n15 9\n8 4\n6 7\n2 7\n14 9\n2 13\n5 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 15 vertices and 88 edges\n\nEdges (Format: Node Node):\n1 9\n1 11\n1 8\n11 5\n1 14\n5 15\n11 12\n8 7\n8 10\n8 2\n5 3\n3 13\n7 6\n14 4\n6 2\n10 13\n6 1\n14 2\n4 13\n9 6\n11 7\n7 4\n11 6\n7 3\n15 9\n5 6\n13 9\n15 2\n11 3\n6 4\n7 10\n14 3\n9 8\n12 13\n13 6\n9 2\n4 3\n4 11\n2 12\n14 7\n2 1\n5 8\n14 13\n15 3\n2 4\n10 15\n1 13\n4 8\n7 5\n3 1\n12 8\n2 10\n1 12\n7 12\n14 10\n7 13\n3 9\n15 14\n15 8\n15 1\n7 15\n13 15\n9 7\n12 10\n10 1\n8 14\n11 13\n4 9\n12 5\n2 3\n6 12\n6 8\n7 2\n11 2\n10 4\n1 7\n9 14\n10 3\n12 4\n13 2\n11 14\n15 4\n5 2\n1 4\n10 5\n12 9\n9 10\n12 14\n",
    "graph_output": "15 88\n1 9\n1 11\n1 8\n11 5\n1 14\n5 15\n11 12\n8 7\n8 10\n8 2\n5 3\n3 13\n7 6\n14 4\n6 2\n10 13\n6 1\n14 2\n4 13\n9 6\n11 7\n7 4\n11 6\n7 3\n15 9\n5 6\n13 9\n15 2\n11 3\n6 4\n7 10\n14 3\n9 8\n12 13\n13 6\n9 2\n4 3\n4 11\n2 12\n14 7\n2 1\n5 8\n14 13\n15 3\n2 4\n10 15\n1 13\n4 8\n7 5\n3 1\n12 8\n2 10\n1 12\n7 12\n14 10\n7 13\n3 9\n15 14\n15 8\n15 1\n7 15\n13 15\n9 7\n12 10\n10 1\n8 14\n11 13\n4 9\n12 5\n2 3\n6 12\n6 8\n7 2\n11 2\n10 4\n1 7\n9 14\n10 3\n12 4\n13 2\n11 14\n15 4\n5 2\n1 4\n10 5\n12 9\n9 10\n12 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 1 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 62 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 5 (capacity=6), 3 (capacity=5), 10 (capacity=3), 9 (capacity=10), 6 (capacity=2), 7 (capacity=4), 4 (capacity=8), 11 (capacity=1), 12 (capacity=7)\nVertex 2: 5 (capacity=1), 12 (capacity=8), 10 (capacity=6), 11 (capacity=5), 9 (capacity=3), 3 (capacity=6), 4 (capacity=9), 7 (capacity=7), 6 (capacity=3), 8 (capacity=2)\nVertex 3: 5 (capacity=1), 1 (capacity=5), 10 (capacity=2), 6 (capacity=10), 11 (capacity=6), 9 (capacity=1), 4 (capacity=2), 2 (capacity=6), 8 (capacity=2), 12 (capacity=9), 7 (capacity=10)\nVertex 4: 11 (capacity=7), 8 (capacity=2), 12 (capacity=10), 9 (capacity=9), 3 (capacity=2), 2 (capacity=9), 7 (capacity=5), 10 (capacity=6), 6 (capacity=4), 1 (capacity=8)\nVertex 5: 1 (capacity=6), 10 (capacity=6), 2 (capacity=1), 7 (capacity=5), 6 (capacity=2), 9 (capacity=4), 11 (capacity=2), 3 (capacity=1), 12 (capacity=9), 8 (capacity=9)\nVertex 6: 5 (capacity=2), 10 (capacity=3), 3 (capacity=10), 12 (capacity=4), 11 (capacity=6), 1 (capacity=2), 8 (capacity=2), 7 (capacity=9), 4 (capacity=4), 2 (capacity=3), 9 (capacity=1)\nVertex 7: 5 (capacity=5), 8 (capacity=8), 1 (capacity=4), 9 (capacity=9), 11 (capacity=9), 4 (capacity=5), 6 (capacity=9), 2 (capacity=7), 12 (capacity=8), 3 (capacity=10), 10 (capacity=5)\nVertex 8: 7 (capacity=8), 4 (capacity=2), 10 (capacity=10), 6 (capacity=2), 9 (capacity=7), 3 (capacity=2), 12 (capacity=10), 5 (capacity=9), 2 (capacity=2), 11 (capacity=5)\nVertex 9: 5 (capacity=4), 1 (capacity=10), 3 (capacity=1), 11 (capacity=8), 4 (capacity=9), 2 (capacity=3), 8 (capacity=7), 12 (capacity=6), 7 (capacity=9), 10 (capacity=6), 6 (capacity=1)\nVertex 10: 5 (capacity=6), 3 (capacity=2), 6 (capacity=3), 2 (capacity=6), 1 (capacity=3), 8 (capacity=10), 9 (capacity=6), 4 (capacity=6), 7 (capacity=5), 11 (capacity=10), 12 (capacity=2)\nVertex 11: 5 (capacity=2), 4 (capacity=7), 2 (capacity=5), 3 (capacity=6), 9 (capacity=8), 6 (capacity=6), 7 (capacity=9), 1 (capacity=1), 8 (capacity=5), 10 (capacity=10)\nVertex 12: 5 (capacity=9), 2 (capacity=8), 4 (capacity=10), 6 (capacity=4), 8 (capacity=10), 9 (capacity=6), 3 (capacity=9), 7 (capacity=8), 1 (capacity=7), 10 (capacity=2)\n",
    "graph_output": "12 62\n1 5 6\n5 10 6\n5 2 1\n5 7 5\n5 6 2\n5 9 4\n5 11 2\n5 3 1\n11 4 7\n5 12 9\n7 8 8\n1 3 5\n12 2 8\n3 10 2\n6 10 3\n2 10 6\n11 2 5\n10 1 3\n6 3 10\n9 1 10\n3 11 6\n8 4 2\n12 4 10\n3 9 1\n11 9 8\n4 9 9\n12 6 4\n6 11 6\n6 1 2\n8 10 10\n8 6 2\n4 3 2\n2 9 3\n1 7 4\n2 3 6\n8 9 7\n2 4 9\n8 3 2\n8 12 10\n9 12 6\n9 7 9\n10 9 6\n11 7 9\n4 7 5\n12 3 9\n6 7 9\n4 10 6\n7 2 7\n12 7 8\n6 4 4\n4 1 8\n8 5 9\n6 2 3\n7 3 10\n11 1 1\n6 9 1\n10 7 5\n2 8 2\n8 11 5\n1 12 7\n11 10 10\n10 12 2\n",
    "vertices": [
      1,
      10
    ],
    "answer": 46,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 12 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (7\u00d77):\n\n      1   2   3   4   5   6   7\n   ----------------------------\n 1 |  0   1   1   1   0   0   1 \n 2 |  1   0   0   0   1   1   1 \n 3 |  1   0   0   0   0   1   1 \n 4 |  1   0   0   0   1   0   0 \n 5 |  0   1   0   1   0   1   0 \n 6 |  0   1   1   0   1   0   1 \n 7 |  1   1   1   0   0   1   0 \n",
    "graph_output": "7 12\n1 2\n2 6\n6 3\n2 7\n6 5\n5 4\n3 7\n2 5\n3 1\n4 1\n1 7\n7 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 338,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 43 edges\n\nEdges (Format: Node Node Capacity):\n1 7 4\n7 10 10\n10 6 9\n7 8 1\n8 3 8\n8 11 1\n8 2 7\n2 9 5\n2 5 2\n6 4 1\n1 11 4\n6 7 1\n9 7 1\n1 4 2\n6 11 7\n5 3 2\n2 7 5\n9 8 7\n9 4 10\n10 11 5\n10 2 3\n5 11 1\n6 8 2\n11 4 1\n6 3 9\n7 4 4\n3 7 8\n2 6 9\n11 7 10\n10 9 6\n2 1 1\n8 5 1\n6 9 5\n10 3 1\n7 5 8\n3 4 3\n3 11 6\n1 8 10\n2 4 10\n1 5 6\n1 3 3\n6 1 9\n5 4 6\n",
    "graph_output": "11 43\n1 7 4\n7 10 10\n10 6 9\n7 8 1\n8 3 8\n8 11 1\n8 2 7\n2 9 5\n2 5 2\n6 4 1\n1 11 4\n6 7 1\n9 7 1\n1 4 2\n6 11 7\n5 3 2\n2 7 5\n9 8 7\n9 4 10\n10 11 5\n10 2 3\n5 11 1\n6 8 2\n11 4 1\n6 3 9\n7 4 4\n3 7 8\n2 6 9\n11 7 10\n10 9 6\n2 1 1\n8 5 1\n6 9 5\n10 3 1\n7 5 8\n3 4 3\n3 11 6\n1 8 10\n2 4 10\n1 5 6\n1 3 3\n6 1 9\n5 4 6\n",
    "vertices": [
      3,
      6
    ],
    "answer": 40,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 117 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 6 and vertex 16.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 4 and vertex 5.\n",
    "graph_output": "16 117\n11 12\n1 13\n8 7\n5 13\n3 12\n15 10\n2 9\n14 4\n15 8\n13 6\n9 16\n8 14\n7 6\n8 2\n13 7\n13 2\n14 2\n5 3\n14 3\n4 11\n15 12\n8 6\n3 4\n14 6\n16 4\n11 3\n16 8\n10 11\n12 16\n1 8\n6 1\n9 14\n13 14\n5 11\n9 4\n9 11\n11 1\n8 11\n14 15\n14 5\n1 14\n9 12\n13 11\n3 13\n9 1\n7 12\n4 6\n16 10\n6 16\n1 3\n15 3\n7 5\n11 6\n5 16\n6 15\n11 14\n15 7\n6 9\n15 13\n8 13\n7 16\n4 2\n5 15\n1 2\n2 7\n9 10\n15 9\n5 10\n16 1\n7 3\n12 8\n1 5\n1 10\n7 10\n4 8\n3 10\n10 14\n9 5\n4 15\n1 4\n14 7\n3 6\n10 12\n15 2\n16 3\n8 9\n10 8\n2 12\n14 12\n16 15\n16 2\n7 1\n9 13\n6 10\n10 4\n12 4\n16 13\n2 10\n2 5\n12 13\n7 9\n6 5\n3 2\n10 13\n1 12\n12 5\n8 3\n6 2\n7 4\n2 11\n13 4\n16 14\n7 11\n15 11\n6 12\n9 3\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (29\u00d729):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n   --------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   1   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   1   0   0   1   0   0   0   0   0   0   0   0   0 \n 5 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n14 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n17 |  0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n23 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   1   0   1   0   0   0   0   0   0   0   0   0   0   0 \n24 |  1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   1   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0 \n29 |  0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "29 28\n1 15\n1 5\n15 4\n1 24\n4 20\n15 23\n5 28\n24 21\n5 29\n29 13\n23 18\n1 14\n4 17\n23 16\n23 3\n17 8\n21 26\n24 10\n28 25\n13 9\n20 27\n28 6\n17 19\n28 7\n28 22\n8 11\n20 2\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 12 in the weighted graph.\n\nThis is an undirected graph with 14 vertices and 22 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 4 (weight=7), 14 (weight=8), 7 (weight=50), 9 (weight=3)\nVertex 2: 4 (weight=35), 6 (weight=28), 9 (weight=2)\nVertex 3: 10 (weight=43)\nVertex 4: 1 (weight=7), 10 (weight=80), 13 (weight=17), 2 (weight=35), 5 (weight=45), 11 (weight=21), 9 (weight=17), 12 (weight=41)\nVertex 5: 4 (weight=45)\nVertex 6: 2 (weight=28), 9 (weight=21), 7 (weight=78), 12 (weight=73)\nVertex 7: 14 (weight=20), 1 (weight=50), 6 (weight=78)\nVertex 8: 10 (weight=15), 13 (weight=69)\nVertex 9: 4 (weight=17), 6 (weight=21), 2 (weight=2), 1 (weight=3)\nVertex 10: 4 (weight=80), 3 (weight=43), 12 (weight=6), 8 (weight=15), 13 (weight=74)\nVertex 11: 4 (weight=21)\nVertex 12: 10 (weight=6), 4 (weight=41), 6 (weight=73)\nVertex 13: 4 (weight=17), 10 (weight=74), 8 (weight=69)\nVertex 14: 1 (weight=8), 7 (weight=20)\n",
    "graph_output": "14 22\n1 4 7\n4 10 80\n4 13 17\n4 2 35\n1 14 8\n2 6 28\n4 5 45\n10 3 43\n14 7 20\n4 11 21\n4 9 17\n10 12 6\n10 8 15\n12 4 41\n10 13 74\n8 13 69\n1 7 50\n6 9 21\n9 2 2\n6 7 78\n1 9 3\n6 12 73\n",
    "vertices": [
      4,
      12
    ],
    "answer": 41,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 8 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 11 vertices and 14 edges\n\nEdges (Format: Node Node Capacity):\n1 7 9\n1 2 2\n7 9 9\n2 8 8\n1 11 8\n2 6 7\n8 4 9\n1 10 6\n8 5 2\n1 3 7\n9 4 6\n6 9 7\n10 11 2\n5 1 4\n",
    "graph_output": "11 14\n1 7 9\n1 2 2\n7 9 9\n2 8 8\n1 11 8\n2 6 7\n8 4 9\n1 10 6\n8 5 2\n1 3 7\n9 4 6\n6 9 7\n10 11 2\n5 1 4\n",
    "vertices": [
      8,
      4
    ],
    "answer": 15,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 1 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 62 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   1   1   1   1   1   0   1   1   1   1 \n 2 |  0   0   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   0   1   1   1   1   1   1   1 \n 5 |  1   1   1   0   0   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1 \n 8 |  0   1   1   1   1   1   1   0   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   0 \n12 |  1   1   1   1   1   1   1   1   1   1   0   0 \n\nCapacity Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   5   8   6   2   4   0  10   3   1   7 \n 2 |  0   0   6   9   1   3   7   2   3   6   5   8 \n 3 |  5   6   0   2   1  10  10   2   1   2   6   9 \n 4 |  8   9   2   0   0   4   5   2   9   6   7  10 \n 5 |  6   1   1   0   0   2   5   9   4   6   2   9 \n 6 |  2   3  10   4   2   0   9   2   1   3   6   4 \n 7 |  4   7  10   5   5   9   0   8   9   5   9   8 \n 8 |  0   2   2   2   9   2   8   0   7  10   5  10 \n 9 | 10   3   1   9   4   1   9   7   0   6   8   6 \n10 |  3   6   2   6   6   3   5  10   6   0  10   2 \n11 |  1   5   6   7   2   6   9   5   8  10   0   0 \n12 |  7   8   9  10   9   4   8  10   6   2   0   0 \n",
    "graph_output": "12 62\n1 5 6\n5 10 6\n5 2 1\n5 7 5\n5 6 2\n5 9 4\n5 11 2\n5 3 1\n11 4 7\n5 12 9\n7 8 8\n1 3 5\n12 2 8\n3 10 2\n6 10 3\n2 10 6\n11 2 5\n10 1 3\n6 3 10\n9 1 10\n3 11 6\n8 4 2\n12 4 10\n3 9 1\n11 9 8\n4 9 9\n12 6 4\n6 11 6\n6 1 2\n8 10 10\n8 6 2\n4 3 2\n2 9 3\n1 7 4\n2 3 6\n8 9 7\n2 4 9\n8 3 2\n8 12 10\n9 12 6\n9 7 9\n10 9 6\n11 7 9\n4 7 5\n12 3 9\n6 7 9\n4 10 6\n7 2 7\n12 7 8\n6 4 4\n4 1 8\n8 5 9\n6 2 3\n7 3 10\n11 1 1\n6 9 1\n10 7 5\n2 8 2\n8 11 5\n1 12 7\n11 10 10\n10 12 2\n",
    "vertices": [
      1,
      10
    ],
    "answer": 46,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 55 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 11 with a capacity of 6.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 11 and vertex 4 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 9 with a capacity of 3.\nThere is an edge between vertex 11 and vertex 12 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 5 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 11 and vertex 2 with a capacity of 4.\nThere is an edge between vertex 6 and vertex 13 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 13 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 12 with a capacity of 4.\nThere is an edge between vertex 9 and vertex 7 with a capacity of 1.\nThere is an edge between vertex 1 and vertex 12 with a capacity of 7.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 7.\nThere is an edge between vertex 12 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 13 with a capacity of 2.\nThere is an edge between vertex 8 and vertex 2 with a capacity of 5.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 1.\nThere is an edge between vertex 9 and vertex 10 with a capacity of 1.\nThere is an edge between vertex 4 and vertex 6 with a capacity of 3.\nThere is an edge between vertex 8 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 2 with a capacity of 8.\nThere is an edge between vertex 13 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 3 and vertex 4 with a capacity of 9.\nThere is an edge between vertex 9 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 2 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 10 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 6.\nThere is an edge between vertex 12 and vertex 3 with a capacity of 4.\nThere is an edge between vertex 8 and vertex 5 with a capacity of 3.\nThere is an edge between vertex 2 and vertex 13 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 8 with a capacity of 8.\nThere is an edge between vertex 8 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 13 and vertex 10 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 2 and vertex 12 with a capacity of 3.\nThere is an edge between vertex 12 and vertex 8 with a capacity of 7.\nThere is an edge between vertex 3 and vertex 10 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 6 and vertex 11 with a capacity of 3.\nThere is an edge between vertex 11 and vertex 10 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 12 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 13 with a capacity of 7.\nThere is an edge between vertex 5 and vertex 13 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 2 with a capacity of 4.\nThere is an edge between vertex 12 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 13 and vertex 9 with a capacity of 7.\nThere is an edge between vertex 7 and vertex 10 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 5 with a capacity of 10.\n",
    "graph_output": "13 55\n1 11 6\n1 10 10\n11 4 3\n1 9 3\n11 12 4\n4 5 5\n9 6 10\n11 2 4\n6 13 2\n4 7 5\n13 3 5\n1 8 9\n4 12 4\n9 7 1\n1 12 7\n1 4 7\n12 5 9\n4 13 2\n8 2 5\n6 3 1\n11 8 4\n7 8 1\n9 10 1\n4 6 3\n8 10 5\n9 2 8\n13 8 9\n3 4 9\n9 4 1\n2 10 9\n4 10 2\n1 5 5\n3 5 6\n12 3 4\n8 5 3\n2 13 4\n4 8 8\n8 9 9\n5 10 4\n13 10 1\n3 7 3\n2 12 3\n12 8 7\n3 10 5\n1 2 10\n6 11 3\n11 10 10\n9 12 2\n1 13 7\n5 13 9\n5 2 4\n12 7 3\n13 9 7\n7 10 1\n11 5 10\n",
    "vertices": [
      3,
      10
    ],
    "answer": 33,
    "description_type": "natural"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 2 and vertex 12 are connected.\n\nThis is an undirected graph with 15 vertices and 20 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 12 and vertex 5.\n",
    "graph_output": "15 20\n5 14\n10 14\n2 1\n1 7\n14 4\n9 13\n6 10\n1 11\n4 15\n5 13\n3 6\n5 9\n3 10\n14 8\n2 9\n3 12\n12 9\n1 3\n13 7\n12 5\n",
    "vertices": [
      2,
      12
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 68 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   0   1   1   1 \n 2 |  1   0   1   1   1   1   1   0   0   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   0   1   0   0   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   0   1   0   0   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   0   0   1   1   1   1   1   1 \n 8 |  1   0   1   0   1   1   1   0   1   1   1   1   1 \n 9 |  1   0   1   0   1   1   1   1   0   1   1   0   1 \n10 |  0   1   1   1   1   1   1   1   1   0   1   1   0 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   0 \n12 |  1   1   1   1   1   1   1   1   0   1   1   0   1 \n13 |  1   1   1   1   1   1   1   1   1   0   0   1   0 \n",
    "graph_output": "13 68\n1 3\n6 1\n12 3\n11 2\n10 5\n3 11\n12 4\n7 12\n8 6\n2 13\n2 5\n1 11\n8 7\n2 12\n11 4\n10 2\n7 2\n5 8\n5 1\n10 7\n9 10\n4 1\n9 8\n1 7\n3 7\n6 9\n3 13\n10 3\n12 13\n4 2\n6 13\n1 9\n5 9\n11 9\n11 10\n4 5\n4 10\n6 10\n6 11\n12 5\n11 8\n2 6\n12 1\n3 8\n12 10\n13 7\n5 6\n1 13\n1 2\n13 8\n3 6\n5 3\n7 9\n8 1\n8 10\n12 11\n2 3\n12 6\n4 13\n4 7\n9 13\n4 3\n3 9\n11 7\n5 7\n8 12\n11 5\n5 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 15 in the weighted graph.\n\nUndirected, Weighted Graph with 15 vertices and 92 edges\n\nEdges (Format: Node Node Weight):\n1 2 90\n2 8 11\n2 10 13\n10 13 77\n8 15 13\n10 11 3\n11 7 100\n2 5 74\n2 4 82\n8 6 20\n13 3 93\n5 9 61\n13 14 42\n15 12 22\n5 8 30\n13 5 45\n7 15 74\n5 10 86\n4 9 50\n8 12 49\n6 4 12\n14 9 63\n15 3 89\n15 9 51\n15 5 61\n9 11 99\n1 12 18\n8 4 16\n10 7 28\n12 4 47\n11 4 33\n7 4 50\n6 5 46\n14 5 76\n2 14 88\n13 11 84\n1 13 81\n6 10 24\n14 4 71\n1 3 14\n1 15 53\n10 8 14\n3 12 49\n10 3 57\n2 3 3\n2 7 96\n11 14 17\n2 11 56\n1 7 18\n1 4 82\n14 3 79\n9 1 70\n1 14 46\n3 7 92\n5 7 54\n10 1 62\n6 14 42\n8 11 65\n7 12 30\n7 6 17\n14 10 92\n12 5 33\n13 2 48\n9 8 28\n1 11 7\n15 4 6\n15 10 13\n9 13 17\n13 6 9\n3 4 91\n12 2 58\n11 5 6\n9 10 90\n6 2 23\n11 3 100\n13 12 64\n9 7 30\n13 4 25\n12 10 55\n7 14 86\n15 14 78\n9 12 60\n14 12 96\n8 7 73\n2 9 63\n8 3 30\n11 6 81\n8 1 73\n6 15 9\n13 15 27\n13 7 34\n3 6 58\n",
    "graph_output": "15 92\n1 2 90\n2 8 11\n2 10 13\n10 13 77\n8 15 13\n10 11 3\n11 7 100\n2 5 74\n2 4 82\n8 6 20\n13 3 93\n5 9 61\n13 14 42\n15 12 22\n5 8 30\n13 5 45\n7 15 74\n5 10 86\n4 9 50\n8 12 49\n6 4 12\n14 9 63\n15 3 89\n15 9 51\n15 5 61\n9 11 99\n1 12 18\n8 4 16\n10 7 28\n12 4 47\n11 4 33\n7 4 50\n6 5 46\n14 5 76\n2 14 88\n13 11 84\n1 13 81\n6 10 24\n14 4 71\n1 3 14\n1 15 53\n10 8 14\n3 12 49\n10 3 57\n2 3 3\n2 7 96\n11 14 17\n2 11 56\n1 7 18\n1 4 82\n14 3 79\n9 1 70\n1 14 46\n3 7 92\n5 7 54\n10 1 62\n6 14 42\n8 11 65\n7 12 30\n7 6 17\n14 10 92\n12 5 33\n13 2 48\n9 8 28\n1 11 7\n15 4 6\n15 10 13\n9 13 17\n13 6 9\n3 4 91\n12 2 58\n11 5 6\n9 10 90\n6 2 23\n11 3 100\n13 12 64\n9 7 30\n13 4 25\n12 10 55\n7 14 86\n15 14 78\n9 12 60\n14 12 96\n8 7 73\n2 9 63\n8 3 30\n11 6 81\n8 1 73\n6 15 9\n13 15 27\n13 7 34\n3 6 58\n",
    "vertices": [
      8,
      15
    ],
    "answer": 13,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 1 (source) to vertex 9 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 15 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   1   0   0   1   0   0   1   0   0   0   0 \n 2 |  1   0   0   0   0   0   1   0   1   0   0   0 \n 3 |  0   0   0   0   0   1   1   0   0   0   0   1 \n 4 |  0   0   0   0   1   0   1   0   0   0   0   0 \n 5 |  1   0   0   1   0   1   0   0   0   0   0   0 \n 6 |  0   0   1   0   1   0   0   0   0   0   1   0 \n 7 |  0   1   1   1   0   0   0   0   1   0   0   0 \n 8 |  1   0   0   0   0   0   0   0   1   1   0   0 \n 9 |  0   1   0   0   0   0   1   1   0   0   0   0 \n10 |  0   0   0   0   0   0   0   1   0   0   0   0 \n11 |  0   0   0   0   0   1   0   0   0   0   0   0 \n12 |  0   0   1   0   0   0   0   0   0   0   0   0 \n\nCapacity Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   8   0   0   8   0   0   5   0   0   0   0 \n 2 |  8   0   0   0   0   0   8   0   3   0   0   0 \n 3 |  0   0   0   0   0   2   1   0   0   0   0   9 \n 4 |  0   0   0   0   5   0   1   0   0   0   0   0 \n 5 |  8   0   0   5   0   1   0   0   0   0   0   0 \n 6 |  0   0   2   0   1   0   0   0   0   0   3   0 \n 7 |  0   8   1   1   0   0   0   0   6   0   0   0 \n 8 |  5   0   0   0   0   0   0   0   9   5   0   0 \n 9 |  0   3   0   0   0   0   6   9   0   0   0   0 \n10 |  0   0   0   0   0   0   0   5   0   0   0   0 \n11 |  0   0   0   0   0   3   0   0   0   0   0   0 \n12 |  0   0   9   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "12 15\n1 2 8\n1 5 8\n1 8 5\n2 7 8\n8 9 9\n7 4 1\n7 3 1\n3 12 9\n5 6 1\n6 11 3\n8 10 5\n6 3 2\n5 4 5\n9 7 6\n2 9 3\n",
    "vertices": [
      1,
      9
    ],
    "answer": 14,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 18 and 23 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 23, 2, 5, 18\nVertex 2: 1, 15, 9, 26, 27\nVertex 3: 8\nVertex 4: 5\nVertex 5: 1, 4\nVertex 6: 27\nVertex 7: 14\nVertex 8: 23, 25, 3\nVertex 9: 2, 19\nVertex 10: 18\nVertex 11: 23, 29\nVertex 12: 21, 14\nVertex 13: 18, 17\nVertex 14: 12, 7\nVertex 15: 2\nVertex 16: 24\nVertex 17: 13\nVertex 18: 1, 21, 13, 10, 28\nVertex 19: 9\nVertex 20: 29, 24\nVertex 21: 18, 12\nVertex 22: 23\nVertex 23: 1, 8, 11, 22\nVertex 24: 20, 16\nVertex 25: 8\nVertex 26: 2\nVertex 27: 2, 6\nVertex 28: 18\nVertex 29: 11, 20\n",
    "graph_output": "29 28\n1 23\n1 2\n1 5\n23 8\n1 18\n18 21\n18 13\n2 15\n21 12\n23 11\n8 25\n11 29\n23 22\n2 9\n9 19\n5 4\n8 3\n2 26\n18 10\n29 20\n12 14\n2 27\n14 7\n18 28\n13 17\n20 24\n27 6\n24 16\n",
    "vertices": [
      18,
      23
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 14 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   1   0   0   0   1   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   1   1   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   1   0   1   0   0   0   1   0   0   0 \n 4 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   1   0   0   0   0   0   1   0   0 \n 6 |  0   0   1   0   0   0   0   0   0   0   0   1   0   0   0 \n 7 |  0   0   0   0   1   0   0   0   0   0   0   1   0   0   0 \n 8 |  1   1   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   1   0   0   0   0   0   0   0   0   0   0   0   1   1 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n12 |  0   0   1   0   0   1   1   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   1   0   0   0   0   0   1   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n",
    "graph_output": "15 14\n8 2\n3 12\n11 13\n1 4\n7 12\n9 15\n3 8\n9 2\n7 5\n5 13\n6 12\n8 1\n3 6\n14 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 17 vertices and 123 edges\n\nEdges (Format: Node Node):\n1 15\n1 16\n15 9\n15 13\n1 8\n13 3\n16 10\n13 4\n15 14\n15 7\n8 5\n5 6\n8 11\n16 2\n10 17\n2 12\n5 1\n5 9\n17 7\n14 13\n2 10\n9 1\n4 2\n11 14\n3 12\n16 14\n8 6\n15 4\n14 17\n4 11\n16 5\n14 2\n17 3\n12 16\n17 8\n9 6\n6 4\n9 11\n16 6\n17 16\n10 12\n4 14\n1 11\n2 1\n6 11\n16 15\n3 1\n9 2\n12 1\n10 9\n14 12\n10 6\n11 16\n7 2\n10 4\n11 5\n6 17\n9 13\n17 9\n6 14\n9 4\n11 12\n10 11\n4 17\n1 17\n1 7\n13 6\n17 5\n16 3\n8 13\n5 14\n1 14\n3 5\n5 13\n2 11\n14 9\n14 7\n6 3\n12 7\n11 3\n8 10\n9 8\n7 11\n11 13\n2 3\n4 1\n10 3\n7 16\n13 2\n8 15\n4 5\n17 13\n9 3\n9 7\n3 15\n8 4\n10 7\n2 6\n3 7\n8 7\n17 12\n13 1\n15 17\n10 15\n10 14\n17 2\n10 1\n8 16\n11 17\n12 8\n7 5\n8 2\n13 16\n6 7\n3 14\n5 15\n13 12\n8 3\n9 12\n15 11\n5 2\n10 13\n16 4\n",
    "graph_output": "17 123\n1 15\n1 16\n15 9\n15 13\n1 8\n13 3\n16 10\n13 4\n15 14\n15 7\n8 5\n5 6\n8 11\n16 2\n10 17\n2 12\n5 1\n5 9\n17 7\n14 13\n2 10\n9 1\n4 2\n11 14\n3 12\n16 14\n8 6\n15 4\n14 17\n4 11\n16 5\n14 2\n17 3\n12 16\n17 8\n9 6\n6 4\n9 11\n16 6\n17 16\n10 12\n4 14\n1 11\n2 1\n6 11\n16 15\n3 1\n9 2\n12 1\n10 9\n14 12\n10 6\n11 16\n7 2\n10 4\n11 5\n6 17\n9 13\n17 9\n6 14\n9 4\n11 12\n10 11\n4 17\n1 17\n1 7\n13 6\n17 5\n16 3\n8 13\n5 14\n1 14\n3 5\n5 13\n2 11\n14 9\n14 7\n6 3\n12 7\n11 3\n8 10\n9 8\n7 11\n11 13\n2 3\n4 1\n10 3\n7 16\n13 2\n8 15\n4 5\n17 13\n9 3\n9 7\n3 15\n8 4\n10 7\n2 6\n3 7\n8 7\n17 12\n13 1\n15 17\n10 15\n10 14\n17 2\n10 1\n8 16\n11 17\n12 8\n7 5\n8 2\n13 16\n6 7\n3 14\n5 15\n13 12\n8 3\n9 12\n15 11\n5 2\n10 13\n16 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 10,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 18 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 9 (weight=20), 7 (weight=4), 15 (weight=49), 4 (weight=63)\nVertex 2: 9 (weight=26)\nVertex 3: 6 (weight=62), 13 (weight=12), 8 (weight=57)\nVertex 4: 1 (weight=63)\nVertex 5: 8 (weight=89), 12 (weight=21)\nVertex 6: 9 (weight=27), 8 (weight=65), 3 (weight=62)\nVertex 7: 1 (weight=4)\nVertex 8: 6 (weight=65), 5 (weight=89), 10 (weight=61), 12 (weight=93), 3 (weight=57)\nVertex 9: 1 (weight=20), 6 (weight=27), 2 (weight=26), 14 (weight=23)\nVertex 10: 8 (weight=61), 11 (weight=25)\nVertex 11: 10 (weight=25), 14 (weight=44)\nVertex 12: 5 (weight=21), 8 (weight=93), 15 (weight=94)\nVertex 13: 3 (weight=12)\nVertex 14: 9 (weight=23), 11 (weight=44)\nVertex 15: 1 (weight=49), 12 (weight=94)\n",
    "graph_output": "15 18\n1 9 20\n9 6 27\n6 8 65\n6 3 62\n8 5 89\n8 10 61\n1 7 4\n1 15 49\n9 2 26\n1 4 63\n3 13 12\n10 11 25\n5 12 21\n9 14 23\n11 14 44\n8 12 93\n15 12 94\n3 8 57\n",
    "vertices": [
      null,
      null
    ],
    "answer": 521,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 120 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 9 (weight=3), 2 (weight=11), 5 (weight=21), 12 (weight=43), 3 (weight=26), 14 (weight=96), 13 (weight=5), 16 (weight=75), 4 (weight=22), 7 (weight=7), 8 (weight=49), 6 (weight=25), 11 (weight=23), 10 (weight=96), 15 (weight=65)\nVertex 2: 1 (weight=11), 13 (weight=13), 12 (weight=14), 14 (weight=88), 11 (weight=57), 4 (weight=88), 15 (weight=5), 16 (weight=13), 6 (weight=9), 10 (weight=75), 3 (weight=60), 7 (weight=23), 9 (weight=40), 8 (weight=59), 5 (weight=27)\nVertex 3: 1 (weight=26), 6 (weight=17), 12 (weight=73), 9 (weight=66), 5 (weight=59), 14 (weight=67), 16 (weight=70), 7 (weight=5), 2 (weight=60), 10 (weight=17), 4 (weight=97), 15 (weight=6), 8 (weight=39), 13 (weight=72), 11 (weight=6)\nVertex 4: 5 (weight=3), 15 (weight=71), 16 (weight=53), 1 (weight=22), 7 (weight=9), 12 (weight=9), 2 (weight=88), 11 (weight=85), 13 (weight=48), 9 (weight=60), 14 (weight=47), 8 (weight=60), 10 (weight=67), 6 (weight=67), 3 (weight=97)\nVertex 5: 1 (weight=21), 16 (weight=93), 4 (weight=3), 12 (weight=67), 14 (weight=59), 8 (weight=48), 3 (weight=59), 7 (weight=87), 9 (weight=10), 6 (weight=16), 13 (weight=40), 11 (weight=17), 10 (weight=96), 15 (weight=31), 2 (weight=27)\nVertex 6: 14 (weight=52), 3 (weight=17), 15 (weight=79), 11 (weight=8), 2 (weight=9), 1 (weight=25), 5 (weight=16), 12 (weight=55), 8 (weight=83), 10 (weight=65), 13 (weight=30), 16 (weight=50), 7 (weight=9), 4 (weight=67), 9 (weight=55)\nVertex 7: 12 (weight=57), 15 (weight=19), 8 (weight=51), 4 (weight=9), 1 (weight=7), 13 (weight=65), 11 (weight=38), 10 (weight=34), 5 (weight=87), 3 (weight=5), 9 (weight=74), 14 (weight=84), 6 (weight=9), 2 (weight=23), 16 (weight=38)\nVertex 8: 16 (weight=36), 11 (weight=48), 7 (weight=51), 13 (weight=85), 14 (weight=2), 15 (weight=76), 9 (weight=70), 5 (weight=48), 1 (weight=49), 12 (weight=77), 6 (weight=83), 10 (weight=88), 4 (weight=60), 2 (weight=59), 3 (weight=39)\nVertex 9: 1 (weight=3), 3 (weight=66), 8 (weight=70), 15 (weight=36), 5 (weight=10), 7 (weight=74), 12 (weight=22), 10 (weight=61), 2 (weight=40), 4 (weight=60), 16 (weight=25), 6 (weight=55), 11 (weight=44), 14 (weight=44), 13 (weight=44)\nVertex 10: 14 (weight=74), 13 (weight=63), 15 (weight=9), 7 (weight=34), 2 (weight=75), 16 (weight=34), 11 (weight=13), 1 (weight=96), 6 (weight=65), 5 (weight=96), 3 (weight=17), 9 (weight=61), 12 (weight=60), 8 (weight=88), 4 (weight=67)\nVertex 11: 16 (weight=94), 8 (weight=48), 12 (weight=54), 2 (weight=57), 6 (weight=8), 7 (weight=38), 14 (weight=94), 1 (weight=23), 4 (weight=85), 13 (weight=25), 10 (weight=13), 5 (weight=17), 15 (weight=91), 9 (weight=44), 3 (weight=6)\nVertex 12: 1 (weight=43), 7 (weight=57), 14 (weight=99), 16 (weight=6), 2 (weight=14), 11 (weight=54), 3 (weight=73), 13 (weight=22), 15 (weight=94), 5 (weight=67), 4 (weight=9), 8 (weight=77), 6 (weight=55), 9 (weight=22), 10 (weight=60)\nVertex 13: 2 (weight=13), 1 (weight=5), 12 (weight=22), 10 (weight=63), 8 (weight=85), 7 (weight=65), 15 (weight=60), 16 (weight=35), 11 (weight=25), 14 (weight=89), 5 (weight=40), 6 (weight=30), 4 (weight=48), 3 (weight=72), 9 (weight=44)\nVertex 14: 12 (weight=99), 10 (weight=74), 6 (weight=52), 1 (weight=96), 2 (weight=88), 15 (weight=22), 8 (weight=2), 5 (weight=59), 3 (weight=67), 16 (weight=95), 11 (weight=94), 13 (weight=89), 7 (weight=84), 4 (weight=47), 9 (weight=44)\nVertex 15: 4 (weight=71), 7 (weight=19), 14 (weight=22), 10 (weight=9), 12 (weight=94), 6 (weight=79), 13 (weight=60), 8 (weight=76), 9 (weight=36), 16 (weight=67), 2 (weight=5), 5 (weight=31), 11 (weight=91), 3 (weight=6), 1 (weight=65)\nVertex 16: 5 (weight=93), 8 (weight=36), 11 (weight=94), 4 (weight=53), 12 (weight=6), 1 (weight=75), 15 (weight=67), 13 (weight=35), 2 (weight=13), 10 (weight=34), 14 (weight=95), 3 (weight=70), 6 (weight=50), 7 (weight=38), 9 (weight=25)\n",
    "graph_output": "16 120\n1 9 3\n1 2 11\n1 5 21\n1 12 43\n12 7 57\n5 16 93\n2 13 13\n16 8 36\n12 14 99\n5 4 3\n1 3 26\n4 15 71\n14 10 74\n14 6 52\n16 11 94\n3 6 17\n15 7 19\n1 14 96\n16 4 53\n16 12 6\n1 13 5\n12 2 14\n8 11 48\n16 1 75\n12 11 54\n14 2 88\n2 11 57\n7 8 51\n3 12 73\n4 1 22\n14 15 22\n13 12 22\n7 4 9\n13 10 63\n10 15 9\n15 12 94\n8 13 85\n3 9 66\n1 7 7\n13 7 65\n12 5 67\n8 14 2\n6 15 79\n14 5 59\n15 13 60\n12 4 9\n11 6 8\n15 8 76\n11 7 38\n8 9 70\n8 5 48\n1 8 49\n4 2 88\n15 9 36\n5 3 59\n10 7 34\n15 16 67\n12 8 77\n2 15 5\n16 13 35\n5 7 87\n9 5 10\n2 16 13\n2 6 9\n2 10 75\n3 14 67\n1 6 25\n16 10 34\n16 14 95\n16 3 70\n11 14 94\n3 7 5\n5 6 16\n12 6 55\n9 7 74\n11 1 23\n11 4 85\n11 13 25\n3 2 60\n11 10 13\n9 12 22\n13 14 89\n10 1 96\n13 5 40\n8 6 83\n7 14 84\n10 6 65\n5 11 17\n13 6 30\n5 10 96\n6 16 50\n13 4 48\n6 7 9\n10 3 17\n2 7 23\n10 9 61\n12 10 60\n8 10 88\n9 2 40\n15 5 31\n9 4 60\n4 14 47\n16 7 38\n15 11 91\n8 4 60\n9 16 25\n4 10 67\n4 6 67\n8 2 59\n9 6 55\n4 3 97\n15 3 6\n8 3 39\n3 13 72\n9 11 44\n15 1 65\n14 9 44\n11 3 6\n2 5 27\n13 9 44\n",
    "vertices": [
      null,
      null
    ],
    "answer": 105,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 12 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 4 and vertex 6.\n",
    "graph_output": "11 12\n2 10\n4 2\n10 4\n4 9\n8 11\n5 10\n5 11\n9 1\n11 7\n11 3\n8 3\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 21 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   1   0   0   0   0   0   0   0   1   1   0   1   0 \n 2 |  0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 3 |  0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 4 |  1   0   0   0   0   1   0   0   0   0   0   1   0   0   1   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   1 \n 6 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0 \n 8 |  0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n10 |  0   0   1   0   0   0   0   1   0   0   1   0   1   1   0   0 \n11 |  0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0 \n12 |  1   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0 \n13 |  1   1   0   0   1   0   0   0   1   1   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0 \n15 |  1   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "16 21\n1 13\n13 10\n1 12\n13 5\n1 4\n13 2\n13 9\n10 8\n10 11\n1 15\n10 14\n4 6\n14 7\n5 16\n2 3\n3 10\n4 12\n8 12\n15 4\n7 15\n5 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 25 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   0   0   0   1   0   0   1   1   0   0   0   1 \n 2 |  0   0   0   0   0   0   1   1   0   0   0   1   0   0   1 \n 3 |  0   0   0   0   0   0   1   0   0   0   0   0   1   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 5 |  0   0   0   0   0   0   0   0   1   0   0   1   1   0   1 \n 6 |  0   0   0   0   0   0   1   1   0   0   1   0   0   0   1 \n 7 |  1   1   1   0   0   1   0   1   0   0   0   0   0   0   0 \n 8 |  0   1   0   0   0   1   1   0   0   0   0   1   0   0   0 \n 9 |  0   0   0   0   1   0   0   0   0   0   1   0   0   0   0 \n10 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  1   0   0   0   0   1   0   0   1   0   0   0   1   0   0 \n12 |  0   1   0   0   1   0   0   1   0   0   0   0   0   1   0 \n13 |  0   0   1   1   1   0   0   0   0   0   1   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   1 \n15 |  1   1   0   0   1   1   0   0   0   0   0   0   0   1   0 \n",
    "graph_output": "15 25\n1 15\n15 5\n5 12\n5 13\n1 10\n15 2\n1 7\n13 3\n5 9\n13 4\n12 8\n12 14\n7 6\n1 11\n15 6\n3 7\n11 13\n8 2\n11 9\n6 8\n7 2\n6 11\n15 14\n8 7\n2 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 23 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0   0   1   0   0   0   1   0   0   1   0   1   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 3 |  0   0   0   1   1   0   0   0   0   1   0   0   0   0   1   0 \n 4 |  0   0   1   0   0   1   0   0   0   1   0   0   0   1   0   0 \n 5 |  1   0   1   0   0   0   0   1   0   0   0   0   0   1   1   0 \n 6 |  0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   1 \n 7 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   1   1   0   0   1   0   0   0   0   0   0   0 \n 9 |  1   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0 \n10 |  0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n12 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n14 |  1   1   0   1   1   0   0   0   0   0   0   0   0   0   1   1 \n15 |  0   0   1   0   1   0   0   0   0   0   0   0   0   1   0   0 \n16 |  0   0   0   0   0   1   0   0   0   0   1   0   1   1   0   0 \n",
    "graph_output": "16 23\n1 5\n1 9\n1 14\n5 3\n14 16\n9 8\n14 2\n3 4\n1 12\n16 11\n9 7\n16 13\n4 10\n3 15\n16 6\n14 15\n4 14\n4 6\n3 10\n5 15\n14 5\n8 6\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 130 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 5, 2, 11, 16, 15, 10, 12, 14, 6, 9, 7, 13, 17, 8, 4\nVertex 2: 3, 7, 1, 8, 13, 4, 15, 16, 9, 14, 5, 6, 12, 11\nVertex 3: 2, 1, 5, 15, 8, 9, 6, 10, 12, 17, 11, 7, 4, 13, 14, 16\nVertex 4: 10, 13, 14, 12, 2, 9, 6, 7, 17, 5, 16, 11, 3, 15, 1, 8\nVertex 5: 9, 1, 7, 15, 3, 16, 11, 8, 10, 4, 2, 6, 13, 14, 17, 12\nVertex 6: 8, 14, 7, 10, 1, 3, 4, 17, 16, 9, 5, 2, 13, 11, 12\nVertex 7: 2, 8, 5, 14, 6, 13, 17, 15, 16, 1, 4, 3, 9, 10, 12\nVertex 8: 15, 7, 6, 2, 16, 12, 3, 17, 14, 5, 11, 10, 9, 13, 1, 4\nVertex 9: 14, 5, 12, 4, 3, 1, 16, 2, 10, 6, 7, 13, 11, 8, 17\nVertex 10: 4, 17, 6, 1, 13, 3, 12, 11, 5, 9, 8, 15, 16, 7, 14\nVertex 11: 14, 1, 15, 5, 10, 13, 12, 17, 3, 8, 4, 9, 2, 6, 16\nVertex 12: 9, 14, 4, 1, 8, 17, 3, 10, 13, 15, 11, 2, 7, 16, 5, 6\nVertex 13: 17, 15, 4, 2, 7, 10, 14, 12, 11, 6, 9, 1, 5, 8, 16, 3\nVertex 14: 9, 12, 11, 4, 6, 7, 1, 8, 13, 2, 16, 17, 15, 5, 10, 3\nVertex 15: 8, 13, 5, 11, 1, 3, 2, 16, 7, 12, 10, 17, 4, 14\nVertex 16: 8, 1, 5, 15, 7, 9, 2, 14, 6, 4, 10, 13, 12, 11, 3\nVertex 17: 13, 10, 7, 12, 8, 6, 3, 11, 4, 14, 15, 1, 5, 9\n",
    "graph_output": "17 130\n15 8\n9 14\n17 13\n10 4\n2 3\n5 9\n12 9\n13 15\n2 7\n8 7\n3 1\n6 8\n14 12\n11 14\n1 5\n1 2\n4 13\n2 8\n14 4\n5 7\n2 13\n6 14\n12 4\n14 7\n10 17\n16 8\n7 6\n15 5\n11 1\n4 2\n16 1\n4 9\n5 3\n11 15\n10 6\n1 15\n10 1\n12 1\n7 13\n13 10\n15 3\n16 5\n17 7\n12 8\n12 17\n8 3\n1 14\n1 6\n17 8\n14 8\n11 5\n5 8\n3 9\n9 1\n15 2\n6 3\n15 16\n3 10\n15 7\n14 13\n3 12\n16 7\n16 9\n4 6\n10 12\n16 2\n12 13\n2 9\n10 11\n1 7\n15 12\n13 11\n10 5\n17 6\n3 17\n12 11\n11 17\n14 2\n14 16\n6 16\n7 4\n17 4\n5 4\n4 16\n14 17\n2 5\n9 10\n3 11\n9 6\n5 6\n6 2\n8 11\n11 4\n3 7\n10 8\n15 10\n7 9\n6 13\n13 9\n15 17\n9 11\n3 4\n1 13\n5 13\n10 16\n15 4\n9 8\n8 13\n1 17\n12 2\n15 14\n7 10\n2 11\n12 7\n5 14\n16 13\n5 17\n17 9\n11 6\n8 1\n12 16\n13 3\n12 5\n14 10\n12 6\n11 16\n1 4\n14 3\n16 3\n8 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 8 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (6\u00d76):\n\n      1   2   3   4   5   6\n   ------------------------\n 1 |  0   1   1   0   0   1 \n 2 |  1   0   0   0   1   1 \n 3 |  1   0   0   0   1   0 \n 4 |  0   0   0   0   1   1 \n 5 |  0   1   1   1   0   0 \n 6 |  1   1   0   1   0   0 \n",
    "graph_output": "6 8\n1 6\n1 2\n3 5\n4 6\n6 2\n1 3\n4 5\n2 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 105 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 9 and vertex 15.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 15 and vertex 16.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 11 and vertex 1.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 10 and vertex 16.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 1 and vertex 16.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 11 and vertex 7.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 14 and vertex 5.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 3 and vertex 13.\n",
    "graph_output": "16 105\n1 15\n1 7\n7 13\n13 6\n15 5\n13 14\n13 2\n14 8\n8 4\n8 11\n4 10\n11 9\n9 16\n4 12\n9 3\n1 3\n4 16\n9 15\n13 1\n4 6\n15 16\n4 7\n11 1\n10 12\n15 12\n14 6\n16 2\n4 1\n7 6\n12 5\n1 5\n8 7\n5 16\n15 4\n2 10\n9 10\n10 1\n6 9\n1 6\n7 14\n11 13\n11 3\n13 5\n12 2\n11 16\n3 15\n13 8\n10 16\n15 8\n4 3\n4 14\n7 2\n2 8\n11 15\n10 3\n10 5\n3 16\n2 1\n3 6\n11 4\n10 15\n14 10\n7 3\n6 2\n12 1\n16 12\n14 15\n2 9\n15 2\n7 12\n14 3\n7 5\n15 7\n8 3\n1 8\n2 3\n11 6\n9 12\n15 13\n2 11\n16 6\n5 6\n1 16\n12 6\n10 13\n11 7\n3 12\n16 14\n13 16\n4 5\n13 9\n11 5\n8 10\n12 13\n14 5\n2 14\n8 12\n14 9\n12 14\n10 7\n11 12\n11 10\n13 4\n5 3\n3 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 11 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 1 and vertex 2.\n",
    "graph_output": "6 11\n1 4\n4 2\n4 3\n4 6\n4 5\n2 6\n5 2\n1 6\n3 5\n1 3\n1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 209,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (29\u00d729):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n   --------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   1 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 8 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   1   1 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0 \n10 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n12 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n13 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n17 |  0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n18 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n21 |  1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   1   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  1   0   0   0   0   1   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "29 28\n1 29\n1 24\n29 8\n1 10\n24 17\n29 15\n8 18\n29 6\n1 21\n24 7\n10 23\n8 28\n8 27\n8 3\n24 16\n6 13\n7 12\n12 26\n15 20\n27 4\n21 5\n17 2\n28 9\n28 11\n9 22\n5 25\n17 14\n21 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 21 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   1   1   0   0   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   1   0   0   0   0   0   1   0   0   1   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 4 |  1   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 5 |  1   1   0   0   0   1   1   0   1   1   1   0   1   1   0 \n 6 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   1   0   0   1   0   0   0   0   1   1   0 \n 8 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   1   1   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   1   0   0   0   0   0   0   0   0   1   0 \n11 |  0   1   0   0   1   0   0   0   0   0   0   0   1   1   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   1   0   1   0   0   0   1   0   0   0   0 \n14 |  0   1   0   0   1   0   1   0   0   1   1   0   0   0   1 \n15 |  0   0   1   0   0   0   0   0   0   0   0   0   0   1   0 \n",
    "graph_output": "15 21\n3 15\n5 1\n2 11\n5 7\n13 7\n5 9\n14 2\n6 5\n8 7\n9 4\n5 14\n13 5\n5 10\n14 7\n14 10\n2 5\n1 4\n15 14\n11 5\n13 11\n14 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 91 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 15, 7, 2, 3, 8, 13, 6, 11, 10, 9, 14, 12\nVertex 2: 1, 6, 12, 9, 5, 15, 8, 3, 11, 7, 13, 4\nVertex 3: 6, 4, 1, 7, 10, 8, 14, 12, 11, 5, 13, 2\nVertex 4: 6, 10, 3, 13, 9, 8, 14, 12, 7, 15, 2\nVertex 5: 15, 13, 8, 11, 9, 10, 2, 6, 3, 7\nVertex 6: 15, 3, 4, 11, 2, 1, 12, 5, 8, 14, 13, 7, 9\nVertex 7: 1, 12, 8, 9, 14, 13, 10, 3, 11, 5, 4, 15, 2, 6\nVertex 8: 7, 14, 1, 5, 15, 4, 11, 12, 3, 6, 9, 13, 2, 10\nVertex 9: 7, 15, 10, 13, 4, 5, 11, 12, 2, 1, 8, 6\nVertex 10: 12, 4, 14, 9, 11, 7, 3, 5, 1, 13, 15, 8\nVertex 11: 12, 6, 10, 5, 8, 9, 1, 7, 3, 13, 2, 15\nVertex 12: 7, 11, 10, 2, 6, 8, 9, 3, 13, 4, 1, 15\nVertex 13: 5, 1, 4, 9, 7, 14, 15, 12, 3, 10, 11, 8, 6, 2\nVertex 14: 8, 10, 7, 13, 3, 4, 6, 15, 1\nVertex 15: 1, 5, 6, 9, 8, 13, 2, 4, 14, 10, 12, 7, 11\n",
    "graph_output": "15 91\n1 15\n1 7\n7 12\n7 8\n15 5\n12 11\n15 6\n6 3\n1 2\n8 14\n5 13\n6 4\n7 9\n12 10\n11 6\n9 15\n4 10\n3 4\n10 14\n7 14\n9 10\n10 11\n6 2\n3 1\n8 1\n5 8\n13 1\n4 13\n12 2\n8 15\n9 13\n9 4\n7 13\n4 8\n5 11\n10 7\n9 5\n14 13\n15 13\n8 11\n9 11\n3 7\n6 1\n10 3\n6 12\n11 1\n8 12\n12 9\n9 2\n3 8\n7 11\n10 5\n14 3\n3 12\n13 12\n10 1\n14 4\n5 2\n11 3\n5 6\n1 9\n15 2\n5 3\n6 8\n3 13\n12 4\n13 10\n5 7\n13 11\n9 8\n7 4\n15 4\n6 14\n15 14\n8 13\n6 13\n8 2\n2 3\n1 14\n15 10\n12 1\n11 2\n10 8\n12 15\n7 15\n2 7\n2 13\n15 11\n2 4\n6 7\n6 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 15 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 30 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a weight of 70.\nThere is an edge between vertex 1 and vertex 14 with a weight of 28.\nThere is an edge between vertex 14 and vertex 7 with a weight of 24.\nThere is an edge between vertex 7 and vertex 10 with a weight of 25.\nThere is an edge between vertex 7 and vertex 16 with a weight of 33.\nThere is an edge between vertex 3 and vertex 13 with a weight of 42.\nThere is an edge between vertex 13 and vertex 8 with a weight of 20.\nThere is an edge between vertex 16 and vertex 4 with a weight of 60.\nThere is an edge between vertex 1 and vertex 6 with a weight of 2.\nThere is an edge between vertex 14 and vertex 15 with a weight of 36.\nThere is an edge between vertex 15 and vertex 2 with a weight of 60.\nThere is an edge between vertex 16 and vertex 11 with a weight of 93.\nThere is an edge between vertex 16 and vertex 5 with a weight of 18.\nThere is an edge between vertex 13 and vertex 9 with a weight of 95.\nThere is an edge between vertex 11 and vertex 12 with a weight of 76.\nThere is an edge between vertex 1 and vertex 15 with a weight of 31.\nThere is an edge between vertex 1 and vertex 10 with a weight of 79.\nThere is an edge between vertex 14 and vertex 11 with a weight of 75.\nThere is an edge between vertex 2 and vertex 14 with a weight of 90.\nThere is an edge between vertex 8 and vertex 4 with a weight of 47.\nThere is an edge between vertex 13 and vertex 1 with a weight of 37.\nThere is an edge between vertex 9 and vertex 5 with a weight of 18.\nThere is an edge between vertex 2 and vertex 10 with a weight of 75.\nThere is an edge between vertex 7 and vertex 13 with a weight of 73.\nThere is an edge between vertex 1 and vertex 7 with a weight of 54.\nThere is an edge between vertex 2 and vertex 6 with a weight of 52.\nThere is an edge between vertex 15 and vertex 6 with a weight of 75.\nThere is an edge between vertex 7 and vertex 6 with a weight of 58.\nThere is an edge between vertex 9 and vertex 1 with a weight of 9.\nThere is an edge between vertex 12 and vertex 6 with a weight of 73.\n",
    "graph_output": "16 30\n1 3 70\n1 14 28\n14 7 24\n7 10 25\n7 16 33\n3 13 42\n13 8 20\n16 4 60\n1 6 2\n14 15 36\n15 2 60\n16 11 93\n16 5 18\n13 9 95\n11 12 76\n1 15 31\n1 10 79\n14 11 75\n2 14 90\n8 4 47\n13 1 37\n9 5 18\n2 10 75\n7 13 73\n1 7 54\n2 6 52\n15 6 75\n7 6 58\n9 1 9\n12 6 73\n",
    "vertices": [
      4,
      15
    ],
    "answer": 135,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 17 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 1 and vertex 11.\n",
    "graph_output": "13 17\n6 4\n4 13\n3 2\n5 3\n1 8\n13 3\n6 13\n10 1\n3 4\n3 11\n12 7\n13 10\n10 4\n11 2\n6 2\n7 5\n1 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 15 vertices and 81 edges\n\nEdges (Format: Node Node):\n1 5\n5 12\n12 2\n5 4\n5 3\n3 14\n14 9\n1 13\n5 15\n1 8\n9 7\n14 11\n5 6\n12 10\n3 4\n12 14\n4 9\n15 1\n14 15\n1 12\n6 7\n8 10\n6 2\n10 5\n15 3\n2 13\n9 3\n14 4\n7 11\n3 13\n6 4\n5 2\n15 8\n13 6\n5 13\n2 10\n15 7\n3 6\n2 14\n12 6\n11 12\n13 10\n12 9\n1 2\n11 1\n10 9\n4 8\n11 6\n11 2\n2 7\n15 10\n7 10\n4 15\n6 15\n13 7\n10 1\n11 8\n10 3\n1 6\n8 7\n10 14\n14 5\n8 14\n13 12\n15 9\n4 13\n6 14\n1 7\n11 3\n10 4\n9 13\n3 1\n8 2\n14 1\n7 12\n5 7\n2 4\n3 7\n9 6\n15 12\n8 3\n",
    "graph_output": "15 81\n1 5\n5 12\n12 2\n5 4\n5 3\n3 14\n14 9\n1 13\n5 15\n1 8\n9 7\n14 11\n5 6\n12 10\n3 4\n12 14\n4 9\n15 1\n14 15\n1 12\n6 7\n8 10\n6 2\n10 5\n15 3\n2 13\n9 3\n14 4\n7 11\n3 13\n6 4\n5 2\n15 8\n13 6\n5 13\n2 10\n15 7\n3 6\n2 14\n12 6\n11 12\n13 10\n12 9\n1 2\n11 1\n10 9\n4 8\n11 6\n11 2\n2 7\n15 10\n7 10\n4 15\n6 15\n13 7\n10 1\n11 8\n10 3\n1 6\n8 7\n10 14\n14 5\n8 14\n13 12\n15 9\n4 13\n6 14\n1 7\n11 3\n10 4\n9 13\n3 1\n8 2\n14 1\n7 12\n5 7\n2 4\n3 7\n9 6\n15 12\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 25 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 2, 6, 3, 7\nVertex 2: 8, 1, 7, 5, 6, 3, 4\nVertex 3: 6, 8, 7, 5, 1, 2, 4\nVertex 4: 6, 7, 5, 3, 8, 2\nVertex 5: 4, 7, 6, 2, 3, 8\nVertex 6: 4, 3, 7, 5, 1, 2\nVertex 7: 4, 5, 6, 2, 3, 8, 1\nVertex 8: 1, 2, 3, 7, 4, 5\n",
    "graph_output": "8 25\n4 6\n4 7\n1 8\n6 3\n5 4\n2 8\n7 5\n7 6\n1 2\n5 6\n3 8\n1 6\n2 7\n3 7\n7 8\n5 2\n3 5\n2 6\n3 1\n3 2\n3 4\n1 7\n8 4\n4 2\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3422,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 84 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 5 and vertex 15.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 14 and vertex 13.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 9 and vertex 15.\n",
    "graph_output": "15 84\n1 2\n2 11\n11 4\n1 5\n4 7\n1 15\n4 6\n11 9\n11 10\n10 12\n11 3\n4 8\n4 13\n5 14\n12 14\n5 4\n1 4\n9 6\n15 7\n5 8\n14 11\n10 8\n9 13\n15 8\n6 10\n7 11\n1 11\n5 15\n3 8\n7 2\n9 10\n5 10\n6 8\n2 13\n1 8\n15 3\n8 9\n10 1\n6 2\n1 7\n2 15\n4 2\n1 14\n15 10\n14 3\n1 9\n12 11\n10 14\n12 4\n2 9\n12 5\n1 13\n13 6\n14 13\n6 3\n2 5\n2 10\n11 5\n15 6\n3 12\n15 13\n14 6\n3 5\n10 3\n13 7\n10 13\n4 15\n3 1\n7 8\n11 15\n6 5\n5 7\n9 5\n6 11\n13 3\n13 8\n2 8\n12 2\n8 12\n14 2\n12 1\n12 9\n7 9\n9 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 21 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 12, 7, 5\nVertex 2: 12, 7, 3, 9, 10, 5\nVertex 3: 8, 4, 2, 9\nVertex 4: 3, 8\nVertex 5: 1, 2\nVertex 6: 1, 12\nVertex 7: 1, 10, 2, 9\nVertex 8: 9, 3, 4\nVertex 9: 8, 3, 12, 2, 7\nVertex 10: 12, 7, 2\nVertex 11: 12\nVertex 12: 10, 1, 11, 2, 6, 9\n",
    "graph_output": "12 21\n12 10\n6 1\n1 12\n9 8\n1 7\n7 10\n11 12\n3 8\n2 12\n2 7\n4 3\n2 3\n12 6\n1 5\n3 9\n9 12\n2 9\n4 8\n9 7\n10 2\n2 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 13 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 56 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   1   1   1   1   0   1   1   1   0   1   1 \n 2 |  0   0   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   0   1   0   1   1   0   0 \n 4 |  1   1   1   0   0   0   1   1   1   1   1   0   0 \n 5 |  1   1   1   0   0   0   1   0   1   1   0   0   1 \n 6 |  1   1   1   0   0   0   0   1   1   1   1   1   1 \n 7 |  0   1   0   1   1   0   0   0   1   0   0   1   1 \n 8 |  1   1   1   1   0   1   0   0   1   1   0   1   1 \n 9 |  1   1   0   1   1   1   1   1   0   0   1   1   1 \n10 |  1   1   1   1   1   1   0   1   0   0   1   1   1 \n11 |  0   1   1   1   0   1   0   0   1   1   0   0   1 \n12 |  1   1   0   0   0   1   1   1   1   1   0   0   1 \n13 |  1   1   0   0   1   1   1   1   1   1   1   1   0 \n\nCapacity Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   4   6   9   5   0   2   3   7   0   4   9 \n 2 |  0   0   5   2   8   4   6   2   8   1   7   1   8 \n 3 |  4   5   0   2   8   2   0   5   0   3   7   0   0 \n 4 |  6   2   2   0   0   0   1   3   1  10   2   0   0 \n 5 |  9   8   8   0   0   0   1   0  10   6   0   0   4 \n 6 |  5   4   2   0   0   0   0   5  10  10   2   5   4 \n 7 |  0   6   0   1   1   0   0   0  10   0   0   5   5 \n 8 |  2   2   5   3   0   5   0   0   5   2   0   8   3 \n 9 |  3   8   0   1  10  10  10   5   0   0   5   2   9 \n10 |  7   1   3  10   6  10   0   2   0   0   4   7   2 \n11 |  0   7   7   2   0   2   0   0   5   4   0   0   3 \n12 |  4   1   0   0   0   5   5   8   2   7   0   0   1 \n13 |  9   8   0   0   4   4   5   3   9   2   3   1   0 \n",
    "graph_output": "13 56\n1 13 9\n1 9 3\n1 3 4\n9 6 10\n9 2 8\n13 8 3\n9 7 10\n9 4 1\n3 11 7\n8 10 2\n3 5 8\n1 12 4\n2 4 2\n5 10 6\n4 1 6\n9 8 5\n12 13 1\n1 5 9\n8 3 5\n6 8 5\n4 8 3\n10 6 10\n11 6 2\n3 2 5\n10 2 1\n8 1 2\n12 7 5\n11 9 5\n6 12 5\n10 13 2\n10 12 7\n2 7 6\n8 2 2\n10 1 7\n10 4 10\n10 3 3\n7 4 1\n10 11 4\n13 6 4\n5 13 4\n6 2 4\n2 11 7\n3 6 2\n13 11 3\n11 4 2\n12 8 8\n12 9 2\n3 4 2\n2 13 8\n5 2 8\n7 5 1\n6 1 5\n7 13 5\n5 9 10\n2 12 1\n13 9 9\n",
    "vertices": [
      13,
      4
    ],
    "answer": 27,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 21 and 2 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 18, 12, 9\nVertex 2: 5, 10, 19, 25\nVertex 3: 29, 21\nVertex 4: 22\nVertex 5: 14, 7, 2, 23, 27\nVertex 6: 7\nVertex 7: 5, 24, 6\nVertex 8: 10, 17\nVertex 9: 1\nVertex 10: 2, 8\nVertex 11: 20\nVertex 12: 1, 16\nVertex 13: 14\nVertex 14: 1, 5, 20, 26, 13\nVertex 15: 19\nVertex 16: 12\nVertex 17: 8\nVertex 18: 1, 30\nVertex 19: 2, 15\nVertex 20: 14, 22, 11\nVertex 21: 3\nVertex 22: 20, 4\nVertex 23: 5, 28\nVertex 24: 7\nVertex 25: 2\nVertex 26: 14\nVertex 27: 5\nVertex 28: 23\nVertex 29: 30, 3\nVertex 30: 18, 29\n",
    "graph_output": "30 29\n1 14\n14 5\n5 7\n1 18\n14 20\n14 26\n18 30\n30 29\n20 22\n5 2\n2 10\n7 24\n7 6\n5 23\n2 19\n19 15\n1 12\n1 9\n2 25\n22 4\n29 3\n3 21\n5 27\n10 8\n14 13\n8 17\n20 11\n12 16\n23 28\n",
    "vertices": [
      21,
      2
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 14 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 9 and vertex 10.\n",
    "graph_output": "13 14\n13 8\n9 12\n11 10\n10 7\n6 4\n9 11\n9 13\n5 11\n7 6\n1 4\n2 12\n12 3\n7 5\n9 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 17 vertices and 102 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 10, 15, 17, 13, 12, 2, 4, 7, 5\nVertex 2: 10, 1, 12, 9, 6, 16, 15, 4, 7, 8, 5, 13\nVertex 3: 15, 17, 7, 11, 14, 6, 4, 10, 9, 8, 13, 5\nVertex 4: 16, 10, 9, 6, 7, 17, 1, 3, 2, 13, 14, 11\nVertex 5: 15, 8, 11, 12, 6, 14, 16, 17, 7, 3, 9, 2, 10, 1\nVertex 6: 9, 11, 10, 15, 8, 4, 5, 2, 13, 3, 12\nVertex 7: 10, 9, 14, 4, 3, 16, 12, 5, 11, 2, 15, 8, 1\nVertex 8: 5, 11, 6, 10, 15, 13, 3, 9, 16, 2, 7, 12, 14\nVertex 9: 7, 16, 6, 12, 14, 4, 2, 10, 11, 3, 8, 5, 17, 13\nVertex 10: 1, 7, 2, 6, 16, 11, 4, 9, 8, 3, 14, 5, 15\nVertex 11: 6, 5, 10, 14, 16, 8, 3, 9, 13, 7, 17, 12, 4\nVertex 12: 9, 13, 1, 17, 2, 5, 15, 14, 7, 11, 6, 8\nVertex 13: 1, 12, 15, 6, 11, 8, 3, 4, 16, 2, 17, 9\nVertex 14: 7, 9, 11, 15, 5, 3, 12, 17, 4, 10, 8\nVertex 15: 1, 3, 5, 6, 13, 14, 12, 17, 2, 8, 7, 10\nVertex 16: 9, 4, 10, 11, 2, 5, 7, 17, 8, 13\nVertex 17: 1, 3, 12, 4, 5, 15, 16, 11, 14, 9, 13\n",
    "graph_output": "17 102\n1 10\n10 7\n7 9\n9 16\n1 15\n15 3\n15 5\n1 17\n10 2\n5 8\n16 4\n9 6\n1 13\n7 14\n6 11\n9 12\n11 5\n12 13\n1 12\n9 14\n3 17\n1 2\n10 6\n16 10\n17 12\n11 10\n14 11\n2 12\n6 15\n15 13\n4 10\n9 4\n9 2\n16 11\n14 15\n12 5\n8 11\n8 6\n10 9\n4 6\n8 10\n6 5\n7 4\n17 4\n5 14\n2 6\n16 2\n7 3\n13 6\n11 3\n16 5\n5 17\n12 15\n4 1\n14 3\n14 12\n11 9\n17 15\n7 16\n3 6\n12 7\n16 17\n11 13\n15 2\n15 8\n5 7\n4 3\n7 11\n2 4\n3 10\n8 13\n17 11\n9 3\n3 8\n9 8\n3 13\n17 14\n3 5\n7 2\n9 5\n16 8\n13 4\n15 7\n17 9\n8 2\n14 4\n11 12\n8 7\n1 7\n14 10\n13 16\n5 2\n11 4\n6 12\n5 10\n1 5\n12 8\n14 8\n13 2\n17 13\n13 9\n10 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 15 vertices and 27 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 2 |  0   0   0   1   1   0   0   0   0   0   0   0   1   0   0 \n 3 |  0   0   0   0   0   0   0   0   1   1   1   1   0   1   0 \n 4 |  0   1   0   0   1   1   1   0   0   0   0   0   0   0   0 \n 5 |  0   1   0   1   0   0   0   0   0   0   1   1   0   0   0 \n 6 |  0   0   0   1   0   0   0   0   0   1   1   0   0   0   0 \n 7 |  0   0   0   1   0   0   0   1   0   0   0   0   0   1   0 \n 8 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 9 |  0   0   1   0   0   0   0   0   0   0   1   0   0   0   0 \n10 |  0   0   1   0   0   1   0   0   0   0   0   1   1   1   0 \n11 |  1   0   1   0   1   1   0   0   1   0   0   0   0   1   1 \n12 |  0   0   1   0   1   0   0   0   0   1   0   0   0   0   1 \n13 |  0   1   0   0   0   0   0   0   0   1   0   0   0   1   1 \n14 |  0   0   1   0   0   0   1   0   0   1   1   0   1   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   1   1   1   0   0 \n",
    "graph_output": "15 27\n1 11\n11 14\n14 7\n14 13\n11 6\n14 3\n3 12\n11 15\n7 8\n11 9\n13 2\n7 4\n3 10\n2 5\n12 5\n10 6\n12 10\n3 9\n4 6\n5 4\n11 5\n13 10\n4 2\n15 12\n10 14\n3 11\n15 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 109 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 7 (weight=50), 12 (weight=64), 13 (weight=2), 10 (weight=68), 3 (weight=17), 16 (weight=94), 15 (weight=100), 2 (weight=92), 5 (weight=27), 8 (weight=11), 9 (weight=74)\nVertex 2: 3 (weight=71), 13 (weight=98), 6 (weight=70), 11 (weight=25), 15 (weight=86), 9 (weight=65), 4 (weight=31), 1 (weight=92), 14 (weight=56), 8 (weight=2), 16 (weight=7), 5 (weight=77), 7 (weight=19), 12 (weight=43), 10 (weight=7)\nVertex 3: 16 (weight=94), 4 (weight=18), 2 (weight=71), 7 (weight=87), 9 (weight=37), 10 (weight=62), 13 (weight=26), 1 (weight=17), 8 (weight=17), 6 (weight=70), 5 (weight=67), 12 (weight=74)\nVertex 4: 3 (weight=18), 16 (weight=16), 11 (weight=97), 7 (weight=10), 12 (weight=38), 2 (weight=31), 10 (weight=44), 15 (weight=14), 5 (weight=25), 6 (weight=22), 14 (weight=25), 13 (weight=54), 8 (weight=19)\nVertex 5: 12 (weight=78), 15 (weight=4), 9 (weight=2), 6 (weight=58), 16 (weight=24), 14 (weight=93), 10 (weight=61), 7 (weight=71), 1 (weight=27), 4 (weight=25), 13 (weight=90), 11 (weight=1), 3 (weight=67), 2 (weight=77)\nVertex 6: 13 (weight=39), 10 (weight=17), 9 (weight=62), 5 (weight=58), 2 (weight=70), 14 (weight=99), 3 (weight=70), 4 (weight=22), 8 (weight=87), 12 (weight=79), 15 (weight=97), 11 (weight=86)\nVertex 7: 1 (weight=50), 16 (weight=75), 9 (weight=27), 8 (weight=23), 14 (weight=69), 3 (weight=87), 4 (weight=10), 5 (weight=71), 12 (weight=52), 15 (weight=93), 11 (weight=99), 10 (weight=1), 13 (weight=66), 2 (weight=19)\nVertex 8: 7 (weight=23), 14 (weight=97), 13 (weight=86), 3 (weight=17), 9 (weight=8), 16 (weight=84), 12 (weight=9), 6 (weight=87), 2 (weight=2), 15 (weight=28), 1 (weight=11), 10 (weight=13), 4 (weight=19), 11 (weight=59)\nVertex 9: 7 (weight=27), 6 (weight=62), 5 (weight=2), 3 (weight=37), 15 (weight=22), 2 (weight=65), 8 (weight=8), 13 (weight=80), 16 (weight=40), 11 (weight=23), 10 (weight=46), 14 (weight=46), 12 (weight=20), 1 (weight=74)\nVertex 10: 6 (weight=17), 16 (weight=57), 13 (weight=83), 14 (weight=16), 3 (weight=62), 1 (weight=68), 11 (weight=30), 5 (weight=61), 4 (weight=44), 15 (weight=95), 7 (weight=1), 9 (weight=46), 8 (weight=13), 12 (weight=64), 2 (weight=7)\nVertex 11: 13 (weight=99), 12 (weight=31), 10 (weight=30), 4 (weight=97), 2 (weight=25), 16 (weight=37), 5 (weight=1), 7 (weight=99), 9 (weight=23), 15 (weight=89), 14 (weight=33), 6 (weight=86), 8 (weight=59)\nVertex 12: 1 (weight=64), 5 (weight=78), 13 (weight=87), 11 (weight=31), 4 (weight=38), 7 (weight=52), 15 (weight=12), 16 (weight=24), 8 (weight=9), 14 (weight=1), 6 (weight=79), 10 (weight=64), 3 (weight=74), 9 (weight=20), 2 (weight=43)\nVertex 13: 1 (weight=2), 15 (weight=98), 11 (weight=99), 6 (weight=39), 12 (weight=87), 14 (weight=47), 10 (weight=83), 2 (weight=98), 3 (weight=26), 8 (weight=86), 9 (weight=80), 5 (weight=90), 7 (weight=66), 16 (weight=36), 4 (weight=54)\nVertex 14: 15 (weight=62), 13 (weight=47), 7 (weight=69), 10 (weight=16), 8 (weight=97), 5 (weight=93), 16 (weight=54), 2 (weight=56), 6 (weight=99), 4 (weight=25), 12 (weight=1), 11 (weight=33), 9 (weight=46)\nVertex 15: 13 (weight=98), 14 (weight=62), 5 (weight=4), 9 (weight=22), 2 (weight=86), 1 (weight=100), 12 (weight=12), 16 (weight=21), 4 (weight=14), 10 (weight=95), 7 (weight=93), 11 (weight=89), 8 (weight=28), 6 (weight=97)\nVertex 16: 7 (weight=75), 3 (weight=94), 10 (weight=57), 5 (weight=24), 4 (weight=16), 11 (weight=37), 1 (weight=94), 14 (weight=54), 15 (weight=21), 12 (weight=24), 9 (weight=40), 8 (weight=84), 2 (weight=7), 13 (weight=36)\n",
    "graph_output": "16 109\n1 7 50\n7 16 75\n1 12 64\n1 13 2\n16 3 94\n12 5 78\n13 15 98\n7 9 27\n15 14 62\n3 4 18\n13 11 99\n3 2 71\n13 6 39\n6 10 17\n7 8 23\n9 6 62\n5 15 4\n12 13 87\n16 10 57\n13 14 47\n5 9 2\n10 13 83\n5 6 58\n14 7 69\n10 14 16\n5 16 24\n7 3 87\n9 3 37\n3 10 62\n11 12 31\n2 13 98\n4 16 16\n3 13 26\n1 10 68\n2 6 70\n10 11 30\n3 1 17\n11 4 97\n14 8 97\n2 11 25\n5 14 93\n4 7 10\n15 9 22\n2 15 86\n10 5 61\n11 16 37\n8 13 86\n5 7 71\n12 4 38\n16 1 94\n7 12 52\n1 15 100\n9 2 65\n8 3 17\n2 4 31\n4 10 44\n14 16 54\n15 12 12\n15 16 21\n8 9 8\n16 12 24\n15 4 14\n15 10 95\n2 1 92\n5 1 27\n9 13 80\n2 14 56\n16 9 40\n8 16 84\n12 8 9\n14 6 99\n15 7 93\n4 5 25\n6 3 70\n5 13 90\n5 11 1\n6 4 22\n7 11 99\n7 10 1\n9 11 23\n15 11 89\n14 4 25\n5 3 67\n8 6 87\n8 2 2\n14 12 1\n15 8 28\n14 11 33\n9 10 46\n2 16 7\n12 6 79\n7 13 66\n14 9 46\n1 8 11\n15 6 97\n2 5 77\n8 10 13\n16 13 36\n10 12 64\n4 13 54\n3 12 74\n9 12 20\n4 8 19\n1 9 74\n2 7 19\n12 2 43\n10 2 7\n11 6 86\n11 8 59\n",
    "vertices": [
      null,
      null
    ],
    "answer": 99,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nUndirected Graph with 16 vertices and 26 edges\n\nEdges (Format: Node Node):\n1 3\n1 10\n10 15\n1 4\n3 11\n3 9\n1 16\n16 7\n11 6\n6 5\n9 2\n6 8\n7 14\n2 13\n16 12\n16 13\n7 3\n1 7\n4 12\n16 4\n7 6\n14 9\n10 14\n12 15\n12 7\n14 16\n",
    "graph_output": "16 26\n1 3\n1 10\n10 15\n1 4\n3 11\n3 9\n1 16\n16 7\n11 6\n6 5\n9 2\n6 8\n7 14\n2 13\n16 12\n16 13\n7 3\n1 7\n4 12\n16 4\n7 6\n14 9\n10 14\n12 15\n12 7\n14 16\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 5 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 20 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 8 (capacity=1), 9 (capacity=4), 4 (capacity=6), 3 (capacity=5)\nVertex 2: 9 (capacity=10), 3 (capacity=4), 6 (capacity=2), 5 (capacity=4), 10 (capacity=7)\nVertex 3: 2 (capacity=4), 10 (capacity=9), 6 (capacity=9), 1 (capacity=5)\nVertex 4: 1 (capacity=6), 6 (capacity=4)\nVertex 5: 6 (capacity=10), 2 (capacity=4)\nVertex 6: 11 (capacity=6), 5 (capacity=10), 7 (capacity=2), 2 (capacity=2), 3 (capacity=9), 4 (capacity=4)\nVertex 7: 8 (capacity=3), 6 (capacity=2), 10 (capacity=6)\nVertex 8: 1 (capacity=1), 7 (capacity=3), 11 (capacity=1)\nVertex 9: 1 (capacity=4), 10 (capacity=4), 2 (capacity=10), 12 (capacity=1)\nVertex 10: 9 (capacity=4), 3 (capacity=9), 7 (capacity=6), 2 (capacity=7)\nVertex 11: 8 (capacity=1), 6 (capacity=6)\nVertex 12: 9 (capacity=1)\n",
    "graph_output": "12 20\n1 8 1\n8 7 3\n8 11 1\n11 6 6\n1 9 4\n9 10 4\n6 5 10\n9 2 10\n9 12 1\n1 4 6\n2 3 4\n7 6 2\n3 10 9\n7 10 6\n6 2 2\n6 3 9\n5 2 4\n3 1 5\n4 6 4\n2 10 7\n",
    "vertices": [
      5,
      2
    ],
    "answer": 14,
    "description_type": "list"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (30\u00d730):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n   ------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 5 |  0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n10 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   1   0   0 \n13 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n16 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  1   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   1   0   1   0   0   0   1   0   0   0   0   0   0 \n18 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1 \n20 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n23 |  1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n26 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   1   1   0   1   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n30 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "30 29\n1 17\n17 18\n1 23\n17 20\n17 12\n12 28\n12 27\n27 19\n23 2\n17 8\n8 26\n19 5\n28 14\n14 7\n27 25\n17 24\n28 21\n21 29\n29 4\n5 3\n28 15\n26 22\n18 6\n3 10\n10 16\n5 13\n27 9\n28 11\n19 30\n",
    "vertices": [
      null,
      null
    ],
    "answer": 12,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 3 (source) to vertex 8 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 52 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2 with a capacity of 5.\nThere is an edge between vertex 1 and vertex 6 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 11 with a capacity of 10.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 3 with a capacity of 4.\nThere is an edge between vertex 6 and vertex 10 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 2 and vertex 4 with a capacity of 7.\nThere is an edge between vertex 10 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 2 and vertex 5 with a capacity of 6.\nThere is an edge between vertex 3 and vertex 9 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 6 with a capacity of 1.\nThere is an edge between vertex 9 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 6 and vertex 2 with a capacity of 2.\nThere is an edge between vertex 1 and vertex 8 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 1 with a capacity of 7.\nThere is an edge between vertex 8 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 5 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 9 and vertex 1 with a capacity of 8.\nThere is an edge between vertex 6 and vertex 5 with a capacity of 10.\nThere is an edge between vertex 9 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 5 and vertex 10 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 8 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 4 and vertex 9 with a capacity of 9.\nThere is an edge between vertex 10 and vertex 1 with a capacity of 3.\nThere is an edge between vertex 10 and vertex 2 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 8 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 11 and vertex 3 with a capacity of 3.\nThere is an edge between vertex 11 and vertex 7 with a capacity of 7.\nThere is an edge between vertex 4 and vertex 5 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 6 with a capacity of 7.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 8.\nThere is an edge between vertex 1 and vertex 3 with a capacity of 3.\nThere is an edge between vertex 6 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 8 and vertex 7 with a capacity of 4.\nThere is an edge between vertex 4 and vertex 10 with a capacity of 8.\nThere is an edge between vertex 4 and vertex 7 with a capacity of 3.\nThere is an edge between vertex 11 and vertex 4 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 3 with a capacity of 7.\nThere is an edge between vertex 10 and vertex 3 with a capacity of 4.\nThere is an edge between vertex 9 and vertex 2 with a capacity of 7.\nThere is an edge between vertex 8 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 1 and vertex 5 with a capacity of 1.\nThere is an edge between vertex 8 and vertex 2 with a capacity of 9.\nThere is an edge between vertex 10 and vertex 11 with a capacity of 9.\nThere is an edge between vertex 9 and vertex 5 with a capacity of 3.\nThere is an edge between vertex 10 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 7.\nThere is an edge between vertex 7 and vertex 9 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 8 with a capacity of 10.\n",
    "graph_output": "11 52\n1 2 5\n1 6 2\n2 11 10\n6 8 2\n2 3 4\n6 10 1\n3 7 5\n2 4 7\n10 9 5\n2 5 6\n3 9 1\n11 6 1\n9 11 2\n6 2 2\n1 8 2\n4 1 7\n8 10 4\n5 11 2\n9 1 8\n6 5 10\n9 6 10\n5 10 9\n7 2 1\n8 4 6\n4 9 9\n10 1 3\n10 2 5\n7 5 9\n8 5 2\n11 3 3\n11 7 7\n4 5 6\n7 6 7\n3 5 8\n1 3 3\n6 4 1\n8 7 4\n4 10 8\n4 7 3\n11 4 9\n4 3 7\n10 3 4\n9 2 7\n8 9 4\n1 5 1\n8 2 9\n10 11 9\n9 5 3\n10 7 5\n6 3 7\n7 9 5\n3 8 10\n",
    "vertices": [
      3,
      8
    ],
    "answer": 43,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 17 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 6 and vertex 15.\n",
    "graph_output": "16 17\n1 2\n2 12\n12 7\n12 5\n12 10\n7 8\n1 15\n5 13\n2 14\n15 4\n14 6\n12 16\n2 9\n9 3\n4 11\n13 2\n6 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 16 vertices and 115 edges\n\nEdges (Format: Node Node):\n1 13\n13 14\n13 5\n14 3\n13 7\n13 4\n1 15\n7 2\n2 16\n1 11\n2 12\n16 8\n3 10\n2 9\n12 6\n16 10\n16 4\n13 3\n3 5\n13 9\n15 5\n16 14\n15 4\n12 7\n14 2\n16 9\n15 16\n13 6\n14 10\n4 1\n13 12\n7 11\n2 11\n12 10\n10 6\n1 6\n16 7\n6 3\n2 3\n6 9\n4 9\n5 16\n10 2\n3 8\n5 11\n1 14\n10 11\n1 12\n15 6\n2 1\n2 4\n6 2\n3 7\n3 12\n16 11\n3 4\n9 8\n9 14\n9 7\n3 16\n12 14\n4 8\n5 7\n11 3\n10 8\n6 16\n1 5\n9 11\n15 9\n12 5\n12 8\n13 8\n1 10\n6 14\n4 11\n1 16\n7 14\n12 16\n7 4\n5 6\n13 10\n15 11\n16 13\n1 8\n8 7\n9 12\n12 4\n4 14\n9 10\n5 4\n15 13\n13 11\n5 14\n14 15\n10 7\n5 8\n5 2\n6 8\n1 7\n11 8\n13 2\n15 2\n15 3\n11 14\n4 6\n1 3\n7 15\n12 15\n9 3\n15 10\n8 2\n9 5\n4 10\n5 10\n1 9\n",
    "graph_output": "16 115\n1 13\n13 14\n13 5\n14 3\n13 7\n13 4\n1 15\n7 2\n2 16\n1 11\n2 12\n16 8\n3 10\n2 9\n12 6\n16 10\n16 4\n13 3\n3 5\n13 9\n15 5\n16 14\n15 4\n12 7\n14 2\n16 9\n15 16\n13 6\n14 10\n4 1\n13 12\n7 11\n2 11\n12 10\n10 6\n1 6\n16 7\n6 3\n2 3\n6 9\n4 9\n5 16\n10 2\n3 8\n5 11\n1 14\n10 11\n1 12\n15 6\n2 1\n2 4\n6 2\n3 7\n3 12\n16 11\n3 4\n9 8\n9 14\n9 7\n3 16\n12 14\n4 8\n5 7\n11 3\n10 8\n6 16\n1 5\n9 11\n15 9\n12 5\n12 8\n13 8\n1 10\n6 14\n4 11\n1 16\n7 14\n12 16\n7 4\n5 6\n13 10\n15 11\n16 13\n1 8\n8 7\n9 12\n12 4\n4 14\n9 10\n5 4\n15 13\n13 11\n5 14\n14 15\n10 7\n5 8\n5 2\n6 8\n1 7\n11 8\n13 2\n15 2\n15 3\n11 14\n4 6\n1 3\n7 15\n12 15\n9 3\n15 10\n8 2\n9 5\n4 10\n5 10\n1 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 19 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   0   0   1   0   0   1   0   0   1   0   0   0 \n 2 |  0   0   0   0   1   0   0   0   0   0   1   0   1 \n 3 |  0   0   0   0   0   0   0   0   0   0   1   0   1 \n 4 |  1   0   0   0   0   1   0   0   0   0   0   0   0 \n 5 |  0   1   0   0   0   1   1   0   0   0   1   0   0 \n 6 |  0   0   0   1   1   0   1   0   0   0   0   0   0 \n 7 |  1   0   0   0   1   1   0   1   0   1   1   0   0 \n 8 |  0   0   0   0   0   0   1   0   0   0   0   0   1 \n 9 |  0   0   0   0   0   0   0   0   0   1   0   0   0 \n10 |  1   0   0   0   0   0   1   0   1   0   0   0   0 \n11 |  0   1   1   0   1   0   1   0   0   0   0   1   0 \n12 |  0   0   0   0   0   0   0   0   0   0   1   0   0 \n13 |  0   1   1   0   0   0   0   1   0   0   0   0   0 \n",
    "graph_output": "13 19\n2 13\n7 1\n7 6\n7 8\n9 10\n2 5\n5 6\n1 4\n11 7\n5 7\n3 11\n10 1\n5 11\n2 11\n7 10\n13 8\n13 3\n11 12\n4 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 61 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 8, 6, 4, 3, 5, 11, 10, 12\nVertex 2: 3, 9, 6, 4, 8, 12, 11, 7, 10\nVertex 3: 4, 2, 5, 9, 6, 12, 1, 8, 7, 10, 11\nVertex 4: 3, 6, 8, 12, 1, 11, 9, 2, 10, 7, 5\nVertex 5: 12, 10, 3, 6, 7, 1, 9, 8, 11, 4\nVertex 6: 4, 1, 9, 8, 3, 5, 10, 2, 7, 12\nVertex 7: 1, 8, 11, 6, 5, 10, 9, 3, 2, 4\nVertex 8: 12, 7, 10, 1, 4, 6, 3, 2, 5, 11, 9\nVertex 9: 6, 11, 3, 2, 4, 12, 5, 7, 8, 10\nVertex 10: 8, 5, 12, 6, 11, 7, 4, 3, 2, 1, 9\nVertex 11: 7, 12, 9, 4, 10, 5, 1, 2, 3, 8\nVertex 12: 8, 5, 11, 10, 4, 3, 9, 2, 6, 1\n",
    "graph_output": "12 61\n7 1\n3 4\n12 8\n6 4\n8 7\n10 8\n5 12\n11 7\n8 1\n11 12\n1 6\n4 8\n5 10\n2 3\n5 3\n9 6\n12 10\n11 9\n9 3\n4 12\n9 2\n6 8\n6 3\n5 6\n12 3\n4 1\n4 11\n6 10\n6 2\n4 9\n4 2\n7 6\n10 11\n3 1\n5 7\n3 8\n12 9\n1 5\n10 7\n10 4\n9 5\n8 2\n7 9\n5 8\n5 11\n2 12\n1 11\n3 7\n2 11\n3 10\n2 7\n11 3\n10 2\n10 1\n8 11\n12 6\n7 4\n12 1\n8 9\n4 5\n10 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 1 (source) to vertex 10 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 12 vertices and 62 edges\n\nEdges (Format: Node Node Capacity):\n1 5 6\n5 10 6\n5 2 1\n5 7 5\n5 6 2\n5 9 4\n5 11 2\n5 3 1\n11 4 7\n5 12 9\n7 8 8\n1 3 5\n12 2 8\n3 10 2\n6 10 3\n2 10 6\n11 2 5\n10 1 3\n6 3 10\n9 1 10\n3 11 6\n8 4 2\n12 4 10\n3 9 1\n11 9 8\n4 9 9\n12 6 4\n6 11 6\n6 1 2\n8 10 10\n8 6 2\n4 3 2\n2 9 3\n1 7 4\n2 3 6\n8 9 7\n2 4 9\n8 3 2\n8 12 10\n9 12 6\n9 7 9\n10 9 6\n11 7 9\n4 7 5\n12 3 9\n6 7 9\n4 10 6\n7 2 7\n12 7 8\n6 4 4\n4 1 8\n8 5 9\n6 2 3\n7 3 10\n11 1 1\n6 9 1\n10 7 5\n2 8 2\n8 11 5\n1 12 7\n11 10 10\n10 12 2\n",
    "graph_output": "12 62\n1 5 6\n5 10 6\n5 2 1\n5 7 5\n5 6 2\n5 9 4\n5 11 2\n5 3 1\n11 4 7\n5 12 9\n7 8 8\n1 3 5\n12 2 8\n3 10 2\n6 10 3\n2 10 6\n11 2 5\n10 1 3\n6 3 10\n9 1 10\n3 11 6\n8 4 2\n12 4 10\n3 9 1\n11 9 8\n4 9 9\n12 6 4\n6 11 6\n6 1 2\n8 10 10\n8 6 2\n4 3 2\n2 9 3\n1 7 4\n2 3 6\n8 9 7\n2 4 9\n8 3 2\n8 12 10\n9 12 6\n9 7 9\n10 9 6\n11 7 9\n4 7 5\n12 3 9\n6 7 9\n4 10 6\n7 2 7\n12 7 8\n6 4 4\n4 1 8\n8 5 9\n6 2 3\n7 3 10\n11 1 1\n6 9 1\n10 7 5\n2 8 2\n8 11 5\n1 12 7\n11 10 10\n10 12 2\n",
    "vertices": [
      1,
      10
    ],
    "answer": 46,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 30 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 12, 14, 13, 10, 4, 6\nVertex 2: 9, 15\nVertex 3: 14, 9, 15\nVertex 4: 8, 6, 1, 11\nVertex 5: 9, 7, 14\nVertex 6: 15, 11, 4, 9, 1\nVertex 7: 9, 8, 12, 5\nVertex 8: 7, 4, 12\nVertex 9: 3, 7, 5, 2, 13, 15, 6\nVertex 10: 1, 12\nVertex 11: 14, 6, 4, 13\nVertex 12: 1, 7, 10, 8\nVertex 13: 1, 9, 11\nVertex 14: 1, 3, 15, 11, 5\nVertex 15: 14, 6, 3, 9, 2\n",
    "graph_output": "15 30\n1 12\n1 14\n1 13\n1 10\n14 3\n3 9\n14 15\n9 7\n15 6\n7 8\n9 5\n14 11\n9 2\n8 4\n11 6\n12 7\n6 4\n9 13\n3 15\n15 9\n5 7\n9 6\n4 1\n10 12\n14 5\n8 12\n15 2\n11 4\n6 1\n11 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 12 vertices and 55 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 4 and vertex 7.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 4 and vertex 10.\n",
    "graph_output": "12 55\n11 10\n6 1\n9 3\n8 12\n6 8\n2 1\n6 2\n12 10\n5 8\n7 11\n1 4\n5 10\n4 11\n12 4\n7 5\n1 10\n1 11\n1 12\n4 5\n7 9\n3 8\n5 9\n5 12\n4 9\n1 8\n11 9\n10 9\n9 1\n8 10\n11 8\n7 1\n3 7\n6 3\n8 2\n2 5\n5 11\n3 11\n10 6\n11 2\n4 3\n4 8\n1 3\n9 2\n4 7\n2 3\n3 5\n12 2\n10 7\n11 12\n6 9\n12 7\n9 12\n12 3\n8 9\n4 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 14 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 6 and vertex 2.\n",
    "graph_output": "6 14\n5 2\n5 4\n1 4\n2 3\n2 1\n1 5\n4 2\n6 3\n3 4\n5 6\n6 4\n3 5\n1 6\n6 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 133,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 102 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0   0  97  59  65  55  76  36  33  58  79   5  84  46   0 \n 2 |  0   0  27  74  29   6  68   0  28  73   0  40  96  56  28  44 \n 3 |  0  27   0  47  79  69  34  35   0  24  91  42   0   0  23   9 \n 4 | 97  74  47   0  48   5   9  20  69  32  50  73  61  79  77  42 \n 5 | 59  29  79  48   0   0  13  21  74  46  74  42  75   0  73   2 \n 6 | 65   6  69   5   0   0  75 100  22  94  13  61  12  24  47  22 \n 7 | 55  68  34   9  13  75   0  84  24  73   0  69  62   9  15  19 \n 8 | 76   0  35  20  21 100  84   0  51  17   3   0   5   0  54  64 \n 9 | 36  28   0  69  74  22  24  51   0   0  22  74   0  68   0  91 \n10 | 33  73  24  32  46  94  73  17   0   0  85  17  99   0  32  88 \n11 | 58   0  91  50  74  13   0   3  22  85   0  83  28   8   3  65 \n12 | 79  40  42  73  42  61  69   0  74  17  83   0   4   3  47  23 \n13 |  5  96   0  61  75  12  62   5   0  99  28   4   0  90  73  52 \n14 | 84  56   0  79   0  24   9   0  68   0   8   3  90   0   0  83 \n15 | 46  28  23  77  73  47  15  54   0  32   3  47  73   0   0   1 \n16 |  0  44   9  42   2  22  19  64  91  88  65  23  52  83   1   0 \n",
    "graph_output": "16 102\n1 15 46\n15 8 54\n15 6 47\n1 4 97\n4 16 42\n1 5 59\n8 13 5\n5 11 74\n13 2 96\n15 12 47\n5 3 79\n2 10 73\n13 7 62\n6 9 22\n4 14 79\n5 12 42\n10 5 46\n3 15 23\n13 5 75\n12 4 73\n6 16 22\n16 13 52\n9 5 74\n14 12 3\n5 15 73\n14 6 24\n3 7 34\n16 14 83\n1 13 5\n8 10 17\n4 9 69\n4 5 48\n7 9 24\n12 16 23\n6 1 65\n1 9 36\n7 15 15\n16 11 65\n12 7 69\n2 3 27\n6 3 69\n2 12 40\n16 9 91\n11 10 85\n1 8 76\n9 11 22\n13 12 4\n10 6 94\n3 12 42\n1 7 55\n4 10 32\n14 2 56\n2 4 74\n11 6 13\n3 10 24\n6 7 75\n11 8 3\n13 10 99\n9 12 74\n7 10 73\n3 16 9\n7 2 68\n12 10 17\n11 12 83\n12 1 79\n8 5 21\n13 6 12\n11 4 50\n13 4 61\n11 13 28\n6 8 100\n3 8 35\n14 9 68\n15 13 73\n10 16 88\n4 15 77\n14 11 8\n16 8 64\n14 7 9\n8 9 51\n9 2 28\n10 15 32\n11 3 91\n4 6 5\n15 11 3\n8 4 20\n1 11 58\n2 16 44\n7 16 19\n6 2 6\n8 7 84\n5 7 13\n1 14 84\n16 15 1\n1 10 33\n2 15 28\n5 16 2\n4 7 9\n3 4 47\n5 2 29\n6 12 61\n14 13 90\n",
    "vertices": [
      null,
      null
    ],
    "answer": 103,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 9 (source) to vertex 6 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 61 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 3 (capacity=8), 2 (capacity=8), 9 (capacity=2), 6 (capacity=9), 12 (capacity=1), 11 (capacity=8), 8 (capacity=7), 5 (capacity=3), 4 (capacity=3), 10 (capacity=8)\nVertex 2: 1 (capacity=8), 5 (capacity=5), 3 (capacity=5), 6 (capacity=2), 12 (capacity=3), 10 (capacity=9), 7 (capacity=1), 4 (capacity=4), 9 (capacity=6), 8 (capacity=5)\nVertex 3: 1 (capacity=8), 10 (capacity=5), 4 (capacity=7), 6 (capacity=9), 8 (capacity=9), 7 (capacity=4), 2 (capacity=5), 9 (capacity=4), 5 (capacity=1)\nVertex 4: 3 (capacity=7), 12 (capacity=3), 5 (capacity=8), 11 (capacity=9), 9 (capacity=4), 2 (capacity=4), 8 (capacity=3), 6 (capacity=4), 10 (capacity=2), 1 (capacity=3)\nVertex 5: 4 (capacity=8), 12 (capacity=5), 2 (capacity=5), 10 (capacity=3), 9 (capacity=6), 7 (capacity=3), 3 (capacity=1), 8 (capacity=5), 6 (capacity=6), 1 (capacity=3), 11 (capacity=1)\nVertex 6: 3 (capacity=9), 1 (capacity=9), 11 (capacity=9), 2 (capacity=2), 7 (capacity=5), 8 (capacity=3), 12 (capacity=3), 10 (capacity=9), 9 (capacity=5), 5 (capacity=6), 4 (capacity=4)\nVertex 7: 11 (capacity=8), 3 (capacity=4), 6 (capacity=5), 5 (capacity=3), 8 (capacity=4), 2 (capacity=1), 9 (capacity=4), 12 (capacity=1), 10 (capacity=5)\nVertex 8: 3 (capacity=9), 1 (capacity=7), 10 (capacity=3), 6 (capacity=3), 7 (capacity=4), 5 (capacity=5), 12 (capacity=7), 11 (capacity=9), 9 (capacity=3), 4 (capacity=3), 2 (capacity=5)\nVertex 9: 1 (capacity=2), 10 (capacity=10), 3 (capacity=4), 12 (capacity=4), 5 (capacity=6), 4 (capacity=4), 6 (capacity=5), 7 (capacity=4), 8 (capacity=3), 2 (capacity=6), 11 (capacity=5)\nVertex 10: 3 (capacity=5), 9 (capacity=10), 5 (capacity=3), 8 (capacity=3), 11 (capacity=4), 2 (capacity=9), 12 (capacity=4), 6 (capacity=9), 7 (capacity=5), 4 (capacity=2), 1 (capacity=8)\nVertex 11: 4 (capacity=9), 7 (capacity=8), 1 (capacity=8), 6 (capacity=9), 10 (capacity=4), 8 (capacity=9), 12 (capacity=8), 9 (capacity=5), 5 (capacity=1)\nVertex 12: 4 (capacity=3), 5 (capacity=5), 1 (capacity=1), 9 (capacity=4), 2 (capacity=3), 6 (capacity=3), 10 (capacity=4), 8 (capacity=7), 7 (capacity=1), 11 (capacity=8)\n",
    "graph_output": "12 61\n1 3 8\n1 2 8\n3 10 5\n3 4 7\n4 12 3\n4 5 8\n1 9 2\n3 6 9\n4 11 9\n3 8 9\n11 7 8\n1 6 9\n7 3 4\n12 5 5\n10 9 10\n1 12 1\n5 2 5\n2 3 5\n1 11 8\n3 9 4\n11 6 9\n2 6 2\n12 9 4\n2 12 3\n10 5 3\n7 6 5\n1 8 7\n9 5 6\n8 10 3\n11 10 4\n6 8 3\n4 9 4\n5 7 3\n3 5 1\n2 10 9\n6 12 3\n7 8 4\n12 10 4\n10 6 9\n6 9 5\n5 8 5\n2 7 1\n8 12 7\n9 7 4\n4 2 4\n7 12 1\n11 8 9\n9 8 3\n4 8 3\n12 11 8\n9 2 6\n2 8 5\n7 10 5\n6 5 6\n6 4 4\n1 5 3\n11 9 5\n4 10 2\n4 1 3\n10 1 8\n5 11 1\n",
    "vertices": [
      9,
      6
    ],
    "answer": 53,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 17 vertices and 102 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 11 and vertex 5.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 6 and vertex 15.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 17 and vertex 4.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 5 and vertex 17.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 17 and vertex 15.\nThere is an edge between vertex 7 and vertex 16.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 16 and vertex 17.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 8 and vertex 13.\nThere is an edge between vertex 17 and vertex 11.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 17 and vertex 14.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 16 and vertex 8.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 13 and vertex 16.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 17 and vertex 13.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 10 and vertex 15.\n",
    "graph_output": "17 102\n1 10\n10 7\n7 9\n9 16\n1 15\n15 3\n15 5\n1 17\n10 2\n5 8\n16 4\n9 6\n1 13\n7 14\n6 11\n9 12\n11 5\n12 13\n1 12\n9 14\n3 17\n1 2\n10 6\n16 10\n17 12\n11 10\n14 11\n2 12\n6 15\n15 13\n4 10\n9 4\n9 2\n16 11\n14 15\n12 5\n8 11\n8 6\n10 9\n4 6\n8 10\n6 5\n7 4\n17 4\n5 14\n2 6\n16 2\n7 3\n13 6\n11 3\n16 5\n5 17\n12 15\n4 1\n14 3\n14 12\n11 9\n17 15\n7 16\n3 6\n12 7\n16 17\n11 13\n15 2\n15 8\n5 7\n4 3\n7 11\n2 4\n3 10\n8 13\n17 11\n9 3\n3 8\n9 8\n3 13\n17 14\n3 5\n7 2\n9 5\n16 8\n13 4\n15 7\n17 9\n8 2\n14 4\n11 12\n8 7\n1 7\n14 10\n13 16\n5 2\n11 4\n6 12\n5 10\n1 5\n12 8\n14 8\n13 2\n17 13\n13 9\n10 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 16 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 11 and vertex 15.\n",
    "graph_output": "15 16\n1 10\n10 7\n7 4\n7 2\n10 14\n7 3\n4 15\n14 12\n7 9\n9 8\n7 5\n7 13\n8 6\n9 11\n15 13\n11 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (31\u00d731):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31\n   ----------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 4 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   1   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   1   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 9 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n15 |  1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n16 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0 \n22 |  0   0   0   0   1   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  1   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  1   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n30 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n31 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n",
    "graph_output": "31 30\n1 9\n9 22\n1 26\n22 6\n1 15\n15 29\n6 17\n6 7\n26 4\n29 20\n9 19\n22 21\n19 12\n4 30\n30 31\n22 5\n1 27\n4 3\n6 18\n21 28\n7 24\n3 25\n19 23\n27 11\n1 16\n26 8\n27 14\n15 13\n13 2\n14 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 16, 5, 13, 10, 7, 3\nVertex 2: 16, 14, 7, 6\nVertex 3: 16, 4, 1\nVertex 4: 15, 9, 3, 11\nVertex 5: 1, 7, 11\nVertex 6: 16, 11, 2\nVertex 7: 2, 5, 1\nVertex 8: 15, 12\nVertex 9: 10, 4, 13\nVertex 10: 1, 9, 16, 14\nVertex 11: 16, 6, 5, 4\nVertex 12: 15, 8\nVertex 13: 1, 9\nVertex 14: 2, 10\nVertex 15: 16, 8, 4, 12\nVertex 16: 1, 15, 6, 2, 11, 3, 10\n",
    "graph_output": "16 28\n1 16\n1 5\n1 13\n1 10\n16 15\n16 6\n16 2\n2 14\n15 8\n15 4\n2 7\n16 11\n15 12\n16 3\n10 9\n4 9\n3 4\n5 7\n7 1\n1 3\n12 8\n11 6\n16 10\n10 14\n5 11\n6 2\n13 9\n4 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 13 vertices and 66 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 8 and vertex 3.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 9 and vertex 4.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 3 and vertex 13.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 6 and vertex 2.\n",
    "graph_output": "13 66\n4 10\n9 11\n6 1\n1 7\n12 3\n8 3\n3 11\n12 10\n6 8\n4 1\n2 12\n1 13\n4 2\n6 10\n7 4\n2 9\n12 9\n1 11\n7 11\n6 7\n7 12\n10 3\n11 2\n6 11\n4 8\n5 13\n5 7\n13 11\n8 7\n13 7\n9 1\n5 8\n6 4\n1 5\n7 10\n7 9\n6 3\n9 6\n10 13\n1 10\n4 3\n5 12\n9 4\n8 12\n9 10\n12 6\n4 5\n1 12\n13 8\n4 12\n4 11\n6 13\n2 5\n10 2\n3 13\n12 11\n3 5\n8 2\n8 11\n3 2\n1 8\n3 1\n10 5\n2 1\n5 11\n6 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 8 to vertex 2 in the weighted graph.\n\nUndirected, Weighted Graph with 14 vertices and 15 edges\n\nEdges (Format: Node Node Weight):\n1 3 60\n3 4 89\n1 11 34\n1 10 66\n3 7 96\n10 12 87\n11 13 95\n3 14 33\n14 5 77\n1 8 49\n10 9 74\n8 2 15\n4 6 38\n13 10 9\n13 8 4\n",
    "graph_output": "14 15\n1 3 60\n3 4 89\n1 11 34\n1 10 66\n3 7 96\n10 12 87\n11 13 95\n3 14 33\n14 5 77\n1 8 49\n10 9 74\n8 2 15\n4 6 38\n13 10 9\n13 8 4\n",
    "vertices": [
      8,
      2
    ],
    "answer": 15,
    "description_type": "structured"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 14 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (6\u00d76):\n\n      1   2   3   4   5   6\n   ------------------------\n 1 |  0   1   0   1   1   1 \n 2 |  1   0   1   1   1   1 \n 3 |  0   1   0   1   1   1 \n 4 |  1   1   1   0   1   1 \n 5 |  1   1   1   1   0   1 \n 6 |  1   1   1   1   1   0 \n",
    "graph_output": "6 14\n5 2\n5 4\n1 4\n2 3\n2 1\n1 5\n4 2\n6 3\n3 4\n5 6\n6 4\n3 5\n1 6\n6 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 133,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 12 vertices and 58 edges\n\nEdges (Format: Node Node):\n1 8\n8 5\n9 4\n6 4\n4 2\n6 2\n12 4\n11 6\n11 1\n5 3\n6 1\n10 8\n4 10\n9 7\n6 12\n10 5\n7 8\n12 7\n10 2\n2 7\n6 3\n1 12\n6 5\n9 8\n8 4\n7 4\n7 10\n12 11\n7 1\n7 5\n9 10\n1 10\n2 3\n10 6\n9 1\n3 10\n4 5\n3 7\n11 9\n12 10\n2 12\n9 3\n8 6\n1 5\n11 2\n5 9\n2 5\n1 3\n11 5\n11 10\n7 11\n12 8\n11 3\n11 4\n8 3\n7 6\n4 1\n8 11\n",
    "graph_output": "12 58\n1 8\n8 5\n9 4\n6 4\n4 2\n6 2\n12 4\n11 6\n11 1\n5 3\n6 1\n10 8\n4 10\n9 7\n6 12\n10 5\n7 8\n12 7\n10 2\n2 7\n6 3\n1 12\n6 5\n9 8\n8 4\n7 4\n7 10\n12 11\n7 1\n7 5\n9 10\n1 10\n2 3\n10 6\n9 1\n3 10\n4 5\n3 7\n11 9\n12 10\n2 12\n9 3\n8 6\n1 5\n11 2\n5 9\n2 5\n1 3\n11 5\n11 10\n7 11\n12 8\n11 3\n11 4\n8 3\n7 6\n4 1\n8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 150,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 5 (source) to vertex 8 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 21 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 8 (capacity=9), 10 (capacity=4), 9 (capacity=9), 5 (capacity=10)\nVertex 2: 11 (capacity=1), 7 (capacity=8)\nVertex 3: 4 (capacity=3), 8 (capacity=8), 10 (capacity=10)\nVertex 4: 12 (capacity=9), 3 (capacity=3), 5 (capacity=3)\nVertex 5: 11 (capacity=10), 1 (capacity=10), 4 (capacity=3)\nVertex 6: 11 (capacity=8), 8 (capacity=8)\nVertex 7: 10 (capacity=6), 2 (capacity=8), 11 (capacity=2), 9 (capacity=10)\nVertex 8: 1 (capacity=9), 11 (capacity=9), 12 (capacity=4), 3 (capacity=8), 6 (capacity=8)\nVertex 9: 1 (capacity=9), 10 (capacity=10), 7 (capacity=10)\nVertex 10: 1 (capacity=4), 12 (capacity=8), 7 (capacity=6), 3 (capacity=10), 9 (capacity=10)\nVertex 11: 8 (capacity=9), 2 (capacity=1), 5 (capacity=10), 6 (capacity=8), 7 (capacity=2)\nVertex 12: 10 (capacity=8), 4 (capacity=9), 8 (capacity=4)\n",
    "graph_output": "12 21\n1 8 9\n8 11 9\n11 2 1\n11 5 10\n1 10 4\n11 6 8\n1 9 9\n10 12 8\n10 7 6\n12 4 9\n4 3 3\n7 2 8\n12 8 4\n3 8 8\n3 10 10\n9 10 10\n7 11 2\n8 6 8\n9 7 10\n1 5 10\n4 5 3\n",
    "vertices": [
      5,
      8
    ],
    "answer": 23,
    "description_type": "list"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 15 and 8 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (29\u00d729):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n   --------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   1   0 \n 2 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   1   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 6 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n10 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0 \n13 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n15 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  1   1   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0 \n20 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n24 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n25 |  0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0 \n28 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0 \n",
    "graph_output": "29 28\n1 19\n19 27\n19 2\n27 21\n19 16\n21 29\n1 18\n2 3\n29 23\n27 14\n3 25\n25 9\n3 6\n18 7\n25 24\n16 17\n19 10\n17 8\n1 28\n17 5\n8 15\n24 12\n12 26\n7 11\n3 20\n3 13\n10 4\n26 22\n",
    "vertices": [
      15,
      8
    ],
    "answer": 8,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (29\u00d729):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n   --------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 2 |  0   0   1   0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 6 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 8 |  1   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 9 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n12 |  0   0   0   1   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n13 |  0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   1   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n21 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n23 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n24 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n28 |  0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n29 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "29 28\n1 8\n1 3\n3 2\n2 14\n8 12\n12 5\n12 26\n26 20\n14 11\n2 9\n1 23\n5 24\n8 28\n8 13\n23 22\n26 17\n11 21\n9 19\n13 10\n5 6\n12 4\n14 15\n10 16\n28 27\n28 7\n13 18\n3 29\n16 25\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 13 vertices and 69 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   0   1   1 \n 2 |  1   0   1   1   0   1   1   1   1   1   1   1   0 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1 \n 5 |  1   0   1   1   0   1   1   0   1   1   1   0   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   0   1   1   1   1 \n 8 |  1   1   1   1   0   1   1   0   1   1   1   0   1 \n 9 |  1   1   1   1   1   1   0   1   0   1   0   0   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1 \n11 |  0   1   1   1   1   1   1   1   0   1   0   1   1 \n12 |  1   1   1   1   0   1   1   0   0   1   1   0   1 \n13 |  1   0   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "13 69\n7 4\n7 5\n6 2\n1 7\n11 12\n7 6\n10 2\n2 1\n8 4\n3 12\n13 8\n10 11\n6 1\n1 13\n11 5\n1 8\n1 5\n9 5\n9 13\n1 3\n11 4\n3 5\n2 9\n2 3\n13 7\n3 7\n2 8\n12 4\n3 6\n4 1\n5 4\n13 5\n10 5\n13 3\n9 10\n3 11\n13 4\n1 12\n2 11\n6 5\n4 9\n13 12\n4 6\n2 7\n8 6\n6 10\n1 10\n10 8\n10 3\n6 11\n1 9\n11 8\n7 12\n3 4\n7 11\n6 12\n13 11\n13 6\n7 8\n3 8\n10 7\n13 10\n3 9\n2 4\n9 6\n4 10\n10 12\n9 8\n12 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 198,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 9 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 17 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 12 (capacity=2), 9 (capacity=10), 3 (capacity=6), 2 (capacity=2), 4 (capacity=9)\nVertex 2: 1 (capacity=2), 11 (capacity=2)\nVertex 3: 1 (capacity=6), 7 (capacity=7), 5 (capacity=2)\nVertex 4: 10 (capacity=3), 12 (capacity=3), 1 (capacity=9)\nVertex 5: 3 (capacity=2), 11 (capacity=7)\nVertex 6: 10 (capacity=8)\nVertex 7: 3 (capacity=7), 8 (capacity=4), 9 (capacity=8)\nVertex 8: 9 (capacity=9), 7 (capacity=4), 10 (capacity=6)\nVertex 9: 1 (capacity=10), 8 (capacity=9), 7 (capacity=8)\nVertex 10: 12 (capacity=1), 6 (capacity=8), 4 (capacity=3), 8 (capacity=6)\nVertex 11: 2 (capacity=2), 5 (capacity=7)\nVertex 12: 1 (capacity=2), 10 (capacity=1), 4 (capacity=3)\n",
    "graph_output": "12 17\n1 12 2\n1 9 10\n12 10 1\n9 8 9\n10 6 8\n10 4 3\n1 3 6\n3 7 7\n1 2 2\n3 5 2\n2 11 2\n5 11 7\n8 7 4\n9 7 8\n12 4 3\n10 8 6\n1 4 9\n",
    "vertices": [
      3,
      9
    ],
    "answer": 15,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 13 vertices and 20 edges\n\nEdges (Format: Node Node Weight):\n1 8 58\n8 13 94\n13 10 14\n1 11 70\n11 4 93\n4 9 54\n9 12 52\n4 3 25\n10 2 44\n1 6 45\n8 7 33\n2 5 61\n10 3 31\n13 1 13\n5 1 97\n11 12 64\n2 9 17\n9 13 9\n13 3 16\n11 7 19\n",
    "graph_output": "13 20\n1 8 58\n8 13 94\n13 10 14\n1 11 70\n11 4 93\n4 9 54\n9 12 52\n4 3 25\n10 2 44\n1 6 45\n8 7 33\n2 5 61\n10 3 31\n13 1 13\n5 1 97\n11 12 64\n2 9 17\n9 13 9\n13 3 16\n11 7 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 368,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 12 vertices and 64 edges\n\nEdges (Format: Node Node):\n11 12\n3 5\n9 10\n7 6\n3 1\n10 6\n10 2\n3 4\n4 7\n5 10\n4 8\n2 12\n6 8\n10 4\n12 9\n4 6\n9 1\n4 1\n1 6\n2 3\n12 8\n12 1\n10 3\n5 6\n11 8\n2 5\n4 12\n7 11\n1 2\n7 3\n3 9\n9 11\n11 4\n12 5\n4 2\n5 4\n7 10\n2 7\n9 8\n3 11\n10 11\n5 9\n1 5\n7 12\n11 5\n4 9\n11 2\n6 2\n3 12\n1 8\n6 12\n9 7\n3 8\n5 7\n2 9\n1 10\n9 6\n5 8\n6 11\n7 1\n2 8\n8 10\n7 8\n1 11\n",
    "graph_output": "12 64\n11 12\n3 5\n9 10\n7 6\n3 1\n10 6\n10 2\n3 4\n4 7\n5 10\n4 8\n2 12\n6 8\n10 4\n12 9\n4 6\n9 1\n4 1\n1 6\n2 3\n12 8\n12 1\n10 3\n5 6\n11 8\n2 5\n4 12\n7 11\n1 2\n7 3\n3 9\n9 11\n11 4\n12 5\n4 2\n5 4\n7 10\n2 7\n9 8\n3 11\n10 11\n5 9\n1 5\n7 12\n11 5\n4 9\n11 2\n6 2\n3 12\n1 8\n6 12\n9 7\n3 8\n5 7\n2 9\n1 10\n9 6\n5 8\n6 11\n7 1\n2 8\n8 10\n7 8\n1 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 17 vertices and 115 edges\n\nEdges (Format: Node Node):\n7 13\n4 8\n12 13\n3 1\n13 10\n15 17\n1 17\n8 16\n15 6\n13 3\n6 14\n11 10\n1 4\n3 12\n8 15\n3 10\n3 9\n3 5\n5 7\n5 14\n8 2\n16 10\n17 5\n13 5\n14 8\n4 13\n12 11\n17 2\n14 17\n1 11\n13 11\n10 1\n16 13\n9 12\n7 3\n16 11\n6 10\n15 12\n16 6\n12 10\n13 6\n4 16\n6 7\n11 9\n1 9\n12 8\n3 4\n16 7\n5 2\n16 14\n3 16\n14 9\n11 6\n10 4\n10 8\n11 2\n2 1\n7 2\n14 15\n9 10\n10 15\n14 3\n1 12\n14 10\n6 9\n5 4\n9 7\n3 11\n13 1\n5 16\n17 8\n4 12\n7 12\n2 14\n15 2\n15 9\n3 6\n11 14\n6 12\n15 13\n10 7\n8 1\n13 14\n10 17\n15 5\n6 2\n5 11\n12 17\n14 4\n4 17\n11 17\n14 7\n1 5\n11 8\n4 9\n5 10\n8 6\n12 5\n5 9\n12 16\n3 8\n4 2\n15 4\n15 11\n6 17\n1 15\n2 12\n3 17\n6 1\n16 2\n9 16\n4 11\n13 9\n17 9\n13 8\n",
    "graph_output": "17 115\n7 13\n4 8\n12 13\n3 1\n13 10\n15 17\n1 17\n8 16\n15 6\n13 3\n6 14\n11 10\n1 4\n3 12\n8 15\n3 10\n3 9\n3 5\n5 7\n5 14\n8 2\n16 10\n17 5\n13 5\n14 8\n4 13\n12 11\n17 2\n14 17\n1 11\n13 11\n10 1\n16 13\n9 12\n7 3\n16 11\n6 10\n15 12\n16 6\n12 10\n13 6\n4 16\n6 7\n11 9\n1 9\n12 8\n3 4\n16 7\n5 2\n16 14\n3 16\n14 9\n11 6\n10 4\n10 8\n11 2\n2 1\n7 2\n14 15\n9 10\n10 15\n14 3\n1 12\n14 10\n6 9\n5 4\n9 7\n3 11\n13 1\n5 16\n17 8\n4 12\n7 12\n2 14\n15 2\n15 9\n3 6\n11 14\n6 12\n15 13\n10 7\n8 1\n13 14\n10 17\n15 5\n6 2\n5 11\n12 17\n14 4\n4 17\n11 17\n14 7\n1 5\n11 8\n4 9\n5 10\n8 6\n12 5\n5 9\n12 16\n3 8\n4 2\n15 4\n15 11\n6 17\n1 15\n2 12\n3 17\n6 1\n16 2\n9 16\n4 11\n13 9\n17 9\n13 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 1 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 10 vertices and 20 edges. The graph has both weights and capacity constraints on its edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 10 with a weight of 10 and a capacity of 4.\nThere is an edge between vertex 1 and vertex 7 with a weight of 85 and a capacity of 8.\nThere is an edge between vertex 7 and vertex 5 with a weight of 94 and a capacity of 2.\nThere is an edge between vertex 5 and vertex 2 with a weight of 4 and a capacity of 2.\nThere is an edge between vertex 7 and vertex 9 with a weight of 65 and a capacity of 3.\nThere is an edge between vertex 10 and vertex 3 with a weight of 100 and a capacity of 1.\nThere is an edge between vertex 2 and vertex 8 with a weight of 56 and a capacity of 9.\nThere is an edge between vertex 2 and vertex 6 with a weight of 85 and a capacity of 6.\nThere is an edge between vertex 8 and vertex 4 with a weight of 62 and a capacity of 2.\nThere is an edge between vertex 2 and vertex 9 with a weight of 46 and a capacity of 8.\nThere is an edge between vertex 4 and vertex 3 with a weight of 55 and a capacity of 3.\nThere is an edge between vertex 9 and vertex 8 with a weight of 24 and a capacity of 9.\nThere is an edge between vertex 2 and vertex 7 with a weight of 62 and a capacity of 3.\nThere is an edge between vertex 1 and vertex 8 with a weight of 9 and a capacity of 5.\nThere is an edge between vertex 1 and vertex 4 with a weight of 35 and a capacity of 4.\nThere is an edge between vertex 4 and vertex 10 with a weight of 28 and a capacity of 10.\nThere is an edge between vertex 7 and vertex 6 with a weight of 41 and a capacity of 5.\nThere is an edge between vertex 9 and vertex 3 with a weight of 46 and a capacity of 8.\nThere is an edge between vertex 9 and vertex 10 with a weight of 11 and a capacity of 2.\nThere is an edge between vertex 1 and vertex 2 with a weight of 48 and a capacity of 9.\n",
    "graph_output": "10 20\n1 10 10 4\n1 7 85 8\n7 5 94 2\n5 2 4 2\n7 9 65 3\n10 3 100 1\n2 8 56 9\n2 6 85 6\n8 4 62 2\n2 9 46 8\n4 3 55 3\n9 8 24 9\n2 7 62 3\n1 8 9 5\n1 4 35 4\n4 10 28 10\n7 6 41 5\n9 3 46 8\n9 10 11 2\n1 2 48 9\n",
    "vertices": [
      4,
      1
    ],
    "answer": 1370,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 8 vertices and 7 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 4\nVertex 2: 4\nVertex 3: 4\nVertex 4: 3, 8, 2, 1, 5\nVertex 5: 4\nVertex 6: No connections\nVertex 7: 8\nVertex 8: 1, 4, 7\n",
    "graph_output": "8 7\n1 8\n4 3\n8 4\n8 7\n4 2\n1 4\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 100 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   0   1   1   1   1   1   1   1   1   0 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   0   1   1 \n 6 |  1   1   0   1   1   0   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   0   1   1   1   0   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   0   1   1   0   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n13 |  1   1   1   1   0   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   1   1   1   0   1   1   1   1   1   1   0   1 \n15 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 100\n11 13\n11 2\n5 11\n5 4\n12 11\n4 2\n10 6\n7 6\n3 7\n1 13\n8 9\n2 13\n1 15\n10 4\n9 14\n11 8\n12 1\n14 10\n12 10\n10 3\n5 9\n14 11\n4 14\n6 14\n15 7\n1 9\n7 5\n9 2\n12 13\n6 12\n7 1\n4 9\n10 13\n1 10\n4 6\n6 2\n5 8\n2 8\n2 10\n15 12\n5 10\n4 3\n13 15\n7 11\n13 4\n14 13\n12 8\n1 3\n8 7\n6 13\n15 4\n5 2\n11 1\n12 14\n13 7\n13 8\n3 8\n5 15\n7 12\n9 3\n4 8\n15 2\n1 6\n12 5\n4 11\n3 14\n11 9\n3 12\n8 1\n8 14\n10 9\n12 9\n13 3\n1 14\n15 11\n13 9\n10 8\n8 15\n7 9\n3 2\n1 4\n10 11\n11 6\n15 10\n6 5\n3 11\n4 12\n14 15\n9 15\n5 14\n5 3\n12 2\n9 6\n4 7\n15 6\n7 2\n5 1\n6 8\n2 14\n1 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 9 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 3, 5, 6\nVertex 2: 6, 7, 4\nVertex 3: 1\nVertex 4: 1, 6, 2\nVertex 5: 1\nVertex 6: 4, 2, 7, 1\nVertex 7: 2, 6\n",
    "graph_output": "7 9\n1 4\n1 3\n4 6\n6 2\n1 5\n2 7\n7 6\n4 2\n6 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 21,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 16 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   1 \n 5 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 7 |  0   1   1   1   1   0   0   0   1   1   0   0   1   0   0 \n 8 |  0   0   0   0   0   1   0   0   1   0   0   0   0   0   0 \n 9 |  0   0   0   0   0   0   1   1   0   0   1   0   0   0   0 \n10 |  1   0   0   0   0   0   1   0   0   0   0   0   0   1   0 \n11 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   1 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n13 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   1 \n14 |  0   0   0   0   0   0   0   0   0   1   0   1   0   0   0 \n15 |  0   0   0   1   0   0   0   0   0   0   1   0   1   0   0 \n",
    "graph_output": "15 16\n1 10\n10 7\n7 4\n7 2\n10 14\n7 3\n4 15\n14 12\n7 9\n9 8\n7 5\n7 13\n8 6\n9 11\n15 13\n11 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 29 and 27 in the given tree, with node 1 as the root.\n\nUndirected Graph with 31 vertices and 30 edges\n\nEdges (Format: Node Node):\n1 20\n20 7\n1 9\n20 22\n22 31\n7 10\n10 15\n7 2\n20 14\n20 30\n22 17\n22 11\n22 18\n30 29\n17 28\n17 13\n13 19\n19 23\n29 3\n22 25\n20 26\n22 6\n29 4\n29 5\n11 21\n25 12\n5 16\n22 8\n10 27\n29 24\n",
    "graph_output": "31 30\n1 20\n20 7\n1 9\n20 22\n22 31\n7 10\n10 15\n7 2\n20 14\n20 30\n22 17\n22 11\n22 18\n30 29\n17 28\n17 13\n13 19\n19 23\n29 3\n22 25\n20 26\n22 6\n29 4\n29 5\n11 21\n25 12\n5 16\n22 8\n10 27\n29 24\n",
    "vertices": [
      29,
      27
    ],
    "answer": 20,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 57 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 9 and vertex 3.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 2 and vertex 8.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 12 and vertex 2.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 7 and vertex 10.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 11 and vertex 3.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 10 and vertex 5.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 9 and vertex 8.\n",
    "graph_output": "12 57\n8 5\n2 4\n3 7\n6 11\n4 1\n8 11\n3 12\n12 4\n2 10\n1 10\n7 12\n9 3\n7 4\n2 8\n7 8\n3 5\n5 9\n12 1\n10 3\n6 12\n12 8\n6 5\n12 2\n9 10\n2 6\n7 10\n2 5\n12 9\n1 8\n11 3\n12 11\n7 5\n3 4\n1 2\n9 7\n5 1\n10 11\n11 2\n3 6\n2 9\n3 2\n6 8\n3 8\n7 2\n4 6\n1 7\n8 10\n1 11\n6 10\n6 7\n5 4\n7 11\n9 6\n10 5\n6 1\n12 5\n9 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 143,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 102 edges\n\nEdges (Format: Node Node Weight):\n1 15 46\n15 8 54\n15 6 47\n1 4 97\n4 16 42\n1 5 59\n8 13 5\n5 11 74\n13 2 96\n15 12 47\n5 3 79\n2 10 73\n13 7 62\n6 9 22\n4 14 79\n5 12 42\n10 5 46\n3 15 23\n13 5 75\n12 4 73\n6 16 22\n16 13 52\n9 5 74\n14 12 3\n5 15 73\n14 6 24\n3 7 34\n16 14 83\n1 13 5\n8 10 17\n4 9 69\n4 5 48\n7 9 24\n12 16 23\n6 1 65\n1 9 36\n7 15 15\n16 11 65\n12 7 69\n2 3 27\n6 3 69\n2 12 40\n16 9 91\n11 10 85\n1 8 76\n9 11 22\n13 12 4\n10 6 94\n3 12 42\n1 7 55\n4 10 32\n14 2 56\n2 4 74\n11 6 13\n3 10 24\n6 7 75\n11 8 3\n13 10 99\n9 12 74\n7 10 73\n3 16 9\n7 2 68\n12 10 17\n11 12 83\n12 1 79\n8 5 21\n13 6 12\n11 4 50\n13 4 61\n11 13 28\n6 8 100\n3 8 35\n14 9 68\n15 13 73\n10 16 88\n4 15 77\n14 11 8\n16 8 64\n14 7 9\n8 9 51\n9 2 28\n10 15 32\n11 3 91\n4 6 5\n15 11 3\n8 4 20\n1 11 58\n2 16 44\n7 16 19\n6 2 6\n8 7 84\n5 7 13\n1 14 84\n16 15 1\n1 10 33\n2 15 28\n5 16 2\n4 7 9\n3 4 47\n5 2 29\n6 12 61\n14 13 90\n",
    "graph_output": "16 102\n1 15 46\n15 8 54\n15 6 47\n1 4 97\n4 16 42\n1 5 59\n8 13 5\n5 11 74\n13 2 96\n15 12 47\n5 3 79\n2 10 73\n13 7 62\n6 9 22\n4 14 79\n5 12 42\n10 5 46\n3 15 23\n13 5 75\n12 4 73\n6 16 22\n16 13 52\n9 5 74\n14 12 3\n5 15 73\n14 6 24\n3 7 34\n16 14 83\n1 13 5\n8 10 17\n4 9 69\n4 5 48\n7 9 24\n12 16 23\n6 1 65\n1 9 36\n7 15 15\n16 11 65\n12 7 69\n2 3 27\n6 3 69\n2 12 40\n16 9 91\n11 10 85\n1 8 76\n9 11 22\n13 12 4\n10 6 94\n3 12 42\n1 7 55\n4 10 32\n14 2 56\n2 4 74\n11 6 13\n3 10 24\n6 7 75\n11 8 3\n13 10 99\n9 12 74\n7 10 73\n3 16 9\n7 2 68\n12 10 17\n11 12 83\n12 1 79\n8 5 21\n13 6 12\n11 4 50\n13 4 61\n11 13 28\n6 8 100\n3 8 35\n14 9 68\n15 13 73\n10 16 88\n4 15 77\n14 11 8\n16 8 64\n14 7 9\n8 9 51\n9 2 28\n10 15 32\n11 3 91\n4 6 5\n15 11 3\n8 4 20\n1 11 58\n2 16 44\n7 16 19\n6 2 6\n8 7 84\n5 7 13\n1 14 84\n16 15 1\n1 10 33\n2 15 28\n5 16 2\n4 7 9\n3 4 47\n5 2 29\n6 12 61\n14 13 90\n",
    "vertices": [
      null,
      null
    ],
    "answer": 103,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 7 and vertex 1 are connected.\n\nUndirected Graph with 15 vertices and 21 edges\n\nEdges (Format: Node Node):\n3 1\n11 6\n5 9\n13 6\n10 12\n10 15\n15 14\n5 7\n6 10\n13 1\n11 12\n2 1\n11 3\n3 13\n5 1\n5 6\n6 4\n5 4\n6 1\n1 8\n7 14\n",
    "graph_output": "15 21\n3 1\n11 6\n5 9\n13 6\n10 12\n10 15\n15 14\n5 7\n6 10\n13 1\n11 12\n2 1\n11 3\n3 13\n5 1\n5 6\n6 4\n5 4\n6 1\n1 8\n7 14\n",
    "vertices": [
      7,
      1
    ],
    "answer": true,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 3 (source) to vertex 8 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 28 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0  41   0  57  42  85   9  93  77 \n 2 | 41   0  98   0   4   0  40  39  55 \n 3 |  0  98   0  28  93  69  13   0  69 \n 4 | 57   0  28   0  17   0  66  58  86 \n 5 | 42   4  93  17   0  80   0   0  56 \n 6 | 85   0  69   0  80   0  50  82   9 \n 7 |  9  40  13  66   0  50   0  92   0 \n 8 | 93  39   0  58   0  82  92   0  74 \n 9 | 77  55  69  86  56   9   0  74   0 \n\nCapacity Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0   4   0   6   4   5   7  10   8 \n 2 |  4   0   5   0   6   0   5   1   7 \n 3 |  0   5   0   4   7   5   9   0   7 \n 4 |  6   0   4   0   9   0   7  10   2 \n 5 |  4   6   7   9   0   2   0   0   1 \n 6 |  5   0   5   0   2   0   1   7   2 \n 7 |  7   5   9   7   0   1   0   8   0 \n 8 | 10   1   0  10   0   7   8   0   9 \n 9 |  8   7   7   2   1   2   0   9   0 \n",
    "graph_output": "9 28\n1 2 41 4\n1 5 42 4\n1 6 85 5\n2 8 39 1\n5 3 93 7\n2 7 40 5\n3 9 69 7\n5 4 17 9\n9 4 86 2\n6 9 9 2\n7 3 13 9\n4 7 66 7\n5 6 80 2\n3 4 28 4\n3 6 69 5\n9 8 74 9\n4 1 57 6\n1 9 77 8\n8 7 92 8\n7 6 50 1\n2 9 55 7\n5 2 4 6\n2 3 98 5\n8 4 58 10\n8 1 93 10\n5 9 56 1\n6 8 82 7\n7 1 9 7\n",
    "vertices": [
      3,
      8
    ],
    "answer": 5346,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 28 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   0  35   0   0   0   0   0  99   1   0   0   0   0  87   0 \n 2 |  0   0  93   0   0  56   0   0   0   0   0   0   0   0   0   0 \n 3 | 35  93   0  67   0  14   0   0   0  95   0   0   0   0   5   0 \n 4 |  0   0  67   0   0   0   0   0  76   0   0   0  88   0   0   0 \n 5 |  0   0   0   0   0   0  47  77  48   0   0   0   0   0   0   0 \n 6 |  0  56  14   0   0   0  28   0  75   0  60   0   0   0   0   0 \n 7 |  0   0   0   0  47  28   0   0  91   0   0   0   0  20   0   0 \n 8 |  0   0   0   0  77   0   0   0  65  70   0   0   0   0   0  95 \n 9 | 99   0   0  76  48  75  91  65   0   0   0   0   0   0   0   0 \n10 |  1   0  95   0   0   0   0  70   0   0   0   0   0  96   0   0 \n11 |  0   0   0   0   0  60   0   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0  77   0   0   0 \n13 |  0   0   0  88   0   0   0   0   0   0   0  77   0   3  88   0 \n14 |  0   0   0   0   0   0  20   0   0  96   0   0   3   0   0   0 \n15 | 87   0   5   0   0   0   0   0   0   0   0   0  88   0   0  79 \n16 |  0   0   0   0   0   0   0  95   0   0   0   0   0   0  79   0 \n",
    "graph_output": "16 28\n1 3 35\n3 15 5\n3 4 67\n4 9 76\n4 13 88\n9 5 48\n3 2 93\n9 6 75\n13 12 77\n9 8 65\n15 16 79\n13 14 3\n1 10 1\n6 7 28\n6 11 60\n10 8 70\n6 3 14\n15 1 87\n10 14 96\n5 7 47\n5 8 77\n7 9 91\n6 2 56\n15 13 88\n16 8 95\n1 9 99\n10 3 95\n14 7 20\n",
    "vertices": [
      null,
      null
    ],
    "answer": 605,
    "description_type": "matrix"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 4 to vertex 5 in the weighted graph.\n\nUndirected, Weighted Graph with 15 vertices and 22 edges\n\nEdges (Format: Node Node Weight):\n1 13 95\n1 11 15\n13 14 1\n11 12 65\n11 4 9\n12 7 14\n11 9 23\n12 3 40\n12 8 7\n7 2 55\n11 6 91\n11 15 24\n8 5 51\n8 10 61\n12 14 72\n14 15 89\n10 13 44\n3 9 34\n7 4 28\n7 15 81\n7 8 84\n14 9 76\n",
    "graph_output": "15 22\n1 13 95\n1 11 15\n13 14 1\n11 12 65\n11 4 9\n12 7 14\n11 9 23\n12 3 40\n12 8 7\n7 2 55\n11 6 91\n11 15 24\n8 5 51\n8 10 61\n12 14 72\n14 15 89\n10 13 44\n3 9 34\n7 4 28\n7 15 81\n7 8 84\n14 9 76\n",
    "vertices": [
      4,
      5
    ],
    "answer": 100,
    "description_type": "structured"
  },
  {
    "task_name": "Connectivity",
    "task_description": "Check if two vertices are connected",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nGiven the graph, determine if vertex 2 and vertex 15 are connected.\n\nThis is an undirected graph with 16 vertices and 27 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 8 and vertex 14.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 2 and vertex 10.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 4 and vertex 14.\nThere is an edge between vertex 9 and vertex 8.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 14 and vertex 1.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 5 and vertex 8.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 8 and vertex 4.\n",
    "graph_output": "16 27\n7 9\n10 1\n15 1\n9 12\n12 11\n14 9\n8 14\n5 10\n2 10\n11 13\n13 2\n16 12\n2 15\n6 8\n14 10\n9 1\n4 2\n4 14\n9 8\n16 9\n8 11\n14 1\n7 4\n12 14\n5 8\n15 9\n8 4\n",
    "vertices": [
      2,
      15
    ],
    "answer": true,
    "description_type": "natural"
  },
  {
    "task_name": "Shortest Path",
    "task_description": "Find the shortest path length between two vertices",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the shortest path length from vertex 15 to vertex 13 in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 31 edges.\n\nThe graph has weights on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge weights.\n\nAdjacency List:\n\nVertex 1: 12 (weight=3), 4 (weight=6), 6 (weight=26)\nVertex 2: 4 (weight=9)\nVertex 3: 5 (weight=16), 9 (weight=54), 11 (weight=23), 4 (weight=45)\nVertex 4: 1 (weight=6), 13 (weight=16), 2 (weight=9), 15 (weight=44), 14 (weight=66), 3 (weight=45)\nVertex 5: 12 (weight=12), 3 (weight=16), 16 (weight=91), 10 (weight=97), 7 (weight=5)\nVertex 6: 1 (weight=26), 9 (weight=81), 10 (weight=67)\nVertex 7: 12 (weight=41), 15 (weight=35), 11 (weight=66), 5 (weight=5), 10 (weight=52)\nVertex 8: 10 (weight=75), 14 (weight=29)\nVertex 9: 3 (weight=54), 6 (weight=81), 15 (weight=23)\nVertex 10: 12 (weight=64), 8 (weight=75), 5 (weight=97), 6 (weight=67), 11 (weight=32), 7 (weight=52)\nVertex 11: 13 (weight=79), 7 (weight=66), 3 (weight=23), 10 (weight=32)\nVertex 12: 1 (weight=3), 10 (weight=64), 7 (weight=41), 5 (weight=12), 13 (weight=8), 14 (weight=29)\nVertex 13: 4 (weight=16), 11 (weight=79), 12 (weight=8), 14 (weight=74)\nVertex 14: 8 (weight=29), 13 (weight=74), 16 (weight=9), 12 (weight=29), 4 (weight=66)\nVertex 15: 7 (weight=35), 4 (weight=44), 9 (weight=23)\nVertex 16: 5 (weight=91), 14 (weight=9)\n",
    "graph_output": "16 31\n1 12 3\n12 10 64\n10 8 75\n12 7 41\n7 15 35\n12 5 12\n5 3 16\n1 4 6\n4 13 16\n8 14 29\n4 2 9\n3 9 54\n1 6 26\n5 16 91\n13 11 79\n12 13 8\n9 6 81\n7 11 66\n10 5 97\n14 13 74\n16 14 9\n11 3 23\n12 14 29\n4 15 44\n9 15 23\n10 6 67\n14 4 66\n10 11 32\n5 7 5\n7 10 52\n3 4 45\n",
    "vertices": [
      15,
      13
    ],
    "answer": 60,
    "description_type": "list"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 20 and 18 in the given tree, with node 1 as the root.\n\nUndirected Graph with 29 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 22\n22 16\n16 2\n1 10\n1 24\n2 20\n16 11\n10 18\n24 19\n10 4\n22 26\n11 14\n26 5\n20 27\n27 17\n1 15\n2 25\n5 12\n26 6\n6 28\n12 29\n2 9\n17 23\n2 8\n14 21\n29 3\n8 7\n4 13\n",
    "graph_output": "29 28\n1 22\n22 16\n16 2\n1 10\n1 24\n2 20\n16 11\n10 18\n24 19\n10 4\n22 26\n11 14\n26 5\n20 27\n27 17\n1 15\n2 25\n5 12\n26 6\n6 28\n12 29\n2 9\n17 23\n2 8\n14 21\n29 3\n8 7\n4 13\n",
    "vertices": [
      20,
      18
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nUndirected Graph with 13 vertices and 75 edges\n\nEdges (Format: Node Node):\n3 7\n8 2\n8 4\n11 9\n2 9\n5 1\n3 6\n2 4\n11 3\n9 5\n4 5\n1 6\n12 7\n2 13\n9 6\n8 11\n13 12\n6 5\n5 7\n11 13\n13 5\n10 13\n3 13\n6 2\n11 7\n10 11\n7 13\n8 3\n1 9\n9 10\n11 12\n7 9\n4 1\n2 3\n1 8\n13 4\n6 11\n11 5\n4 10\n6 10\n4 3\n5 3\n2 11\n12 1\n12 10\n6 4\n3 9\n10 7\n3 12\n12 5\n12 4\n1 2\n8 12\n12 2\n1 7\n7 6\n1 3\n11 4\n3 10\n6 8\n4 7\n11 1\n4 9\n10 8\n9 13\n9 12\n6 13\n7 8\n10 1\n8 13\n5 2\n6 12\n10 2\n5 10\n5 8\n",
    "graph_output": "13 75\n3 7\n8 2\n8 4\n11 9\n2 9\n5 1\n3 6\n2 4\n11 3\n9 5\n4 5\n1 6\n12 7\n2 13\n9 6\n8 11\n13 12\n6 5\n5 7\n11 13\n13 5\n10 13\n3 13\n6 2\n11 7\n10 11\n7 13\n8 3\n1 9\n9 10\n11 12\n7 9\n4 1\n2 3\n1 8\n13 4\n6 11\n11 5\n4 10\n6 10\n4 3\n5 3\n2 11\n12 1\n12 10\n6 4\n3 9\n10 7\n3 12\n12 5\n12 4\n1 2\n8 12\n12 2\n1 7\n7 6\n1 3\n11 4\n3 10\n6 8\n4 7\n11 1\n4 9\n10 8\n9 13\n9 12\n6 13\n7 8\n10 1\n8 13\n5 2\n6 12\n10 2\n5 10\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "structured"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 12 vertices and 21 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   1   1   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   1   0   0   0   0   0   1   1 \n 3 |  1   0   0   1   0   0   0   1   1   0   1   0 \n 4 |  1   0   1   0   0   0   1   0   0   1   0   0 \n 5 |  0   1   0   0   0   1   1   0   0   0   0   0 \n 6 |  0   0   0   0   1   0   0   0   0   1   0   0 \n 7 |  0   0   0   1   1   0   0   0   0   1   1   1 \n 8 |  0   0   1   0   0   0   0   0   0   1   0   1 \n 9 |  0   0   1   0   0   0   0   0   0   0   0   1 \n10 |  0   0   0   1   0   1   1   1   0   0   0   0 \n11 |  0   1   1   0   0   0   1   0   0   0   0   1 \n12 |  0   1   0   0   0   0   1   1   1   0   1   0 \n",
    "graph_output": "12 21\n7 11\n6 5\n12 7\n8 12\n2 11\n11 3\n7 10\n12 11\n4 10\n8 3\n8 10\n12 2\n4 1\n4 7\n4 3\n5 7\n3 1\n2 5\n3 9\n9 12\n10 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 4,
    "description_type": "matrix"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 46 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 3 with a weight of 68.\nThere is an edge between vertex 1 and vertex 8 with a weight of 94.\nThere is an edge between vertex 3 and vertex 7 with a weight of 1.\nThere is an edge between vertex 1 and vertex 11 with a weight of 25.\nThere is an edge between vertex 3 and vertex 6 with a weight of 33.\nThere is an edge between vertex 11 and vertex 2 with a weight of 70.\nThere is an edge between vertex 6 and vertex 4 with a weight of 97.\nThere is an edge between vertex 4 and vertex 5 with a weight of 58.\nThere is an edge between vertex 8 and vertex 10 with a weight of 100.\nThere is an edge between vertex 3 and vertex 9 with a weight of 60.\nThere is an edge between vertex 8 and vertex 12 with a weight of 70.\nThere is an edge between vertex 8 and vertex 2 with a weight of 33.\nThere is an edge between vertex 7 and vertex 5 with a weight of 78.\nThere is an edge between vertex 5 and vertex 6 with a weight of 21.\nThere is an edge between vertex 11 and vertex 4 with a weight of 56.\nThere is an edge between vertex 3 and vertex 4 with a weight of 63.\nThere is an edge between vertex 11 and vertex 5 with a weight of 49.\nThere is an edge between vertex 1 and vertex 9 with a weight of 39.\nThere is an edge between vertex 1 and vertex 2 with a weight of 12.\nThere is an edge between vertex 12 and vertex 2 with a weight of 56.\nThere is an edge between vertex 4 and vertex 8 with a weight of 83.\nThere is an edge between vertex 7 and vertex 8 with a weight of 96.\nThere is an edge between vertex 11 and vertex 9 with a weight of 15.\nThere is an edge between vertex 5 and vertex 1 with a weight of 99.\nThere is an edge between vertex 7 and vertex 4 with a weight of 19.\nThere is an edge between vertex 7 and vertex 6 with a weight of 83.\nThere is an edge between vertex 3 and vertex 11 with a weight of 28.\nThere is an edge between vertex 10 and vertex 6 with a weight of 76.\nThere is an edge between vertex 3 and vertex 10 with a weight of 54.\nThere is an edge between vertex 10 and vertex 1 with a weight of 45.\nThere is an edge between vertex 6 and vertex 2 with a weight of 14.\nThere is an edge between vertex 8 and vertex 9 with a weight of 32.\nThere is an edge between vertex 2 and vertex 3 with a weight of 75.\nThere is an edge between vertex 7 and vertex 12 with a weight of 99.\nThere is an edge between vertex 11 and vertex 8 with a weight of 70.\nThere is an edge between vertex 10 and vertex 2 with a weight of 20.\nThere is an edge between vertex 12 and vertex 4 with a weight of 89.\nThere is an edge between vertex 12 and vertex 1 with a weight of 65.\nThere is an edge between vertex 2 and vertex 4 with a weight of 2.\nThere is an edge between vertex 10 and vertex 5 with a weight of 7.\nThere is an edge between vertex 9 and vertex 10 with a weight of 27.\nThere is an edge between vertex 9 and vertex 12 with a weight of 49.\nThere is an edge between vertex 3 and vertex 5 with a weight of 21.\nThere is an edge between vertex 12 and vertex 11 with a weight of 53.\nThere is an edge between vertex 1 and vertex 7 with a weight of 93.\nThere is an edge between vertex 2 and vertex 5 with a weight of 26.\n",
    "graph_output": "12 46\n1 3 68\n1 8 94\n3 7 1\n1 11 25\n3 6 33\n11 2 70\n6 4 97\n4 5 58\n8 10 100\n3 9 60\n8 12 70\n8 2 33\n7 5 78\n5 6 21\n11 4 56\n3 4 63\n11 5 49\n1 9 39\n1 2 12\n12 2 56\n4 8 83\n7 8 96\n11 9 15\n5 1 99\n7 4 19\n7 6 83\n3 11 28\n10 6 76\n3 10 54\n10 1 45\n6 2 14\n8 9 32\n2 3 75\n7 12 99\n11 8 70\n10 2 20\n12 4 89\n12 1 65\n2 4 2\n10 5 7\n9 10 27\n9 12 49\n3 5 21\n12 11 53\n1 7 93\n2 5 26\n",
    "vertices": [
      null,
      null
    ],
    "answer": 197,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 2 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 69 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 3 (capacity=10), 6 (capacity=6), 2 (capacity=10), 7 (capacity=7), 5 (capacity=1), 10 (capacity=9), 8 (capacity=7), 12 (capacity=3), 11 (capacity=4), 9 (capacity=8), 4 (capacity=3)\nVertex 2: 3 (capacity=4), 7 (capacity=4), 1 (capacity=10), 11 (capacity=7), 9 (capacity=9), 12 (capacity=6), 8 (capacity=10), 4 (capacity=6), 13 (capacity=6), 5 (capacity=2)\nVertex 3: 1 (capacity=10), 13 (capacity=9), 12 (capacity=2), 2 (capacity=4), 9 (capacity=9), 5 (capacity=7), 8 (capacity=5), 10 (capacity=1), 6 (capacity=1), 11 (capacity=1), 4 (capacity=10), 7 (capacity=4)\nVertex 4: 9 (capacity=9), 11 (capacity=2), 8 (capacity=2), 6 (capacity=1), 7 (capacity=4), 3 (capacity=10), 12 (capacity=1), 2 (capacity=6), 13 (capacity=3), 10 (capacity=5), 1 (capacity=3), 5 (capacity=2)\nVertex 5: 11 (capacity=2), 6 (capacity=4), 13 (capacity=8), 3 (capacity=7), 1 (capacity=1), 12 (capacity=5), 7 (capacity=3), 4 (capacity=2), 2 (capacity=2)\nVertex 6: 1 (capacity=6), 10 (capacity=9), 5 (capacity=4), 9 (capacity=4), 4 (capacity=1), 7 (capacity=6), 3 (capacity=1), 8 (capacity=9), 13 (capacity=10), 12 (capacity=4)\nVertex 7: 2 (capacity=4), 6 (capacity=6), 1 (capacity=7), 12 (capacity=3), 10 (capacity=10), 8 (capacity=1), 4 (capacity=4), 11 (capacity=1), 3 (capacity=4), 9 (capacity=6), 5 (capacity=3), 13 (capacity=5)\nVertex 8: 4 (capacity=2), 11 (capacity=3), 12 (capacity=10), 3 (capacity=5), 7 (capacity=1), 2 (capacity=10), 1 (capacity=7), 6 (capacity=9), 9 (capacity=8), 13 (capacity=6)\nVertex 9: 3 (capacity=9), 4 (capacity=9), 6 (capacity=4), 2 (capacity=9), 13 (capacity=5), 1 (capacity=8), 8 (capacity=8), 7 (capacity=6), 10 (capacity=10), 11 (capacity=8), 12 (capacity=4)\nVertex 10: 6 (capacity=9), 3 (capacity=1), 11 (capacity=10), 7 (capacity=10), 13 (capacity=1), 12 (capacity=2), 1 (capacity=9), 4 (capacity=5), 9 (capacity=10)\nVertex 11: 4 (capacity=2), 5 (capacity=2), 8 (capacity=3), 13 (capacity=5), 2 (capacity=7), 10 (capacity=10), 12 (capacity=2), 3 (capacity=1), 7 (capacity=1), 1 (capacity=4), 9 (capacity=8)\nVertex 12: 3 (capacity=2), 8 (capacity=10), 7 (capacity=3), 10 (capacity=2), 11 (capacity=2), 2 (capacity=6), 5 (capacity=5), 1 (capacity=3), 4 (capacity=1), 9 (capacity=4), 6 (capacity=4)\nVertex 13: 3 (capacity=9), 11 (capacity=5), 5 (capacity=8), 10 (capacity=1), 9 (capacity=5), 4 (capacity=3), 7 (capacity=5), 2 (capacity=6), 8 (capacity=6), 6 (capacity=10)\n",
    "graph_output": "13 69\n1 3 10\n3 13 9\n3 12 2\n3 2 4\n3 9 9\n9 4 9\n1 6 6\n4 11 2\n6 10 9\n2 7 4\n11 5 2\n4 8 2\n6 5 4\n9 6 4\n8 11 3\n4 6 1\n6 7 6\n11 13 5\n12 8 10\n5 13 8\n5 3 7\n2 1 10\n3 8 5\n10 3 1\n2 11 7\n11 10 10\n7 1 7\n3 6 1\n2 9 9\n12 7 3\n7 10 10\n10 13 1\n7 8 1\n10 12 2\n5 1 1\n1 10 9\n13 9 5\n12 11 2\n2 12 6\n3 11 1\n7 4 4\n8 2 10\n8 1 7\n5 12 5\n3 4 10\n12 1 3\n11 7 1\n3 7 4\n4 12 1\n2 4 6\n6 8 9\n1 11 4\n1 9 8\n13 4 3\n8 9 8\n9 7 6\n7 5 3\n7 13 5\n4 10 5\n1 4 3\n13 2 6\n9 10 10\n9 11 8\n13 8 6\n5 4 2\n2 5 2\n6 13 10\n9 12 4\n12 6 4\n",
    "vertices": [
      2,
      4
    ],
    "answer": 48,
    "description_type": "list"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nUndirected Graph with 16 vertices and 21 edges\n\nEdges (Format: Node Node):\n1 13\n13 10\n1 12\n13 5\n1 4\n13 2\n13 9\n10 8\n10 11\n1 15\n10 14\n4 6\n14 7\n5 16\n2 3\n3 10\n4 12\n8 12\n15 4\n7 15\n5 11\n",
    "graph_output": "16 21\n1 13\n13 10\n1 12\n13 5\n1 4\n13 2\n13 9\n10 8\n10 11\n1 15\n10 14\n4 6\n14 7\n5 16\n2 3\n3 10\n4 12\n8 12\n15 4\n7 15\n5 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 21 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 11 and vertex 15.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 14 and vertex 2.\nThere is an edge between vertex 6 and vertex 8.\n",
    "graph_output": "16 21\n1 5\n5 12\n5 11\n11 15\n12 13\n11 16\n13 14\n14 7\n11 2\n12 8\n2 6\n16 3\n11 4\n1 10\n14 9\n10 12\n14 4\n13 7\n12 3\n14 2\n6 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nUndirected, Weighted Graph with 16 vertices and 30 edges\n\nEdges (Format: Node Node Weight):\n1 12 31\n1 3 86\n3 14 94\n14 11 77\n1 2 51\n14 9 64\n9 4 67\n1 15 72\n12 13 96\n14 8 44\n11 6 67\n8 10 35\n2 16 57\n4 7 91\n11 5 6\n5 7 26\n2 8 80\n12 10 2\n4 2 64\n13 14 5\n14 5 39\n15 5 29\n11 15 73\n2 9 72\n13 9 25\n15 9 34\n6 2 92\n1 14 19\n13 16 46\n14 12 77\n",
    "graph_output": "16 30\n1 12 31\n1 3 86\n3 14 94\n14 11 77\n1 2 51\n14 9 64\n9 4 67\n1 15 72\n12 13 96\n14 8 44\n11 6 67\n8 10 35\n2 16 57\n4 7 91\n11 5 6\n5 7 26\n2 8 80\n12 10 2\n4 2 64\n13 14 5\n14 5 39\n15 5 29\n11 15 73\n2 9 72\n13 9 25\n15 9 34\n6 2 92\n1 14 19\n13 16 46\n14 12 77\n",
    "vertices": [
      null,
      null
    ],
    "answer": 526,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 7 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 6 and vertex 1.\n",
    "graph_output": "6 7\n1 2\n1 5\n2 6\n5 4\n5 3\n5 6\n6 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 12 (source) to vertex 13 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 71 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   1   1   0   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   0   1   1   1   1   1 \n 4 |  0   1   1   0   1   1   1   1   0   1   1   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   0   0   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1 \n 8 |  1   1   0   1   1   1   1   0   1   1   1   0   1 \n 9 |  1   1   1   0   1   1   1   1   0   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1 \n11 |  1   1   1   1   0   1   1   1   1   1   0   0   1 \n12 |  1   1   1   1   0   1   1   0   1   1   0   0   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0 \n\nCapacity Matrix (13\u00d713):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13\n   ----------------------------------------------------\n 1 |  0   9   3   0  10   5   6   9   5   2   2   5   3 \n 2 |  9   0   3   5   1   5   6   5   4   8   9   2   6 \n 3 |  3   3   0   3   7   9   4   0   5   4   9   8   5 \n 4 |  0   5   3   0   7   8   3   5   0   1   5   2   4 \n 5 | 10   1   7   7   0  10   9   9  10   2   0   0   4 \n 6 |  5   5   9   8  10   0  10   9   5   1   8   3  10 \n 7 |  6   6   4   3   9  10   0   9   8   9   4   9   1 \n 8 |  9   5   0   5   9   9   9   0   7   6   4   0   8 \n 9 |  5   4   5   0  10   5   8   7   0   3   6   9   5 \n10 |  2   8   4   1   2   1   9   6   3   0   2   3   5 \n11 |  2   9   9   5   0   8   4   4   6   2   0   0   8 \n12 |  5   2   8   2   0   3   9   0   9   3   0   0   9 \n13 |  3   6   5   4   4  10   1   8   5   5   8   9   0 \n",
    "graph_output": "13 71\n1 13 3\n1 8 9\n1 7 6\n7 10 9\n13 11 8\n13 3 5\n7 5 9\n8 4 5\n7 12 9\n3 9 5\n11 6 8\n12 2 2\n7 6 10\n2 3 3\n6 8 9\n3 10 4\n4 2 5\n3 5 7\n7 9 8\n8 10 6\n1 6 5\n2 6 5\n3 12 8\n6 4 8\n1 2 9\n12 9 9\n5 4 7\n3 7 4\n4 12 2\n9 13 5\n2 9 4\n8 7 9\n3 1 3\n5 6 10\n1 11 2\n10 4 1\n13 10 5\n6 12 3\n4 11 5\n2 10 8\n9 8 7\n7 2 6\n12 10 3\n4 3 3\n13 6 10\n13 12 9\n11 10 2\n11 7 4\n10 5 2\n5 9 10\n6 9 5\n13 4 4\n1 10 2\n9 11 6\n10 6 1\n7 4 3\n1 12 5\n9 10 3\n5 13 4\n1 9 5\n8 11 4\n8 2 5\n7 13 1\n1 5 10\n2 5 1\n8 13 8\n3 11 9\n13 2 6\n8 5 9\n2 11 9\n6 3 9\n",
    "vertices": [
      12,
      13
    ],
    "answer": 50,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Path",
    "task_description": "Determine if the graph has an Eulerian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian path. An Eulerian path is a path that visits every edge exactly once.\n\nThis is an undirected graph with 17 vertices and 130 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   0   1   1   1   0   1   1 \n 4 |  1   1   1   0   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   0   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   0   1   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   0   0   1   1   0   1   1   1   1 \n11 |  1   0   0   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   0   1   1   0   1   1   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n15 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n16 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n17 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "17 130\n1 4\n1 9\n9 5\n9 8\n9 17\n1 12\n8 11\n9 3\n4 7\n1 6\n7 15\n11 16\n7 14\n5 13\n7 2\n17 10\n17 12\n15 2\n3 1\n9 2\n15 11\n12 2\n2 16\n12 10\n11 10\n15 8\n15 10\n5 3\n16 8\n10 6\n8 7\n3 4\n7 10\n15 1\n4 11\n6 17\n17 2\n14 4\n4 15\n10 8\n2 8\n6 3\n5 8\n12 15\n14 10\n10 5\n2 13\n13 12\n11 17\n12 8\n5 6\n7 1\n4 16\n16 15\n9 12\n7 5\n12 16\n5 12\n8 6\n14 15\n1 16\n17 8\n8 13\n13 17\n5 16\n17 7\n4 9\n11 13\n15 9\n14 13\n14 17\n7 3\n15 6\n6 12\n6 13\n2 5\n3 12\n4 8\n11 5\n17 5\n14 2\n5 15\n6 2\n8 3\n14 5\n1 8\n7 6\n1 13\n6 9\n4 12\n5 1\n9 13\n14 1\n3 14\n7 12\n6 4\n3 13\n13 16\n11 7\n14 11\n14 8\n11 1\n9 16\n2 3\n13 7\n16 7\n11 6\n15 17\n3 17\n16 6\n4 13\n14 9\n10 1\n6 14\n4 2\n4 10\n16 3\n11 9\n3 10\n17 1\n13 15\n17 4\n12 11\n9 7\n14 12\n2 1\n16 17\n10 16\n2 10\n16 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 16 vertices and 21 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 12, 7, 5, 11\nVertex 2: 14\nVertex 3: 7, 14, 5\nVertex 4: 5, 16\nVertex 5: 1, 4, 11, 3\nVertex 6: 1, 13, 15\nVertex 7: 1, 14, 3, 10\nVertex 8: 13\nVertex 9: 12, 16\nVertex 10: 7\nVertex 11: 1, 15, 5\nVertex 12: 1, 9\nVertex 13: 6, 8\nVertex 14: 7, 2, 16, 3\nVertex 15: 11, 6\nVertex 16: 4, 14, 9\n",
    "graph_output": "16 21\n1 6\n1 12\n1 7\n1 5\n1 11\n5 4\n12 9\n7 14\n7 3\n4 16\n11 15\n7 10\n6 13\n14 2\n13 8\n16 14\n6 15\n14 3\n9 16\n5 11\n5 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 11 and 7 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 8 and vertex 21.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 21 and vertex 4.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 21 and vertex 10.\nThere is an edge between vertex 2 and vertex 29.\nThere is an edge between vertex 2 and vertex 17.\nThere is an edge between vertex 4 and vertex 22.\nThere is an edge between vertex 15 and vertex 24.\nThere is an edge between vertex 4 and vertex 20.\nThere is an edge between vertex 4 and vertex 27.\nThere is an edge between vertex 15 and vertex 3.\nThere is an edge between vertex 3 and vertex 25.\nThere is an edge between vertex 21 and vertex 5.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 25 and vertex 18.\nThere is an edge between vertex 18 and vertex 16.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 15 and vertex 28.\nThere is an edge between vertex 6 and vertex 23.\nThere is an edge between vertex 12 and vertex 19.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 20 and vertex 11.\nThere is an edge between vertex 22 and vertex 13.\nThere is an edge between vertex 11 and vertex 26.\n",
    "graph_output": "29 28\n1 8\n8 21\n1 2\n21 4\n2 15\n8 6\n21 10\n2 29\n2 17\n4 22\n15 24\n4 20\n4 27\n15 3\n3 25\n21 5\n10 9\n25 18\n18 16\n6 14\n14 12\n15 28\n6 23\n12 19\n1 7\n20 11\n22 13\n11 26\n",
    "vertices": [
      11,
      7
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nUndirected Graph with 11 vertices and 38 edges\n\nEdges (Format: Node Node):\n9 2\n5 6\n11 3\n7 1\n10 1\n10 5\n11 10\n7 11\n3 8\n10 3\n8 10\n1 2\n9 4\n3 4\n2 3\n11 4\n7 5\n10 7\n5 4\n11 6\n9 6\n7 4\n2 4\n5 9\n5 2\n11 1\n7 8\n6 2\n3 5\n6 8\n8 2\n8 9\n3 7\n9 7\n3 9\n8 5\n8 1\n1 3\n",
    "graph_output": "11 38\n9 2\n5 6\n11 3\n7 1\n10 1\n10 5\n11 10\n7 11\n3 8\n10 3\n8 10\n1 2\n9 4\n3 4\n2 3\n11 4\n7 5\n10 7\n5 4\n11 6\n9 6\n7 4\n2 4\n5 9\n5 2\n11 1\n7 8\n6 2\n3 5\n6 8\n8 2\n8 9\n3 7\n9 7\n3 9\n8 5\n8 1\n1 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "structured"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 5 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 9 vertices and 20 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 2 62 6\n2 7 32 5\n2 6 93 10\n7 4 28 5\n6 8 32 9\n2 5 57 9\n5 9 97 10\n7 3 56 2\n5 3 27 2\n3 1 11 7\n7 8 50 7\n4 3 36 4\n6 4 20 3\n6 3 96 7\n3 2 85 1\n9 8 24 4\n5 4 7 9\n5 7 73 6\n4 9 11 8\n5 1 32 10\n",
    "graph_output": "9 20\n1 2 62 6\n2 7 32 5\n2 6 93 10\n7 4 28 5\n6 8 32 9\n2 5 57 9\n5 9 97 10\n7 3 56 2\n5 3 27 2\n3 1 11 7\n7 8 50 7\n4 3 36 4\n6 4 20 3\n6 3 96 7\n3 2 85 1\n9 8 24 4\n5 4 7 9\n5 7 73 6\n4 9 11 8\n5 1 32 10\n",
    "vertices": [
      4,
      5
    ],
    "answer": 2193,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 8 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 47 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 12 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 3 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 10 with a capacity of 4.\nThere is an edge between vertex 12 and vertex 7 with a capacity of 1.\nThere is an edge between vertex 12 and vertex 11 with a capacity of 7.\nThere is an edge between vertex 11 and vertex 5 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 7 and vertex 4 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 6 with a capacity of 7.\nThere is an edge between vertex 1 and vertex 8 with a capacity of 7.\nThere is an edge between vertex 10 and vertex 2 with a capacity of 3.\nThere is an edge between vertex 4 and vertex 5 with a capacity of 2.\nThere is an edge between vertex 8 and vertex 9 with a capacity of 7.\nThere is an edge between vertex 11 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 2 and vertex 4 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 1 with a capacity of 8.\nThere is an edge between vertex 8 and vertex 2 with a capacity of 1.\nThere is an edge between vertex 11 and vertex 2 with a capacity of 2.\nThere is an edge between vertex 6 and vertex 9 with a capacity of 3.\nThere is an edge between vertex 12 and vertex 6 with a capacity of 6.\nThere is an edge between vertex 5 and vertex 10 with a capacity of 7.\nThere is an edge between vertex 4 and vertex 11 with a capacity of 9.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 6 and vertex 10 with a capacity of 7.\nThere is an edge between vertex 7 and vertex 2 with a capacity of 8.\nThere is an edge between vertex 9 and vertex 12 with a capacity of 10.\nThere is an edge between vertex 7 and vertex 11 with a capacity of 2.\nThere is an edge between vertex 4 and vertex 8 with a capacity of 9.\nThere is an edge between vertex 4 and vertex 12 with a capacity of 1.\nThere is an edge between vertex 3 and vertex 12 with a capacity of 6.\nThere is an edge between vertex 6 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 5 and vertex 12 with a capacity of 9.\nThere is an edge between vertex 10 and vertex 11 with a capacity of 9.\nThere is an edge between vertex 2 and vertex 12 with a capacity of 10.\nThere is an edge between vertex 7 and vertex 3 with a capacity of 2.\nThere is an edge between vertex 6 and vertex 3 with a capacity of 7.\nThere is an edge between vertex 5 and vertex 6 with a capacity of 7.\nThere is an edge between vertex 1 and vertex 4 with a capacity of 8.\nThere is an edge between vertex 2 and vertex 9 with a capacity of 4.\nThere is an edge between vertex 7 and vertex 5 with a capacity of 3.\nThere is an edge between vertex 1 and vertex 10 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 9 and vertex 3 with a capacity of 8.\nThere is an edge between vertex 3 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 9 with a capacity of 8.\nThere is an edge between vertex 10 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 5 and vertex 8 with a capacity of 8.\n",
    "graph_output": "12 47\n1 12 3\n1 3 5\n3 10 4\n12 7 1\n12 11 7\n11 5 1\n11 9 6\n7 4 2\n4 6 7\n1 8 7\n10 2 3\n4 5 2\n8 9 7\n11 8 5\n2 4 9\n7 1 8\n8 2 1\n11 2 2\n6 9 3\n12 6 6\n5 10 7\n4 11 9\n7 8 5\n6 10 7\n7 2 8\n9 12 10\n7 11 2\n4 8 9\n4 12 1\n3 12 6\n6 2 10\n5 12 9\n10 11 9\n2 12 10\n7 3 2\n6 3 7\n5 6 7\n1 4 8\n2 9 4\n7 5 3\n1 10 2\n2 3 8\n9 3 8\n3 5 9\n5 9 8\n10 8 5\n5 8 8\n",
    "vertices": [
      8,
      4
    ],
    "answer": 47,
    "description_type": "natural"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 91 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   0   1   1   0   1   1   0   1   0   1   1   1   1   1 \n 2 |  1   0   1   1   0   0   1   0   1   0   1   1   1   0   1   0 \n 3 |  0   1   0   1   1   1   1   0   0   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   0   1   1   0   0   0   1   1   1   0 \n 5 |  1   0   1   1   0   0   1   0   1   1   1   1   1   1   1   1 \n 6 |  0   0   1   1   0   0   1   1   1   0   1   1   1   1   1   1 \n 7 |  1   1   1   0   1   1   0   1   1   0   0   1   0   1   1   1 \n 8 |  1   0   0   1   0   1   1   0   1   1   1   0   1   0   1   1 \n 9 |  0   1   0   1   1   1   1   1   0   1   1   0   1   1   0   1 \n10 |  1   0   1   0   1   0   0   1   1   0   1   1   1   1   1   1 \n11 |  0   1   1   0   1   1   0   1   1   1   0   1   1   1   0   1 \n12 |  1   1   1   0   1   1   1   0   0   1   1   0   1   1   1   1 \n13 |  1   1   1   1   1   1   0   1   1   1   1   1   0   1   1   1 \n14 |  1   0   1   1   1   1   1   0   1   1   1   1   1   0   0   1 \n15 |  1   1   1   1   1   1   1   1   0   1   0   1   1   0   0   1 \n16 |  1   0   1   0   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "16 91\n1 13\n13 3\n1 16\n1 7\n7 14\n13 11\n13 9\n13 2\n3 15\n1 4\n16 8\n8 6\n8 10\n6 12\n1 5\n3 12\n8 13\n13 15\n13 4\n13 14\n4 14\n11 8\n16 11\n7 2\n12 14\n5 15\n2 11\n15 4\n3 5\n11 9\n6 15\n9 4\n7 9\n13 6\n3 4\n2 1\n2 12\n9 2\n13 12\n5 11\n12 5\n4 8\n16 3\n1 8\n15 7\n14 5\n5 10\n14 6\n8 7\n10 13\n1 12\n9 6\n3 11\n12 11\n8 9\n4 5\n14 11\n5 16\n7 6\n9 10\n15 16\n16 7\n9 14\n3 14\n15 2\n6 11\n12 7\n10 11\n12 15\n10 16\n1 14\n6 4\n6 16\n9 16\n9 5\n13 5\n1 15\n4 2\n16 13\n7 5\n6 3\n14 10\n10 1\n16 12\n14 16\n2 3\n12 10\n3 7\n15 8\n3 10\n15 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 6 (source) to vertex 13 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 13 vertices and 26 edges. Each edge in the graph has a capacity constraint. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 8 with a capacity of 4.\nThere is an edge between vertex 8 and vertex 5 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 2 with a capacity of 10.\nThere is an edge between vertex 1 and vertex 11 with a capacity of 3.\nThere is an edge between vertex 5 and vertex 10 with a capacity of 7.\nThere is an edge between vertex 8 and vertex 9 with a capacity of 6.\nThere is an edge between vertex 9 and vertex 12 with a capacity of 1.\nThere is an edge between vertex 10 and vertex 6 with a capacity of 10.\nThere is an edge between vertex 2 and vertex 7 with a capacity of 5.\nThere is an edge between vertex 9 and vertex 13 with a capacity of 9.\nThere is an edge between vertex 5 and vertex 3 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 4 with a capacity of 1.\nThere is an edge between vertex 13 and vertex 4 with a capacity of 6.\nThere is an edge between vertex 1 and vertex 13 with a capacity of 2.\nThere is an edge between vertex 2 and vertex 6 with a capacity of 3.\nThere is an edge between vertex 4 and vertex 8 with a capacity of 7.\nThere is an edge between vertex 6 and vertex 11 with a capacity of 8.\nThere is an edge between vertex 5 and vertex 12 with a capacity of 9.\nThere is an edge between vertex 10 and vertex 12 with a capacity of 5.\nThere is an edge between vertex 6 and vertex 8 with a capacity of 10.\nThere is an edge between vertex 7 and vertex 8 with a capacity of 5.\nThere is an edge between vertex 3 and vertex 4 with a capacity of 5.\nThere is an edge between vertex 7 and vertex 9 with a capacity of 3.\nThere is an edge between vertex 13 and vertex 8 with a capacity of 6.\nThere is an edge between vertex 10 and vertex 3 with a capacity of 3.\nThere is an edge between vertex 5 and vertex 9 with a capacity of 10.\n",
    "graph_output": "13 26\n1 8 4\n8 5 9\n5 2 10\n1 11 3\n5 10 7\n8 9 6\n9 12 1\n10 6 10\n2 7 5\n9 13 9\n5 3 2\n2 4 1\n13 4 6\n1 13 2\n2 6 3\n4 8 7\n6 11 8\n5 12 9\n10 12 5\n6 8 10\n7 8 5\n3 4 5\n7 9 3\n13 8 6\n10 3 3\n5 9 10\n",
    "vertices": [
      6,
      13
    ],
    "answer": 23,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 9 (source) to vertex 11 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 13 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 6 (capacity=5), 7 (capacity=10), 9 (capacity=6)\nVertex 2: 11 (capacity=9), 9 (capacity=3)\nVertex 3: 11 (capacity=6)\nVertex 4: 6 (capacity=1)\nVertex 5: 10 (capacity=8), 8 (capacity=7), 6 (capacity=3)\nVertex 6: 1 (capacity=5), 10 (capacity=2), 11 (capacity=10), 4 (capacity=1), 5 (capacity=3)\nVertex 7: 1 (capacity=10), 9 (capacity=7)\nVertex 8: 5 (capacity=7)\nVertex 9: 1 (capacity=6), 7 (capacity=7), 2 (capacity=3)\nVertex 10: 6 (capacity=2), 5 (capacity=8)\nVertex 11: 6 (capacity=10), 2 (capacity=9), 3 (capacity=6)\n",
    "graph_output": "11 13\n1 6 5\n6 10 2\n6 11 10\n6 4 1\n11 2 9\n1 7 10\n1 9 6\n10 5 8\n5 8 7\n11 3 6\n7 9 7\n5 6 3\n9 2 3\n",
    "vertices": [
      9,
      11
    ],
    "answer": 8,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 20 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (17\u00d717):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n   --------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   0   1   1   1   1   1   1   1 \n 2 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0 \n 7 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0 \n 9 |  0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   1   0 \n10 |  0   0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0 \n11 |  1   0   0   0   0   0   0   0   0   1   0   0   0   1   1   0   0 \n12 |  1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  1   0   0   0   1   0   0   0   1   0   0   0   0   0   0   0   0 \n14 |  1   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0 \n15 |  1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n16 |  1   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   0 \n17 |  1   0   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "17 20\n1 17\n17 4\n1 11\n11 15\n1 16\n11 14\n16 9\n9 13\n11 10\n9 3\n14 8\n1 12\n10 6\n12 2\n17 7\n13 5\n14 1\n1 13\n6 16\n1 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Bridge Count",
    "task_description": "Count the number of bridges (cut edges) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of bridges (cut edges) in the given graph. A bridge is an edge whose removal increases the number of connected components.\n\nThis is an undirected graph with 13 vertices and 17 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 9 and vertex 5.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 10 and vertex 9.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 7 and vertex 13.\n",
    "graph_output": "13 17\n9 5\n4 5\n9 7\n10 8\n8 2\n3 10\n7 11\n1 2\n8 1\n10 9\n7 1\n10 4\n11 8\n5 1\n13 9\n10 13\n7 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Centroid",
    "task_description": "Find the centroid of the tree with minimum index",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the centroid of the given tree with the minimum index. A centroid is a node whose removal results in subtrees of size at most n/2.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 3, 23\nVertex 2: 3, 14, 9\nVertex 3: 1, 2, 29\nVertex 4: 12\nVertex 5: 12, 24, 6\nVertex 6: 5\nVertex 7: 28\nVertex 8: 1, 12, 28, 13\nVertex 9: 2, 19\nVertex 10: 13, 16\nVertex 11: 14, 21\nVertex 12: 8, 5, 26, 4\nVertex 13: 8, 10, 18\nVertex 14: 2, 11, 15\nVertex 15: 14\nVertex 16: 10, 25\nVertex 17: 26\nVertex 18: 13\nVertex 19: 9\nVertex 20: 26\nVertex 21: 11\nVertex 22: 23\nVertex 23: 1, 22\nVertex 24: 5\nVertex 25: 16\nVertex 26: 12, 20, 17\nVertex 27: 28\nVertex 28: 8, 27, 7\nVertex 29: 3\n",
    "graph_output": "29 28\n1 8\n1 3\n3 2\n2 14\n8 12\n12 5\n12 26\n26 20\n14 11\n2 9\n1 23\n5 24\n8 28\n8 13\n23 22\n26 17\n11 21\n9 19\n13 10\n5 6\n12 4\n14 15\n10 16\n28 27\n28 7\n13 18\n3 29\n16 25\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 10 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   1   0   1   0   1   0   0   0 \n 2 |  0   0   1   0   0   0   0   1   0   0   0 \n 3 |  0   1   0   0   1   0   0   0   0   0   0 \n 4 |  1   0   0   0   0   0   1   0   0   0   0 \n 5 |  0   0   1   0   0   0   0   0   0   1   0 \n 6 |  1   0   0   0   0   0   0   0   0   1   0 \n 7 |  0   0   0   1   0   0   0   1   0   0   0 \n 8 |  1   1   0   0   0   0   1   0   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   1   1   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "11 10\n1 6\n8 2\n4 1\n4 7\n5 10\n2 3\n3 5\n1 8\n6 10\n7 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 0,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 14 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 8, 12, 11, 2\nVertex 2: 9, 1\nVertex 3: 12, 11\nVertex 4: 7, 10\nVertex 5: 11\nVertex 6: 10\nVertex 7: 4\nVertex 8: 1, 9, 11\nVertex 9: 8, 2, 11\nVertex 10: 4, 6\nVertex 11: 8, 3, 1, 5, 9\nVertex 12: 1, 3\n",
    "graph_output": "12 14\n1 8\n7 4\n9 8\n12 1\n11 8\n2 9\n10 4\n12 3\n3 11\n1 11\n5 11\n1 2\n11 9\n6 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6,
    "description_type": "list"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 12 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 4 and vertex 5.\n",
    "graph_output": "7 12\n1 7\n7 3\n7 2\n1 6\n7 4\n7 5\n3 1\n6 2\n5 3\n6 3\n1 2\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 297,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 16 vertices and 16 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 11, 4\nVertex 2: 9, 3, 13, 8\nVertex 3: 2\nVertex 4: 1\nVertex 5: No connections\nVertex 6: 11\nVertex 7: 8\nVertex 8: 9, 2, 11, 7, 12\nVertex 9: 14, 2, 8\nVertex 10: 13\nVertex 11: 6, 8, 1\nVertex 12: 14, 8\nVertex 13: 2, 10, 14, 16\nVertex 14: 9, 13, 12\nVertex 15: No connections\nVertex 16: 13\n",
    "graph_output": "16 16\n11 6\n14 9\n2 9\n3 2\n8 9\n2 13\n13 10\n2 8\n8 11\n13 14\n12 14\n16 13\n8 7\n1 11\n12 8\n4 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Clique",
    "task_description": "Find the size of the maximum clique in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum clique in the given graph. A clique is a subset of vertices such that every two distinct vertices are adjacent.\n\nThis is an undirected graph with 17 vertices and 20 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 17, 11, 16, 12, 14, 13, 15\nVertex 2: 12\nVertex 3: 9\nVertex 4: 17\nVertex 5: 13\nVertex 6: 10, 16\nVertex 7: 17\nVertex 8: 14\nVertex 9: 16, 13, 3\nVertex 10: 11, 6\nVertex 11: 1, 15, 14, 10\nVertex 12: 1, 2\nVertex 13: 9, 5, 1\nVertex 14: 11, 8, 1\nVertex 15: 11, 1\nVertex 16: 1, 9, 6\nVertex 17: 1, 4, 7\n",
    "graph_output": "17 20\n1 17\n17 4\n1 11\n11 15\n1 16\n11 14\n16 9\n9 13\n11 10\n9 3\n14 8\n1 12\n10 6\n12 2\n17 7\n13 5\n14 1\n1 13\n6 16\n1 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 10 (source) to vertex 3 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 11 vertices and 34 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0  27  13  93  46  46   0  82   0   0   0 \n 2 | 27   0   0  90   6   0  83  86  70   0  15 \n 3 | 13   0   0   0  73 100  31  98  98   2   0 \n 4 | 93  90   0   0  12  51   0   0   0  14   9 \n 5 | 46   6  73  12   0   0  66   0   0   0   0 \n 6 | 46   0 100  51   0   0  92  76  29  30  72 \n 7 |  0  83  31   0  66  92   0   0   0  32   0 \n 8 | 82  86  98   0   0  76   0   0  11  22   0 \n 9 |  0  70  98   0   0  29   0  11   0  98  68 \n10 |  0   0   2  14   0  30  32  22  98   0  72 \n11 |  0  15   0   9   0  72   0   0  68  72   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   6   5   8   4   5   0   4   0   0   0 \n 2 |  6   0   0   6   2   0   4   9   1   0   4 \n 3 |  5   0   0   0   8   8   2   1  10   4   0 \n 4 |  8   6   0   0   2   2   0   0   0   9   5 \n 5 |  4   2   8   2   0   0   3   0   0   0   0 \n 6 |  5   0   8   2   0   0   3   8   2   1   7 \n 7 |  0   4   2   0   3   3   0   0   0   3   0 \n 8 |  4   9   1   0   0   8   0   0   2   9   0 \n 9 |  0   1  10   0   0   2   0   2   0   5  10 \n10 |  0   0   4   9   0   1   3   9   5   0   1 \n11 |  0   4   0   5   0   7   0   0  10   1   0 \n",
    "graph_output": "11 34\n1 4 93 8\n1 3 13 5\n3 10 2 4\n1 5 46 4\n1 2 27 6\n3 9 98 10\n3 6 100 8\n6 11 72 7\n9 8 11 2\n10 7 32 3\n11 10 72 1\n9 11 68 10\n10 8 22 9\n8 6 76 8\n2 11 15 4\n8 1 82 4\n1 6 46 5\n9 2 70 1\n8 3 98 1\n3 5 73 8\n2 8 86 9\n4 2 90 6\n9 6 29 2\n10 9 98 5\n10 4 14 9\n6 7 92 3\n7 2 83 4\n5 2 6 2\n6 4 51 2\n7 3 31 2\n10 6 30 1\n5 4 12 2\n7 5 66 3\n4 11 9 5\n",
    "vertices": [
      10,
      3
    ],
    "answer": 4087,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 27 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 3, 8, 9, 16, 2\nVertex 2: 14, 15, 12, 1\nVertex 3: 1, 14, 10, 6, 16\nVertex 4: 6\nVertex 5: 6, 13, 15\nVertex 6: 3, 5, 4, 11, 16\nVertex 7: 14, 11\nVertex 8: 1\nVertex 9: 14, 1\nVertex 10: 3, 12, 16\nVertex 11: 7, 16, 6, 15\nVertex 12: 10, 13, 2, 15\nVertex 13: 12, 5\nVertex 14: 3, 2, 7, 9\nVertex 15: 2, 12, 11, 5\nVertex 16: 10, 11, 1, 6, 3\n",
    "graph_output": "16 27\n1 3\n1 8\n3 14\n14 2\n14 7\n3 10\n7 11\n2 15\n3 6\n6 5\n14 9\n10 12\n12 13\n10 16\n6 4\n16 11\n2 12\n15 12\n1 9\n11 6\n13 5\n1 16\n16 6\n16 3\n11 15\n1 2\n5 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 8 (source) to vertex 2 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nThis is an undirected graph with 9 vertices and 36 edges.\n\nThe graph has both weights and capacities on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nWeight Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0  22  67  84  80  99  23  62  47 \n 2 | 22   0 100  61  47   3  37  78  93 \n 3 | 67 100   0  73  99  18  85  23  80 \n 4 | 84  61  73   0  21   8  66  26  91 \n 5 | 80  47  99  21   0  63  11  86  47 \n 6 | 99   3  18   8  63   0  74  82  51 \n 7 | 23  37  85  66  11  74   0   9  54 \n 8 | 62  78  23  26  86  82   9   0  70 \n 9 | 47  93  80  91  47  51  54  70   0 \n\nCapacity Matrix (9\u00d79):\n\n      1   2   3   4   5   6   7   8   9\n   ------------------------------------\n 1 |  0  10   8   3   5   8   7   3   1 \n 2 | 10   0   7   6   4   8   8   7   7 \n 3 |  8   7   0  10   4   1   6   3   7 \n 4 |  3   6  10   0   1   6   8   8   2 \n 5 |  5   4   4   1   0   7   4   3   5 \n 6 |  8   8   1   6   7   0   1   2   4 \n 7 |  7   8   6   8   4   1   0   5   8 \n 8 |  3   7   3   8   3   2   5   0   5 \n 9 |  1   7   7   2   5   4   8   5   0 \n",
    "graph_output": "9 36\n1 9 47 1\n1 6 99 8\n9 2 93 7\n6 8 82 2\n9 7 54 8\n9 5 47 5\n7 3 85 6\n6 4 8 6\n6 5 63 7\n8 9 70 5\n2 5 47 4\n2 1 22 10\n2 8 78 7\n7 1 23 7\n7 5 11 4\n5 4 21 1\n5 8 86 3\n3 9 80 7\n6 3 18 1\n6 2 3 8\n2 7 37 8\n4 7 66 8\n3 4 73 10\n3 1 67 8\n3 2 100 7\n5 1 80 5\n8 7 9 5\n5 3 99 4\n1 4 84 3\n8 4 26 8\n3 8 23 3\n8 1 62 3\n6 7 74 1\n4 9 91 2\n2 4 61 6\n9 6 51 4\n",
    "vertices": [
      8,
      2
    ],
    "answer": 3096,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 6 vertices and 8 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 2 and vertex 4.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 2 and vertex 1.\n",
    "graph_output": "6 8\n2 4\n5 3\n1 5\n6 1\n5 4\n1 3\n3 6\n2 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 6,
    "description_type": "natural"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 11 vertices and 40 edges\n\nEdges (Format: Node Node):\n2 6\n3 7\n6 4\n5 1\n8 6\n10 2\n10 1\n5 10\n10 6\n8 1\n9 5\n3 2\n2 5\n11 4\n1 9\n2 1\n2 4\n10 9\n1 6\n11 5\n1 7\n8 7\n5 6\n3 5\n8 5\n8 4\n7 10\n11 2\n11 9\n3 10\n9 8\n6 11\n1 11\n7 9\n1 4\n4 10\n11 8\n8 3\n3 11\n4 5\n",
    "graph_output": "11 40\n2 6\n3 7\n6 4\n5 1\n8 6\n10 2\n10 1\n5 10\n10 6\n8 1\n9 5\n3 2\n2 5\n11 4\n1 9\n2 1\n2 4\n10 9\n1 6\n11 5\n1 7\n8 7\n5 6\n3 5\n8 5\n8 4\n7 10\n11 2\n11 9\n3 10\n9 8\n6 11\n1 11\n7 9\n1 4\n4 10\n11 8\n8 3\n3 11\n4 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 62,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 9 (source) to vertex 12 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 12 vertices and 21 edges\n\nEdges (Format: Node Node Capacity):\n1 5 2\n5 4 3\n5 12 10\n5 11 10\n12 9 3\n9 2 3\n2 8 1\n4 10 6\n2 7 7\n7 3 1\n5 6 5\n9 5 5\n5 2 10\n1 11 4\n1 12 7\n6 12 7\n9 3 5\n3 5 2\n4 3 2\n9 4 6\n12 11 4\n",
    "graph_output": "12 21\n1 5 2\n5 4 3\n5 12 10\n5 11 10\n12 9 3\n9 2 3\n2 8 1\n4 10 6\n2 7 7\n7 3 1\n5 6 5\n9 5 5\n5 2 10\n1 11 4\n1 12 7\n6 12 7\n9 3 5\n3 5 2\n4 3 2\n9 4 6\n12 11 4\n",
    "vertices": [
      9,
      12
    ],
    "answer": 17,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 109 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0  92  17   0  27   0  50  11  74  68   0  64   2   0 100  94 \n 2 | 92   0  71  31  77  70  19   2  65   7  25  43  98  56  86   7 \n 3 | 17  71   0  18  67  70  87  17  37  62   0  74  26   0   0  94 \n 4 |  0  31  18   0  25  22  10  19   0  44  97  38  54  25  14  16 \n 5 | 27  77  67  25   0  58  71   0   2  61   1  78  90  93   4  24 \n 6 |  0  70  70  22  58   0   0  87  62  17  86  79  39  99  97   0 \n 7 | 50  19  87  10  71   0   0  23  27   1  99  52  66  69  93  75 \n 8 | 11   2  17  19   0  87  23   0   8  13  59   9  86  97  28  84 \n 9 | 74  65  37   0   2  62  27   8   0  46  23  20  80  46  22  40 \n10 | 68   7  62  44  61  17   1  13  46   0  30  64  83  16  95  57 \n11 |  0  25   0  97   1  86  99  59  23  30   0  31  99  33  89  37 \n12 | 64  43  74  38  78  79  52   9  20  64  31   0  87   1  12  24 \n13 |  2  98  26  54  90  39  66  86  80  83  99  87   0  47  98  36 \n14 |  0  56   0  25  93  99  69  97  46  16  33   1  47   0  62  54 \n15 |100  86   0  14   4  97  93  28  22  95  89  12  98  62   0  21 \n16 | 94   7  94  16  24   0  75  84  40  57  37  24  36  54  21   0 \n",
    "graph_output": "16 109\n1 7 50\n7 16 75\n1 12 64\n1 13 2\n16 3 94\n12 5 78\n13 15 98\n7 9 27\n15 14 62\n3 4 18\n13 11 99\n3 2 71\n13 6 39\n6 10 17\n7 8 23\n9 6 62\n5 15 4\n12 13 87\n16 10 57\n13 14 47\n5 9 2\n10 13 83\n5 6 58\n14 7 69\n10 14 16\n5 16 24\n7 3 87\n9 3 37\n3 10 62\n11 12 31\n2 13 98\n4 16 16\n3 13 26\n1 10 68\n2 6 70\n10 11 30\n3 1 17\n11 4 97\n14 8 97\n2 11 25\n5 14 93\n4 7 10\n15 9 22\n2 15 86\n10 5 61\n11 16 37\n8 13 86\n5 7 71\n12 4 38\n16 1 94\n7 12 52\n1 15 100\n9 2 65\n8 3 17\n2 4 31\n4 10 44\n14 16 54\n15 12 12\n15 16 21\n8 9 8\n16 12 24\n15 4 14\n15 10 95\n2 1 92\n5 1 27\n9 13 80\n2 14 56\n16 9 40\n8 16 84\n12 8 9\n14 6 99\n15 7 93\n4 5 25\n6 3 70\n5 13 90\n5 11 1\n6 4 22\n7 11 99\n7 10 1\n9 11 23\n15 11 89\n14 4 25\n5 3 67\n8 6 87\n8 2 2\n14 12 1\n15 8 28\n14 11 33\n9 10 46\n2 16 7\n12 6 79\n7 13 66\n14 9 46\n1 8 11\n15 6 97\n2 5 77\n8 10 13\n16 13 36\n10 12 64\n4 13 54\n3 12 74\n9 12 20\n4 8 19\n1 9 74\n2 7 19\n12 2 43\n10 2 7\n11 6 86\n11 8 59\n",
    "vertices": [
      null,
      null
    ],
    "answer": 99,
    "description_type": "matrix"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 98 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n 2 |  1   0   1   1   1   1   0   1   0   1   1   1   1   1   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   0   1   1   1   1   1   1   1   1   1   1 \n 5 |  1   1   1   0   0   1   1   1   1   0   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 7 |  1   0   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n 9 |  1   0   1   1   1   1   1   1   0   1   0   1   1   1   1 \n10 |  1   1   1   1   0   1   1   1   1   0   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   0   1   0   1   1   1   1 \n12 |  1   1   1   1   1   1   1   1   1   1   1   0   1   1   0 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n15 |  0   1   1   1   1   1   1   1   1   1   1   0   1   1   0 \n",
    "graph_output": "15 98\n1 14\n14 10\n10 9\n10 8\n10 12\n14 5\n14 3\n8 2\n9 15\n3 13\n14 4\n14 7\n8 11\n9 6\n7 10\n7 6\n3 10\n8 5\n15 11\n14 8\n13 15\n4 10\n2 11\n12 8\n2 1\n6 8\n3 7\n3 11\n3 8\n9 13\n6 11\n14 9\n2 14\n2 4\n12 4\n4 1\n11 1\n1 6\n4 11\n11 14\n12 13\n13 5\n5 11\n1 12\n9 4\n13 11\n2 5\n14 12\n11 7\n4 6\n10 6\n7 12\n5 7\n4 15\n6 5\n5 1\n5 9\n13 8\n6 2\n8 9\n4 7\n12 9\n9 7\n12 11\n13 14\n7 1\n11 10\n6 15\n13 6\n7 13\n3 2\n4 13\n14 15\n13 1\n2 15\n15 3\n1 3\n5 3\n9 3\n1 9\n4 8\n8 1\n8 7\n10 13\n15 8\n2 10\n12 5\n15 10\n15 5\n12 2\n10 1\n6 3\n12 6\n4 3\n3 12\n7 15\n2 13\n6 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 20 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 7, 12\nVertex 2: 9, 10\nVertex 3: 15, 13\nVertex 4: 5\nVertex 5: 6, 13, 4, 7\nVertex 6: 8, 5, 14\nVertex 7: 8, 11, 1, 9, 5\nVertex 8: 7, 15, 13, 6\nVertex 9: 10, 14, 7, 2\nVertex 10: 9, 2\nVertex 11: 7\nVertex 12: 1\nVertex 13: 8, 5, 3\nVertex 14: 9, 1, 6\nVertex 15: 3, 8\n",
    "graph_output": "15 20\n3 15\n10 9\n14 9\n8 7\n1 14\n11 7\n15 8\n13 8\n1 7\n1 12\n9 7\n8 6\n2 9\n6 5\n13 5\n5 4\n14 6\n2 10\n7 5\n3 13\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "list"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 5 (source) to vertex 4 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 9 vertices and 23 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 2 41 8\n1 4 55 8\n1 3 71 9\n3 6 83 6\n3 8 47 9\n8 5 98 1\n6 9 17 5\n8 7 12 6\n7 2 33 5\n8 9 86 3\n8 2 43 10\n9 4 88 2\n7 4 65 8\n5 9 34 4\n1 9 50 7\n9 7 7 2\n5 3 41 8\n6 2 77 1\n7 5 90 7\n9 2 3 7\n1 8 7 7\n7 1 95 9\n8 6 27 6\n",
    "graph_output": "9 23\n1 2 41 8\n1 4 55 8\n1 3 71 9\n3 6 83 6\n3 8 47 9\n8 5 98 1\n6 9 17 5\n8 7 12 6\n7 2 33 5\n8 9 86 3\n8 2 43 10\n9 4 88 2\n7 4 65 8\n5 9 34 4\n1 9 50 7\n9 7 7 2\n5 3 41 8\n6 2 77 1\n7 5 90 7\n9 2 3 7\n1 8 7 7\n7 1 95 9\n8 6 27 6\n",
    "vertices": [
      5,
      4
    ],
    "answer": 2603,
    "description_type": "structured"
  },
  {
    "task_name": "Tree Diameter",
    "task_description": "Find the diameter of the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the diameter of the given tree. The diameter is the length of the longest path between any two nodes in the tree.\n\nUndirected Graph with 29 vertices and 28 edges\n\nEdges (Format: Node Node):\n1 29\n1 24\n29 8\n1 10\n24 17\n29 15\n8 18\n29 6\n1 21\n24 7\n10 23\n8 28\n8 27\n8 3\n24 16\n6 13\n7 12\n12 26\n15 20\n27 4\n21 5\n17 2\n28 9\n28 11\n9 22\n5 25\n17 14\n21 19\n",
    "graph_output": "29 28\n1 29\n1 24\n29 8\n1 10\n24 17\n29 15\n8 18\n29 6\n1 21\n24 7\n10 23\n8 28\n8 27\n8 3\n24 16\n6 13\n7 12\n12 26\n15 20\n27 4\n21 5\n17 2\n28 9\n28 11\n9 22\n5 25\n17 14\n21 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 9,
    "description_type": "structured"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 15 vertices and 14 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 11 and vertex 4.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 15 and vertex 10.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 13 and vertex 12.\nThere is an edge between vertex 11 and vertex 7.\n",
    "graph_output": "15 14\n8 9\n14 11\n6 3\n2 3\n2 6\n4 10\n11 4\n8 10\n1 10\n15 10\n15 12\n3 8\n13 12\n11 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 7 vertices and 19 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 2, 7, 5, 6\nVertex 2: 1, 6, 5, 7, 4, 3\nVertex 3: 4, 5, 7, 2, 6\nVertex 4: 6, 3, 2, 5, 7\nVertex 5: 2, 3, 1, 4, 7, 6\nVertex 6: 2, 4, 7, 5, 3, 1\nVertex 7: 1, 3, 2, 6, 5, 4\n",
    "graph_output": "7 19\n1 2\n1 7\n2 6\n6 4\n4 3\n2 5\n3 5\n5 1\n7 3\n2 7\n4 2\n5 4\n7 6\n7 5\n6 5\n3 2\n3 6\n4 7\n1 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 8232,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 6 (source) to vertex 5 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 55 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 3 (capacity=10), 9 (capacity=4), 4 (capacity=2), 11 (capacity=3), 2 (capacity=2), 10 (capacity=2), 8 (capacity=2), 6 (capacity=10), 5 (capacity=8), 7 (capacity=6)\nVertex 2: 9 (capacity=1), 7 (capacity=6), 10 (capacity=6), 5 (capacity=7), 6 (capacity=1), 1 (capacity=2), 4 (capacity=10), 3 (capacity=8), 8 (capacity=9), 11 (capacity=5)\nVertex 3: 1 (capacity=10), 9 (capacity=8), 4 (capacity=4), 6 (capacity=8), 5 (capacity=9), 7 (capacity=10), 2 (capacity=8), 8 (capacity=2), 10 (capacity=8), 11 (capacity=3)\nVertex 4: 3 (capacity=4), 11 (capacity=3), 10 (capacity=2), 1 (capacity=2), 8 (capacity=6), 7 (capacity=3), 9 (capacity=5), 5 (capacity=9), 6 (capacity=1), 2 (capacity=10)\nVertex 5: 2 (capacity=7), 7 (capacity=4), 3 (capacity=9), 4 (capacity=9), 10 (capacity=10), 6 (capacity=2), 11 (capacity=4), 9 (capacity=8), 8 (capacity=6), 1 (capacity=8)\nVertex 6: 3 (capacity=8), 11 (capacity=2), 2 (capacity=1), 4 (capacity=1), 5 (capacity=2), 10 (capacity=1), 7 (capacity=1), 9 (capacity=7), 1 (capacity=10), 8 (capacity=7)\nVertex 7: 2 (capacity=6), 11 (capacity=1), 9 (capacity=10), 10 (capacity=9), 4 (capacity=3), 5 (capacity=4), 3 (capacity=10), 6 (capacity=1), 8 (capacity=3), 1 (capacity=6)\nVertex 8: 11 (capacity=10), 4 (capacity=6), 9 (capacity=4), 1 (capacity=2), 2 (capacity=9), 7 (capacity=3), 3 (capacity=2), 10 (capacity=2), 5 (capacity=6), 6 (capacity=7)\nVertex 9: 3 (capacity=8), 2 (capacity=1), 10 (capacity=4), 1 (capacity=4), 7 (capacity=10), 11 (capacity=9), 8 (capacity=4), 4 (capacity=5), 5 (capacity=8), 6 (capacity=7)\nVertex 10: 2 (capacity=6), 4 (capacity=2), 9 (capacity=4), 7 (capacity=9), 11 (capacity=10), 1 (capacity=2), 5 (capacity=10), 6 (capacity=1), 8 (capacity=2), 3 (capacity=8)\nVertex 11: 7 (capacity=1), 8 (capacity=10), 4 (capacity=3), 6 (capacity=2), 9 (capacity=9), 10 (capacity=10), 1 (capacity=3), 5 (capacity=4), 3 (capacity=3), 2 (capacity=5)\n",
    "graph_output": "11 55\n1 3 10\n3 9 8\n9 2 1\n2 7 6\n2 10 6\n7 11 1\n2 5 7\n3 4 4\n3 6 8\n11 8 10\n11 4 3\n10 4 2\n9 10 4\n9 1 4\n6 11 2\n1 4 2\n8 4 6\n7 9 10\n10 7 9\n9 11 9\n9 8 4\n7 4 3\n6 2 1\n9 4 5\n7 5 4\n11 10 10\n1 11 3\n2 1 2\n10 1 2\n3 5 9\n4 5 9\n6 4 1\n3 7 10\n5 10 10\n4 2 10\n1 8 2\n3 2 8\n5 6 2\n5 11 4\n6 10 1\n2 8 9\n5 9 8\n6 7 1\n6 9 7\n8 7 3\n3 8 2\n8 10 2\n1 6 10\n5 8 6\n10 3 8\n5 1 8\n3 11 3\n6 8 7\n7 1 6\n11 2 5\n",
    "vertices": [
      6,
      5
    ],
    "answer": 40,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 83 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 7, 8, 2, 14, 12, 5, 13, 11, 9\nVertex 2: 10, 14, 8, 6, 9, 1, 4, 13, 3, 12\nVertex 3: 7, 12, 15, 8, 9, 10, 14, 13, 2\nVertex 4: 13, 11, 9, 15, 8, 7, 2, 12, 10, 6\nVertex 5: 10, 8, 12, 7, 15, 13, 14, 9, 1, 6\nVertex 6: 1, 14, 8, 2, 10, 9, 7, 13, 4, 5\nVertex 7: 3, 8, 11, 14, 1, 5, 15, 4, 6, 13\nVertex 8: 13, 9, 11, 12, 7, 5, 6, 2, 3, 1, 15, 4, 14\nVertex 9: 8, 13, 12, 14, 4, 2, 3, 6, 5, 11, 10, 15, 1\nVertex 10: 2, 5, 11, 12, 6, 3, 14, 4, 15, 9, 13\nVertex 11: 8, 15, 12, 7, 10, 4, 14, 13, 9, 1\nVertex 12: 9, 11, 8, 3, 14, 13, 5, 10, 1, 15, 4, 2\nVertex 13: 8, 9, 12, 4, 5, 15, 14, 11, 6, 2, 3, 1, 10, 7\nVertex 14: 2, 12, 6, 7, 9, 11, 1, 5, 3, 13, 8, 10, 15\nVertex 15: 11, 3, 5, 8, 4, 13, 12, 7, 14, 10, 9\n",
    "graph_output": "15 83\n8 13\n9 8\n2 10\n9 13\n9 12\n10 5\n11 8\n15 11\n7 3\n12 11\n8 12\n7 8\n6 1\n3 12\n7 11\n14 2\n14 12\n8 5\n6 14\n13 12\n4 13\n6 8\n8 2\n10 11\n14 7\n11 4\n1 7\n9 14\n3 15\n5 12\n7 5\n15 5\n11 14\n3 8\n8 1\n12 10\n6 2\n10 6\n8 15\n9 4\n2 9\n2 1\n3 9\n15 4\n14 1\n13 5\n12 1\n3 10\n6 9\n13 15\n12 15\n5 14\n3 14\n8 4\n15 7\n5 9\n7 4\n2 4\n1 5\n14 13\n8 14\n7 6\n13 11\n11 9\n4 12\n14 10\n6 13\n14 15\n13 2\n10 4\n10 15\n6 4\n10 9\n3 13\n1 13\n3 2\n5 6\n10 13\n2 12\n11 1\n13 7\n15 9\n1 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "list"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 8 (source) to vertex 4 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 47 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   1   1   0   0   1   1   0   1   0   1 \n 2 |  0   0   1   1   0   1   1   1   1   1   1   1 \n 3 |  1   1   0   0   1   1   1   0   1   1   0   1 \n 4 |  1   1   0   0   1   1   1   1   0   0   1   1 \n 5 |  0   0   1   1   0   1   1   1   1   1   1   1 \n 6 |  0   1   1   1   1   0   0   0   1   1   0   1 \n 7 |  1   1   1   1   1   0   0   1   0   0   1   1 \n 8 |  1   1   0   1   1   0   1   0   1   1   1   0 \n 9 |  0   1   1   0   1   1   0   1   0   0   1   1 \n10 |  1   1   1   0   1   1   0   1   0   0   1   0 \n11 |  0   1   0   1   1   0   1   1   1   1   0   1 \n12 |  1   1   1   1   1   1   1   0   1   0   1   0 \n\nCapacity Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   5   8   0   0   8   7   0   2   0   3 \n 2 |  0   0   8   9   0  10   8   1   4   3   2  10 \n 3 |  5   8   0   0   9   7   2   0   8   4   0   6 \n 4 |  8   9   0   0   2   7   2   9   0   0   9   1 \n 5 |  0   0   9   2   0   7   3   8   8   7   1   9 \n 6 |  0  10   7   7   7   0   0   0   3   7   0   6 \n 7 |  8   8   2   2   3   0   0   5   0   0   2   1 \n 8 |  7   1   0   9   8   0   5   0   7   5   5   0 \n 9 |  0   4   8   0   8   3   0   7   0   0   6  10 \n10 |  2   3   4   0   7   7   0   5   0   0   9   0 \n11 |  0   2   0   9   1   0   2   5   6   9   0   7 \n12 |  3  10   6   1   9   6   1   0  10   0   7   0 \n",
    "graph_output": "12 47\n1 12 3\n1 3 5\n3 10 4\n12 7 1\n12 11 7\n11 5 1\n11 9 6\n7 4 2\n4 6 7\n1 8 7\n10 2 3\n4 5 2\n8 9 7\n11 8 5\n2 4 9\n7 1 8\n8 2 1\n11 2 2\n6 9 3\n12 6 6\n5 10 7\n4 11 9\n7 8 5\n6 10 7\n7 2 8\n9 12 10\n7 11 2\n4 8 9\n4 12 1\n3 12 6\n6 2 10\n5 12 9\n10 11 9\n2 12 10\n7 3 2\n6 3 7\n5 6 7\n1 4 8\n2 9 4\n7 5 3\n1 10 2\n2 3 8\n9 3 8\n3 5 9\n5 9 8\n10 8 5\n5 8 8\n",
    "vertices": [
      8,
      4
    ],
    "answer": 47,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nUndirected Graph with 15 vertices and 26 edges\n\nEdges (Format: Node Node):\n1 14\n14 12\n14 15\n14 6\n1 3\n15 13\n14 4\n6 11\n4 8\n1 10\n11 5\n10 7\n3 2\n8 9\n5 14\n7 1\n3 10\n13 1\n3 5\n9 14\n11 1\n4 9\n1 5\n13 14\n9 1\n7 4\n",
    "graph_output": "15 26\n1 14\n14 12\n14 15\n14 6\n1 3\n15 13\n14 4\n6 11\n4 8\n1 10\n11 5\n10 7\n3 2\n8 9\n5 14\n7 1\n3 10\n13 1\n3 5\n9 14\n11 1\n4 9\n1 5\n13 14\n9 1\n7 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "structured"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 16 vertices and 25 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n 2 |  1   0   1   1   0   0   0   1   0   1   0   1   0   0   0   0 \n 3 |  0   1   0   1   0   0   0   0   0   1   0   0   0   0   0   1 \n 4 |  0   1   1   0   0   1   0   0   0   1   1   1   0   0   0   1 \n 5 |  0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0 \n 6 |  0   0   0   1   0   0   0   1   0   0   0   0   0   1   0   0 \n 7 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n 8 |  0   1   0   0   0   1   0   0   0   1   0   0   0   0   0   0 \n 9 |  0   0   0   0   1   0   1   0   0   0   0   0   1   0   0   0 \n10 |  0   1   1   1   0   0   0   1   0   0   0   0   0   0   0   0 \n11 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1 \n12 |  1   1   0   1   1   0   0   0   0   0   0   0   1   0   0   0 \n13 |  0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0 \n14 |  0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n16 |  0   0   1   1   0   0   0   0   0   0   1   0   0   0   0   0 \n",
    "graph_output": "16 25\n1 12\n12 13\n12 4\n12 5\n4 6\n4 3\n6 8\n3 2\n5 9\n4 11\n6 14\n9 7\n4 16\n14 15\n4 10\n2 8\n2 12\n2 10\n10 8\n16 11\n1 2\n9 13\n3 16\n3 10\n2 4\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 102 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15 with a weight of 46.\nThere is an edge between vertex 15 and vertex 8 with a weight of 54.\nThere is an edge between vertex 15 and vertex 6 with a weight of 47.\nThere is an edge between vertex 1 and vertex 4 with a weight of 97.\nThere is an edge between vertex 4 and vertex 16 with a weight of 42.\nThere is an edge between vertex 1 and vertex 5 with a weight of 59.\nThere is an edge between vertex 8 and vertex 13 with a weight of 5.\nThere is an edge between vertex 5 and vertex 11 with a weight of 74.\nThere is an edge between vertex 13 and vertex 2 with a weight of 96.\nThere is an edge between vertex 15 and vertex 12 with a weight of 47.\nThere is an edge between vertex 5 and vertex 3 with a weight of 79.\nThere is an edge between vertex 2 and vertex 10 with a weight of 73.\nThere is an edge between vertex 13 and vertex 7 with a weight of 62.\nThere is an edge between vertex 6 and vertex 9 with a weight of 22.\nThere is an edge between vertex 4 and vertex 14 with a weight of 79.\nThere is an edge between vertex 5 and vertex 12 with a weight of 42.\nThere is an edge between vertex 10 and vertex 5 with a weight of 46.\nThere is an edge between vertex 3 and vertex 15 with a weight of 23.\nThere is an edge between vertex 13 and vertex 5 with a weight of 75.\nThere is an edge between vertex 12 and vertex 4 with a weight of 73.\nThere is an edge between vertex 6 and vertex 16 with a weight of 22.\nThere is an edge between vertex 16 and vertex 13 with a weight of 52.\nThere is an edge between vertex 9 and vertex 5 with a weight of 74.\nThere is an edge between vertex 14 and vertex 12 with a weight of 3.\nThere is an edge between vertex 5 and vertex 15 with a weight of 73.\nThere is an edge between vertex 14 and vertex 6 with a weight of 24.\nThere is an edge between vertex 3 and vertex 7 with a weight of 34.\nThere is an edge between vertex 16 and vertex 14 with a weight of 83.\nThere is an edge between vertex 1 and vertex 13 with a weight of 5.\nThere is an edge between vertex 8 and vertex 10 with a weight of 17.\nThere is an edge between vertex 4 and vertex 9 with a weight of 69.\nThere is an edge between vertex 4 and vertex 5 with a weight of 48.\nThere is an edge between vertex 7 and vertex 9 with a weight of 24.\nThere is an edge between vertex 12 and vertex 16 with a weight of 23.\nThere is an edge between vertex 6 and vertex 1 with a weight of 65.\nThere is an edge between vertex 1 and vertex 9 with a weight of 36.\nThere is an edge between vertex 7 and vertex 15 with a weight of 15.\nThere is an edge between vertex 16 and vertex 11 with a weight of 65.\nThere is an edge between vertex 12 and vertex 7 with a weight of 69.\nThere is an edge between vertex 2 and vertex 3 with a weight of 27.\nThere is an edge between vertex 6 and vertex 3 with a weight of 69.\nThere is an edge between vertex 2 and vertex 12 with a weight of 40.\nThere is an edge between vertex 16 and vertex 9 with a weight of 91.\nThere is an edge between vertex 11 and vertex 10 with a weight of 85.\nThere is an edge between vertex 1 and vertex 8 with a weight of 76.\nThere is an edge between vertex 9 and vertex 11 with a weight of 22.\nThere is an edge between vertex 13 and vertex 12 with a weight of 4.\nThere is an edge between vertex 10 and vertex 6 with a weight of 94.\nThere is an edge between vertex 3 and vertex 12 with a weight of 42.\nThere is an edge between vertex 1 and vertex 7 with a weight of 55.\nThere is an edge between vertex 4 and vertex 10 with a weight of 32.\nThere is an edge between vertex 14 and vertex 2 with a weight of 56.\nThere is an edge between vertex 2 and vertex 4 with a weight of 74.\nThere is an edge between vertex 11 and vertex 6 with a weight of 13.\nThere is an edge between vertex 3 and vertex 10 with a weight of 24.\nThere is an edge between vertex 6 and vertex 7 with a weight of 75.\nThere is an edge between vertex 11 and vertex 8 with a weight of 3.\nThere is an edge between vertex 13 and vertex 10 with a weight of 99.\nThere is an edge between vertex 9 and vertex 12 with a weight of 74.\nThere is an edge between vertex 7 and vertex 10 with a weight of 73.\nThere is an edge between vertex 3 and vertex 16 with a weight of 9.\nThere is an edge between vertex 7 and vertex 2 with a weight of 68.\nThere is an edge between vertex 12 and vertex 10 with a weight of 17.\nThere is an edge between vertex 11 and vertex 12 with a weight of 83.\nThere is an edge between vertex 12 and vertex 1 with a weight of 79.\nThere is an edge between vertex 8 and vertex 5 with a weight of 21.\nThere is an edge between vertex 13 and vertex 6 with a weight of 12.\nThere is an edge between vertex 11 and vertex 4 with a weight of 50.\nThere is an edge between vertex 13 and vertex 4 with a weight of 61.\nThere is an edge between vertex 11 and vertex 13 with a weight of 28.\nThere is an edge between vertex 6 and vertex 8 with a weight of 100.\nThere is an edge between vertex 3 and vertex 8 with a weight of 35.\nThere is an edge between vertex 14 and vertex 9 with a weight of 68.\nThere is an edge between vertex 15 and vertex 13 with a weight of 73.\nThere is an edge between vertex 10 and vertex 16 with a weight of 88.\nThere is an edge between vertex 4 and vertex 15 with a weight of 77.\nThere is an edge between vertex 14 and vertex 11 with a weight of 8.\nThere is an edge between vertex 16 and vertex 8 with a weight of 64.\nThere is an edge between vertex 14 and vertex 7 with a weight of 9.\nThere is an edge between vertex 8 and vertex 9 with a weight of 51.\nThere is an edge between vertex 9 and vertex 2 with a weight of 28.\nThere is an edge between vertex 10 and vertex 15 with a weight of 32.\nThere is an edge between vertex 11 and vertex 3 with a weight of 91.\nThere is an edge between vertex 4 and vertex 6 with a weight of 5.\nThere is an edge between vertex 15 and vertex 11 with a weight of 3.\nThere is an edge between vertex 8 and vertex 4 with a weight of 20.\nThere is an edge between vertex 1 and vertex 11 with a weight of 58.\nThere is an edge between vertex 2 and vertex 16 with a weight of 44.\nThere is an edge between vertex 7 and vertex 16 with a weight of 19.\nThere is an edge between vertex 6 and vertex 2 with a weight of 6.\nThere is an edge between vertex 8 and vertex 7 with a weight of 84.\nThere is an edge between vertex 5 and vertex 7 with a weight of 13.\nThere is an edge between vertex 1 and vertex 14 with a weight of 84.\nThere is an edge between vertex 16 and vertex 15 with a weight of 1.\nThere is an edge between vertex 1 and vertex 10 with a weight of 33.\nThere is an edge between vertex 2 and vertex 15 with a weight of 28.\nThere is an edge between vertex 5 and vertex 16 with a weight of 2.\nThere is an edge between vertex 4 and vertex 7 with a weight of 9.\nThere is an edge between vertex 3 and vertex 4 with a weight of 47.\nThere is an edge between vertex 5 and vertex 2 with a weight of 29.\nThere is an edge between vertex 6 and vertex 12 with a weight of 61.\nThere is an edge between vertex 14 and vertex 13 with a weight of 90.\n",
    "graph_output": "16 102\n1 15 46\n15 8 54\n15 6 47\n1 4 97\n4 16 42\n1 5 59\n8 13 5\n5 11 74\n13 2 96\n15 12 47\n5 3 79\n2 10 73\n13 7 62\n6 9 22\n4 14 79\n5 12 42\n10 5 46\n3 15 23\n13 5 75\n12 4 73\n6 16 22\n16 13 52\n9 5 74\n14 12 3\n5 15 73\n14 6 24\n3 7 34\n16 14 83\n1 13 5\n8 10 17\n4 9 69\n4 5 48\n7 9 24\n12 16 23\n6 1 65\n1 9 36\n7 15 15\n16 11 65\n12 7 69\n2 3 27\n6 3 69\n2 12 40\n16 9 91\n11 10 85\n1 8 76\n9 11 22\n13 12 4\n10 6 94\n3 12 42\n1 7 55\n4 10 32\n14 2 56\n2 4 74\n11 6 13\n3 10 24\n6 7 75\n11 8 3\n13 10 99\n9 12 74\n7 10 73\n3 16 9\n7 2 68\n12 10 17\n11 12 83\n12 1 79\n8 5 21\n13 6 12\n11 4 50\n13 4 61\n11 13 28\n6 8 100\n3 8 35\n14 9 68\n15 13 73\n10 16 88\n4 15 77\n14 11 8\n16 8 64\n14 7 9\n8 9 51\n9 2 28\n10 15 32\n11 3 91\n4 6 5\n15 11 3\n8 4 20\n1 11 58\n2 16 44\n7 16 19\n6 2 6\n8 7 84\n5 7 13\n1 14 84\n16 15 1\n1 10 33\n2 15 28\n5 16 2\n4 7 9\n3 4 47\n5 2 29\n6 12 61\n14 13 90\n",
    "vertices": [
      null,
      null
    ],
    "answer": 103,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nThis is an undirected graph with 17 vertices and 115 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 7 and vertex 13.\nThere is an edge between vertex 4 and vertex 8.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 3 and vertex 1.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 15 and vertex 17.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 6 and vertex 14.\nThere is an edge between vertex 11 and vertex 10.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 3 and vertex 12.\nThere is an edge between vertex 8 and vertex 15.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 3 and vertex 5.\nThere is an edge between vertex 5 and vertex 7.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 17 and vertex 5.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 4 and vertex 13.\nThere is an edge between vertex 12 and vertex 11.\nThere is an edge between vertex 17 and vertex 2.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 9 and vertex 12.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 16 and vertex 11.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 15 and vertex 12.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 13 and vertex 6.\nThere is an edge between vertex 4 and vertex 16.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 3 and vertex 4.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 16 and vertex 14.\nThere is an edge between vertex 3 and vertex 16.\nThere is an edge between vertex 14 and vertex 9.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 10 and vertex 4.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 11 and vertex 2.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 14 and vertex 15.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 10 and vertex 15.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 6 and vertex 9.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 9 and vertex 7.\nThere is an edge between vertex 3 and vertex 11.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 7 and vertex 12.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 6 and vertex 12.\nThere is an edge between vertex 15 and vertex 13.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 10 and vertex 17.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 6 and vertex 2.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 12 and vertex 17.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 11 and vertex 17.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 11 and vertex 8.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 8 and vertex 6.\nThere is an edge between vertex 12 and vertex 5.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 12 and vertex 16.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 6 and vertex 17.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 3 and vertex 17.\nThere is an edge between vertex 6 and vertex 1.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 9 and vertex 16.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 13 and vertex 8.\n",
    "graph_output": "17 115\n7 13\n4 8\n12 13\n3 1\n13 10\n15 17\n1 17\n8 16\n15 6\n13 3\n6 14\n11 10\n1 4\n3 12\n8 15\n3 10\n3 9\n3 5\n5 7\n5 14\n8 2\n16 10\n17 5\n13 5\n14 8\n4 13\n12 11\n17 2\n14 17\n1 11\n13 11\n10 1\n16 13\n9 12\n7 3\n16 11\n6 10\n15 12\n16 6\n12 10\n13 6\n4 16\n6 7\n11 9\n1 9\n12 8\n3 4\n16 7\n5 2\n16 14\n3 16\n14 9\n11 6\n10 4\n10 8\n11 2\n2 1\n7 2\n14 15\n9 10\n10 15\n14 3\n1 12\n14 10\n6 9\n5 4\n9 7\n3 11\n13 1\n5 16\n17 8\n4 12\n7 12\n2 14\n15 2\n15 9\n3 6\n11 14\n6 12\n15 13\n10 7\n8 1\n13 14\n10 17\n15 5\n6 2\n5 11\n12 17\n14 4\n4 17\n11 17\n14 7\n1 5\n11 8\n4 9\n5 10\n8 6\n12 5\n5 9\n12 16\n3 8\n4 2\n15 4\n15 11\n6 17\n1 15\n2 12\n3 17\n6 1\n16 2\n9 16\n4 11\n13 9\n17 9\n13 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "natural"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 11 vertices and 11 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   0   1   1 \n 2 |  0   0   0   0   0   0   0   0   0   1   0 \n 3 |  0   0   0   0   0   0   0   0   0   1   1 \n 4 |  0   0   0   0   0   0   0   0   1   1   0 \n 5 |  0   0   0   0   0   0   0   1   1   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   1   1 \n 7 |  0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   1   0   0   0   0   0   0 \n 9 |  0   0   0   1   1   0   0   0   0   0   0 \n10 |  1   1   1   1   0   1   0   0   0   0   0 \n11 |  1   0   1   0   0   1   0   0   0   0   0 \n",
    "graph_output": "11 11\n4 9\n10 1\n10 2\n3 10\n4 10\n5 9\n11 1\n10 6\n5 8\n11 3\n11 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 7,
    "description_type": "matrix"
  },
  {
    "task_name": "Biconnected Components",
    "task_description": "Count the number of biconnected components in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of biconnected components in the given graph. A biconnected component is a maximal biconnected subgraph.\n\nThis is an undirected graph with 12 vertices and 53 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   1   0   1   1   1   1   1   1   1   0   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   0   1 \n 3 |  0   1   0   1   1   1   1   1   1   0   1   0 \n 4 |  1   1   1   0   1   0   1   1   1   1   1   1 \n 5 |  1   1   1   1   0   1   0   0   1   1   0   0 \n 6 |  1   1   1   0   1   0   1   1   1   1   1   1 \n 7 |  1   1   1   1   0   1   0   1   1   1   1   1 \n 8 |  1   1   1   1   0   1   1   0   1   0   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1 \n10 |  1   1   0   1   1   1   1   0   1   0   0   1 \n11 |  0   0   1   1   0   1   1   1   1   0   0   0 \n12 |  1   1   0   1   0   1   1   1   1   1   0   0 \n",
    "graph_output": "12 53\n7 2\n1 4\n7 12\n2 4\n4 7\n9 7\n1 2\n11 3\n6 12\n4 5\n9 1\n10 9\n9 3\n7 8\n10 7\n11 4\n2 5\n3 6\n5 9\n9 4\n6 5\n7 11\n7 1\n6 8\n4 3\n6 7\n10 5\n2 8\n6 9\n2 10\n5 1\n12 10\n10 6\n8 1\n8 11\n3 5\n2 3\n12 1\n2 9\n12 2\n11 9\n11 6\n12 9\n10 1\n8 9\n2 6\n10 4\n3 8\n12 4\n1 6\n8 12\n7 3\n4 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 115 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0   1   1   1   1   1   1   1   1   1   1   0   1   1   1   1 \n 2 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n 3 |  1   1   0   1   1   1   1   1   1   1   1   1   1   1   1   1 \n 4 |  1   1   1   0   1   1   1   1   1   1   1   0   1   0   1   1 \n 5 |  1   1   1   1   0   1   1   1   1   1   1   1   1   1   1   1 \n 6 |  1   1   1   1   1   0   1   1   1   1   1   0   1   1   1   1 \n 7 |  1   1   1   1   1   1   0   1   1   1   1   1   1   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   1   1   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   1   1   0   1   1   1   1   1   1   1 \n10 |  1   1   1   1   1   1   1   1   1   0   1   1   1   1   1   1 \n11 |  1   1   1   1   1   1   1   1   1   1   0   1   1   1   1   1 \n12 |  0   1   1   0   1   0   1   1   1   1   1   0   1   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1   1 \n14 |  1   1   1   0   1   1   1   1   1   1   1   1   1   0   1   1 \n15 |  1   0   1   1   1   1   1   1   1   1   1   1   1   1   0   1 \n16 |  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "16 115\n15 16\n12 10\n10 16\n6 9\n2 8\n11 8\n5 11\n7 4\n2 12\n8 1\n13 12\n8 12\n5 16\n14 6\n15 5\n7 16\n6 11\n4 8\n14 12\n3 6\n16 8\n2 9\n16 14\n10 14\n2 16\n1 6\n11 16\n12 16\n13 15\n10 8\n3 2\n5 14\n9 8\n16 6\n10 9\n11 1\n2 10\n1 2\n15 7\n3 4\n8 14\n7 3\n3 10\n8 3\n4 11\n7 10\n9 4\n15 8\n6 5\n10 15\n12 11\n12 7\n11 15\n12 15\n11 14\n3 16\n6 8\n15 4\n13 6\n11 2\n6 15\n7 6\n12 5\n3 15\n4 10\n16 13\n1 13\n12 3\n11 9\n13 2\n11 3\n16 1\n7 5\n13 10\n16 4\n13 14\n4 6\n8 7\n3 9\n9 15\n5 13\n3 1\n11 7\n10 6\n5 4\n5 9\n2 5\n4 13\n1 4\n1 10\n7 2\n13 8\n5 8\n12 9\n5 3\n5 10\n9 14\n13 7\n2 14\n1 15\n7 9\n9 16\n15 14\n13 3\n14 7\n13 9\n11 13\n9 1\n7 1\n4 2\n2 6\n14 3\n14 1\n1 5\n10 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 15 vertices and 24 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0  63  31   0   0   0  79   0  95   0   0   0   0   0 \n 2 |  0   0   0   0   0  10  69   0   0   0   0   0   0   0   0 \n 3 | 63   0   0   0   0   0  66   0   0   0   0   0   0   0   0 \n 4 | 31   0   0   0   0   0  40  90   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0  39   0   0   0  76   0   0   0   0 \n 6 |  0  10   0   0   0   0   0   0   0   0  97   0  45   0   0 \n 7 |  0  69  66  40  39   0   0   0   0  93   0   0  65   0   0 \n 8 | 79   0   0  90   0   0   0   0   0  99   0  89   0   0   0 \n 9 |  0   0   0   0   0   0   0   0   0   0   0   0  39   0   0 \n10 | 95   0   0   0   0   0  93  99   0   0   0  50  95   0   0 \n11 |  0   0   0   0  76  97   0   0   0   0   0  41   0   0   0 \n12 |  0   0   0   0   0   0   0  89   0  50  41   0   0   0  61 \n13 |  0   0   0   0   0  45  65   0  39  95   0   0   0   0  63 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0  54 \n15 |  0   0   0   0   0   0   0   0   0   0   0  61  63  54   0 \n",
    "graph_output": "15 24\n1 4 31\n4 7 40\n7 13 65\n7 10 93\n7 5 39\n13 15 63\n1 3 63\n7 2 69\n13 6 45\n1 8 79\n6 11 97\n15 14 54\n13 9 39\n11 12 41\n13 10 95\n10 8 99\n10 1 95\n12 10 50\n6 2 10\n3 7 66\n5 11 76\n4 8 90\n12 15 61\n12 8 89\n",
    "vertices": [
      null,
      null
    ],
    "answer": 680,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 16 and 25 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 29 vertices and 28 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 29\nVertex 2: 22, 14, 28\nVertex 3: 26\nVertex 4: 11\nVertex 5: 10, 27, 21\nVertex 6: 10\nVertex 7: 20\nVertex 8: 29\nVertex 9: 27\nVertex 10: 22, 5, 13, 6\nVertex 11: 15, 4\nVertex 12: 24\nVertex 13: 10, 19\nVertex 14: 2\nVertex 15: 27, 11\nVertex 16: 22, 25\nVertex 17: 25\nVertex 18: 25\nVertex 19: 13\nVertex 20: 26, 7\nVertex 21: 5\nVertex 22: 26, 10, 16, 2\nVertex 23: 29\nVertex 24: 29, 12\nVertex 25: 16, 18, 17\nVertex 26: 29, 3, 22, 20\nVertex 27: 5, 15, 9\nVertex 28: 2\nVertex 29: 1, 24, 26, 23, 8\n",
    "graph_output": "29 28\n1 29\n29 24\n29 26\n26 3\n26 22\n22 10\n10 5\n10 13\n24 12\n5 27\n26 20\n22 16\n20 7\n27 15\n29 23\n16 25\n10 6\n22 2\n27 9\n2 14\n15 11\n25 18\n25 17\n29 8\n2 28\n13 19\n5 21\n11 4\n",
    "vertices": [
      16,
      25
    ],
    "answer": 16,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 10 (source) to vertex 2 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 11 vertices and 11 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   1   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   1   0   0   1   1 \n 3 |  1   0   0   0   0   0   0   0   0   0   1 \n 4 |  0   0   0   0   0   0   0   0   0   0   1 \n 5 |  0   0   0   0   0   0   0   1   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   1   1 \n 7 |  0   1   0   0   0   0   0   1   0   0   0 \n 8 |  0   0   0   0   1   0   1   0   1   0   0 \n 9 |  0   0   0   0   0   0   0   1   0   0   0 \n10 |  0   1   0   0   0   1   0   0   0   0   0 \n11 |  0   1   1   1   0   1   0   0   0   0   0 \n\nCapacity Matrix (11\u00d711):\n\n      1   2   3   4   5   6   7   8   9  10  11\n   --------------------------------------------\n 1 |  0   0   9   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   3   0   0   9   2 \n 3 |  9   0   0   0   0   0   0   0   0   0   8 \n 4 |  0   0   0   0   0   0   0   0   0   0   8 \n 5 |  0   0   0   0   0   0   0   5   0   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   9  10 \n 7 |  0   3   0   0   0   0   0   5   0   0   0 \n 8 |  0   0   0   0   5   0   5   0   6   0   0 \n 9 |  0   0   0   0   0   0   0   6   0   0   0 \n10 |  0   9   0   0   0   9   0   0   0   0   0 \n11 |  0   2   8   8   0  10   0   0   0   0   0 \n",
    "graph_output": "11 11\n1 3 9\n3 11 8\n11 2 2\n2 10 9\n11 4 8\n2 7 3\n7 8 5\n11 6 10\n8 9 6\n8 5 5\n10 6 9\n",
    "vertices": [
      10,
      2
    ],
    "answer": 11,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 16 vertices and 21 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 13.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 1 and vertex 12.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 1 and vertex 4.\nThere is an edge between vertex 13 and vertex 2.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 10 and vertex 8.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 10 and vertex 14.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 14 and vertex 7.\nThere is an edge between vertex 5 and vertex 16.\nThere is an edge between vertex 2 and vertex 3.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 4 and vertex 12.\nThere is an edge between vertex 8 and vertex 12.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 7 and vertex 15.\nThere is an edge between vertex 5 and vertex 11.\n",
    "graph_output": "16 21\n1 13\n13 10\n1 12\n13 5\n1 4\n13 2\n13 9\n10 8\n10 11\n1 15\n10 14\n4 6\n14 7\n5 16\n2 3\n3 10\n4 12\n8 12\n15 4\n7 15\n5 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Min Cost Max Flow",
    "task_description": "Find the minimum cost maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cost maximum flow from vertex 4 (source) to vertex 7 (sink) in the given undirected network. Each edge has both a capacity constraint and a cost per unit flow, and flow can travel in both directions along each edge. Return the cost of sending the maximum possible flow.\n\nUndirected, Weighted, With Capacity Graph with 9 vertices and 8 edges\n\nEdges (Format: Node Node Weight Capacity):\n1 8 80 4\n8 6 97 5\n1 3 7 2\n6 5 36 6\n5 7 42 3\n7 9 36 1\n3 4 98 1\n3 2 32 6\n",
    "graph_output": "9 8\n1 8 80 4\n8 6 97 5\n1 3 7 2\n6 5 36 6\n5 7 42 3\n7 9 36 1\n3 4 98 1\n3 2 32 6\n",
    "vertices": [
      4,
      7
    ],
    "answer": 360,
    "description_type": "structured"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 6 vertices and 6 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (6\u00d76):\n\n      1   2   3   4   5   6\n   ------------------------\n 1 |  0   0   0   0   0   1 \n 2 |  0   0   0   1   1   0 \n 3 |  0   0   0   1   0   1 \n 4 |  0   1   1   0   0   1 \n 5 |  0   1   0   0   0   0 \n 6 |  1   0   1   1   0   0 \n",
    "graph_output": "6 6\n1 6\n6 3\n6 4\n4 2\n2 5\n4 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 16 vertices and 100 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 14, 3, 13, 11, 8, 10, 4, 15, 6, 2, 5, 9, 12, 7\nVertex 2: 4, 13, 8, 11, 6, 1, 14, 7, 15, 3, 12\nVertex 3: 1, 8, 12, 6, 16, 11, 5, 7, 13, 2, 4, 10\nVertex 4: 16, 2, 12, 5, 1, 10, 15, 14, 6, 3, 8\nVertex 5: 6, 16, 15, 7, 4, 8, 3, 13, 1, 12, 9, 10, 14, 11\nVertex 6: 14, 5, 3, 8, 1, 2, 15, 7, 10, 4, 9, 11, 13, 16\nVertex 7: 8, 10, 5, 12, 3, 6, 9, 2, 13, 1, 16\nVertex 8: 3, 7, 9, 1, 2, 13, 6, 5, 14, 11, 4, 12, 10, 15\nVertex 9: 8, 16, 14, 12, 11, 13, 10, 7, 1, 5, 6, 15\nVertex 10: 12, 1, 15, 7, 11, 4, 9, 6, 16, 8, 5, 3\nVertex 11: 1, 13, 15, 2, 10, 9, 14, 3, 8, 12, 16, 6, 5\nVertex 12: 3, 10, 14, 15, 4, 9, 7, 16, 5, 1, 8, 11, 13, 2\nVertex 13: 1, 16, 11, 2, 8, 5, 3, 9, 12, 15, 6, 7\nVertex 14: 1, 6, 9, 12, 11, 8, 2, 4, 15, 16, 5\nVertex 15: 16, 10, 11, 5, 12, 1, 6, 4, 14, 2, 13, 9, 8\nVertex 16: 13, 4, 15, 9, 5, 3, 12, 10, 14, 11, 6, 7\n",
    "graph_output": "16 100\n1 14\n1 3\n1 13\n3 8\n14 6\n13 16\n6 5\n8 7\n1 11\n3 12\n16 4\n16 15\n4 2\n8 9\n12 10\n8 1\n9 16\n14 9\n5 16\n10 1\n15 10\n13 11\n12 14\n2 13\n11 15\n5 15\n12 15\n8 2\n10 7\n4 12\n11 2\n6 3\n5 7\n10 11\n8 13\n9 12\n9 11\n4 5\n14 11\n6 8\n1 4\n5 8\n15 1\n3 16\n11 3\n7 12\n6 1\n6 2\n1 2\n12 16\n14 8\n15 6\n3 5\n5 13\n4 10\n7 3\n1 5\n2 14\n4 15\n3 13\n14 4\n12 5\n15 14\n6 7\n9 13\n10 9\n9 7\n9 1\n6 10\n6 4\n10 16\n9 5\n2 7\n2 15\n8 11\n16 14\n2 3\n4 3\n12 1\n4 8\n12 8\n8 10\n5 10\n14 5\n12 11\n9 6\n11 16\n13 12\n10 3\n15 13\n6 11\n13 6\n13 7\n6 16\n15 9\n12 2\n7 1\n11 5\n16 7\n8 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 51 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 6, 2, 9, 11, 3, 5, 4, 8, 7\nVertex 2: 9, 11, 4, 8, 7, 1, 10, 6, 3, 5\nVertex 3: 6, 8, 5, 11, 7, 1, 2, 10\nVertex 4: 2, 6, 9, 7, 8, 5, 1, 11, 10\nVertex 5: 11, 3, 9, 7, 4, 1, 6, 10, 2, 8\nVertex 6: 3, 8, 1, 4, 7, 10, 11, 2, 5\nVertex 7: 2, 4, 10, 6, 5, 3, 11, 1, 8, 9\nVertex 8: 2, 11, 6, 3, 9, 4, 1, 10, 7, 5\nVertex 9: 2, 4, 1, 8, 5, 11, 10, 7\nVertex 10: 2, 11, 7, 6, 3, 5, 8, 9, 4\nVertex 11: 2, 8, 10, 5, 6, 3, 9, 1, 4, 7\n",
    "graph_output": "11 51\n2 9\n2 11\n4 2\n8 2\n3 6\n2 7\n8 11\n6 8\n1 6\n6 4\n9 4\n1 2\n8 3\n9 1\n4 7\n10 2\n9 8\n10 11\n11 5\n7 10\n8 4\n5 3\n6 7\n6 10\n6 11\n9 5\n11 3\n7 5\n9 11\n4 5\n6 2\n1 11\n7 3\n3 1\n5 1\n2 3\n1 4\n8 1\n10 3\n6 5\n4 11\n5 10\n11 7\n5 2\n10 8\n7 1\n9 10\n7 8\n7 9\n10 4\n5 8\n",
    "vertices": [
      null,
      null
    ],
    "answer": 131,
    "description_type": "list"
  },
  {
    "task_name": "Eulerian Circuit",
    "task_description": "Determine if the graph has an Eulerian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has an Eulerian circuit. An Eulerian circuit is a cycle that visits every edge exactly once.\n\nThis is an undirected graph with 15 vertices and 25 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 5 and vertex 13.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 1 and vertex 7.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 11 and vertex 13.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 6 and vertex 11.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 8 and vertex 7.\nThere is an edge between vertex 2 and vertex 12.\n",
    "graph_output": "15 25\n1 15\n15 5\n5 12\n5 13\n1 10\n15 2\n1 7\n13 3\n5 9\n13 4\n12 8\n12 14\n7 6\n1 11\n15 6\n3 7\n11 13\n8 2\n11 9\n6 8\n7 2\n6 11\n15 14\n8 7\n2 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 130 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 12 and vertex 10.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 17 and vertex 3.\nThere is an edge between vertex 8 and vertex 5.\nThere is an edge between vertex 14 and vertex 17.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 11 and vertex 14.\nThere is an edge between vertex 4 and vertex 9.\nThere is an edge between vertex 17 and vertex 7.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 13 and vertex 14.\nThere is an edge between vertex 13 and vertex 15.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 14 and vertex 3.\nThere is an edge between vertex 16 and vertex 2.\nThere is an edge between vertex 9 and vertex 11.\nThere is an edge between vertex 13 and vertex 11.\nThere is an edge between vertex 14 and vertex 4.\nThere is an edge between vertex 3 and vertex 7.\nThere is an edge between vertex 16 and vertex 13.\nThere is an edge between vertex 4 and vertex 10.\nThere is an edge between vertex 12 and vertex 15.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 17 and vertex 6.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 6 and vertex 4.\nThere is an edge between vertex 15 and vertex 5.\nThere is an edge between vertex 16 and vertex 7.\nThere is an edge between vertex 2 and vertex 9.\nThere is an edge between vertex 15 and vertex 9.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 16 and vertex 3.\nThere is an edge between vertex 15 and vertex 8.\nThere is an edge between vertex 2 and vertex 15.\nThere is an edge between vertex 13 and vertex 8.\nThere is an edge between vertex 2 and vertex 11.\nThere is an edge between vertex 6 and vertex 13.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 8 and vertex 16.\nThere is an edge between vertex 12 and vertex 7.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 16 and vertex 12.\nThere is an edge between vertex 17 and vertex 15.\nThere is an edge between vertex 17 and vertex 9.\nThere is an edge between vertex 6 and vertex 8.\nThere is an edge between vertex 2 and vertex 1.\nThere is an edge between vertex 14 and vertex 12.\nThere is an edge between vertex 16 and vertex 9.\nThere is an edge between vertex 17 and vertex 16.\nThere is an edge between vertex 13 and vertex 3.\nThere is an edge between vertex 17 and vertex 1.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 7 and vertex 8.\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 12 and vertex 1.\nThere is an edge between vertex 5 and vertex 12.\nThere is an edge between vertex 2 and vertex 17.\nThere is an edge between vertex 9 and vertex 1.\nThere is an edge between vertex 5 and vertex 17.\nThere is an edge between vertex 13 and vertex 4.\nThere is an edge between vertex 15 and vertex 1.\nThere is an edge between vertex 2 and vertex 12.\nThere is an edge between vertex 10 and vertex 6.\nThere is an edge between vertex 16 and vertex 1.\nThere is an edge between vertex 13 and vertex 5.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 14 and vertex 8.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 6 and vertex 7.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 2 and vertex 13.\nThere is an edge between vertex 9 and vertex 6.\nThere is an edge between vertex 17 and vertex 13.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 16 and vertex 4.\nThere is an edge between vertex 12 and vertex 3.\nThere is an edge between vertex 14 and vertex 6.\nThere is an edge between vertex 3 and vertex 9.\nThere is an edge between vertex 17 and vertex 12.\nThere is an edge between vertex 1 and vertex 11.\nThere is an edge between vertex 16 and vertex 5.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 12 and vertex 13.\nThere is an edge between vertex 7 and vertex 11.\nThere is an edge between vertex 17 and vertex 11.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 16 and vertex 6.\nThere is an edge between vertex 7 and vertex 14.\nThere is an edge between vertex 17 and vertex 10.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 8 and vertex 1.\nThere is an edge between vertex 5 and vertex 9.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 15 and vertex 11.\nThere is an edge between vertex 15 and vertex 6.\nThere is an edge between vertex 13 and vertex 10.\nThere is an edge between vertex 4 and vertex 1.\nThere is an edge between vertex 8 and vertex 9.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 14 and vertex 16.\nThere is an edge between vertex 12 and vertex 8.\nThere is an edge between vertex 1 and vertex 3.\nThere is an edge between vertex 15 and vertex 7.\nThere is an edge between vertex 12 and vertex 6.\nThere is an edge between vertex 3 and vertex 8.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 12 and vertex 9.\nThere is an edge between vertex 15 and vertex 14.\nThere is an edge between vertex 5 and vertex 14.\nThere is an edge between vertex 2 and vertex 7.\nThere is an edge between vertex 16 and vertex 15.\nThere is an edge between vertex 11 and vertex 12.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 16 and vertex 10.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 13 and vertex 7.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 11 and vertex 16.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 15 and vertex 10.\n",
    "graph_output": "17 130\n12 10\n1 5\n8 2\n17 3\n8 5\n14 17\n3 15\n11 14\n4 9\n17 7\n4 11\n13 14\n13 15\n3 2\n14 3\n16 2\n9 11\n13 11\n14 4\n3 7\n16 13\n4 10\n12 15\n5 3\n17 6\n2 6\n6 4\n15 5\n16 7\n2 9\n15 9\n17 8\n16 3\n15 8\n2 15\n13 8\n2 11\n6 13\n8 11\n8 16\n12 7\n4 2\n3 6\n16 12\n17 15\n17 9\n6 8\n2 1\n14 12\n16 9\n17 16\n13 3\n17 1\n5 10\n7 8\n8 4\n12 1\n5 12\n2 17\n9 1\n5 17\n13 4\n15 1\n2 12\n10 6\n16 1\n13 5\n6 5\n7 5\n14 8\n5 11\n6 7\n10 11\n2 13\n9 6\n17 13\n1 14\n15 4\n1 6\n16 4\n12 3\n14 6\n3 9\n17 12\n1 11\n16 5\n14 10\n12 13\n7 11\n17 11\n7 1\n10 3\n4 3\n16 6\n7 14\n17 10\n8 10\n4 17\n8 1\n5 9\n10 7\n15 11\n15 6\n13 10\n4 1\n8 9\n5 2\n14 16\n12 8\n1 3\n15 7\n12 6\n3 8\n11 6\n12 9\n15 14\n5 14\n2 7\n16 15\n11 12\n13 9\n9 10\n16 10\n13 1\n13 7\n7 9\n7 4\n11 16\n10 1\n15 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nUndirected Graph with 13 vertices and 70 edges\n\nEdges (Format: Node Node):\n3 11\n2 4\n1 7\n1 11\n3 6\n4 9\n8 1\n3 2\n3 13\n7 9\n3 7\n13 10\n10 5\n10 4\n6 5\n13 5\n12 13\n1 13\n4 12\n11 13\n8 13\n4 11\n8 9\n8 2\n3 12\n5 4\n2 13\n8 6\n10 9\n4 6\n8 10\n2 12\n5 11\n4 3\n10 12\n8 4\n9 13\n5 3\n10 1\n11 6\n11 8\n6 9\n4 7\n2 10\n9 3\n6 2\n9 5\n7 12\n1 9\n10 11\n1 3\n7 5\n6 7\n3 10\n8 7\n3 8\n11 12\n10 6\n9 2\n2 11\n7 2\n12 6\n1 2\n12 8\n1 5\n13 7\n5 12\n13 4\n6 13\n6 1\n",
    "graph_output": "13 70\n3 11\n2 4\n1 7\n1 11\n3 6\n4 9\n8 1\n3 2\n3 13\n7 9\n3 7\n13 10\n10 5\n10 4\n6 5\n13 5\n12 13\n1 13\n4 12\n11 13\n8 13\n4 11\n8 9\n8 2\n3 12\n5 4\n2 13\n8 6\n10 9\n4 6\n8 10\n2 12\n5 11\n4 3\n10 12\n8 4\n9 13\n5 3\n10 1\n11 6\n11 8\n6 9\n4 7\n2 10\n9 3\n6 2\n9 5\n7 12\n1 9\n10 11\n1 3\n7 5\n6 7\n3 10\n8 7\n3 8\n11 12\n10 6\n9 2\n2 11\n7 2\n12 6\n1 2\n12 8\n1 5\n13 7\n5 12\n13 4\n6 13\n6 1\n",
    "vertices": [
      null,
      null
    ],
    "answer": 204,
    "description_type": "structured"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 21 and 2 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 30 vertices and 29 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (30\u00d730):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n   ------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   1   0   0   1   0   1   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n 5 |  0   1   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0 \n 6 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 7 |  0   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 9 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   1   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n12 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  1   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n18 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n19 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n20 |  0   0   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n21 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0 \n23 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n24 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n25 |  0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0 \n29 |  0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1 \n30 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0 \n",
    "graph_output": "30 29\n1 14\n14 5\n5 7\n1 18\n14 20\n14 26\n18 30\n30 29\n20 22\n5 2\n2 10\n7 24\n7 6\n5 23\n2 19\n19 15\n1 12\n1 9\n2 25\n22 4\n29 3\n3 21\n5 27\n10 8\n14 13\n8 17\n20 11\n12 16\n23 28\n",
    "vertices": [
      21,
      2
    ],
    "answer": 1,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cycle",
    "task_description": "Find the size of the smallest cycle in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the length of the smallest cycle in the given graph.\n\nUndirected Graph with 15 vertices and 92 edges\n\nEdges (Format: Node Node):\n11 7\n4 14\n4 8\n8 15\n3 7\n10 9\n7 6\n4 11\n15 1\n4 13\n14 7\n10 12\n5 10\n3 10\n2 15\n9 2\n9 15\n15 3\n12 8\n11 8\n5 3\n11 6\n5 12\n5 15\n15 6\n1 4\n2 14\n2 8\n1 5\n14 13\n7 10\n2 11\n12 3\n1 6\n13 15\n4 2\n7 15\n11 5\n1 7\n13 7\n8 1\n1 12\n3 13\n2 7\n11 14\n13 9\n13 1\n5 2\n8 7\n15 14\n8 9\n11 3\n15 11\n10 15\n3 8\n5 7\n12 15\n12 13\n6 13\n14 8\n1 14\n9 3\n10 6\n9 7\n1 9\n10 8\n6 5\n2 1\n11 1\n12 6\n10 1\n12 9\n6 4\n13 11\n12 4\n2 6\n10 4\n2 10\n2 3\n8 5\n14 3\n13 5\n4 3\n8 13\n13 2\n9 5\n5 4\n9 14\n11 12\n6 8\n13 10\n9 6\n",
    "graph_output": "15 92\n11 7\n4 14\n4 8\n8 15\n3 7\n10 9\n7 6\n4 11\n15 1\n4 13\n14 7\n10 12\n5 10\n3 10\n2 15\n9 2\n9 15\n15 3\n12 8\n11 8\n5 3\n11 6\n5 12\n5 15\n15 6\n1 4\n2 14\n2 8\n1 5\n14 13\n7 10\n2 11\n12 3\n1 6\n13 15\n4 2\n7 15\n11 5\n1 7\n13 7\n8 1\n1 12\n3 13\n2 7\n11 14\n13 9\n13 1\n5 2\n8 7\n15 14\n8 9\n11 3\n15 11\n10 15\n3 8\n5 7\n12 15\n12 13\n6 13\n14 8\n1 14\n9 3\n10 6\n9 7\n1 9\n10 8\n6 5\n2 1\n11 1\n12 6\n10 1\n12 9\n6 4\n13 11\n12 4\n2 6\n10 4\n2 10\n2 3\n8 5\n14 3\n13 5\n4 3\n8 13\n13 2\n9 5\n5 4\n9 14\n11 12\n6 8\n13 10\n9 6\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "structured"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 105 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 15, 9, 5, 13, 6, 2, 10, 14, 12, 8, 7, 11, 3\nVertex 2: 9, 11, 3, 13, 12, 10, 1, 4, 14, 5, 15, 7, 6, 8\nVertex 3: 2, 7, 13, 15, 10, 11, 5, 4, 6, 12, 14, 8, 1, 9\nVertex 4: 7, 1, 15, 8, 10, 6, 9, 13, 5, 2, 14, 3, 11, 12\nVertex 5: 7, 13, 9, 1, 11, 3, 4, 10, 8, 2, 14, 6, 12, 15\nVertex 6: 9, 14, 12, 7, 4, 1, 8, 13, 3, 10, 11, 15, 5, 2\nVertex 7: 5, 4, 3, 15, 10, 8, 6, 11, 9, 13, 12, 14, 1, 2\nVertex 8: 10, 4, 7, 14, 9, 12, 6, 15, 3, 1, 5, 11, 13, 2\nVertex 9: 2, 5, 6, 1, 15, 8, 13, 4, 7, 12, 10, 14, 11, 3\nVertex 10: 11, 14, 8, 2, 3, 7, 4, 9, 1, 6, 13, 5, 15, 12\nVertex 11: 15, 2, 10, 5, 3, 7, 14, 13, 6, 9, 4, 1, 12, 8\nVertex 12: 2, 14, 6, 8, 9, 3, 7, 1, 13, 11, 10, 15, 5, 4\nVertex 13: 5, 3, 2, 9, 4, 1, 6, 11, 15, 7, 10, 14, 12, 8\nVertex 14: 10, 12, 6, 15, 8, 11, 4, 9, 2, 3, 1, 7, 13, 5\nVertex 15: 11, 1, 7, 3, 4, 14, 9, 13, 8, 10, 6, 2, 12, 5\n",
    "graph_output": "15 105\n9 2\n11 15\n7 5\n11 2\n2 3\n7 4\n7 3\n10 11\n1 4\n13 5\n9 5\n15 1\n15 7\n13 3\n3 15\n13 2\n10 14\n9 6\n12 2\n12 14\n15 4\n8 10\n2 10\n6 14\n3 10\n4 8\n15 14\n9 1\n10 7\n1 5\n10 4\n6 12\n15 9\n7 8\n5 11\n14 8\n11 3\n9 8\n6 7\n9 13\n12 8\n6 4\n9 4\n3 5\n13 4\n1 13\n6 1\n4 5\n11 7\n7 9\n1 2\n9 12\n2 4\n14 11\n6 8\n4 14\n9 10\n10 1\n13 6\n9 14\n13 11\n3 4\n3 6\n12 3\n6 10\n14 2\n13 15\n14 3\n7 13\n10 13\n6 11\n12 7\n14 1\n12 1\n8 15\n9 11\n5 10\n7 14\n11 4\n3 8\n13 14\n10 15\n8 1\n8 5\n15 6\n7 1\n12 13\n11 1\n11 12\n1 3\n2 5\n10 12\n5 14\n8 11\n2 15\n2 7\n5 6\n12 15\n9 3\n5 12\n6 2\n8 13\n8 2\n12 4\n5 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": 1,
    "description_type": "list"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 3 (source) to vertex 12 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nUndirected, With Capacity Graph with 13 vertices and 16 edges\n\nEdges (Format: Node Node Capacity):\n1 13 5\n1 4 8\n1 5 9\n4 12 5\n13 8 9\n8 3 10\n8 6 10\n12 11 9\n12 7 6\n13 2 10\n12 9 10\n7 10 3\n13 10 9\n5 12 8\n8 5 9\n7 1 4\n",
    "graph_output": "13 16\n1 13 5\n1 4 8\n1 5 9\n4 12 5\n13 8 9\n8 3 10\n8 6 10\n12 11 9\n12 7 6\n13 2 10\n12 9 10\n7 10 3\n13 10 9\n5 12 8\n8 5 9\n7 1 4\n",
    "vertices": [
      3,
      12
    ],
    "answer": 10,
    "description_type": "structured"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 16 vertices and 106 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 16, 4, 13, 10, 12, 11, 6, 8, 2, 5, 9, 3\nVertex 2: 12, 6, 3, 10, 8, 14, 16, 11, 15, 1, 9, 5, 13\nVertex 3: 11, 7, 12, 15, 2, 10, 5, 6, 16, 9, 1, 14\nVertex 4: 10, 1, 15, 12, 9, 7, 14, 8, 6, 5, 16, 11\nVertex 5: 14, 15, 11, 13, 6, 9, 3, 8, 16, 12, 4, 1, 2\nVertex 6: 2, 14, 16, 5, 8, 10, 7, 13, 1, 9, 3, 4, 15\nVertex 7: 8, 3, 6, 14, 12, 4, 11, 16, 15, 10, 9\nVertex 8: 7, 15, 13, 16, 10, 9, 6, 2, 14, 5, 1, 4, 11, 12\nVertex 9: 14, 15, 10, 8, 5, 4, 16, 6, 13, 11, 2, 3, 12, 1, 7\nVertex 10: 4, 9, 8, 15, 6, 2, 1, 3, 16, 14, 7, 11, 13, 12\nVertex 11: 3, 5, 14, 7, 1, 2, 15, 16, 12, 9, 10, 13, 8, 4\nVertex 12: 2, 3, 14, 4, 15, 7, 1, 11, 5, 13, 16, 9, 10, 8\nVertex 13: 8, 5, 15, 1, 6, 9, 11, 16, 12, 10, 14, 2\nVertex 14: 5, 9, 12, 6, 15, 11, 8, 7, 2, 10, 4, 16, 13, 3\nVertex 15: 5, 8, 9, 3, 14, 13, 4, 10, 12, 7, 2, 11, 16, 6\nVertex 16: 1, 8, 6, 9, 2, 7, 10, 5, 11, 3, 15, 14, 13, 4, 12\n",
    "graph_output": "16 106\n11 3\n7 8\n2 12\n7 3\n3 12\n5 14\n14 9\n5 15\n2 6\n15 8\n15 9\n3 15\n4 10\n11 5\n9 10\n1 16\n12 14\n3 2\n13 8\n8 16\n6 14\n15 14\n10 8\n8 9\n16 6\n4 1\n14 11\n13 5\n6 5\n15 13\n4 15\n15 10\n6 8\n6 10\n7 6\n2 10\n13 1\n10 1\n12 4\n8 2\n9 5\n8 14\n4 9\n7 14\n13 6\n15 12\n7 12\n2 14\n16 9\n1 12\n7 4\n7 11\n16 2\n10 3\n7 16\n3 5\n11 1\n15 7\n11 2\n16 10\n14 10\n8 5\n1 6\n1 8\n16 5\n4 14\n2 15\n11 15\n4 8\n16 11\n7 10\n11 12\n9 6\n3 6\n9 13\n16 3\n15 16\n14 16\n2 1\n6 4\n11 9\n12 5\n10 11\n11 13\n5 4\n9 2\n16 13\n16 4\n3 9\n5 1\n12 13\n2 5\n11 8\n16 12\n12 9\n13 10\n14 13\n15 6\n11 4\n12 10\n1 9\n7 9\n8 12\n3 1\n13 2\n3 14\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nThis is an undirected graph with 12 vertices and 53 edges. Each edge in the graph has a weight value. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 12 with a weight of 47.\nThere is an edge between vertex 12 and vertex 6 with a weight of 75.\nThere is an edge between vertex 6 and vertex 2 with a weight of 65.\nThere is an edge between vertex 2 and vertex 7 with a weight of 23.\nThere is an edge between vertex 7 and vertex 10 with a weight of 21.\nThere is an edge between vertex 6 and vertex 5 with a weight of 65.\nThere is an edge between vertex 7 and vertex 8 with a weight of 34.\nThere is an edge between vertex 8 and vertex 4 with a weight of 30.\nThere is an edge between vertex 10 and vertex 9 with a weight of 69.\nThere is an edge between vertex 7 and vertex 11 with a weight of 1.\nThere is an edge between vertex 7 and vertex 3 with a weight of 88.\nThere is an edge between vertex 5 and vertex 12 with a weight of 30.\nThere is an edge between vertex 1 and vertex 9 with a weight of 64.\nThere is an edge between vertex 3 and vertex 10 with a weight of 23.\nThere is an edge between vertex 1 and vertex 6 with a weight of 24.\nThere is an edge between vertex 9 and vertex 8 with a weight of 69.\nThere is an edge between vertex 4 and vertex 2 with a weight of 74.\nThere is an edge between vertex 11 and vertex 12 with a weight of 100.\nThere is an edge between vertex 7 and vertex 1 with a weight of 18.\nThere is an edge between vertex 2 and vertex 9 with a weight of 36.\nThere is an edge between vertex 11 and vertex 6 with a weight of 15.\nThere is an edge between vertex 7 and vertex 12 with a weight of 81.\nThere is an edge between vertex 4 and vertex 9 with a weight of 77.\nThere is an edge between vertex 8 and vertex 6 with a weight of 87.\nThere is an edge between vertex 12 and vertex 10 with a weight of 4.\nThere is an edge between vertex 10 and vertex 1 with a weight of 34.\nThere is an edge between vertex 7 and vertex 5 with a weight of 44.\nThere is an edge between vertex 10 and vertex 11 with a weight of 97.\nThere is an edge between vertex 4 and vertex 5 with a weight of 22.\nThere is an edge between vertex 4 and vertex 1 with a weight of 62.\nThere is an edge between vertex 8 and vertex 5 with a weight of 27.\nThere is an edge between vertex 8 and vertex 10 with a weight of 60.\nThere is an edge between vertex 11 and vertex 8 with a weight of 89.\nThere is an edge between vertex 5 and vertex 9 with a weight of 49.\nThere is an edge between vertex 2 and vertex 3 with a weight of 43.\nThere is an edge between vertex 12 and vertex 8 with a weight of 48.\nThere is an edge between vertex 10 and vertex 5 with a weight of 61.\nThere is an edge between vertex 3 and vertex 11 with a weight of 56.\nThere is an edge between vertex 3 and vertex 4 with a weight of 16.\nThere is an edge between vertex 4 and vertex 7 with a weight of 23.\nThere is an edge between vertex 8 and vertex 1 with a weight of 48.\nThere is an edge between vertex 3 and vertex 1 with a weight of 100.\nThere is an edge between vertex 9 and vertex 3 with a weight of 15.\nThere is an edge between vertex 9 and vertex 6 with a weight of 47.\nThere is an edge between vertex 4 and vertex 11 with a weight of 100.\nThere is an edge between vertex 12 and vertex 3 with a weight of 83.\nThere is an edge between vertex 5 and vertex 2 with a weight of 53.\nThere is an edge between vertex 5 and vertex 11 with a weight of 12.\nThere is an edge between vertex 7 and vertex 6 with a weight of 95.\nThere is an edge between vertex 1 and vertex 5 with a weight of 23.\nThere is an edge between vertex 2 and vertex 1 with a weight of 65.\nThere is an edge between vertex 8 and vertex 3 with a weight of 97.\nThere is an edge between vertex 9 and vertex 7 with a weight of 2.\n",
    "graph_output": "12 53\n1 12 47\n12 6 75\n6 2 65\n2 7 23\n7 10 21\n6 5 65\n7 8 34\n8 4 30\n10 9 69\n7 11 1\n7 3 88\n5 12 30\n1 9 64\n3 10 23\n1 6 24\n9 8 69\n4 2 74\n11 12 100\n7 1 18\n2 9 36\n11 6 15\n7 12 81\n4 9 77\n8 6 87\n12 10 4\n10 1 34\n7 5 44\n10 11 97\n4 5 22\n4 1 62\n8 5 27\n8 10 60\n11 8 89\n5 9 49\n2 3 43\n12 8 48\n10 5 61\n3 11 56\n3 4 16\n4 7 23\n8 1 48\n3 1 100\n9 3 15\n9 6 47\n4 11 100\n12 3 83\n5 2 53\n5 11 12\n7 6 95\n1 5 23\n2 1 65\n8 3 97\n9 7 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 156,
    "description_type": "natural"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 17 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 2 and vertex 6.\nThere is an edge between vertex 4 and vertex 2.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 7 and vertex 3.\nThere is an edge between vertex 7 and vertex 6.\nThere is an edge between vertex 6 and vertex 3.\nThere is an edge between vertex 7 and vertex 4.\nThere is an edge between vertex 1 and vertex 6.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 7 and vertex 1.\nThere is an edge between vertex 5 and vertex 2.\nThere is an edge between vertex 1 and vertex 2.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 5 and vertex 4.\nThere is an edge between vertex 5 and vertex 3.\nThere is an edge between vertex 5 and vertex 7.\n",
    "graph_output": "7 17\n4 3\n2 6\n4 2\n7 2\n7 3\n7 6\n6 3\n7 4\n1 6\n5 6\n7 1\n5 2\n1 2\n4 6\n5 4\n5 3\n5 7\n",
    "vertices": [
      null,
      null
    ],
    "answer": 274,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 120 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0  11  26  22  21  25   7  49   3  96  23  43   5  96  65  75 \n 2 | 11   0  60  88  27   9  23  59  40  75  57  14  13  88   5  13 \n 3 | 26  60   0  97  59  17   5  39  66  17   6  73  72  67   6  70 \n 4 | 22  88  97   0   3  67   9  60  60  67  85   9  48  47  71  53 \n 5 | 21  27  59   3   0  16  87  48  10  96  17  67  40  59  31  93 \n 6 | 25   9  17  67  16   0   9  83  55  65   8  55  30  52  79  50 \n 7 |  7  23   5   9  87   9   0  51  74  34  38  57  65  84  19  38 \n 8 | 49  59  39  60  48  83  51   0  70  88  48  77  85   2  76  36 \n 9 |  3  40  66  60  10  55  74  70   0  61  44  22  44  44  36  25 \n10 | 96  75  17  67  96  65  34  88  61   0  13  60  63  74   9  34 \n11 | 23  57   6  85  17   8  38  48  44  13   0  54  25  94  91  94 \n12 | 43  14  73   9  67  55  57  77  22  60  54   0  22  99  94   6 \n13 |  5  13  72  48  40  30  65  85  44  63  25  22   0  89  60  35 \n14 | 96  88  67  47  59  52  84   2  44  74  94  99  89   0  22  95 \n15 | 65   5   6  71  31  79  19  76  36   9  91  94  60  22   0  67 \n16 | 75  13  70  53  93  50  38  36  25  34  94   6  35  95  67   0 \n",
    "graph_output": "16 120\n1 9 3\n1 2 11\n1 5 21\n1 12 43\n12 7 57\n5 16 93\n2 13 13\n16 8 36\n12 14 99\n5 4 3\n1 3 26\n4 15 71\n14 10 74\n14 6 52\n16 11 94\n3 6 17\n15 7 19\n1 14 96\n16 4 53\n16 12 6\n1 13 5\n12 2 14\n8 11 48\n16 1 75\n12 11 54\n14 2 88\n2 11 57\n7 8 51\n3 12 73\n4 1 22\n14 15 22\n13 12 22\n7 4 9\n13 10 63\n10 15 9\n15 12 94\n8 13 85\n3 9 66\n1 7 7\n13 7 65\n12 5 67\n8 14 2\n6 15 79\n14 5 59\n15 13 60\n12 4 9\n11 6 8\n15 8 76\n11 7 38\n8 9 70\n8 5 48\n1 8 49\n4 2 88\n15 9 36\n5 3 59\n10 7 34\n15 16 67\n12 8 77\n2 15 5\n16 13 35\n5 7 87\n9 5 10\n2 16 13\n2 6 9\n2 10 75\n3 14 67\n1 6 25\n16 10 34\n16 14 95\n16 3 70\n11 14 94\n3 7 5\n5 6 16\n12 6 55\n9 7 74\n11 1 23\n11 4 85\n11 13 25\n3 2 60\n11 10 13\n9 12 22\n13 14 89\n10 1 96\n13 5 40\n8 6 83\n7 14 84\n10 6 65\n5 11 17\n13 6 30\n5 10 96\n6 16 50\n13 4 48\n6 7 9\n10 3 17\n2 7 23\n10 9 61\n12 10 60\n8 10 88\n9 2 40\n15 5 31\n9 4 60\n4 14 47\n16 7 38\n15 11 91\n8 4 60\n9 16 25\n4 10 67\n4 6 67\n8 2 59\n9 6 55\n4 3 97\n15 3 6\n8 3 39\n3 13 72\n9 11 44\n15 1 65\n14 9 44\n11 3 6\n2 5 27\n13 9 44\n",
    "vertices": [
      null,
      null
    ],
    "answer": 105,
    "description_type": "matrix"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 15 and vertex 24.\nThere is an edge between vertex 24 and vertex 28.\nThere is an edge between vertex 15 and vertex 18.\nThere is an edge between vertex 1 and vertex 17.\nThere is an edge between vertex 28 and vertex 6.\nThere is an edge between vertex 24 and vertex 14.\nThere is an edge between vertex 17 and vertex 20.\nThere is an edge between vertex 18 and vertex 13.\nThere is an edge between vertex 28 and vertex 23.\nThere is an edge between vertex 20 and vertex 12.\nThere is an edge between vertex 28 and vertex 21.\nThere is an edge between vertex 14 and vertex 11.\nThere is an edge between vertex 20 and vertex 29.\nThere is an edge between vertex 17 and vertex 27.\nThere is an edge between vertex 15 and vertex 2.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 13 and vertex 26.\nThere is an edge between vertex 21 and vertex 7.\nThere is an edge between vertex 1 and vertex 25.\nThere is an edge between vertex 29 and vertex 3.\nThere is an edge between vertex 24 and vertex 22.\nThere is an edge between vertex 21 and vertex 16.\nThere is an edge between vertex 6 and vertex 5.\nThere is an edge between vertex 26 and vertex 4.\nThere is an edge between vertex 7 and vertex 9.\nThere is an edge between vertex 4 and vertex 19.\n",
    "graph_output": "29 28\n1 15\n15 24\n24 28\n15 18\n1 17\n28 6\n24 14\n17 20\n18 13\n28 23\n20 12\n28 21\n14 11\n20 29\n17 27\n15 2\n6 10\n17 8\n13 26\n21 7\n1 25\n29 3\n24 22\n21 16\n6 5\n26 4\n7 9\n4 19\n",
    "vertices": [
      null,
      null
    ],
    "answer": 16,
    "description_type": "natural"
  },
  {
    "task_name": "Spanning Tree Count",
    "task_description": "Count the number of spanning trees in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of spanning trees in the given graph. A spanning tree is a tree that includes all vertices of the graph.\n\nThis is an undirected graph with 8 vertices and 10 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (8\u00d78):\n\n      1   2   3   4   5   6   7   8\n   --------------------------------\n 1 |  0   0   0   1   1   0   0   1 \n 2 |  0   0   0   1   0   1   1   0 \n 3 |  0   0   0   1   0   0   0   0 \n 4 |  1   1   1   0   0   1   0   0 \n 5 |  1   0   0   0   0   0   1   0 \n 6 |  0   1   0   1   0   0   1   0 \n 7 |  0   1   0   0   1   1   0   0 \n 8 |  1   0   0   0   0   0   0   0 \n",
    "graph_output": "8 10\n1 4\n4 6\n1 5\n1 8\n6 7\n4 3\n6 2\n2 4\n7 2\n7 5\n",
    "vertices": [
      null,
      null
    ],
    "answer": 32,
    "description_type": "matrix"
  },
  {
    "task_name": "Hamiltonian Circuit",
    "task_description": "Determine if the graph has a Hamiltonian circuit",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian circuit. A Hamiltonian circuit is a cycle that visits each vertex exactly once and returns to the starting vertex.\n\nThis is an undirected graph with 15 vertices and 26 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   0   0   1   1   0   0   1   0   0   0   0   1   0   1 \n 2 |  0   0   0   0   0   0   1   0   0   1   0   0   1   0   0 \n 3 |  0   0   0   1   0   0   0   1   0   1   0   0   1   0   0 \n 4 |  1   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n 5 |  1   0   0   0   0   0   1   0   1   0   0   0   1   1   1 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   1   0 \n 7 |  0   1   0   0   1   0   0   1   0   0   0   1   0   0   0 \n 8 |  1   0   1   0   0   0   1   0   0   0   1   0   0   0   0 \n 9 |  0   0   0   0   1   0   0   0   0   0   0   1   0   0   0 \n10 |  0   1   1   0   0   0   0   0   0   0   0   0   1   0   0 \n11 |  0   0   0   0   0   0   0   1   0   0   0   0   0   1   0 \n12 |  0   0   0   0   0   0   1   0   1   0   0   0   0   0   1 \n13 |  1   1   1   0   1   0   0   0   0   1   0   0   0   0   0 \n14 |  0   0   0   0   1   1   0   0   0   0   1   0   0   0   1 \n15 |  1   0   0   0   1   0   0   0   0   0   0   1   0   1   0 \n",
    "graph_output": "15 26\n1 13\n1 15\n1 4\n15 12\n1 5\n15 14\n13 3\n14 6\n5 9\n12 7\n14 11\n3 8\n13 10\n10 2\n7 5\n2 13\n2 7\n11 8\n8 7\n5 13\n1 8\n5 15\n5 14\n12 9\n4 3\n3 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "matrix"
  },
  {
    "task_name": "Triangle Count",
    "task_description": "Count the number of triangles (cycles of length 3) in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the number of triangles (cycles of length 3) in the given graph.\n\nThis is an undirected graph with 11 vertices and 16 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 8 and vertex 4.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 5 and vertex 6.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 4 and vertex 11.\nThere is an edge between vertex 10 and vertex 7.\nThere is an edge between vertex 4 and vertex 6.\nThere is an edge between vertex 5 and vertex 1.\nThere is an edge between vertex 7 and vertex 5.\nThere is an edge between vertex 10 and vertex 1.\nThere is an edge between vertex 11 and vertex 6.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 9 and vertex 2.\nThere is an edge between vertex 3 and vertex 10.\nThere is an edge between vertex 9 and vertex 10.\nThere is an edge between vertex 8 and vertex 3.\n",
    "graph_output": "11 16\n8 4\n6 10\n5 6\n8 2\n4 11\n10 7\n4 6\n5 1\n7 5\n10 1\n11 6\n3 6\n9 2\n3 10\n9 10\n8 3\n",
    "vertices": [
      null,
      null
    ],
    "answer": 2,
    "description_type": "natural"
  },
  {
    "task_name": "Tree Max Independent Set",
    "task_description": "Find the size of the maximum independent set in the tree",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given tree. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 29 vertices and 28 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 1 and vertex 15.\nThere is an edge between vertex 1 and vertex 5.\nThere is an edge between vertex 15 and vertex 4.\nThere is an edge between vertex 1 and vertex 24.\nThere is an edge between vertex 4 and vertex 20.\nThere is an edge between vertex 15 and vertex 23.\nThere is an edge between vertex 5 and vertex 28.\nThere is an edge between vertex 24 and vertex 21.\nThere is an edge between vertex 5 and vertex 29.\nThere is an edge between vertex 29 and vertex 13.\nThere is an edge between vertex 23 and vertex 18.\nThere is an edge between vertex 1 and vertex 14.\nThere is an edge between vertex 4 and vertex 17.\nThere is an edge between vertex 23 and vertex 16.\nThere is an edge between vertex 23 and vertex 3.\nThere is an edge between vertex 17 and vertex 8.\nThere is an edge between vertex 21 and vertex 26.\nThere is an edge between vertex 24 and vertex 10.\nThere is an edge between vertex 28 and vertex 25.\nThere is an edge between vertex 13 and vertex 9.\nThere is an edge between vertex 20 and vertex 27.\nThere is an edge between vertex 28 and vertex 6.\nThere is an edge between vertex 17 and vertex 19.\nThere is an edge between vertex 28 and vertex 7.\nThere is an edge between vertex 28 and vertex 22.\nThere is an edge between vertex 8 and vertex 11.\nThere is an edge between vertex 20 and vertex 2.\nThere is an edge between vertex 4 and vertex 12.\n",
    "graph_output": "29 28\n1 15\n1 5\n15 4\n1 24\n4 20\n15 23\n5 28\n24 21\n5 29\n29 13\n23 18\n1 14\n4 17\n23 16\n23 3\n17 8\n21 26\n24 10\n28 25\n13 9\n20 27\n28 6\n17 19\n28 7\n28 22\n8 11\n20 2\n4 12\n",
    "vertices": [
      null,
      null
    ],
    "answer": 18,
    "description_type": "natural"
  },
  {
    "task_name": "Minimum Spanning Tree",
    "task_description": "Find the total weight of the minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the minimum spanning tree (MST) in the weighted graph.\n\nThis is an undirected graph with 16 vertices and 30 edges.\n\nThe graph has weights on its edges.\n- Weight Matrix: Shows the weight of each edge (0 means no connection).\n\nWeight Matrix (16\u00d716):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\n   ----------------------------------------------------------------\n 1 |  0  51  86   0   0   0   0   0   0   0   0  31   0  19  72   0 \n 2 | 51   0   0  64   0  92   0  80  72   0   0   0   0   0   0  57 \n 3 | 86   0   0   0   0   0   0   0   0   0   0   0   0  94   0   0 \n 4 |  0  64   0   0   0   0  91   0  67   0   0   0   0   0   0   0 \n 5 |  0   0   0   0   0   0  26   0   0   0   6   0   0  39  29   0 \n 6 |  0  92   0   0   0   0   0   0   0   0  67   0   0   0   0   0 \n 7 |  0   0   0  91  26   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0  80   0   0   0   0   0   0   0  35   0   0   0  44   0   0 \n 9 |  0  72   0  67   0   0   0   0   0   0   0   0  25  64  34   0 \n10 |  0   0   0   0   0   0   0  35   0   0   0   2   0   0   0   0 \n11 |  0   0   0   0   6  67   0   0   0   0   0   0   0  77  73   0 \n12 | 31   0   0   0   0   0   0   0   0   2   0   0  96  77   0   0 \n13 |  0   0   0   0   0   0   0   0  25   0   0  96   0   5   0  46 \n14 | 19   0  94   0  39   0   0  44  64   0  77  77   5   0   0   0 \n15 | 72   0   0   0  29   0   0   0  34   0  73   0   0   0   0   0 \n16 |  0  57   0   0   0   0   0   0   0   0   0   0  46   0   0   0 \n",
    "graph_output": "16 30\n1 12 31\n1 3 86\n3 14 94\n14 11 77\n1 2 51\n14 9 64\n9 4 67\n1 15 72\n12 13 96\n14 8 44\n11 6 67\n8 10 35\n2 16 57\n4 7 91\n11 5 6\n5 7 26\n2 8 80\n12 10 2\n4 2 64\n13 14 5\n14 5 39\n15 5 29\n11 15 73\n2 9 72\n13 9 25\n15 9 34\n6 2 92\n1 14 19\n13 16 46\n14 12 77\n",
    "vertices": [
      null,
      null
    ],
    "answer": 526,
    "description_type": "matrix"
  },
  {
    "task_name": "Maximum Independent Set",
    "task_description": "Find the size of the maximum independent set in the graph",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the size of the maximum independent set in the given graph. An independent set is a set of vertices such that no two vertices are adjacent.\n\nThis is an undirected graph with 15 vertices and 83 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (15\u00d715):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n   ------------------------------------------------------------\n 1 |  0   1   0   0   1   1   1   1   1   0   1   1   1   1   0 \n 2 |  1   0   1   1   0   1   0   1   1   1   0   1   1   1   0 \n 3 |  0   1   0   0   0   0   1   1   1   1   0   1   1   1   1 \n 4 |  0   1   0   0   0   1   1   1   1   1   1   1   1   0   1 \n 5 |  1   0   0   0   0   1   1   1   1   1   0   1   1   1   1 \n 6 |  1   1   0   1   1   0   1   1   1   1   0   0   1   1   0 \n 7 |  1   0   1   1   1   1   0   1   0   0   1   0   1   1   1 \n 8 |  1   1   1   1   1   1   1   0   1   0   1   1   1   1   1 \n 9 |  1   1   1   1   1   1   0   1   0   1   1   1   1   1   1 \n10 |  0   1   1   1   1   1   0   0   1   0   1   1   1   1   1 \n11 |  1   0   0   1   0   0   1   1   1   1   0   1   1   1   1 \n12 |  1   1   1   1   1   0   0   1   1   1   1   0   1   1   1 \n13 |  1   1   1   1   1   1   1   1   1   1   1   1   0   1   1 \n14 |  1   1   1   0   1   1   1   1   1   1   1   1   1   0   1 \n15 |  0   0   1   1   1   0   1   1   1   1   1   1   1   1   0 \n",
    "graph_output": "15 83\n8 13\n9 8\n2 10\n9 13\n9 12\n10 5\n11 8\n15 11\n7 3\n12 11\n8 12\n7 8\n6 1\n3 12\n7 11\n14 2\n14 12\n8 5\n6 14\n13 12\n4 13\n6 8\n8 2\n10 11\n14 7\n11 4\n1 7\n9 14\n3 15\n5 12\n7 5\n15 5\n11 14\n3 8\n8 1\n12 10\n6 2\n10 6\n8 15\n9 4\n2 9\n2 1\n3 9\n15 4\n14 1\n13 5\n12 1\n3 10\n6 9\n13 15\n12 15\n5 14\n3 14\n8 4\n15 7\n5 9\n7 4\n2 4\n1 5\n14 13\n8 14\n7 6\n13 11\n11 9\n4 12\n14 10\n6 13\n14 15\n13 2\n10 4\n10 15\n6 4\n10 9\n3 13\n1 13\n3 2\n5 6\n10 13\n2 12\n11 1\n13 7\n15 9\n1 9\n",
    "vertices": [
      null,
      null
    ],
    "answer": 3,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "dense",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 17 vertices and 126 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 4, 17, 11, 16, 2, 13, 15, 12, 5, 3, 10, 8, 7, 14\nVertex 2: 8, 6, 16, 11, 1, 17, 3, 10, 14, 5, 4, 9, 13, 15, 12\nVertex 3: 12, 7, 10, 8, 5, 4, 2, 14, 6, 13, 9, 11, 1, 15, 16, 17\nVertex 4: 13, 15, 1, 5, 17, 9, 3, 11, 12, 8, 2, 7, 10, 14, 6\nVertex 5: 11, 4, 12, 10, 17, 3, 15, 14, 13, 1, 8, 2, 7, 6, 9, 16\nVertex 6: 9, 16, 10, 8, 7, 15, 2, 13, 3, 12, 5, 14, 4, 17\nVertex 7: 11, 6, 8, 3, 14, 10, 17, 13, 16, 5, 12, 4, 1\nVertex 8: 16, 6, 11, 7, 13, 2, 3, 10, 17, 12, 4, 9, 5, 14, 1, 15\nVertex 9: 6, 10, 15, 4, 12, 17, 13, 8, 3, 2, 16, 5\nVertex 10: 6, 9, 3, 14, 5, 7, 8, 16, 13, 15, 2, 12, 1, 4, 17\nVertex 11: 12, 7, 8, 5, 13, 14, 1, 2, 16, 4, 17, 15, 3\nVertex 12: 11, 3, 5, 9, 17, 16, 4, 8, 15, 1, 6, 10, 7, 14, 2, 13\nVertex 13: 4, 17, 8, 11, 6, 10, 1, 16, 5, 9, 7, 3, 2, 15, 14, 12\nVertex 14: 16, 7, 10, 15, 11, 17, 5, 3, 2, 8, 12, 6, 4, 1, 13\nVertex 15: 4, 6, 9, 14, 17, 10, 5, 1, 12, 16, 11, 2, 13, 3, 8\nVertex 16: 6, 8, 14, 2, 1, 10, 11, 12, 13, 17, 15, 7, 3, 9, 5\nVertex 17: 13, 1, 4, 5, 12, 7, 8, 15, 14, 2, 9, 16, 11, 10, 6, 3\n",
    "graph_output": "17 126\n6 9\n4 13\n12 11\n6 16\n11 7\n12 3\n8 16\n4 15\n6 10\n8 6\n16 14\n6 7\n8 11\n11 5\n7 8\n13 17\n7 3\n9 10\n8 13\n1 4\n3 10\n11 13\n15 6\n1 17\n14 7\n5 4\n14 10\n9 15\n17 4\n14 15\n12 5\n9 4\n14 11\n8 2\n1 11\n6 2\n3 8\n6 13\n2 16\n16 1\n5 10\n17 5\n9 12\n3 5\n17 12\n2 11\n10 7\n8 10\n7 17\n10 16\n8 17\n17 15\n17 14\n1 2\n16 11\n12 16\n13 10\n2 17\n3 4\n15 10\n17 9\n1 13\n16 13\n15 5\n5 14\n4 11\n15 1\n17 16\n2 3\n4 12\n13 5\n8 12\n10 2\n12 15\n1 12\n9 13\n13 7\n11 17\n4 8\n14 3\n16 15\n14 2\n3 6\n8 9\n1 5\n8 5\n7 16\n5 2\n12 6\n15 11\n4 2\n13 3\n3 9\n9 2\n10 12\n3 11\n13 2\n1 3\n7 5\n2 15\n12 7\n14 8\n6 5\n14 12\n6 14\n15 13\n10 1\n1 8\n7 4\n3 15\n10 4\n14 4\n8 15\n6 4\n10 17\n7 1\n2 12\n6 17\n1 14\n16 3\n13 14\n13 12\n16 9\n9 5\n5 16\n3 17\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "list"
  },
  {
    "task_name": "Second MST",
    "task_description": "Find the total weight of the second minimum spanning tree",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the total weight of the strict second minimum spanning tree in the weighted graph. The strict second minimum spanning tree is the spanning tree with minimum total weight among all spanning trees whose weight is strictly greater than the minimum spanning tree weight.\n\nUndirected, Weighted Graph with 11 vertices and 11 edges\n\nEdges (Format: Node Node Weight):\n1 9 38\n1 2 20\n2 10 51\n1 11 30\n9 3 61\n3 6 43\n11 7 77\n10 5 10\n7 4 15\n11 8 82\n3 8 11\n",
    "graph_output": "11 11\n1 9 38\n1 2 20\n2 10 51\n1 11 30\n9 3 61\n3 6 43\n11 7 77\n10 5 10\n7 4 15\n11 8 82\n3 8 11\n",
    "vertices": [
      null,
      null
    ],
    "answer": 377,
    "description_type": "structured"
  },
  {
    "task_name": "Hamiltonian Path",
    "task_description": "Determine if the graph has a Hamiltonian path",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the graph has a Hamiltonian path. A Hamiltonian path is a path that visits each vertex exactly once.\n\nThis is an undirected graph with 17 vertices and 31 edges.\n\n- Adjacency List: For each vertex, lists all connected vertices.\n\nAdjacency List:\n\nVertex 1: 7, 14, 11, 17\nVertex 2: 4, 15, 16, 8, 14\nVertex 3: 14, 6\nVertex 4: 11, 2, 16, 12, 6\nVertex 5: 8\nVertex 6: 14, 13, 8, 12, 15, 4, 3\nVertex 7: 1, 15\nVertex 8: 17, 5, 6, 13, 2\nVertex 9: 10\nVertex 10: 11, 9, 14, 13, 12\nVertex 11: 1, 4, 17, 10\nVertex 12: 17, 6, 4, 10\nVertex 13: 6, 8, 10\nVertex 14: 1, 6, 3, 10, 2\nVertex 15: 2, 7, 6\nVertex 16: 4, 2\nVertex 17: 11, 12, 8, 1\n",
    "graph_output": "17 31\n1 7\n1 14\n1 11\n11 4\n11 17\n17 12\n17 8\n14 6\n4 2\n2 15\n8 5\n6 13\n4 16\n11 10\n10 9\n14 3\n7 15\n10 14\n6 8\n6 12\n6 15\n8 13\n4 12\n16 2\n17 1\n4 6\n8 2\n3 6\n14 2\n13 10\n12 10\n",
    "vertices": [
      null,
      null
    ],
    "answer": true,
    "description_type": "list"
  },
  {
    "task_name": "Tree LCA",
    "task_description": "Find the lowest common ancestor of two nodes (with node 1 as root)",
    "graph_type": "tree",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nFind the lowest common ancestor (LCA) of nodes 29 and 27 in the given tree, with node 1 as the root.\n\nThis is an undirected graph with 31 vertices and 30 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (31\u00d731):\n\n      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31\n   ----------------------------------------------------------------------------------------------------------------------------\n 1 |  0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 2 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n 3 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 5 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n 6 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 7 |  0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n 8 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n 9 |  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n10 |  0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 \n11 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   0   0   0   0   0   0   0 \n12 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0 \n13 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n14 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n15 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n16 |  0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n17 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0 \n18 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n19 |  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0 \n20 |  1   0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   1   0 \n21 |  0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n22 |  0   0   0   0   0   1   0   1   0   0   1   0   0   0   0   0   1   1   0   1   0   0   0   0   1   0   0   0   0   0   1 \n23 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 \n24 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0 \n25 |  0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n26 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0 \n27 |  0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n28 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n29 |  0   0   1   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   0 \n30 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   1   0   0 \n31 |  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0 \n",
    "graph_output": "31 30\n1 20\n20 7\n1 9\n20 22\n22 31\n7 10\n10 15\n7 2\n20 14\n20 30\n22 17\n22 11\n22 18\n30 29\n17 28\n17 13\n13 19\n19 23\n29 3\n22 25\n20 26\n22 6\n29 4\n29 5\n11 21\n25 12\n5 16\n22 8\n10 27\n29 24\n",
    "vertices": [
      29,
      27
    ],
    "answer": 20,
    "description_type": "matrix"
  },
  {
    "task_name": "Cycle Count",
    "task_description": "Count the number of cycles in the graph",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCount the total number of simple cycles in the given graph.\n\nThis is an undirected graph with 7 vertices and 12 edges.\n\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n\nAdjacency Matrix (7\u00d77):\n\n      1   2   3   4   5   6   7\n   ----------------------------\n 1 |  0   0   1   0   1   1   0 \n 2 |  0   0   0   1   1   1   1 \n 3 |  1   0   0   1   0   0   0 \n 4 |  0   1   1   0   1   0   0 \n 5 |  1   1   0   1   0   1   1 \n 6 |  1   1   0   0   1   0   1 \n 7 |  0   1   0   0   1   1   0 \n",
    "graph_output": "7 12\n6 5\n7 6\n4 3\n2 4\n6 1\n6 2\n3 1\n7 5\n5 2\n1 5\n5 4\n7 2\n",
    "vertices": [
      null,
      null
    ],
    "answer": 35,
    "description_type": "matrix"
  },
  {
    "task_name": "Bipartite",
    "task_description": "Determine if the graph is bipartite",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nDetermine if the given graph is bipartite (can be divided into two sets where no two vertices within the same set are adjacent).\n\nThis is an undirected graph with 15 vertices and 30 edges. \n\nThe graph contains the following connections:\n\nThere is an edge between vertex 10 and vertex 13.\nThere is an edge between vertex 13 and vertex 1.\nThere is an edge between vertex 3 and vertex 15.\nThere is an edge between vertex 1 and vertex 9.\nThere is an edge between vertex 4 and vertex 3.\nThere is an edge between vertex 8 and vertex 2.\nThere is an edge between vertex 12 and vertex 14.\nThere is an edge between vertex 5 and vertex 10.\nThere is an edge between vertex 4 and vertex 15.\nThere is an edge between vertex 2 and vertex 5.\nThere is an edge between vertex 1 and vertex 8.\nThere is an edge between vertex 1 and vertex 10.\nThere is an edge between vertex 14 and vertex 10.\nThere is an edge between vertex 6 and vertex 10.\nThere is an edge between vertex 3 and vertex 6.\nThere is an edge between vertex 9 and vertex 14.\nThere is an edge between vertex 10 and vertex 2.\nThere is an edge between vertex 7 and vertex 2.\nThere is an edge between vertex 5 and vertex 11.\nThere is an edge between vertex 10 and vertex 12.\nThere is an edge between vertex 8 and vertex 10.\nThere is an edge between vertex 11 and vertex 9.\nThere is an edge between vertex 3 and vertex 2.\nThere is an edge between vertex 4 and vertex 5.\nThere is an edge between vertex 9 and vertex 13.\nThere is an edge between vertex 10 and vertex 11.\nThere is an edge between vertex 10 and vertex 3.\nThere is an edge between vertex 2 and vertex 14.\nThere is an edge between vertex 12 and vertex 4.\nThere is an edge between vertex 13 and vertex 15.\n",
    "graph_output": "15 30\n10 13\n13 1\n3 15\n1 9\n4 3\n8 2\n12 14\n5 10\n4 15\n2 5\n1 8\n1 10\n14 10\n6 10\n3 6\n9 14\n10 2\n7 2\n5 11\n10 12\n8 10\n11 9\n3 2\n4 5\n9 13\n10 11\n10 3\n2 14\n12 4\n13 15\n",
    "vertices": [
      null,
      null
    ],
    "answer": false,
    "description_type": "natural"
  },
  {
    "task_name": "Maximum Flow",
    "task_description": "Find the maximum flow from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the maximum flow from vertex 4 (source) to vertex 5 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 22 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency Matrix: 1 indicates an edge exists, 0 means no connection.\n- Capacity Matrix: Shows the capacity of each edge (0 means no connection).\n\nAdjacency Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   1   0   0   0   0   0   1   1   0   1 \n 2 |  0   0   1   0   0   0   0   0   1   0   0   0 \n 3 |  1   1   0   0   0   0   1   0   0   0   1   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   1 \n 5 |  0   0   0   0   0   0   1   0   1   0   1   0 \n 6 |  0   0   0   0   0   0   0   1   0   0   1   0 \n 7 |  0   0   1   0   1   0   0   1   0   1   0   0 \n 8 |  0   0   0   0   0   1   1   0   1   0   1   1 \n 9 |  1   1   0   0   1   0   0   1   0   0   0   1 \n10 |  1   0   0   0   0   0   1   0   0   0   1   1 \n11 |  0   0   1   0   1   1   0   1   0   1   0   0 \n12 |  1   0   0   1   0   0   0   1   1   1   0   0 \n\nCapacity Matrix (12\u00d712):\n\n      1   2   3   4   5   6   7   8   9  10  11  12\n   ------------------------------------------------\n 1 |  0   0   7   0   0   0   0   0   6   9   0  10 \n 2 |  0   0   4   0   0   0   0   0   5   0   0   0 \n 3 |  7   4   0   0   0   0   2   0   0   0   9   0 \n 4 |  0   0   0   0   0   0   0   0   0   0   0   5 \n 5 |  0   0   0   0   0   0   9   0   9   0   7   0 \n 6 |  0   0   0   0   0   0   0   4   0   0   1   0 \n 7 |  0   0   2   0   9   0   0  10   0   7   0   0 \n 8 |  0   0   0   0   0   4  10   0  10   0   5   4 \n 9 |  6   5   0   0   9   0   0  10   0   0   0   7 \n10 |  9   0   0   0   0   0   7   0   0   0   4   1 \n11 |  0   0   9   0   7   1   0   5   0   4   0   0 \n12 | 10   0   0   5   0   0   0   4   7   1   0   0 \n",
    "graph_output": "12 22\n1 9 6\n9 5 9\n9 2 5\n5 11 7\n1 12 10\n11 6 1\n6 8 4\n12 4 5\n1 10 9\n8 7 10\n11 3 9\n7 10 7\n1 3 7\n2 3 4\n7 5 9\n10 11 4\n9 8 10\n7 3 2\n11 8 5\n12 8 4\n12 10 1\n12 9 7\n",
    "vertices": [
      4,
      5
    ],
    "answer": 5,
    "description_type": "matrix"
  },
  {
    "task_name": "Minimum Cut",
    "task_description": "Find the minimum cut capacity from source to sink",
    "graph_type": "sparse",
    "prompt": "Please provide the reasoning process and the final answer directly to the question.\n\nCalculate the minimum cut capacity from vertex 9 (source) to vertex 12 (sink) in the given undirected network. In this undirected network, flow can travel in both directions along each edge.\n\nThis is an undirected graph with 12 vertices and 21 edges.\n\nThe graph has capacity constraints on its edges.\n- Adjacency List: For each vertex, lists all connected vertices with edge capacities.\n\nAdjacency List:\n\nVertex 1: 5 (capacity=2), 11 (capacity=4), 12 (capacity=7)\nVertex 2: 9 (capacity=3), 8 (capacity=1), 7 (capacity=7), 5 (capacity=10)\nVertex 3: 7 (capacity=1), 9 (capacity=5), 5 (capacity=2), 4 (capacity=2)\nVertex 4: 5 (capacity=3), 10 (capacity=6), 3 (capacity=2), 9 (capacity=6)\nVertex 5: 1 (capacity=2), 4 (capacity=3), 12 (capacity=10), 11 (capacity=10), 6 (capacity=5), 9 (capacity=5), 2 (capacity=10), 3 (capacity=2)\nVertex 6: 5 (capacity=5), 12 (capacity=7)\nVertex 7: 2 (capacity=7), 3 (capacity=1)\nVertex 8: 2 (capacity=1)\nVertex 9: 12 (capacity=3), 2 (capacity=3), 5 (capacity=5), 3 (capacity=5), 4 (capacity=6)\nVertex 10: 4 (capacity=6)\nVertex 11: 5 (capacity=10), 1 (capacity=4), 12 (capacity=4)\nVertex 12: 5 (capacity=10), 9 (capacity=3), 1 (capacity=7), 6 (capacity=7), 11 (capacity=4)\n",
    "graph_output": "12 21\n1 5 2\n5 4 3\n5 12 10\n5 11 10\n12 9 3\n9 2 3\n2 8 1\n4 10 6\n2 7 7\n7 3 1\n5 6 5\n9 5 5\n5 2 10\n1 11 4\n1 12 7\n6 12 7\n9 3 5\n3 5 2\n4 3 2\n9 4 6\n12 11 4\n",
    "vertices": [
      9,
      12
    ],
    "answer": 17,
    "description_type": "list"
  }
]